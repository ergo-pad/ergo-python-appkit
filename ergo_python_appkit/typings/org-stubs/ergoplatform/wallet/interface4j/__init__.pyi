import java.lang
import org.ergoplatform.wallet.interface4j.crypto
import typing



class SecretString:
    @typing.overload
    @staticmethod
    def create(charArray: typing.List[str]) -> 'SecretString': ...
    @typing.overload
    @staticmethod
    def create(string: typing.Union[java.lang.String, str]) -> 'SecretString': ...
    @staticmethod
    def empty() -> 'SecretString': ...
    def equals(self, object: typing.Any) -> bool: ...
    def erase(self) -> None: ...
    def getData(self) -> typing.List[str]: ...
    def hashCode(self) -> int: ...
    def isEmpty(self) -> bool: ...
    def isErased(self) -> bool: ...
    def toStringUnsecure(self) -> java.lang.String: ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.ergoplatform.wallet.interface4j")``.

    SecretString: typing.Type[SecretString]
    crypto: org.ergoplatform.wallet.interface4j.crypto.__module_protocol__
