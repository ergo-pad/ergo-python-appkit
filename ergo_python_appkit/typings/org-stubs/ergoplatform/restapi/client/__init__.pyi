import com.google.gson
import com.google.gson.stream
import datetime
import decimal
import java.lang
import java.math
import java.net
import java.sql
import java.text
import java.time
import java.time.format
import java.util
import okhttp3
import org
import org.ergoplatform.restapi.client.auth
import retrofit2
import typing



class AddressHolder:
    def __init__(self): ...
    def address(self, string: str) -> 'AddressHolder': ...
    def equals(self, object: typing.Any) -> bool: ...
    def getAddress(self) -> str: ...
    def hashCode(self) -> int: ...
    def setAddress(self, string: str) -> None: ...
    def toString(self) -> str: ...

class AddressValidity:
    def __init__(self): ...
    def address(self, string: str) -> 'AddressValidity': ...
    def equals(self, object: typing.Any) -> bool: ...
    def error(self, string: str) -> 'AddressValidity': ...
    def getAddress(self) -> str: ...
    def getError(self) -> str: ...
    def hashCode(self) -> int: ...
    def isIsValid(self) -> bool: ...
    def isValid(self, boolean: bool) -> 'AddressValidity': ...
    def setAddress(self, string: str) -> None: ...
    def setError(self, string: str) -> None: ...
    def setIsValid(self, boolean: bool) -> None: ...
    def toString(self) -> str: ...

class AnyOfRequestsHolderRequestsItems: ...

class ApiClient:
    @typing.overload
    def __init__(self, string: str): ...
    @typing.overload
    def __init__(self, string: str, string2: str): ...
    @typing.overload
    def __init__(self, string: str, string2: str, string3: str): ...
    @typing.overload
    def __init__(self, string: str, string2: str, string3: str, string4: str): ...
    @typing.overload
    def __init__(self, string: str, string2: str, string3: str, string4: str, string5: str, string6: str): ...
    @typing.overload
    def __init__(self, string: str, stringArray: typing.List[str]): ...
    def addAuthorization(self, string: str, interceptor: okhttp3.Interceptor) -> 'ApiClient': ...
    def addAuthsToOkBuilder(self, builder: okhttp3.OkHttpClient.Builder) -> None: ...
    _cloneDataObject__T = typing.TypeVar('_cloneDataObject__T')  # <T>
    def cloneDataObject(self, t: _cloneDataObject__T) -> _cloneDataObject__T: ...
    def configureFromOkclient(self, okHttpClient: okhttp3.OkHttpClient) -> None: ...
    @typing.overload
    def createDefaultAdapter(self) -> None: ...
    @typing.overload
    def createDefaultAdapter(self, proxy: java.net.Proxy) -> None: ...
    _createService__S = typing.TypeVar('_createService__S')  # <S>
    def createService(self, class_: typing.Type[_createService__S]) -> _createService__S: ...
    def getAdapterBuilder(self) -> retrofit2.Retrofit.Builder: ...
    def getApiAuthorizations(self) -> java.util.Map[str, okhttp3.Interceptor]: ...
    def getGson(self) -> com.google.gson.Gson: ...
    def getOkBuilder(self) -> okhttp3.OkHttpClient.Builder: ...
    def setAccessToken(self, string: str) -> 'ApiClient': ...
    def setAdapterBuilder(self, builder: retrofit2.Retrofit.Builder) -> 'ApiClient': ...
    def setApiAuthorizations(self, map: typing.Union[java.util.Map[str, okhttp3.Interceptor], typing.Mapping[str, okhttp3.Interceptor]]) -> 'ApiClient': ...
    def setApiKey(self, string: str) -> 'ApiClient': ...
    def setCredentials(self, string: str, string2: str) -> 'ApiClient': ...
    def setDateFormat(self, dateFormat: java.text.DateFormat) -> 'ApiClient': ...
    def setLocalDateFormat(self, dateTimeFormatter: java.time.format.DateTimeFormatter) -> 'ApiClient': ...
    def setOffsetDateTimeFormat(self, dateTimeFormatter: java.time.format.DateTimeFormatter) -> 'ApiClient': ...
    def setSqlDateFormat(self, dateFormat: java.text.DateFormat) -> 'ApiClient': ...

class ApiError:
    def __init__(self): ...
    def detail(self, string: str) -> 'ApiError': ...
    def equals(self, object: typing.Any) -> bool: ...
    def error(self, integer: int) -> 'ApiError': ...
    def getDetail(self) -> str: ...
    def getError(self) -> int: ...
    def getReason(self) -> str: ...
    def hashCode(self) -> int: ...
    def reason(self, string: str) -> 'ApiError': ...
    def setDetail(self, string: str) -> None: ...
    def setError(self, integer: int) -> None: ...
    def setReason(self, string: str) -> None: ...
    def toString(self) -> str: ...

class Asset:
    def __init__(self): ...
    def amount(self, long: int) -> 'Asset': ...
    def equals(self, object: typing.Any) -> bool: ...
    def getAmount(self) -> int: ...
    def getTokenId(self) -> str: ...
    def hashCode(self) -> int: ...
    def setAmount(self, long: int) -> None: ...
    def setTokenId(self, string: str) -> None: ...
    def toString(self) -> str: ...
    def tokenId(self, string: str) -> 'Asset': ...

class AvlTreeData:
    def __init__(self): ...
    def digest(self, string: str) -> 'AvlTreeData': ...
    def equals(self, object: typing.Any) -> bool: ...
    def getDigest(self) -> str: ...
    def getKeyLength(self) -> int: ...
    def getTreeFlags(self) -> int: ...
    def getValueLength(self) -> int: ...
    def hashCode(self) -> int: ...
    def keyLength(self, integer: int) -> 'AvlTreeData': ...
    def setDigest(self, string: str) -> None: ...
    def setKeyLength(self, integer: int) -> None: ...
    def setTreeFlags(self, integer: int) -> None: ...
    def setValueLength(self, integer: int) -> None: ...
    def toString(self) -> str: ...
    def treeFlags(self, integer: int) -> 'AvlTreeData': ...
    def valueLength(self, integer: int) -> 'AvlTreeData': ...

class BalancesSnapshot:
    def __init__(self): ...
    def addAssetsItem(self, asset: Asset) -> 'BalancesSnapshot': ...
    def assets(self, list: java.util.List[Asset]) -> 'BalancesSnapshot': ...
    def balance(self, long: int) -> 'BalancesSnapshot': ...
    def equals(self, object: typing.Any) -> bool: ...
    def getAssets(self) -> java.util.List[Asset]: ...
    def getBalance(self) -> int: ...
    def getHeight(self) -> int: ...
    def hashCode(self) -> int: ...
    def height(self, integer: int) -> 'BalancesSnapshot': ...
    def setAssets(self, list: java.util.List[Asset]) -> None: ...
    def setBalance(self, long: int) -> None: ...
    def setHeight(self, integer: int) -> None: ...
    def toString(self) -> str: ...

class BlacklistedPeers:
    def __init__(self): ...
    def addAddressesItem(self, string: str) -> 'BlacklistedPeers': ...
    def addresses(self, list: java.util.List[str]) -> 'BlacklistedPeers': ...
    def equals(self, object: typing.Any) -> bool: ...
    def getAddresses(self) -> java.util.List[str]: ...
    def hashCode(self) -> int: ...
    def setAddresses(self, list: java.util.List[str]) -> None: ...
    def toString(self) -> str: ...

class BlockADProofs:
    def __init__(self): ...
    def digest(self, string: str) -> 'BlockADProofs': ...
    def equals(self, object: typing.Any) -> bool: ...
    def getDigest(self) -> str: ...
    def getHeaderId(self) -> str: ...
    def getProofBytes(self) -> str: ...
    def getSize(self) -> int: ...
    def hashCode(self) -> int: ...
    def headerId(self, string: str) -> 'BlockADProofs': ...
    def proofBytes(self, string: str) -> 'BlockADProofs': ...
    def setDigest(self, string: str) -> None: ...
    def setHeaderId(self, string: str) -> None: ...
    def setProofBytes(self, string: str) -> None: ...
    def setSize(self, integer: int) -> None: ...
    def size(self, integer: int) -> 'BlockADProofs': ...
    def toString(self) -> str: ...

class BlockHeader:
    def __init__(self): ...
    def adProofsId(self, string: str) -> 'BlockHeader': ...
    def adProofsRoot(self, string: str) -> 'BlockHeader': ...
    def difficulty(self, bigInteger: java.math.BigInteger) -> 'BlockHeader': ...
    def equals(self, object: typing.Any) -> bool: ...
    def extensionHash(self, string: str) -> 'BlockHeader': ...
    def extensionId(self, string: str) -> 'BlockHeader': ...
    def getAdProofsId(self) -> str: ...
    def getAdProofsRoot(self) -> str: ...
    def getDifficulty(self) -> java.math.BigInteger: ...
    def getExtensionHash(self) -> str: ...
    def getExtensionId(self) -> str: ...
    def getHeight(self) -> int: ...
    def getId(self) -> str: ...
    def getNBits(self) -> int: ...
    def getParentId(self) -> str: ...
    def getPowSolutions(self) -> 'PowSolutions': ...
    def getSize(self) -> int: ...
    def getStateRoot(self) -> str: ...
    def getTimestamp(self) -> int: ...
    def getTransactionsId(self) -> str: ...
    def getTransactionsRoot(self) -> str: ...
    def getVersion(self) -> int: ...
    def getVotes(self) -> str: ...
    def hashCode(self) -> int: ...
    def height(self, integer: int) -> 'BlockHeader': ...
    def id(self, string: str) -> 'BlockHeader': ...
    def nBits(self, long: int) -> 'BlockHeader': ...
    def parentId(self, string: str) -> 'BlockHeader': ...
    def powSolutions(self, powSolutions: 'PowSolutions') -> 'BlockHeader': ...
    def setAdProofsId(self, string: str) -> None: ...
    def setAdProofsRoot(self, string: str) -> None: ...
    def setDifficulty(self, bigInteger: java.math.BigInteger) -> None: ...
    def setExtensionHash(self, string: str) -> None: ...
    def setExtensionId(self, string: str) -> None: ...
    def setHeight(self, integer: int) -> None: ...
    def setId(self, string: str) -> None: ...
    def setNBits(self, long: int) -> None: ...
    def setParentId(self, string: str) -> None: ...
    def setPowSolutions(self, powSolutions: 'PowSolutions') -> None: ...
    def setSize(self, integer: int) -> None: ...
    def setStateRoot(self, string: str) -> None: ...
    def setTimestamp(self, long: int) -> None: ...
    def setTransactionsId(self, string: str) -> None: ...
    def setTransactionsRoot(self, string: str) -> None: ...
    def setVersion(self, integer: int) -> None: ...
    def setVotes(self, string: str) -> None: ...
    def size(self, integer: int) -> 'BlockHeader': ...
    def stateRoot(self, string: str) -> 'BlockHeader': ...
    def timestamp(self, long: int) -> 'BlockHeader': ...
    def toString(self) -> str: ...
    def transactionsId(self, string: str) -> 'BlockHeader': ...
    def transactionsRoot(self, string: str) -> 'BlockHeader': ...
    def version(self, integer: int) -> 'BlockHeader': ...
    def votes(self, string: str) -> 'BlockHeader': ...

class BlockHeaderWithoutPow:
    def __init__(self): ...
    def adProofsId(self, string: str) -> 'BlockHeaderWithoutPow': ...
    def adProofsRoot(self, string: str) -> 'BlockHeaderWithoutPow': ...
    def difficulty(self, integer: int) -> 'BlockHeaderWithoutPow': ...
    def equals(self, object: typing.Any) -> bool: ...
    def extensionHash(self, string: str) -> 'BlockHeaderWithoutPow': ...
    def extensionId(self, string: str) -> 'BlockHeaderWithoutPow': ...
    def getAdProofsId(self) -> str: ...
    def getAdProofsRoot(self) -> str: ...
    def getDifficulty(self) -> int: ...
    def getExtensionHash(self) -> str: ...
    def getExtensionId(self) -> str: ...
    def getHeight(self) -> int: ...
    def getId(self) -> str: ...
    def getNBits(self) -> int: ...
    def getParentId(self) -> str: ...
    def getSize(self) -> int: ...
    def getStateRoot(self) -> str: ...
    def getTimestamp(self) -> int: ...
    def getTransactionsId(self) -> str: ...
    def getTransactionsRoot(self) -> str: ...
    def getVersion(self) -> int: ...
    def getVotes(self) -> str: ...
    def hashCode(self) -> int: ...
    def height(self, integer: int) -> 'BlockHeaderWithoutPow': ...
    def id(self, string: str) -> 'BlockHeaderWithoutPow': ...
    def nBits(self, long: int) -> 'BlockHeaderWithoutPow': ...
    def parentId(self, string: str) -> 'BlockHeaderWithoutPow': ...
    def setAdProofsId(self, string: str) -> None: ...
    def setAdProofsRoot(self, string: str) -> None: ...
    def setDifficulty(self, integer: int) -> None: ...
    def setExtensionHash(self, string: str) -> None: ...
    def setExtensionId(self, string: str) -> None: ...
    def setHeight(self, integer: int) -> None: ...
    def setId(self, string: str) -> None: ...
    def setNBits(self, long: int) -> None: ...
    def setParentId(self, string: str) -> None: ...
    def setSize(self, integer: int) -> None: ...
    def setStateRoot(self, string: str) -> None: ...
    def setTimestamp(self, integer: int) -> None: ...
    def setTransactionsId(self, string: str) -> None: ...
    def setTransactionsRoot(self, string: str) -> None: ...
    def setVersion(self, integer: int) -> None: ...
    def setVotes(self, string: str) -> None: ...
    def size(self, integer: int) -> 'BlockHeaderWithoutPow': ...
    def stateRoot(self, string: str) -> 'BlockHeaderWithoutPow': ...
    def timestamp(self, integer: int) -> 'BlockHeaderWithoutPow': ...
    def toString(self) -> str: ...
    def transactionsId(self, string: str) -> 'BlockHeaderWithoutPow': ...
    def transactionsRoot(self, string: str) -> 'BlockHeaderWithoutPow': ...
    def version(self, integer: int) -> 'BlockHeaderWithoutPow': ...
    def votes(self, string: str) -> 'BlockHeaderWithoutPow': ...

class BlockTransactions:
    def __init__(self): ...
    def equals(self, object: typing.Any) -> bool: ...
    def getHeaderId(self) -> str: ...
    def getSize(self) -> int: ...
    def getTransactions(self) -> 'Transactions': ...
    def hashCode(self) -> int: ...
    def headerId(self, string: str) -> 'BlockTransactions': ...
    def setHeaderId(self, string: str) -> None: ...
    def setSize(self, integer: int) -> None: ...
    def setTransactions(self, transactions: 'Transactions') -> None: ...
    def size(self, integer: int) -> 'BlockTransactions': ...
    def toString(self) -> str: ...
    def transactions(self, transactions: 'Transactions') -> 'BlockTransactions': ...

class BlocksApi:
    def getBlockHeaderById(self, string: str) -> retrofit2.Call[BlockHeader]: ...
    def getBlockTransactionsById(self, string: str) -> retrofit2.Call[BlockTransactions]: ...
    def getChainSlice(self, integer: int, integer2: int) -> retrofit2.Call[java.util.List[BlockHeader]]: ...
    def getFullBlockAt(self, integer: int) -> retrofit2.Call[java.util.List[str]]: ...
    def getFullBlockById(self, string: str) -> retrofit2.Call['FullBlock']: ...
    def getHeaderIds(self, integer: int, integer2: int) -> retrofit2.Call[java.util.List[str]]: ...
    def getLastHeaders(self, bigDecimal: typing.Union[java.math.BigDecimal, decimal.Decimal]) -> retrofit2.Call[java.util.List[BlockHeader]]: ...
    def getModifierById(self, string: str) -> retrofit2.Call[None]: ...
    def getProofForTx(self, string: str, string2: str) -> retrofit2.Call['MerkleProof']: ...
    def sendMinedBlock(self, fullBlock: 'FullBlock') -> retrofit2.Call[None]: ...

class Body:
    def __init__(self): ...
    def equals(self, object: typing.Any) -> bool: ...
    def getMnemonicPass(self) -> str: ...
    def getPass(self) -> str: ...
    def hashCode(self) -> int: ...
    def mnemonicPass(self, string: str) -> 'Body': ...
    def setMnemonicPass(self, string: str) -> None: ...
    def setPass(self, string: str) -> None: ...
    def toString(self) -> str: ...

class Body1:
    def __init__(self): ...
    def equals(self, object: typing.Any) -> bool: ...
    def getMnemonic(self) -> str: ...
    def getMnemonicPass(self) -> str: ...
    def getPass(self) -> str: ...
    def hashCode(self) -> int: ...
    def mnemonic(self, string: str) -> 'Body1': ...
    def mnemonicPass(self, string: str) -> 'Body1': ...
    def setMnemonic(self, string: str) -> None: ...
    def setMnemonicPass(self, string: str) -> None: ...
    def setPass(self, string: str) -> None: ...
    def toString(self) -> str: ...

class Body2:
    def __init__(self): ...
    def equals(self, object: typing.Any) -> bool: ...
    def getMnemonic(self) -> str: ...
    def getMnemonicPass(self) -> str: ...
    def hashCode(self) -> int: ...
    def mnemonic(self, string: str) -> 'Body2': ...
    def mnemonicPass(self, string: str) -> 'Body2': ...
    def setMnemonic(self, string: str) -> None: ...
    def setMnemonicPass(self, string: str) -> None: ...
    def toString(self) -> str: ...

class Body3:
    def __init__(self): ...
    def equals(self, object: typing.Any) -> bool: ...
    def getPass(self) -> str: ...
    def hashCode(self) -> int: ...
    def setPass(self, string: str) -> None: ...
    def toString(self) -> str: ...

class Body4:
    def __init__(self): ...
    def address(self, string: str) -> 'Body4': ...
    def equals(self, object: typing.Any) -> bool: ...
    def getAddress(self) -> str: ...
    def hashCode(self) -> int: ...
    def setAddress(self, string: str) -> None: ...
    def toString(self) -> str: ...

class Body5:
    def __init__(self): ...
    def derivationPath(self, string: str) -> 'Body5': ...
    def equals(self, object: typing.Any) -> bool: ...
    def getDerivationPath(self) -> str: ...
    def hashCode(self) -> int: ...
    def setDerivationPath(self, string: str) -> None: ...
    def toString(self) -> str: ...

class BoxesRequestHolder:
    def __init__(self): ...
    def addTargetAssetsItem(self, list: java.util.List) -> 'BoxesRequestHolder': ...
    def equals(self, object: typing.Any) -> bool: ...
    def getTargetAssets(self) -> java.util.List[java.util.List]: ...
    def getTargetBalance(self) -> int: ...
    def hashCode(self) -> int: ...
    def setTargetAssets(self, list: java.util.List[java.util.List]) -> None: ...
    def setTargetBalance(self, long: int) -> None: ...
    def targetAssets(self, list: java.util.List[java.util.List]) -> 'BoxesRequestHolder': ...
    def targetBalance(self, long: int) -> 'BoxesRequestHolder': ...
    def toString(self) -> str: ...

class CandidateBlock:
    def __init__(self): ...
    def adProofBytes(self, string: str) -> 'CandidateBlock': ...
    def equals(self, object: typing.Any) -> bool: ...
    def extensionHash(self, string: str) -> 'CandidateBlock': ...
    def getAdProofBytes(self) -> str: ...
    def getExtensionHash(self) -> str: ...
    def getNBits(self) -> int: ...
    def getParentId(self) -> str: ...
    def getStateRoot(self) -> str: ...
    def getTimestamp(self) -> int: ...
    def getTransactions(self) -> 'Transactions': ...
    def getTransactionsNumber(self) -> int: ...
    def getVersion(self) -> int: ...
    def getVotes(self) -> str: ...
    def hashCode(self) -> int: ...
    def nBits(self, long: int) -> 'CandidateBlock': ...
    def parentId(self, string: str) -> 'CandidateBlock': ...
    def setAdProofBytes(self, string: str) -> None: ...
    def setExtensionHash(self, string: str) -> None: ...
    def setNBits(self, long: int) -> None: ...
    def setParentId(self, string: str) -> None: ...
    def setStateRoot(self, string: str) -> None: ...
    def setTimestamp(self, integer: int) -> None: ...
    def setTransactions(self, transactions: 'Transactions') -> None: ...
    def setTransactionsNumber(self, integer: int) -> None: ...
    def setVersion(self, integer: int) -> None: ...
    def setVotes(self, string: str) -> None: ...
    def stateRoot(self, string: str) -> 'CandidateBlock': ...
    def timestamp(self, integer: int) -> 'CandidateBlock': ...
    def toString(self) -> str: ...
    def transactions(self, transactions: 'Transactions') -> 'CandidateBlock': ...
    def transactionsNumber(self, integer: int) -> 'CandidateBlock': ...
    def version(self, integer: int) -> 'CandidateBlock': ...
    def votes(self, string: str) -> 'CandidateBlock': ...

class Commitment:
    def __init__(self): ...
    def a(self, string: str) -> 'Commitment': ...
    def b(self, string: str) -> 'Commitment': ...
    def equals(self, object: typing.Any) -> bool: ...
    def getA(self) -> str: ...
    def getB(self) -> str: ...
    def getHint(self) -> 'Commitment.HintEnum': ...
    def getPosition(self) -> str: ...
    def getPubkey(self) -> 'SigmaBoolean': ...
    def getType(self) -> 'Commitment.TypeEnum': ...
    def hashCode(self) -> int: ...
    def hint(self, hintEnum: 'Commitment.HintEnum') -> 'Commitment': ...
    def position(self, string: str) -> 'Commitment': ...
    def pubkey(self, sigmaBoolean: 'SigmaBoolean') -> 'Commitment': ...
    def setA(self, string: str) -> None: ...
    def setB(self, string: str) -> None: ...
    def setHint(self, hintEnum: 'Commitment.HintEnum') -> None: ...
    def setPosition(self, string: str) -> None: ...
    def setPubkey(self, sigmaBoolean: 'SigmaBoolean') -> None: ...
    def setType(self, typeEnum: 'Commitment.TypeEnum') -> None: ...
    def toString(self) -> str: ...
    def type(self, typeEnum: 'Commitment.TypeEnum') -> 'Commitment': ...
    class HintEnum(java.lang.Enum['Commitment.HintEnum']):
        CMTWITHSECRET: typing.ClassVar['Commitment.HintEnum'] = ...
        CMTREAL: typing.ClassVar['Commitment.HintEnum'] = ...
        CMTSIMULATED: typing.ClassVar['Commitment.HintEnum'] = ...
        @staticmethod
        def fromValue(string: str) -> 'Commitment.HintEnum': ...
        def getValue(self) -> str: ...
        def toString(self) -> str: ...
        _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
        @typing.overload
        @staticmethod
        def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
        @typing.overload
        @staticmethod
        def valueOf(string: str) -> 'Commitment.HintEnum': ...
        @staticmethod
        def values() -> typing.List['Commitment.HintEnum']: ...
        class Adapter(com.google.gson.TypeAdapter['Commitment.HintEnum']):
            def __init__(self): ...
            def read(self, jsonReader: com.google.gson.stream.JsonReader) -> 'Commitment.HintEnum': ...
            def write(self, jsonWriter: com.google.gson.stream.JsonWriter, hintEnum: 'Commitment.HintEnum') -> None: ...
    class TypeEnum(java.lang.Enum['Commitment.TypeEnum']):
        DLOG: typing.ClassVar['Commitment.TypeEnum'] = ...
        DHT: typing.ClassVar['Commitment.TypeEnum'] = ...
        @staticmethod
        def fromValue(string: str) -> 'Commitment.TypeEnum': ...
        def getValue(self) -> str: ...
        def toString(self) -> str: ...
        _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
        @typing.overload
        @staticmethod
        def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
        @typing.overload
        @staticmethod
        def valueOf(string: str) -> 'Commitment.TypeEnum': ...
        @staticmethod
        def values() -> typing.List['Commitment.TypeEnum']: ...
        class Adapter(com.google.gson.TypeAdapter['Commitment.TypeEnum']):
            def __init__(self): ...
            def read(self, jsonReader: com.google.gson.stream.JsonReader) -> 'Commitment.TypeEnum': ...
            def write(self, jsonWriter: com.google.gson.stream.JsonWriter, typeEnum: 'Commitment.TypeEnum') -> None: ...

class CryptoResult:
    def __init__(self): ...
    def cost(self, long: int) -> 'CryptoResult': ...
    def equals(self, object: typing.Any) -> bool: ...
    def getCost(self) -> int: ...
    def getValue(self) -> 'SigmaBoolean': ...
    def hashCode(self) -> int: ...
    def setCost(self, long: int) -> None: ...
    def setValue(self, sigmaBoolean: 'SigmaBoolean') -> None: ...
    def toString(self) -> str: ...
    def value(self, sigmaBoolean: 'SigmaBoolean') -> 'CryptoResult': ...

class DhtSecret:
    def __init__(self): ...
    def equals(self, object: typing.Any) -> bool: ...
    def g(self, string: str) -> 'DhtSecret': ...
    def getG(self) -> str: ...
    def getH(self) -> str: ...
    def getSecret(self) -> str: ...
    def getU(self) -> str: ...
    def getV(self) -> str: ...
    def h(self, string: str) -> 'DhtSecret': ...
    def hashCode(self) -> int: ...
    def secret(self, string: str) -> 'DhtSecret': ...
    def setG(self, string: str) -> None: ...
    def setH(self, string: str) -> None: ...
    def setSecret(self, string: str) -> None: ...
    def setU(self, string: str) -> None: ...
    def setV(self, string: str) -> None: ...
    def toString(self) -> str: ...
    def u(self, string: str) -> 'DhtSecret': ...
    def v(self, string: str) -> 'DhtSecret': ...

class DlogCommitment:
    def __init__(self): ...
    def a(self, string: str) -> 'DlogCommitment': ...
    def equals(self, object: typing.Any) -> bool: ...
    def getA(self) -> str: ...
    def getR(self) -> str: ...
    def hashCode(self) -> int: ...
    def r(self, string: str) -> 'DlogCommitment': ...
    def setA(self, string: str) -> None: ...
    def setR(self, string: str) -> None: ...
    def toString(self) -> str: ...

class EmissionInfo:
    def __init__(self): ...
    def equals(self, object: typing.Any) -> bool: ...
    def getMinerReward(self) -> int: ...
    def getTotalCoinsIssued(self) -> int: ...
    def getTotalRemainCoins(self) -> int: ...
    def hashCode(self) -> int: ...
    def minerReward(self, long: int) -> 'EmissionInfo': ...
    def setMinerReward(self, long: int) -> None: ...
    def setTotalCoinsIssued(self, long: int) -> None: ...
    def setTotalRemainCoins(self, long: int) -> None: ...
    def toString(self) -> str: ...
    def totalCoinsIssued(self, long: int) -> 'EmissionInfo': ...
    def totalRemainCoins(self, long: int) -> 'EmissionInfo': ...

class ErgoLikeContext:
    def __init__(self): ...
    def addBoxesToSpendItem(self, ergoTransactionOutput: 'ErgoTransactionOutput') -> 'ErgoLikeContext': ...
    def addDataBoxesItem(self, ergoTransactionOutput: 'ErgoTransactionOutput') -> 'ErgoLikeContext': ...
    def addHeadersItem(self, sigmaHeader: 'SigmaHeader') -> 'ErgoLikeContext': ...
    def boxesToSpend(self, list: java.util.List['ErgoTransactionOutput']) -> 'ErgoLikeContext': ...
    def costLimit(self, long: int) -> 'ErgoLikeContext': ...
    def dataBoxes(self, list: java.util.List['ErgoTransactionOutput']) -> 'ErgoLikeContext': ...
    def equals(self, object: typing.Any) -> bool: ...
    def extension(self, object: typing.Any) -> 'ErgoLikeContext': ...
    def getBoxesToSpend(self) -> java.util.List['ErgoTransactionOutput']: ...
    def getCostLimit(self) -> int: ...
    def getDataBoxes(self) -> java.util.List['ErgoTransactionOutput']: ...
    def getExtension(self) -> typing.Any: ...
    def getHeaders(self) -> java.util.List['SigmaHeader']: ...
    def getInitCost(self) -> int: ...
    def getLastBlockUtxoRoot(self) -> AvlTreeData: ...
    def getPreHeader(self) -> 'PreHeader': ...
    def getSelfIndex(self) -> int: ...
    def getSpendingTransaction(self) -> 'ErgoLikeTransaction': ...
    def getValidationSettings(self) -> str: ...
    def hashCode(self) -> int: ...
    def headers(self, list: java.util.List['SigmaHeader']) -> 'ErgoLikeContext': ...
    def initCost(self, long: int) -> 'ErgoLikeContext': ...
    def lastBlockUtxoRoot(self, avlTreeData: AvlTreeData) -> 'ErgoLikeContext': ...
    def preHeader(self, preHeader: 'PreHeader') -> 'ErgoLikeContext': ...
    def selfIndex(self, long: int) -> 'ErgoLikeContext': ...
    def setBoxesToSpend(self, list: java.util.List['ErgoTransactionOutput']) -> None: ...
    def setCostLimit(self, long: int) -> None: ...
    def setDataBoxes(self, list: java.util.List['ErgoTransactionOutput']) -> None: ...
    def setExtension(self, object: typing.Any) -> None: ...
    def setHeaders(self, list: java.util.List['SigmaHeader']) -> None: ...
    def setInitCost(self, long: int) -> None: ...
    def setLastBlockUtxoRoot(self, avlTreeData: AvlTreeData) -> None: ...
    def setPreHeader(self, preHeader: 'PreHeader') -> None: ...
    def setSelfIndex(self, long: int) -> None: ...
    def setSpendingTransaction(self, ergoLikeTransaction: 'ErgoLikeTransaction') -> None: ...
    def setValidationSettings(self, string: str) -> None: ...
    def spendingTransaction(self, ergoLikeTransaction: 'ErgoLikeTransaction') -> 'ErgoLikeContext': ...
    def toString(self) -> str: ...
    def validationSettings(self, string: str) -> 'ErgoLikeContext': ...

class ErgoLikeTransaction:
    def __init__(self): ...
    def addDataInputsItem(self, ergoTransactionDataInput: 'ErgoTransactionDataInput') -> 'ErgoLikeTransaction': ...
    def addInputsItem(self, ergoTransactionInput: 'ErgoTransactionInput') -> 'ErgoLikeTransaction': ...
    def addOutputsItem(self, ergoTransactionOutput: 'ErgoTransactionOutput') -> 'ErgoLikeTransaction': ...
    def dataInputs(self, list: java.util.List['ErgoTransactionDataInput']) -> 'ErgoLikeTransaction': ...
    def equals(self, object: typing.Any) -> bool: ...
    def getDataInputs(self) -> java.util.List['ErgoTransactionDataInput']: ...
    def getId(self) -> str: ...
    def getInputs(self) -> java.util.List['ErgoTransactionInput']: ...
    def getOutputs(self) -> java.util.List['ErgoTransactionOutput']: ...
    def hashCode(self) -> int: ...
    def id(self, string: str) -> 'ErgoLikeTransaction': ...
    def inputs(self, list: java.util.List['ErgoTransactionInput']) -> 'ErgoLikeTransaction': ...
    def outputs(self, list: java.util.List['ErgoTransactionOutput']) -> 'ErgoLikeTransaction': ...
    def setDataInputs(self, list: java.util.List['ErgoTransactionDataInput']) -> None: ...
    def setId(self, string: str) -> None: ...
    def setInputs(self, list: java.util.List['ErgoTransactionInput']) -> None: ...
    def setOutputs(self, list: java.util.List['ErgoTransactionOutput']) -> None: ...
    def toString(self) -> str: ...

class ErgoTransaction:
    def __init__(self): ...
    def addDataInputsItem(self, ergoTransactionDataInput: 'ErgoTransactionDataInput') -> 'ErgoTransaction': ...
    def addInputsItem(self, ergoTransactionInput: 'ErgoTransactionInput') -> 'ErgoTransaction': ...
    def addOutputsItem(self, ergoTransactionOutput: 'ErgoTransactionOutput') -> 'ErgoTransaction': ...
    def dataInputs(self, list: java.util.List['ErgoTransactionDataInput']) -> 'ErgoTransaction': ...
    def equals(self, object: typing.Any) -> bool: ...
    def getDataInputs(self) -> java.util.List['ErgoTransactionDataInput']: ...
    def getId(self) -> str: ...
    def getInputs(self) -> java.util.List['ErgoTransactionInput']: ...
    def getOutputs(self) -> java.util.List['ErgoTransactionOutput']: ...
    def getSize(self) -> int: ...
    def hashCode(self) -> int: ...
    def id(self, string: str) -> 'ErgoTransaction': ...
    def inputs(self, list: java.util.List['ErgoTransactionInput']) -> 'ErgoTransaction': ...
    def outputs(self, list: java.util.List['ErgoTransactionOutput']) -> 'ErgoTransaction': ...
    def setDataInputs(self, list: java.util.List['ErgoTransactionDataInput']) -> None: ...
    def setId(self, string: str) -> None: ...
    def setInputs(self, list: java.util.List['ErgoTransactionInput']) -> None: ...
    def setOutputs(self, list: java.util.List['ErgoTransactionOutput']) -> None: ...
    def setSize(self, integer: int) -> None: ...
    def size(self, integer: int) -> 'ErgoTransaction': ...
    def toString(self) -> str: ...

class ErgoTransactionDataInput:
    def __init__(self): ...
    def boxId(self, string: str) -> 'ErgoTransactionDataInput': ...
    def equals(self, object: typing.Any) -> bool: ...
    def extension(self, map: typing.Union[java.util.Map[str, str], typing.Mapping[str, str]]) -> 'ErgoTransactionDataInput': ...
    def getBoxId(self) -> str: ...
    def getExtension(self) -> java.util.Map[str, str]: ...
    def hashCode(self) -> int: ...
    def putExtensionItem(self, string: str, string2: str) -> 'ErgoTransactionDataInput': ...
    def setBoxId(self, string: str) -> None: ...
    def setExtension(self, map: typing.Union[java.util.Map[str, str], typing.Mapping[str, str]]) -> None: ...
    def toString(self) -> str: ...

class ErgoTransactionInput:
    def __init__(self): ...
    def boxId(self, string: str) -> 'ErgoTransactionInput': ...
    def equals(self, object: typing.Any) -> bool: ...
    def extension(self, map: typing.Union[java.util.Map[str, str], typing.Mapping[str, str]]) -> 'ErgoTransactionInput': ...
    def getBoxId(self) -> str: ...
    def getExtension(self) -> java.util.Map[str, str]: ...
    def getSpendingProof(self) -> 'SpendingProof': ...
    def hashCode(self) -> int: ...
    def putExtensionItem(self, string: str, string2: str) -> 'ErgoTransactionInput': ...
    def setBoxId(self, string: str) -> None: ...
    def setExtension(self, map: typing.Union[java.util.Map[str, str], typing.Mapping[str, str]]) -> None: ...
    def setSpendingProof(self, spendingProof: 'SpendingProof') -> None: ...
    def spendingProof(self, spendingProof: 'SpendingProof') -> 'ErgoTransactionInput': ...
    def toString(self) -> str: ...

class ErgoTransactionOutput:
    def __init__(self): ...
    def addAssetsItem(self, asset: Asset) -> 'ErgoTransactionOutput': ...
    def additionalRegisters(self, registers: 'Registers') -> 'ErgoTransactionOutput': ...
    def assets(self, list: java.util.List[Asset]) -> 'ErgoTransactionOutput': ...
    def boxId(self, string: str) -> 'ErgoTransactionOutput': ...
    def creationHeight(self, integer: int) -> 'ErgoTransactionOutput': ...
    def equals(self, object: typing.Any) -> bool: ...
    def ergoTree(self, string: str) -> 'ErgoTransactionOutput': ...
    def getAdditionalRegisters(self) -> 'Registers': ...
    def getAssets(self) -> java.util.List[Asset]: ...
    def getBoxId(self) -> str: ...
    def getCreationHeight(self) -> int: ...
    def getErgoTree(self) -> str: ...
    def getIndex(self) -> int: ...
    def getTransactionId(self) -> str: ...
    def getValue(self) -> int: ...
    def hashCode(self) -> int: ...
    def index(self, integer: int) -> 'ErgoTransactionOutput': ...
    def setAdditionalRegisters(self, registers: 'Registers') -> None: ...
    def setAssets(self, list: java.util.List[Asset]) -> None: ...
    def setBoxId(self, string: str) -> None: ...
    def setCreationHeight(self, integer: int) -> None: ...
    def setErgoTree(self, string: str) -> None: ...
    def setIndex(self, integer: int) -> None: ...
    def setTransactionId(self, string: str) -> None: ...
    def setValue(self, long: int) -> None: ...
    def toString(self) -> str: ...
    def transactionId(self, string: str) -> 'ErgoTransactionOutput': ...
    def value(self, long: int) -> 'ErgoTransactionOutput': ...

class ErgoTransactionUnsignedInput:
    def __init__(self): ...
    def boxId(self, string: str) -> 'ErgoTransactionUnsignedInput': ...
    def equals(self, object: typing.Any) -> bool: ...
    def extension(self, map: typing.Union[java.util.Map[str, str], typing.Mapping[str, str]]) -> 'ErgoTransactionUnsignedInput': ...
    def getBoxId(self) -> str: ...
    def getExtension(self) -> java.util.Map[str, str]: ...
    def hashCode(self) -> int: ...
    def putExtensionItem(self, string: str, string2: str) -> 'ErgoTransactionUnsignedInput': ...
    def setBoxId(self, string: str) -> None: ...
    def setExtension(self, map: typing.Union[java.util.Map[str, str], typing.Mapping[str, str]]) -> None: ...
    def toString(self) -> str: ...

class ExecuteScript:
    def __init__(self): ...
    def context(self, ergoLikeContext: ErgoLikeContext) -> 'ExecuteScript': ...
    def equals(self, object: typing.Any) -> bool: ...
    def getContext(self) -> ErgoLikeContext: ...
    def getNamedConstants(self) -> typing.Any: ...
    def getScript(self) -> str: ...
    def hashCode(self) -> int: ...
    def namedConstants(self, object: typing.Any) -> 'ExecuteScript': ...
    def script(self, string: str) -> 'ExecuteScript': ...
    def setContext(self, ergoLikeContext: ErgoLikeContext) -> None: ...
    def setNamedConstants(self, object: typing.Any) -> None: ...
    def setScript(self, string: str) -> None: ...
    def toString(self) -> str: ...

class Extension:
    def __init__(self): ...
    def addFieldsItem(self, keyValueItem: 'KeyValueItem') -> 'Extension': ...
    def digest(self, string: str) -> 'Extension': ...
    def equals(self, object: typing.Any) -> bool: ...
    def fields(self, list: java.util.List['KeyValueItem']) -> 'Extension': ...
    def getDigest(self) -> str: ...
    def getFields(self) -> java.util.List['KeyValueItem']: ...
    def getHeaderId(self) -> str: ...
    def hashCode(self) -> int: ...
    def headerId(self, string: str) -> 'Extension': ...
    def setDigest(self, string: str) -> None: ...
    def setFields(self, list: java.util.List['KeyValueItem']) -> None: ...
    def setHeaderId(self, string: str) -> None: ...
    def toString(self) -> str: ...

class FeeHistogram(java.util.ArrayList['FeeHistogramBin']):
    def __init__(self): ...
    def equals(self, object: typing.Any) -> bool: ...
    def hashCode(self) -> int: ...
    def toString(self) -> str: ...

class FeeHistogramBin:
    def __init__(self): ...
    def equals(self, object: typing.Any) -> bool: ...
    def getNTxns(self) -> int: ...
    def getTotalFee(self) -> int: ...
    def hashCode(self) -> int: ...
    def nTxns(self, integer: int) -> 'FeeHistogramBin': ...
    def setNTxns(self, integer: int) -> None: ...
    def setTotalFee(self, long: int) -> None: ...
    def toString(self) -> str: ...
    def totalFee(self, long: int) -> 'FeeHistogramBin': ...

class FullBlock:
    def __init__(self): ...
    def adProofs(self, blockADProofs: BlockADProofs) -> 'FullBlock': ...
    def blockTransactions(self, blockTransactions: BlockTransactions) -> 'FullBlock': ...
    def equals(self, object: typing.Any) -> bool: ...
    def extension(self, extension: Extension) -> 'FullBlock': ...
    def getAdProofs(self) -> BlockADProofs: ...
    def getBlockTransactions(self) -> BlockTransactions: ...
    def getExtension(self) -> Extension: ...
    def getHeader(self) -> BlockHeader: ...
    def getSize(self) -> int: ...
    def hashCode(self) -> int: ...
    def header(self, blockHeader: BlockHeader) -> 'FullBlock': ...
    def setAdProofs(self, blockADProofs: BlockADProofs) -> None: ...
    def setBlockTransactions(self, blockTransactions: BlockTransactions) -> None: ...
    def setExtension(self, extension: Extension) -> None: ...
    def setHeader(self, blockHeader: BlockHeader) -> None: ...
    def setSize(self, integer: int) -> None: ...
    def size(self, integer: int) -> 'FullBlock': ...
    def toString(self) -> str: ...

class GenerateCommitmentsRequest:
    def __init__(self): ...
    def addDataInputsRawItem(self, string: str) -> 'GenerateCommitmentsRequest': ...
    def addInputsRawItem(self, string: str) -> 'GenerateCommitmentsRequest': ...
    def dataInputsRaw(self, list: java.util.List[str]) -> 'GenerateCommitmentsRequest': ...
    def equals(self, object: typing.Any) -> bool: ...
    def getDataInputsRaw(self) -> java.util.List[str]: ...
    def getInputsRaw(self) -> java.util.List[str]: ...
    def getSecrets(self) -> 'GenerateCommitmentsRequestSecrets': ...
    def getTx(self) -> 'UnsignedErgoTransaction': ...
    def hashCode(self) -> int: ...
    def inputsRaw(self, list: java.util.List[str]) -> 'GenerateCommitmentsRequest': ...
    def secrets(self, generateCommitmentsRequestSecrets: 'GenerateCommitmentsRequestSecrets') -> 'GenerateCommitmentsRequest': ...
    def setDataInputsRaw(self, list: java.util.List[str]) -> None: ...
    def setInputsRaw(self, list: java.util.List[str]) -> None: ...
    def setSecrets(self, generateCommitmentsRequestSecrets: 'GenerateCommitmentsRequestSecrets') -> None: ...
    def setTx(self, unsignedErgoTransaction: 'UnsignedErgoTransaction') -> None: ...
    def toString(self) -> str: ...
    def tx(self, unsignedErgoTransaction: 'UnsignedErgoTransaction') -> 'GenerateCommitmentsRequest': ...

class GenerateCommitmentsRequestSecrets:
    def __init__(self): ...
    def addDhtItem(self, dhtSecret: DhtSecret) -> 'GenerateCommitmentsRequestSecrets': ...
    def addDlogItem(self, string: str) -> 'GenerateCommitmentsRequestSecrets': ...
    def dht(self, list: java.util.List[DhtSecret]) -> 'GenerateCommitmentsRequestSecrets': ...
    def dlog(self, list: java.util.List[str]) -> 'GenerateCommitmentsRequestSecrets': ...
    def equals(self, object: typing.Any) -> bool: ...
    def getDht(self) -> java.util.List[DhtSecret]: ...
    def getDlog(self) -> java.util.List[str]: ...
    def hashCode(self) -> int: ...
    def setDht(self, list: java.util.List[DhtSecret]) -> None: ...
    def setDlog(self, list: java.util.List[str]) -> None: ...
    def toString(self) -> str: ...

class HintExtractionRequest:
    def __init__(self): ...
    def addDataInputsRawItem(self, string: str) -> 'HintExtractionRequest': ...
    def addInputsRawItem(self, string: str) -> 'HintExtractionRequest': ...
    def addRealItem(self, sigmaBoolean: 'SigmaBoolean') -> 'HintExtractionRequest': ...
    def addSimulatedItem(self, sigmaBoolean: 'SigmaBoolean') -> 'HintExtractionRequest': ...
    def dataInputsRaw(self, list: java.util.List[str]) -> 'HintExtractionRequest': ...
    def equals(self, object: typing.Any) -> bool: ...
    def getDataInputsRaw(self) -> java.util.List[str]: ...
    def getInputsRaw(self) -> java.util.List[str]: ...
    def getReal(self) -> java.util.List['SigmaBoolean']: ...
    def getSimulated(self) -> java.util.List['SigmaBoolean']: ...
    def getTx(self) -> ErgoTransaction: ...
    def hashCode(self) -> int: ...
    def inputsRaw(self, list: java.util.List[str]) -> 'HintExtractionRequest': ...
    def real(self, list: java.util.List['SigmaBoolean']) -> 'HintExtractionRequest': ...
    def setDataInputsRaw(self, list: java.util.List[str]) -> None: ...
    def setInputsRaw(self, list: java.util.List[str]) -> None: ...
    def setReal(self, list: java.util.List['SigmaBoolean']) -> None: ...
    def setSimulated(self, list: java.util.List['SigmaBoolean']) -> None: ...
    def setTx(self, ergoTransaction: ErgoTransaction) -> None: ...
    def simulated(self, list: java.util.List['SigmaBoolean']) -> 'HintExtractionRequest': ...
    def toString(self) -> str: ...
    def tx(self, ergoTransaction: ErgoTransaction) -> 'HintExtractionRequest': ...

class InfoApi:
    def getNodeInfo(self) -> retrofit2.Call['NodeInfo']: ...

class InlineResponse200:
    def __init__(self): ...
    def equals(self, object: typing.Any) -> bool: ...
    def getMnemonic(self) -> str: ...
    def hashCode(self) -> int: ...
    def mnemonic(self, string: str) -> 'InlineResponse200': ...
    def setMnemonic(self, string: str) -> None: ...
    def toString(self) -> str: ...

class InlineResponse2001:
    def __init__(self): ...
    def equals(self, object: typing.Any) -> bool: ...
    def hashCode(self) -> int: ...
    def isMatched(self) -> bool: ...
    def matched(self, boolean: bool) -> 'InlineResponse2001': ...
    def setMatched(self, boolean: bool) -> None: ...
    def toString(self) -> str: ...

class InlineResponse2002:
    def __init__(self): ...
    def changeAddress(self, string: str) -> 'InlineResponse2002': ...
    def equals(self, object: typing.Any) -> bool: ...
    def getChangeAddress(self) -> str: ...
    def getWalletHeight(self) -> int: ...
    def hashCode(self) -> int: ...
    def isInitialized(self, boolean: bool) -> 'InlineResponse2002': ...
    def isIsInitialized(self) -> bool: ...
    def isIsUnlocked(self) -> bool: ...
    def isUnlocked(self, boolean: bool) -> 'InlineResponse2002': ...
    def setChangeAddress(self, string: str) -> None: ...
    def setIsInitialized(self, boolean: bool) -> None: ...
    def setIsUnlocked(self, boolean: bool) -> None: ...
    def setWalletHeight(self, integer: int) -> None: ...
    def toString(self) -> str: ...
    def walletHeight(self, integer: int) -> 'InlineResponse2002': ...

class InlineResponse2003:
    def __init__(self): ...
    def address(self, string: str) -> 'InlineResponse2003': ...
    def equals(self, object: typing.Any) -> bool: ...
    def getAddress(self) -> str: ...
    def hashCode(self) -> int: ...
    def setAddress(self, string: str) -> None: ...
    def toString(self) -> str: ...

class InlineResponse2004:
    def __init__(self): ...
    def address(self, string: str) -> 'InlineResponse2004': ...
    def derivationPath(self, string: str) -> 'InlineResponse2004': ...
    def equals(self, object: typing.Any) -> bool: ...
    def getAddress(self) -> str: ...
    def getDerivationPath(self) -> str: ...
    def hashCode(self) -> int: ...
    def setAddress(self, string: str) -> None: ...
    def setDerivationPath(self, string: str) -> None: ...
    def toString(self) -> str: ...

class InlineResponse2005:
    def __init__(self): ...
    def equals(self, object: typing.Any) -> bool: ...
    def getRewardAddress(self) -> str: ...
    def hashCode(self) -> int: ...
    def rewardAddress(self, string: str) -> 'InlineResponse2005': ...
    def setRewardAddress(self, string: str) -> None: ...
    def toString(self) -> str: ...

class InlineResponse2006:
    def __init__(self): ...
    def equals(self, object: typing.Any) -> bool: ...
    def getRewardAddress(self) -> str: ...
    def hashCode(self) -> int: ...
    def rewardAddress(self, string: str) -> 'InlineResponse2006': ...
    def setRewardAddress(self, string: str) -> None: ...
    def toString(self) -> str: ...

class InlineResponse2007:
    def __init__(self): ...
    def equals(self, object: typing.Any) -> bool: ...
    def getTree(self) -> str: ...
    def hashCode(self) -> int: ...
    def setTree(self, string: str) -> None: ...
    def toString(self) -> str: ...
    def tree(self, string: str) -> 'InlineResponse2007': ...

class InlineResponse2008:
    def __init__(self): ...
    def bytes(self, string: str) -> 'InlineResponse2008': ...
    def equals(self, object: typing.Any) -> bool: ...
    def getBytes(self) -> str: ...
    def hashCode(self) -> int: ...
    def setBytes(self, string: str) -> None: ...
    def toString(self) -> str: ...

class InputHints(java.util.HashMap[str, java.util.List]):
    def __init__(self): ...
    def equals(self, object: typing.Any) -> bool: ...
    def hashCode(self) -> int: ...
    def toString(self) -> str: ...

class JSON:
    def __init__(self): ...
    @staticmethod
    def createGson() -> com.google.gson.GsonBuilder: ...
    def getGson(self) -> com.google.gson.Gson: ...
    def setDateFormat(self, dateFormat: java.text.DateFormat) -> 'JSON': ...
    def setGson(self, gson: com.google.gson.Gson) -> 'JSON': ...
    def setLocalDateFormat(self, dateTimeFormatter: java.time.format.DateTimeFormatter) -> 'JSON': ...
    def setOffsetDateTimeFormat(self, dateTimeFormatter: java.time.format.DateTimeFormatter) -> 'JSON': ...
    def setSqlDateFormat(self, dateFormat: java.text.DateFormat) -> 'JSON': ...
    class DateTypeAdapter(com.google.gson.TypeAdapter[java.util.Date]):
        @typing.overload
        def __init__(self): ...
        @typing.overload
        def __init__(self, dateFormat: java.text.DateFormat): ...
        def read(self, jsonReader: com.google.gson.stream.JsonReader) -> java.util.Date: ...
        def setFormat(self, dateFormat: java.text.DateFormat) -> None: ...
        def write(self, jsonWriter: com.google.gson.stream.JsonWriter, date: java.util.Date) -> None: ...
    class LocalDateTypeAdapter(com.google.gson.TypeAdapter[java.time.LocalDate]):
        @typing.overload
        def __init__(self, jSON: 'JSON'): ...
        @typing.overload
        def __init__(self, jSON: 'JSON', dateTimeFormatter: java.time.format.DateTimeFormatter): ...
        def read(self, jsonReader: com.google.gson.stream.JsonReader) -> java.time.LocalDate: ...
        def setFormat(self, dateTimeFormatter: java.time.format.DateTimeFormatter) -> None: ...
        def write(self, jsonWriter: com.google.gson.stream.JsonWriter, localDate: java.time.LocalDate) -> None: ...
    class OffsetDateTimeTypeAdapter(com.google.gson.TypeAdapter[java.time.OffsetDateTime]):
        @typing.overload
        def __init__(self): ...
        @typing.overload
        def __init__(self, dateTimeFormatter: java.time.format.DateTimeFormatter): ...
        def read(self, jsonReader: com.google.gson.stream.JsonReader) -> java.time.OffsetDateTime: ...
        def setFormat(self, dateTimeFormatter: java.time.format.DateTimeFormatter) -> None: ...
        def write(self, jsonWriter: com.google.gson.stream.JsonWriter, offsetDateTime: java.time.OffsetDateTime) -> None: ...
    class SqlDateTypeAdapter(com.google.gson.TypeAdapter[java.sql.Date]):
        @typing.overload
        def __init__(self): ...
        @typing.overload
        def __init__(self, dateFormat: java.text.DateFormat): ...
        def read(self, jsonReader: com.google.gson.stream.JsonReader) -> java.sql.Date: ...
        def setFormat(self, dateFormat: java.text.DateFormat) -> None: ...
        def write(self, jsonWriter: com.google.gson.stream.JsonWriter, date: typing.Union[java.sql.Date, datetime.date]) -> None: ...

class KeyValueItem(java.util.ArrayList[str]):
    def __init__(self): ...
    def equals(self, object: typing.Any) -> bool: ...
    def hashCode(self) -> int: ...
    def toString(self) -> str: ...

class MerkleProof:
    def __init__(self): ...
    def addLevelsItem(self, list: java.util.List) -> 'MerkleProof': ...
    def equals(self, object: typing.Any) -> bool: ...
    def getLeaf(self) -> str: ...
    def getLevels(self) -> java.util.List[java.util.List]: ...
    def hashCode(self) -> int: ...
    def leaf(self, string: str) -> 'MerkleProof': ...
    def levels(self, list: java.util.List[java.util.List]) -> 'MerkleProof': ...
    def setLeaf(self, string: str) -> None: ...
    def setLevels(self, list: java.util.List[java.util.List]) -> None: ...
    def toString(self) -> str: ...

class MiningApi:
    def miningReadMinerRewardAddress(self) -> retrofit2.Call[InlineResponse2005]: ...
    def miningReadMinerRewardPubkey(self) -> retrofit2.Call[InlineResponse2006]: ...
    def miningRequestBlockCandidate(self) -> retrofit2.Call['WorkMessage']: ...
    def miningRequestBlockCandidateWithMandatoryTransactions(self, list: java.util.List[ErgoTransaction]) -> retrofit2.Call['WorkMessage']: ...
    def miningSubmitSolution(self, powSolutions: 'PowSolutions') -> retrofit2.Call[None]: ...

class NipopowApi:
    def getPopowHeaderByHeight(self, integer: int) -> retrofit2.Call['PopowHeader']: ...
    def getPopowHeaderById(self, string: str) -> retrofit2.Call['PopowHeader']: ...
    def getPopowProof(self, bigDecimal: typing.Union[java.math.BigDecimal, decimal.Decimal], bigDecimal2: typing.Union[java.math.BigDecimal, decimal.Decimal]) -> retrofit2.Call['NipopowProof']: ...
    def getPopowProofByHeaderId(self, bigDecimal: typing.Union[java.math.BigDecimal, decimal.Decimal], bigDecimal2: typing.Union[java.math.BigDecimal, decimal.Decimal], string: str) -> retrofit2.Call['NipopowProof']: ...

class NipopowProof:
    def __init__(self): ...
    def addPrefixItem(self, popowHeader: 'PopowHeader') -> 'NipopowProof': ...
    def addSuffixTailItem(self, blockHeader: BlockHeader) -> 'NipopowProof': ...
    def equals(self, object: typing.Any) -> bool: ...
    def getK(self) -> java.math.BigDecimal: ...
    def getM(self) -> java.math.BigDecimal: ...
    def getPrefix(self) -> java.util.List['PopowHeader']: ...
    def getSuffixHead(self) -> 'PopowHeader': ...
    def getSuffixTail(self) -> java.util.List[BlockHeader]: ...
    def hashCode(self) -> int: ...
    def k(self, bigDecimal: typing.Union[java.math.BigDecimal, decimal.Decimal]) -> 'NipopowProof': ...
    def m(self, bigDecimal: typing.Union[java.math.BigDecimal, decimal.Decimal]) -> 'NipopowProof': ...
    def prefix(self, list: java.util.List['PopowHeader']) -> 'NipopowProof': ...
    def setK(self, bigDecimal: typing.Union[java.math.BigDecimal, decimal.Decimal]) -> None: ...
    def setM(self, bigDecimal: typing.Union[java.math.BigDecimal, decimal.Decimal]) -> None: ...
    def setPrefix(self, list: java.util.List['PopowHeader']) -> None: ...
    def setSuffixHead(self, popowHeader: 'PopowHeader') -> None: ...
    def setSuffixTail(self, list: java.util.List[BlockHeader]) -> None: ...
    def suffixHead(self, popowHeader: 'PopowHeader') -> 'NipopowProof': ...
    def suffixTail(self, list: java.util.List[BlockHeader]) -> 'NipopowProof': ...
    def toString(self) -> str: ...

class NodeApi:
    def nodeShutdown(self) -> retrofit2.Call[None]: ...

class NodeInfo:
    def __init__(self): ...
    def appVersion(self, string: str) -> 'NodeInfo': ...
    def bestFullHeaderId(self, string: str) -> 'NodeInfo': ...
    def bestHeaderId(self, string: str) -> 'NodeInfo': ...
    def currentTime(self, long: int) -> 'NodeInfo': ...
    def difficulty(self, bigInteger: java.math.BigInteger) -> 'NodeInfo': ...
    def equals(self, object: typing.Any) -> bool: ...
    def fullBlocksScore(self, bigInteger: java.math.BigInteger) -> 'NodeInfo': ...
    def fullHeight(self, integer: int) -> 'NodeInfo': ...
    def genesisBlockId(self, string: str) -> 'NodeInfo': ...
    def getAppVersion(self) -> str: ...
    def getBestFullHeaderId(self) -> str: ...
    def getBestHeaderId(self) -> str: ...
    def getCurrentTime(self) -> int: ...
    def getDifficulty(self) -> java.math.BigInteger: ...
    def getFullBlocksScore(self) -> java.math.BigInteger: ...
    def getFullHeight(self) -> int: ...
    def getGenesisBlockId(self) -> str: ...
    def getHeadersHeight(self) -> int: ...
    def getHeadersScore(self) -> java.math.BigInteger: ...
    def getLaunchTime(self) -> int: ...
    def getName(self) -> str: ...
    def getNetwork(self) -> str: ...
    def getParameters(self) -> 'Parameters': ...
    def getPeersCount(self) -> int: ...
    def getPreviousFullHeaderId(self) -> str: ...
    def getStateRoot(self) -> str: ...
    def getStateType(self) -> 'NodeInfo.StateTypeEnum': ...
    def getStateVersion(self) -> str: ...
    def getUnconfirmedCount(self) -> int: ...
    def hashCode(self) -> int: ...
    def headersHeight(self, integer: int) -> 'NodeInfo': ...
    def headersScore(self, bigInteger: java.math.BigInteger) -> 'NodeInfo': ...
    def isIsMining(self) -> bool: ...
    def isMining(self, boolean: bool) -> 'NodeInfo': ...
    def launchTime(self, long: int) -> 'NodeInfo': ...
    def name(self, string: str) -> 'NodeInfo': ...
    def parameters(self, parameters: 'Parameters') -> 'NodeInfo': ...
    def peersCount(self, integer: int) -> 'NodeInfo': ...
    def previousFullHeaderId(self, string: str) -> 'NodeInfo': ...
    def setAppVersion(self, string: str) -> None: ...
    def setBestFullHeaderId(self, string: str) -> None: ...
    def setBestHeaderId(self, string: str) -> None: ...
    def setCurrentTime(self, long: int) -> None: ...
    def setDifficulty(self, bigInteger: java.math.BigInteger) -> None: ...
    def setFullBlocksScore(self, bigInteger: java.math.BigInteger) -> None: ...
    def setFullHeight(self, integer: int) -> None: ...
    def setGenesisBlockId(self, string: str) -> None: ...
    def setHeadersHeight(self, integer: int) -> None: ...
    def setHeadersScore(self, bigInteger: java.math.BigInteger) -> None: ...
    def setIsMining(self, boolean: bool) -> None: ...
    def setLaunchTime(self, long: int) -> None: ...
    def setName(self, string: str) -> None: ...
    def setNetwork(self, string: str) -> None: ...
    def setParameters(self, parameters: 'Parameters') -> None: ...
    def setPeersCount(self, integer: int) -> None: ...
    def setPreviousFullHeaderId(self, string: str) -> None: ...
    def setStateRoot(self, string: str) -> None: ...
    def setStateType(self, stateTypeEnum: 'NodeInfo.StateTypeEnum') -> None: ...
    def setStateVersion(self, string: str) -> None: ...
    def setUnconfirmedCount(self, integer: int) -> None: ...
    def stateRoot(self, string: str) -> 'NodeInfo': ...
    def stateType(self, stateTypeEnum: 'NodeInfo.StateTypeEnum') -> 'NodeInfo': ...
    def stateVersion(self, string: str) -> 'NodeInfo': ...
    def toString(self) -> str: ...
    def unconfirmedCount(self, integer: int) -> 'NodeInfo': ...
    class StateTypeEnum(java.lang.Enum['NodeInfo.StateTypeEnum']):
        DIGEST: typing.ClassVar['NodeInfo.StateTypeEnum'] = ...
        UTXO: typing.ClassVar['NodeInfo.StateTypeEnum'] = ...
        @staticmethod
        def fromValue(string: str) -> 'NodeInfo.StateTypeEnum': ...
        def getValue(self) -> str: ...
        def toString(self) -> str: ...
        _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
        @typing.overload
        @staticmethod
        def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
        @typing.overload
        @staticmethod
        def valueOf(string: str) -> 'NodeInfo.StateTypeEnum': ...
        @staticmethod
        def values() -> typing.List['NodeInfo.StateTypeEnum']: ...
        class Adapter(com.google.gson.TypeAdapter['NodeInfo.StateTypeEnum']):
            def __init__(self): ...
            def read(self, jsonReader: com.google.gson.stream.JsonReader) -> 'NodeInfo.StateTypeEnum': ...
            def write(self, jsonWriter: com.google.gson.stream.JsonWriter, stateTypeEnum: 'NodeInfo.StateTypeEnum') -> None: ...

class Parameters:
    def __init__(self): ...
    def blockVersion(self, integer: int) -> 'Parameters': ...
    def dataInputCost(self, integer: int) -> 'Parameters': ...
    def equals(self, object: typing.Any) -> bool: ...
    def getBlockVersion(self) -> int: ...
    def getDataInputCost(self) -> int: ...
    def getHeight(self) -> int: ...
    def getInputCost(self) -> int: ...
    def getMaxBlockCost(self) -> int: ...
    def getMaxBlockSize(self) -> int: ...
    def getMinValuePerByte(self) -> int: ...
    def getOutputCost(self) -> int: ...
    def getStorageFeeFactor(self) -> int: ...
    def getTokenAccessCost(self) -> int: ...
    def hashCode(self) -> int: ...
    def height(self, integer: int) -> 'Parameters': ...
    def inputCost(self, integer: int) -> 'Parameters': ...
    def maxBlockCost(self, integer: int) -> 'Parameters': ...
    def maxBlockSize(self, integer: int) -> 'Parameters': ...
    def minValuePerByte(self, integer: int) -> 'Parameters': ...
    def outputCost(self, integer: int) -> 'Parameters': ...
    def setBlockVersion(self, integer: int) -> None: ...
    def setDataInputCost(self, integer: int) -> None: ...
    def setHeight(self, integer: int) -> None: ...
    def setInputCost(self, integer: int) -> None: ...
    def setMaxBlockCost(self, integer: int) -> None: ...
    def setMaxBlockSize(self, integer: int) -> None: ...
    def setMinValuePerByte(self, integer: int) -> None: ...
    def setOutputCost(self, integer: int) -> None: ...
    def setStorageFeeFactor(self, integer: int) -> None: ...
    def setTokenAccessCost(self, integer: int) -> None: ...
    def storageFeeFactor(self, integer: int) -> 'Parameters': ...
    def toString(self) -> str: ...
    def tokenAccessCost(self, integer: int) -> 'Parameters': ...

class Peer:
    def __init__(self): ...
    def address(self, string: str) -> 'Peer': ...
    def connectionType(self, connectionTypeEnum: 'Peer.ConnectionTypeEnum') -> 'Peer': ...
    def equals(self, object: typing.Any) -> bool: ...
    def getAddress(self) -> str: ...
    def getConnectionType(self) -> 'Peer.ConnectionTypeEnum': ...
    def getLastSeen(self) -> int: ...
    def getName(self) -> str: ...
    def hashCode(self) -> int: ...
    def lastSeen(self, integer: int) -> 'Peer': ...
    def name(self, string: str) -> 'Peer': ...
    def setAddress(self, string: str) -> None: ...
    def setConnectionType(self, connectionTypeEnum: 'Peer.ConnectionTypeEnum') -> None: ...
    def setLastSeen(self, integer: int) -> None: ...
    def setName(self, string: str) -> None: ...
    def toString(self) -> str: ...
    class ConnectionTypeEnum(java.lang.Enum['Peer.ConnectionTypeEnum']):
        INCOMING: typing.ClassVar['Peer.ConnectionTypeEnum'] = ...
        OUTGOING: typing.ClassVar['Peer.ConnectionTypeEnum'] = ...
        @staticmethod
        def fromValue(string: str) -> 'Peer.ConnectionTypeEnum': ...
        def getValue(self) -> str: ...
        def toString(self) -> str: ...
        _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
        @typing.overload
        @staticmethod
        def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
        @typing.overload
        @staticmethod
        def valueOf(string: str) -> 'Peer.ConnectionTypeEnum': ...
        @staticmethod
        def values() -> typing.List['Peer.ConnectionTypeEnum']: ...
        class Adapter(com.google.gson.TypeAdapter['Peer.ConnectionTypeEnum']):
            def __init__(self): ...
            def read(self, jsonReader: com.google.gson.stream.JsonReader) -> 'Peer.ConnectionTypeEnum': ...
            def write(self, jsonWriter: com.google.gson.stream.JsonWriter, connectionTypeEnum: 'Peer.ConnectionTypeEnum') -> None: ...

class PeersApi:
    def connectToPeer(self, string: str) -> retrofit2.Call[None]: ...
    def getAllPeers(self) -> retrofit2.Call[java.util.List[Peer]]: ...
    def getBlacklistedPeers(self) -> retrofit2.Call[BlacklistedPeers]: ...
    def getConnectedPeers(self) -> retrofit2.Call[java.util.List[Peer]]: ...
    def getPeersStatus(self) -> retrofit2.Call['PeersStatus']: ...

class PeersStatus:
    def __init__(self): ...
    def currentNetworkTime(self, long: int) -> 'PeersStatus': ...
    def equals(self, object: typing.Any) -> bool: ...
    def getCurrentNetworkTime(self) -> int: ...
    def getLastIncomingMessage(self) -> int: ...
    def hashCode(self) -> int: ...
    def lastIncomingMessage(self, long: int) -> 'PeersStatus': ...
    def setCurrentNetworkTime(self, long: int) -> None: ...
    def setLastIncomingMessage(self, long: int) -> None: ...
    def toString(self) -> str: ...

class PopowHeader:
    def __init__(self): ...
    def addInterlinksItem(self, string: str) -> 'PopowHeader': ...
    def equals(self, object: typing.Any) -> bool: ...
    def getHeader(self) -> BlockHeader: ...
    def getInterlinks(self) -> java.util.List[str]: ...
    def hashCode(self) -> int: ...
    def header(self, blockHeader: BlockHeader) -> 'PopowHeader': ...
    def interlinks(self, list: java.util.List[str]) -> 'PopowHeader': ...
    def setHeader(self, blockHeader: BlockHeader) -> None: ...
    def setInterlinks(self, list: java.util.List[str]) -> None: ...
    def toString(self) -> str: ...

class PowSolutions:
    def __init__(self): ...
    def d(self, bigInteger: java.math.BigInteger) -> 'PowSolutions': ...
    def equals(self, object: typing.Any) -> bool: ...
    def getD(self) -> java.math.BigInteger: ...
    def getN(self) -> str: ...
    def getPk(self) -> str: ...
    def getW(self) -> str: ...
    def hashCode(self) -> int: ...
    def n(self, string: str) -> 'PowSolutions': ...
    def pk(self, string: str) -> 'PowSolutions': ...
    def setD(self, bigInteger: java.math.BigInteger) -> None: ...
    def setN(self, string: str) -> None: ...
    def setPk(self, string: str) -> None: ...
    def setW(self, string: str) -> None: ...
    def toString(self) -> str: ...
    def w(self, string: str) -> 'PowSolutions': ...

class PreHeader:
    def __init__(self): ...
    def equals(self, object: typing.Any) -> bool: ...
    def getHeight(self) -> int: ...
    def getMinerPk(self) -> str: ...
    def getNBits(self) -> int: ...
    def getParentId(self) -> str: ...
    def getTimestamp(self) -> int: ...
    def getVersion(self) -> int: ...
    def getVotes(self) -> str: ...
    def hashCode(self) -> int: ...
    def height(self, integer: int) -> 'PreHeader': ...
    def minerPk(self, string: str) -> 'PreHeader': ...
    def nBits(self, long: int) -> 'PreHeader': ...
    def parentId(self, string: str) -> 'PreHeader': ...
    def setHeight(self, integer: int) -> None: ...
    def setMinerPk(self, string: str) -> None: ...
    def setNBits(self, long: int) -> None: ...
    def setParentId(self, string: str) -> None: ...
    def setTimestamp(self, integer: int) -> None: ...
    def setVersion(self, integer: int) -> None: ...
    def setVotes(self, string: str) -> None: ...
    def timestamp(self, integer: int) -> 'PreHeader': ...
    def toString(self) -> str: ...
    def version(self, integer: int) -> 'PreHeader': ...
    def votes(self, string: str) -> 'PreHeader': ...

class ProofOfUpcomingTransactions:
    def __init__(self): ...
    def addTxProofsItem(self, merkleProof: MerkleProof) -> 'ProofOfUpcomingTransactions': ...
    def equals(self, object: typing.Any) -> bool: ...
    def getMsgPreimage(self) -> str: ...
    def getTxProofs(self) -> java.util.List[MerkleProof]: ...
    def hashCode(self) -> int: ...
    def msgPreimage(self, string: str) -> 'ProofOfUpcomingTransactions': ...
    def setMsgPreimage(self, string: str) -> None: ...
    def setTxProofs(self, list: java.util.List[MerkleProof]) -> None: ...
    def toString(self) -> str: ...
    def txProofs(self, list: java.util.List[MerkleProof]) -> 'ProofOfUpcomingTransactions': ...

class Registers(java.util.HashMap[str, str]):
    def __init__(self): ...
    def equals(self, object: typing.Any) -> bool: ...
    def hashCode(self) -> int: ...
    def toString(self) -> str: ...

class RequestsHolder:
    def __init__(self): ...
    def addDataInputsRawItem(self, string: str) -> 'RequestsHolder': ...
    def addInputsRawItem(self, string: str) -> 'RequestsHolder': ...
    def addRequestsItem(self, anyOfRequestsHolderRequestsItems: AnyOfRequestsHolderRequestsItems) -> 'RequestsHolder': ...
    def dataInputsRaw(self, list: java.util.List[str]) -> 'RequestsHolder': ...
    def equals(self, object: typing.Any) -> bool: ...
    def fee(self, long: int) -> 'RequestsHolder': ...
    def getDataInputsRaw(self) -> java.util.List[str]: ...
    def getFee(self) -> int: ...
    def getInputsRaw(self) -> java.util.List[str]: ...
    def getRequests(self) -> java.util.List[AnyOfRequestsHolderRequestsItems]: ...
    def hashCode(self) -> int: ...
    def inputsRaw(self, list: java.util.List[str]) -> 'RequestsHolder': ...
    def requests(self, list: java.util.List[AnyOfRequestsHolderRequestsItems]) -> 'RequestsHolder': ...
    def setDataInputsRaw(self, list: java.util.List[str]) -> None: ...
    def setFee(self, long: int) -> None: ...
    def setInputsRaw(self, list: java.util.List[str]) -> None: ...
    def setRequests(self, list: java.util.List[AnyOfRequestsHolderRequestsItems]) -> None: ...
    def toString(self) -> str: ...

class Scan:
    def __init__(self): ...
    def equals(self, object: typing.Any) -> bool: ...
    def getScanId(self) -> int: ...
    def getScanName(self) -> str: ...
    def getTrackingRule(self) -> 'ScanningPredicate': ...
    def hashCode(self) -> int: ...
    def scanId(self, integer: int) -> 'Scan': ...
    def scanName(self, string: str) -> 'Scan': ...
    def setScanId(self, integer: int) -> None: ...
    def setScanName(self, string: str) -> None: ...
    def setTrackingRule(self, scanningPredicate: 'ScanningPredicate') -> None: ...
    def toString(self) -> str: ...
    def trackingRule(self, scanningPredicate: 'ScanningPredicate') -> 'Scan': ...

class ScanApi:
    def addBox(self, scanIdsBox: 'ScanIdsBox') -> retrofit2.Call[str]: ...
    def deregisterScan(self, scanId: 'ScanId') -> retrofit2.Call['ScanId']: ...
    def listAllScans(self) -> retrofit2.Call[java.util.List[Scan]]: ...
    def listUnspentScans(self, integer: int, integer2: int, integer3: int) -> retrofit2.Call[java.util.List['WalletBox']]: ...
    def registerScan(self, scanRequest: 'ScanRequest') -> retrofit2.Call['ScanId']: ...
    def scanStopTracking(self, scanIdBoxId: 'ScanIdBoxId') -> retrofit2.Call['ScanIdBoxId']: ...

class ScanId:
    def __init__(self): ...
    def equals(self, object: typing.Any) -> bool: ...
    def getScanId(self) -> int: ...
    def hashCode(self) -> int: ...
    def scanId(self, integer: int) -> 'ScanId': ...
    def setScanId(self, integer: int) -> None: ...
    def toString(self) -> str: ...

class ScanIdBoxId:
    def __init__(self): ...
    def boxId(self, string: str) -> 'ScanIdBoxId': ...
    def equals(self, object: typing.Any) -> bool: ...
    def getBoxId(self) -> str: ...
    def getScanId(self) -> int: ...
    def hashCode(self) -> int: ...
    def scanId(self, integer: int) -> 'ScanIdBoxId': ...
    def setBoxId(self, string: str) -> None: ...
    def setScanId(self, integer: int) -> None: ...
    def toString(self) -> str: ...

class ScanIdsBox:
    def __init__(self): ...
    def addScanIdsItem(self, integer: int) -> 'ScanIdsBox': ...
    def box(self, ergoTransactionOutput: ErgoTransactionOutput) -> 'ScanIdsBox': ...
    def equals(self, object: typing.Any) -> bool: ...
    def getBox(self) -> ErgoTransactionOutput: ...
    def getScanIds(self) -> java.util.List[int]: ...
    def hashCode(self) -> int: ...
    def scanIds(self, list: java.util.List[int]) -> 'ScanIdsBox': ...
    def setBox(self, ergoTransactionOutput: ErgoTransactionOutput) -> None: ...
    def setScanIds(self, list: java.util.List[int]) -> None: ...
    def toString(self) -> str: ...

class ScanRequest:
    def __init__(self): ...
    def equals(self, object: typing.Any) -> bool: ...
    def getScanName(self) -> str: ...
    def getTrackingRule(self) -> 'ScanningPredicate': ...
    def hashCode(self) -> int: ...
    def scanName(self, string: str) -> 'ScanRequest': ...
    def setScanName(self, string: str) -> None: ...
    def setTrackingRule(self, scanningPredicate: 'ScanningPredicate') -> None: ...
    def toString(self) -> str: ...
    def trackingRule(self, scanningPredicate: 'ScanningPredicate') -> 'ScanRequest': ...

class ScanningPredicate:
    def __init__(self): ...
    def equals(self, object: typing.Any) -> bool: ...
    def getPredicate(self) -> str: ...
    def hashCode(self) -> int: ...
    def predicate(self, string: str) -> 'ScanningPredicate': ...
    def setPredicate(self, string: str) -> None: ...
    def toString(self) -> str: ...

class ScriptApi:
    def addressToBytes(self, string: str) -> retrofit2.Call[InlineResponse2008]: ...
    def addressToTree(self, string: str) -> retrofit2.Call[InlineResponse2007]: ...
    def executeWithContext(self, executeScript: ExecuteScript) -> retrofit2.Call[CryptoResult]: ...
    def scriptP2SAddress(self, sourceHolder: 'SourceHolder') -> retrofit2.Call[AddressHolder]: ...
    def scriptP2SHAddress(self, sourceHolder: 'SourceHolder') -> retrofit2.Call[AddressHolder]: ...

class SecretProven:
    def __init__(self): ...
    def challenge(self, string: str) -> 'SecretProven': ...
    def equals(self, object: typing.Any) -> bool: ...
    def getChallenge(self) -> str: ...
    def getHint(self) -> 'SecretProven.HintEnum': ...
    def getPosition(self) -> str: ...
    def getProof(self) -> str: ...
    def getPubkey(self) -> 'SigmaBoolean': ...
    def hashCode(self) -> int: ...
    def hint(self, hintEnum: 'SecretProven.HintEnum') -> 'SecretProven': ...
    def position(self, string: str) -> 'SecretProven': ...
    def proof(self, string: str) -> 'SecretProven': ...
    def pubkey(self, sigmaBoolean: 'SigmaBoolean') -> 'SecretProven': ...
    def setChallenge(self, string: str) -> None: ...
    def setHint(self, hintEnum: 'SecretProven.HintEnum') -> None: ...
    def setPosition(self, string: str) -> None: ...
    def setProof(self, string: str) -> None: ...
    def setPubkey(self, sigmaBoolean: 'SigmaBoolean') -> None: ...
    def toString(self) -> str: ...
    class HintEnum(java.lang.Enum['SecretProven.HintEnum']):
        PROOFREAL: typing.ClassVar['SecretProven.HintEnum'] = ...
        PROOFSIMULATED: typing.ClassVar['SecretProven.HintEnum'] = ...
        @staticmethod
        def fromValue(string: str) -> 'SecretProven.HintEnum': ...
        def getValue(self) -> str: ...
        def toString(self) -> str: ...
        _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
        @typing.overload
        @staticmethod
        def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
        @typing.overload
        @staticmethod
        def valueOf(string: str) -> 'SecretProven.HintEnum': ...
        @staticmethod
        def values() -> typing.List['SecretProven.HintEnum']: ...
        class Adapter(com.google.gson.TypeAdapter['SecretProven.HintEnum']):
            def __init__(self): ...
            def read(self, jsonReader: com.google.gson.stream.JsonReader) -> 'SecretProven.HintEnum': ...
            def write(self, jsonWriter: com.google.gson.stream.JsonWriter, hintEnum: 'SecretProven.HintEnum') -> None: ...

class SerializedBox:
    def __init__(self): ...
    def boxId(self, string: str) -> 'SerializedBox': ...
    def bytes(self, string: str) -> 'SerializedBox': ...
    def equals(self, object: typing.Any) -> bool: ...
    def getBoxId(self) -> str: ...
    def getBytes(self) -> str: ...
    def hashCode(self) -> int: ...
    def setBoxId(self, string: str) -> None: ...
    def setBytes(self, string: str) -> None: ...
    def toString(self) -> str: ...

class SigmaBoolean:
    def __init__(self): ...
    def condition(self, boolean: bool) -> 'SigmaBoolean': ...
    def equals(self, object: typing.Any) -> bool: ...
    def g(self, string: str) -> 'SigmaBoolean': ...
    def getG(self) -> str: ...
    def getH(self) -> str: ...
    def getOp(self) -> int: ...
    def getU(self) -> str: ...
    def getV(self) -> str: ...
    def h(self, string: str) -> 'SigmaBoolean': ...
    def hashCode(self) -> int: ...
    def isCondition(self) -> bool: ...
    def op(self, integer: int) -> 'SigmaBoolean': ...
    def setCondition(self, boolean: bool) -> None: ...
    def setG(self, string: str) -> None: ...
    def setH(self, string: str) -> None: ...
    def setOp(self, integer: int) -> None: ...
    def setU(self, string: str) -> None: ...
    def setV(self, string: str) -> None: ...
    def toString(self) -> str: ...
    def u(self, string: str) -> 'SigmaBoolean': ...
    def v(self, string: str) -> 'SigmaBoolean': ...

class SigmaHeader:
    def __init__(self): ...
    def adProofsId(self, string: str) -> 'SigmaHeader': ...
    def adProofsRoot(self, string: str) -> 'SigmaHeader': ...
    def equals(self, object: typing.Any) -> bool: ...
    def extensionHash(self, string: str) -> 'SigmaHeader': ...
    def extensionId(self, string: str) -> 'SigmaHeader': ...
    def extensionRoot(self, string: str) -> 'SigmaHeader': ...
    def getAdProofsId(self) -> str: ...
    def getAdProofsRoot(self) -> str: ...
    def getExtensionHash(self) -> str: ...
    def getExtensionId(self) -> str: ...
    def getExtensionRoot(self) -> str: ...
    def getHeight(self) -> int: ...
    def getId(self) -> str: ...
    def getMinerPk(self) -> str: ...
    def getNBits(self) -> int: ...
    def getParentId(self) -> str: ...
    def getPowDistance(self) -> java.math.BigDecimal: ...
    def getPowNonce(self) -> str: ...
    def getPowOnetimePk(self) -> str: ...
    def getPowSolutions(self) -> PowSolutions: ...
    def getSize(self) -> int: ...
    def getStateRoot(self) -> AvlTreeData: ...
    def getTimestamp(self) -> int: ...
    def getTransactionsId(self) -> str: ...
    def getTransactionsRoot(self) -> str: ...
    def getVersion(self) -> int: ...
    def getVotes(self) -> str: ...
    def hashCode(self) -> int: ...
    def height(self, integer: int) -> 'SigmaHeader': ...
    def id(self, string: str) -> 'SigmaHeader': ...
    def minerPk(self, string: str) -> 'SigmaHeader': ...
    def nBits(self, long: int) -> 'SigmaHeader': ...
    def parentId(self, string: str) -> 'SigmaHeader': ...
    def powDistance(self, bigDecimal: typing.Union[java.math.BigDecimal, decimal.Decimal]) -> 'SigmaHeader': ...
    def powNonce(self, string: str) -> 'SigmaHeader': ...
    def powOnetimePk(self, string: str) -> 'SigmaHeader': ...
    def powSolutions(self, powSolutions: PowSolutions) -> 'SigmaHeader': ...
    def setAdProofsId(self, string: str) -> None: ...
    def setAdProofsRoot(self, string: str) -> None: ...
    def setExtensionHash(self, string: str) -> None: ...
    def setExtensionId(self, string: str) -> None: ...
    def setExtensionRoot(self, string: str) -> None: ...
    def setHeight(self, integer: int) -> None: ...
    def setId(self, string: str) -> None: ...
    def setMinerPk(self, string: str) -> None: ...
    def setNBits(self, long: int) -> None: ...
    def setParentId(self, string: str) -> None: ...
    def setPowDistance(self, bigDecimal: typing.Union[java.math.BigDecimal, decimal.Decimal]) -> None: ...
    def setPowNonce(self, string: str) -> None: ...
    def setPowOnetimePk(self, string: str) -> None: ...
    def setPowSolutions(self, powSolutions: PowSolutions) -> None: ...
    def setSize(self, integer: int) -> None: ...
    def setStateRoot(self, avlTreeData: AvlTreeData) -> None: ...
    def setTimestamp(self, integer: int) -> None: ...
    def setTransactionsId(self, string: str) -> None: ...
    def setTransactionsRoot(self, string: str) -> None: ...
    def setVersion(self, integer: int) -> None: ...
    def setVotes(self, string: str) -> None: ...
    def size(self, integer: int) -> 'SigmaHeader': ...
    def stateRoot(self, avlTreeData: AvlTreeData) -> 'SigmaHeader': ...
    def timestamp(self, integer: int) -> 'SigmaHeader': ...
    def toString(self) -> str: ...
    def transactionsId(self, string: str) -> 'SigmaHeader': ...
    def transactionsRoot(self, string: str) -> 'SigmaHeader': ...
    def version(self, integer: int) -> 'SigmaHeader': ...
    def votes(self, string: str) -> 'SigmaHeader': ...

class SourceHolder:
    def __init__(self): ...
    def equals(self, object: typing.Any) -> bool: ...
    def getSource(self) -> str: ...
    def hashCode(self) -> int: ...
    def setSource(self, string: str) -> None: ...
    def source(self, string: str) -> 'SourceHolder': ...
    def toString(self) -> str: ...

class SpendingProof:
    def __init__(self): ...
    def equals(self, object: typing.Any) -> bool: ...
    def extension(self, map: typing.Union[java.util.Map[str, str], typing.Mapping[str, str]]) -> 'SpendingProof': ...
    def getExtension(self) -> java.util.Map[str, str]: ...
    def getProofBytes(self) -> str: ...
    def hashCode(self) -> int: ...
    def proofBytes(self, string: str) -> 'SpendingProof': ...
    def putExtensionItem(self, string: str, string2: str) -> 'SpendingProof': ...
    def setExtension(self, map: typing.Union[java.util.Map[str, str], typing.Mapping[str, str]]) -> None: ...
    def setProofBytes(self, string: str) -> None: ...
    def toString(self) -> str: ...

class StringUtil:
    def __init__(self): ...
    @staticmethod
    def containsIgnoreCase(stringArray: typing.List[str], string2: str) -> bool: ...
    @staticmethod
    def join(stringArray: typing.List[str], string2: str) -> str: ...

class TransactionHintsBag:
    def __init__(self): ...
    def addPublicHintsItem(self, inputHints: InputHints) -> 'TransactionHintsBag': ...
    def addSecretHintsItem(self, inputHints: InputHints) -> 'TransactionHintsBag': ...
    def equals(self, object: typing.Any) -> bool: ...
    def getPublicHints(self) -> java.util.List[InputHints]: ...
    def getSecretHints(self) -> java.util.List[InputHints]: ...
    def hashCode(self) -> int: ...
    def publicHints(self, list: java.util.List[InputHints]) -> 'TransactionHintsBag': ...
    def secretHints(self, list: java.util.List[InputHints]) -> 'TransactionHintsBag': ...
    def setPublicHints(self, list: java.util.List[InputHints]) -> None: ...
    def setSecretHints(self, list: java.util.List[InputHints]) -> None: ...
    def toString(self) -> str: ...

class TransactionSigningRequest:
    def __init__(self): ...
    def addDataInputsRawItem(self, string: str) -> 'TransactionSigningRequest': ...
    def addInputsRawItem(self, string: str) -> 'TransactionSigningRequest': ...
    def dataInputsRaw(self, list: java.util.List[str]) -> 'TransactionSigningRequest': ...
    def equals(self, object: typing.Any) -> bool: ...
    def getDataInputsRaw(self) -> java.util.List[str]: ...
    def getHints(self) -> TransactionHintsBag: ...
    def getInputsRaw(self) -> java.util.List[str]: ...
    def getSecrets(self) -> 'TransactionSigningRequestSecrets': ...
    def getTx(self) -> 'UnsignedErgoTransaction': ...
    def hashCode(self) -> int: ...
    def hints(self, transactionHintsBag: TransactionHintsBag) -> 'TransactionSigningRequest': ...
    def inputsRaw(self, list: java.util.List[str]) -> 'TransactionSigningRequest': ...
    def secrets(self, transactionSigningRequestSecrets: 'TransactionSigningRequestSecrets') -> 'TransactionSigningRequest': ...
    def setDataInputsRaw(self, list: java.util.List[str]) -> None: ...
    def setHints(self, transactionHintsBag: TransactionHintsBag) -> None: ...
    def setInputsRaw(self, list: java.util.List[str]) -> None: ...
    def setSecrets(self, transactionSigningRequestSecrets: 'TransactionSigningRequestSecrets') -> None: ...
    def setTx(self, unsignedErgoTransaction: 'UnsignedErgoTransaction') -> None: ...
    def toString(self) -> str: ...
    def tx(self, unsignedErgoTransaction: 'UnsignedErgoTransaction') -> 'TransactionSigningRequest': ...

class TransactionSigningRequestSecrets:
    def __init__(self): ...
    def addDhtItem(self, dhtSecret: DhtSecret) -> 'TransactionSigningRequestSecrets': ...
    def addDlogItem(self, string: str) -> 'TransactionSigningRequestSecrets': ...
    def dht(self, list: java.util.List[DhtSecret]) -> 'TransactionSigningRequestSecrets': ...
    def dlog(self, list: java.util.List[str]) -> 'TransactionSigningRequestSecrets': ...
    def equals(self, object: typing.Any) -> bool: ...
    def getDht(self) -> java.util.List[DhtSecret]: ...
    def getDlog(self) -> java.util.List[str]: ...
    def hashCode(self) -> int: ...
    def setDht(self, list: java.util.List[DhtSecret]) -> None: ...
    def setDlog(self, list: java.util.List[str]) -> None: ...
    def toString(self) -> str: ...

class Transactions(java.util.ArrayList[ErgoTransaction]):
    def __init__(self): ...
    def equals(self, object: typing.Any) -> bool: ...
    def hashCode(self) -> int: ...
    def toString(self) -> str: ...

class TransactionsApi:
    def checkTransaction(self, ergoTransaction: ErgoTransaction) -> retrofit2.Call[str]: ...
    def getExpectedWaitTime(self, integer: int, integer2: int) -> retrofit2.Call[int]: ...
    def getFeeHistogram(self, integer: int, long: int) -> retrofit2.Call[FeeHistogram]: ...
    def getRecommendedFee(self, integer: int, integer2: int) -> retrofit2.Call[int]: ...
    def getUnconfirmedTransactions(self, integer: int, integer2: int) -> retrofit2.Call[Transactions]: ...
    def sendTransaction(self, ergoTransaction: ErgoTransaction) -> retrofit2.Call[str]: ...

class UnsignedErgoTransaction:
    def __init__(self): ...
    def addDataInputsItem(self, ergoTransactionDataInput: ErgoTransactionDataInput) -> 'UnsignedErgoTransaction': ...
    def addInputsItem(self, ergoTransactionUnsignedInput: ErgoTransactionUnsignedInput) -> 'UnsignedErgoTransaction': ...
    def addOutputsItem(self, ergoTransactionOutput: ErgoTransactionOutput) -> 'UnsignedErgoTransaction': ...
    def dataInputs(self, list: java.util.List[ErgoTransactionDataInput]) -> 'UnsignedErgoTransaction': ...
    def equals(self, object: typing.Any) -> bool: ...
    def getDataInputs(self) -> java.util.List[ErgoTransactionDataInput]: ...
    def getId(self) -> str: ...
    def getInputs(self) -> java.util.List[ErgoTransactionUnsignedInput]: ...
    def getOutputs(self) -> java.util.List[ErgoTransactionOutput]: ...
    def hashCode(self) -> int: ...
    def id(self, string: str) -> 'UnsignedErgoTransaction': ...
    def inputs(self, list: java.util.List[ErgoTransactionUnsignedInput]) -> 'UnsignedErgoTransaction': ...
    def outputs(self, list: java.util.List[ErgoTransactionOutput]) -> 'UnsignedErgoTransaction': ...
    def setDataInputs(self, list: java.util.List[ErgoTransactionDataInput]) -> None: ...
    def setId(self, string: str) -> None: ...
    def setInputs(self, list: java.util.List[ErgoTransactionUnsignedInput]) -> None: ...
    def setOutputs(self, list: java.util.List[ErgoTransactionOutput]) -> None: ...
    def toString(self) -> str: ...

class UtilsApi:
    def addressToRaw(self, string: str) -> retrofit2.Call[str]: ...
    def checkAddressValidity(self, string: str) -> retrofit2.Call[AddressValidity]: ...
    def ergoTreeToAddress(self, string: str) -> retrofit2.Call[str]: ...
    def getRandomSeed(self) -> retrofit2.Call[str]: ...
    def getRandomSeedWithLength(self, string: str) -> retrofit2.Call[str]: ...
    def hashBlake2b(self, string: str) -> retrofit2.Call[str]: ...
    def rawToAddress(self, string: str) -> retrofit2.Call[str]: ...

class UtxoApi:
    def genesisBoxes(self) -> retrofit2.Call[java.util.List[ErgoTransactionOutput]]: ...
    def getBoxById(self, string: str) -> retrofit2.Call[ErgoTransactionOutput]: ...
    def getBoxByIdBinary(self, string: str) -> retrofit2.Call[SerializedBox]: ...
    def getBoxWithPoolById(self, string: str) -> retrofit2.Call[ErgoTransactionOutput]: ...
    def getBoxWithPoolByIdBinary(self, string: str) -> retrofit2.Call[SerializedBox]: ...

class WalletApi:
    def addBox(self, scanIdsBox: ScanIdsBox) -> retrofit2.Call[str]: ...
    def checkSeed(self, body2: Body2) -> retrofit2.Call[InlineResponse2001]: ...
    def extractHints(self, hintExtractionRequest: HintExtractionRequest) -> retrofit2.Call[TransactionHintsBag]: ...
    def generateCommitments(self, generateCommitmentsRequest: GenerateCommitmentsRequest) -> retrofit2.Call[TransactionHintsBag]: ...
    def getWalletStatus(self) -> retrofit2.Call[InlineResponse2002]: ...
    def walletAddresses(self) -> retrofit2.Call[java.util.List[str]]: ...
    def walletBalances(self) -> retrofit2.Call[BalancesSnapshot]: ...
    def walletBalancesUnconfirmed(self) -> retrofit2.Call[BalancesSnapshot]: ...
    def walletBoxes(self, integer: int, integer2: int) -> retrofit2.Call[java.util.List['WalletBox']]: ...
    def walletBoxesCollect(self, boxesRequestHolder: BoxesRequestHolder) -> retrofit2.Call[java.util.List['WalletBox']]: ...
    def walletDeriveKey(self, body5: Body5) -> retrofit2.Call[InlineResponse2003]: ...
    def walletDeriveNextKey(self) -> retrofit2.Call[InlineResponse2004]: ...
    def walletGetTransaction(self, string: str) -> retrofit2.Call[java.util.List['WalletTransaction']]: ...
    def walletInit(self, body: Body) -> retrofit2.Call[InlineResponse200]: ...
    def walletLock(self) -> retrofit2.Call[None]: ...
    def walletPaymentTransactionGenerateAndSend(self, list: java.util.List['PaymentRequest']) -> retrofit2.Call[str]: ...
    def walletRescan(self) -> retrofit2.Call[None]: ...
    def walletRestore(self, body1: Body1) -> retrofit2.Call[None]: ...
    def walletTransactionGenerate(self, requestsHolder: RequestsHolder) -> retrofit2.Call[ErgoTransaction]: ...
    def walletTransactionGenerateAndSend(self, requestsHolder: RequestsHolder) -> retrofit2.Call[str]: ...
    def walletTransactionSign(self, transactionSigningRequest: TransactionSigningRequest) -> retrofit2.Call[ErgoTransaction]: ...
    def walletTransactions(self, integer: int, integer2: int, integer3: int, integer4: int) -> retrofit2.Call[java.util.List['WalletTransaction']]: ...
    def walletTransactionsByScanId(self, string: str) -> retrofit2.Call[java.util.List['WalletTransaction']]: ...
    def walletUnlock(self, body3: Body3) -> retrofit2.Call[None]: ...
    def walletUnsignedTransactionGenerate(self, requestsHolder: RequestsHolder) -> retrofit2.Call[UnsignedErgoTransaction]: ...
    def walletUnspentBoxes(self, integer: int, integer2: int) -> retrofit2.Call[java.util.List['WalletBox']]: ...
    def walletUpdateChangeAddress(self, body4: Body4) -> retrofit2.Call[None]: ...

class WalletBox:
    def __init__(self): ...
    def addScansItem(self, integer: int) -> 'WalletBox': ...
    def address(self, string: str) -> 'WalletBox': ...
    def box(self, ergoTransactionOutput: ErgoTransactionOutput) -> 'WalletBox': ...
    def confirmationsNum(self, integer: int) -> 'WalletBox': ...
    def creationOutIndex(self, integer: int) -> 'WalletBox': ...
    def creationTransaction(self, string: str) -> 'WalletBox': ...
    def equals(self, object: typing.Any) -> bool: ...
    def getAddress(self) -> str: ...
    def getBox(self) -> ErgoTransactionOutput: ...
    def getConfirmationsNum(self) -> int: ...
    def getCreationOutIndex(self) -> int: ...
    def getCreationTransaction(self) -> str: ...
    def getInclusionHeight(self) -> int: ...
    def getScans(self) -> java.util.List[int]: ...
    def getSpendingHeight(self) -> int: ...
    def getSpendingTransaction(self) -> str: ...
    def hashCode(self) -> int: ...
    def inclusionHeight(self, integer: int) -> 'WalletBox': ...
    def isOnchain(self) -> bool: ...
    def isSpent(self) -> bool: ...
    def onchain(self, boolean: bool) -> 'WalletBox': ...
    def scans(self, list: java.util.List[int]) -> 'WalletBox': ...
    def setAddress(self, string: str) -> None: ...
    def setBox(self, ergoTransactionOutput: ErgoTransactionOutput) -> None: ...
    def setConfirmationsNum(self, integer: int) -> None: ...
    def setCreationOutIndex(self, integer: int) -> None: ...
    def setCreationTransaction(self, string: str) -> None: ...
    def setInclusionHeight(self, integer: int) -> None: ...
    def setOnchain(self, boolean: bool) -> None: ...
    def setScans(self, list: java.util.List[int]) -> None: ...
    def setSpendingHeight(self, integer: int) -> None: ...
    def setSpendingTransaction(self, string: str) -> None: ...
    def setSpent(self, boolean: bool) -> None: ...
    def spendingHeight(self, integer: int) -> 'WalletBox': ...
    def spendingTransaction(self, string: str) -> 'WalletBox': ...
    def spent(self, boolean: bool) -> 'WalletBox': ...
    def toString(self) -> str: ...

class WalletTransaction:
    def __init__(self): ...
    def addDataInputsItem(self, ergoTransactionDataInput: ErgoTransactionDataInput) -> 'WalletTransaction': ...
    def addInputsItem(self, ergoTransactionInput: ErgoTransactionInput) -> 'WalletTransaction': ...
    def addOutputsItem(self, ergoTransactionOutput: ErgoTransactionOutput) -> 'WalletTransaction': ...
    def addScansItem(self, integer: int) -> 'WalletTransaction': ...
    def dataInputs(self, list: java.util.List[ErgoTransactionDataInput]) -> 'WalletTransaction': ...
    def equals(self, object: typing.Any) -> bool: ...
    def getDataInputs(self) -> java.util.List[ErgoTransactionDataInput]: ...
    def getId(self) -> str: ...
    def getInclusionHeight(self) -> int: ...
    def getInputs(self) -> java.util.List[ErgoTransactionInput]: ...
    def getNumConfirmations(self) -> int: ...
    def getOutputs(self) -> java.util.List[ErgoTransactionOutput]: ...
    def getScans(self) -> java.util.List[int]: ...
    def getSize(self) -> int: ...
    def hashCode(self) -> int: ...
    def id(self, string: str) -> 'WalletTransaction': ...
    def inclusionHeight(self, integer: int) -> 'WalletTransaction': ...
    def inputs(self, list: java.util.List[ErgoTransactionInput]) -> 'WalletTransaction': ...
    def numConfirmations(self, integer: int) -> 'WalletTransaction': ...
    def outputs(self, list: java.util.List[ErgoTransactionOutput]) -> 'WalletTransaction': ...
    def scans(self, list: java.util.List[int]) -> 'WalletTransaction': ...
    def setDataInputs(self, list: java.util.List[ErgoTransactionDataInput]) -> None: ...
    def setId(self, string: str) -> None: ...
    def setInclusionHeight(self, integer: int) -> None: ...
    def setInputs(self, list: java.util.List[ErgoTransactionInput]) -> None: ...
    def setNumConfirmations(self, integer: int) -> None: ...
    def setOutputs(self, list: java.util.List[ErgoTransactionOutput]) -> None: ...
    def setScans(self, list: java.util.List[int]) -> None: ...
    def setSize(self, integer: int) -> None: ...
    def size(self, integer: int) -> 'WalletTransaction': ...
    def toString(self) -> str: ...

class WorkMessage:
    def __init__(self): ...
    def b(self, bigInteger: java.math.BigInteger) -> 'WorkMessage': ...
    def equals(self, object: typing.Any) -> bool: ...
    def getB(self) -> java.math.BigInteger: ...
    def getH(self) -> int: ...
    def getMsg(self) -> str: ...
    def getPk(self) -> str: ...
    def getProof(self) -> ProofOfUpcomingTransactions: ...
    def h(self, integer: int) -> 'WorkMessage': ...
    def hashCode(self) -> int: ...
    def msg(self, string: str) -> 'WorkMessage': ...
    def pk(self, string: str) -> 'WorkMessage': ...
    def proof(self, proofOfUpcomingTransactions: ProofOfUpcomingTransactions) -> 'WorkMessage': ...
    def setB(self, bigInteger: java.math.BigInteger) -> None: ...
    def setH(self, integer: int) -> None: ...
    def setMsg(self, string: str) -> None: ...
    def setPk(self, string: str) -> None: ...
    def setProof(self, proofOfUpcomingTransactions: ProofOfUpcomingTransactions) -> None: ...
    def toString(self) -> str: ...

class AndPredicate(ScanningPredicate):
    def __init__(self): ...
    def addArgsItem(self, scanningPredicate: ScanningPredicate) -> 'AndPredicate': ...
    def args(self, list: java.util.List[ScanningPredicate]) -> 'AndPredicate': ...
    def equals(self, object: typing.Any) -> bool: ...
    def getArgs(self) -> java.util.List[ScanningPredicate]: ...
    def hashCode(self) -> int: ...
    def setArgs(self, list: java.util.List[ScanningPredicate]) -> None: ...
    def toString(self) -> str: ...

class AssetIssueRequest(AnyOfRequestsHolderRequestsItems):
    def __init__(self): ...
    def address(self, string: str) -> 'AssetIssueRequest': ...
    def amount(self, long: int) -> 'AssetIssueRequest': ...
    def decimals(self, integer: int) -> 'AssetIssueRequest': ...
    def description(self, string: str) -> 'AssetIssueRequest': ...
    def equals(self, object: typing.Any) -> bool: ...
    def ergValue(self, integer: int) -> 'AssetIssueRequest': ...
    def getAddress(self) -> str: ...
    def getAmount(self) -> int: ...
    def getDecimals(self) -> int: ...
    def getDescription(self) -> str: ...
    def getErgValue(self) -> int: ...
    def getName(self) -> str: ...
    def getRegisters(self) -> Registers: ...
    def hashCode(self) -> int: ...
    def name(self, string: str) -> 'AssetIssueRequest': ...
    def registers(self, registers: Registers) -> 'AssetIssueRequest': ...
    def setAddress(self, string: str) -> None: ...
    def setAmount(self, long: int) -> None: ...
    def setDecimals(self, integer: int) -> None: ...
    def setDescription(self, string: str) -> None: ...
    def setErgValue(self, integer: int) -> None: ...
    def setName(self, string: str) -> None: ...
    def setRegisters(self, registers: Registers) -> None: ...
    def toString(self) -> str: ...

class CommitmentWithSecret(Commitment):
    def __init__(self): ...
    def equals(self, object: typing.Any) -> bool: ...
    def hashCode(self) -> int: ...
    def toString(self) -> str: ...

class ContainsAssetPredicate(ScanningPredicate):
    def __init__(self): ...
    def assetId(self, string: str) -> 'ContainsAssetPredicate': ...
    def equals(self, object: typing.Any) -> bool: ...
    def getAssetId(self) -> str: ...
    def hashCode(self) -> int: ...
    def setAssetId(self, string: str) -> None: ...
    def toString(self) -> str: ...

class ContainsPredicate(ScanningPredicate):
    def __init__(self): ...
    def bytes(self, string: str) -> 'ContainsPredicate': ...
    def equals(self, object: typing.Any) -> bool: ...
    def getBytes(self) -> str: ...
    def getRegister(self) -> str: ...
    def hashCode(self) -> int: ...
    def register(self, string: str) -> 'ContainsPredicate': ...
    def setBytes(self, string: str) -> None: ...
    def setRegister(self, string: str) -> None: ...
    def toString(self) -> str: ...

class EqualsPredicate(ScanningPredicate):
    def __init__(self): ...
    def bytes(self, string: str) -> 'EqualsPredicate': ...
    def equals(self, object: typing.Any) -> bool: ...
    def getBytes(self) -> str: ...
    def getRegister(self) -> str: ...
    def hashCode(self) -> int: ...
    def register(self, string: str) -> 'EqualsPredicate': ...
    def setBytes(self, string: str) -> None: ...
    def setRegister(self, string: str) -> None: ...
    def toString(self) -> str: ...

class OrPredicate(ScanningPredicate):
    def __init__(self): ...
    def addArgsItem(self, scanningPredicate: ScanningPredicate) -> 'OrPredicate': ...
    def args(self, list: java.util.List[ScanningPredicate]) -> 'OrPredicate': ...
    def equals(self, object: typing.Any) -> bool: ...
    def getArgs(self) -> java.util.List[ScanningPredicate]: ...
    def hashCode(self) -> int: ...
    def setArgs(self, list: java.util.List[ScanningPredicate]) -> None: ...
    def toString(self) -> str: ...

class PaymentRequest(AnyOfRequestsHolderRequestsItems):
    def __init__(self): ...
    def addAssetsItem(self, asset: Asset) -> 'PaymentRequest': ...
    def address(self, string: str) -> 'PaymentRequest': ...
    def assets(self, list: java.util.List[Asset]) -> 'PaymentRequest': ...
    def equals(self, object: typing.Any) -> bool: ...
    def getAddress(self) -> str: ...
    def getAssets(self) -> java.util.List[Asset]: ...
    def getRegisters(self) -> Registers: ...
    def getValue(self) -> int: ...
    def hashCode(self) -> int: ...
    def registers(self, registers: Registers) -> 'PaymentRequest': ...
    def setAddress(self, string: str) -> None: ...
    def setAssets(self, list: java.util.List[Asset]) -> None: ...
    def setRegisters(self, registers: Registers) -> None: ...
    def setValue(self, long: int) -> None: ...
    def toString(self) -> str: ...
    def value(self, long: int) -> 'PaymentRequest': ...

class SigmaBooleanAndPredicate(SigmaBoolean):
    def __init__(self): ...
    def addArgsItem(self, sigmaBoolean: SigmaBoolean) -> 'SigmaBooleanAndPredicate': ...
    def args(self, list: java.util.List[SigmaBoolean]) -> 'SigmaBooleanAndPredicate': ...
    def equals(self, object: typing.Any) -> bool: ...
    def getArgs(self) -> java.util.List[SigmaBoolean]: ...
    def hashCode(self) -> int: ...
    def setArgs(self, list: java.util.List[SigmaBoolean]) -> None: ...
    def toString(self) -> str: ...

class SigmaBooleanOrPredicate(SigmaBoolean):
    def __init__(self): ...
    def addArgsItem(self, sigmaBoolean: SigmaBoolean) -> 'SigmaBooleanOrPredicate': ...
    def args(self, list: java.util.List[SigmaBoolean]) -> 'SigmaBooleanOrPredicate': ...
    def equals(self, object: typing.Any) -> bool: ...
    def getArgs(self) -> java.util.List[SigmaBoolean]: ...
    def hashCode(self) -> int: ...
    def setArgs(self, list: java.util.List[SigmaBoolean]) -> None: ...
    def toString(self) -> str: ...

class SigmaBooleanThresholdPredicate(SigmaBoolean):
    def __init__(self): ...
    def addArgsItem(self, sigmaBoolean: SigmaBoolean) -> 'SigmaBooleanThresholdPredicate': ...
    def args(self, list: java.util.List[SigmaBoolean]) -> 'SigmaBooleanThresholdPredicate': ...
    def equals(self, object: typing.Any) -> bool: ...
    def getArgs(self) -> java.util.List[SigmaBoolean]: ...
    def hashCode(self) -> int: ...
    def setArgs(self, list: java.util.List[SigmaBoolean]) -> None: ...
    def toString(self) -> str: ...

class CollectionFormats:
    def __init__(self): ...
    class CSVParams:
        @typing.overload
        def __init__(self): ...
        @typing.overload
        def __init__(self, stringArray: typing.List[str]): ...
        @typing.overload
        def __init__(self, list: java.util.List[str]): ...
        def getParams(self) -> java.util.List[str]: ...
        def setParams(self, list: java.util.List[str]) -> None: ...
        def toString(self) -> str: ...
    class PIPESParams(org.ergoplatform.restapi.client.CollectionFormats.CSVParams):
        @typing.overload
        def __init__(self): ...
        @typing.overload
        def __init__(self, stringArray: typing.List[str]): ...
        @typing.overload
        def __init__(self, list: java.util.List[str]): ...
        def toString(self) -> str: ...
    class SSVParams(org.ergoplatform.restapi.client.CollectionFormats.CSVParams):
        @typing.overload
        def __init__(self): ...
        @typing.overload
        def __init__(self, stringArray: typing.List[str]): ...
        @typing.overload
        def __init__(self, list: java.util.List[str]): ...
        def toString(self) -> str: ...
    class TSVParams(org.ergoplatform.restapi.client.CollectionFormats.CSVParams):
        @typing.overload
        def __init__(self): ...
        @typing.overload
        def __init__(self, stringArray: typing.List[str]): ...
        @typing.overload
        def __init__(self, list: java.util.List[str]): ...
        def toString(self) -> str: ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.ergoplatform.restapi.client")``.

    AddressHolder: typing.Type[AddressHolder]
    AddressValidity: typing.Type[AddressValidity]
    AndPredicate: typing.Type[AndPredicate]
    AnyOfRequestsHolderRequestsItems: typing.Type[AnyOfRequestsHolderRequestsItems]
    ApiClient: typing.Type[ApiClient]
    ApiError: typing.Type[ApiError]
    Asset: typing.Type[Asset]
    AssetIssueRequest: typing.Type[AssetIssueRequest]
    AvlTreeData: typing.Type[AvlTreeData]
    BalancesSnapshot: typing.Type[BalancesSnapshot]
    BlacklistedPeers: typing.Type[BlacklistedPeers]
    BlockADProofs: typing.Type[BlockADProofs]
    BlockHeader: typing.Type[BlockHeader]
    BlockHeaderWithoutPow: typing.Type[BlockHeaderWithoutPow]
    BlockTransactions: typing.Type[BlockTransactions]
    BlocksApi: typing.Type[BlocksApi]
    Body: typing.Type[Body]
    Body1: typing.Type[Body1]
    Body2: typing.Type[Body2]
    Body3: typing.Type[Body3]
    Body4: typing.Type[Body4]
    Body5: typing.Type[Body5]
    BoxesRequestHolder: typing.Type[BoxesRequestHolder]
    CandidateBlock: typing.Type[CandidateBlock]
    CollectionFormats: typing.Type[CollectionFormats]
    Commitment: typing.Type[Commitment]
    CommitmentWithSecret: typing.Type[CommitmentWithSecret]
    ContainsAssetPredicate: typing.Type[ContainsAssetPredicate]
    ContainsPredicate: typing.Type[ContainsPredicate]
    CryptoResult: typing.Type[CryptoResult]
    DhtSecret: typing.Type[DhtSecret]
    DlogCommitment: typing.Type[DlogCommitment]
    EmissionInfo: typing.Type[EmissionInfo]
    EqualsPredicate: typing.Type[EqualsPredicate]
    ErgoLikeContext: typing.Type[ErgoLikeContext]
    ErgoLikeTransaction: typing.Type[ErgoLikeTransaction]
    ErgoTransaction: typing.Type[ErgoTransaction]
    ErgoTransactionDataInput: typing.Type[ErgoTransactionDataInput]
    ErgoTransactionInput: typing.Type[ErgoTransactionInput]
    ErgoTransactionOutput: typing.Type[ErgoTransactionOutput]
    ErgoTransactionUnsignedInput: typing.Type[ErgoTransactionUnsignedInput]
    ExecuteScript: typing.Type[ExecuteScript]
    Extension: typing.Type[Extension]
    FeeHistogram: typing.Type[FeeHistogram]
    FeeHistogramBin: typing.Type[FeeHistogramBin]
    FullBlock: typing.Type[FullBlock]
    GenerateCommitmentsRequest: typing.Type[GenerateCommitmentsRequest]
    GenerateCommitmentsRequestSecrets: typing.Type[GenerateCommitmentsRequestSecrets]
    HintExtractionRequest: typing.Type[HintExtractionRequest]
    InfoApi: typing.Type[InfoApi]
    InlineResponse200: typing.Type[InlineResponse200]
    InlineResponse2001: typing.Type[InlineResponse2001]
    InlineResponse2002: typing.Type[InlineResponse2002]
    InlineResponse2003: typing.Type[InlineResponse2003]
    InlineResponse2004: typing.Type[InlineResponse2004]
    InlineResponse2005: typing.Type[InlineResponse2005]
    InlineResponse2006: typing.Type[InlineResponse2006]
    InlineResponse2007: typing.Type[InlineResponse2007]
    InlineResponse2008: typing.Type[InlineResponse2008]
    InputHints: typing.Type[InputHints]
    JSON: typing.Type[JSON]
    KeyValueItem: typing.Type[KeyValueItem]
    MerkleProof: typing.Type[MerkleProof]
    MiningApi: typing.Type[MiningApi]
    NipopowApi: typing.Type[NipopowApi]
    NipopowProof: typing.Type[NipopowProof]
    NodeApi: typing.Type[NodeApi]
    NodeInfo: typing.Type[NodeInfo]
    OrPredicate: typing.Type[OrPredicate]
    Parameters: typing.Type[Parameters]
    PaymentRequest: typing.Type[PaymentRequest]
    Peer: typing.Type[Peer]
    PeersApi: typing.Type[PeersApi]
    PeersStatus: typing.Type[PeersStatus]
    PopowHeader: typing.Type[PopowHeader]
    PowSolutions: typing.Type[PowSolutions]
    PreHeader: typing.Type[PreHeader]
    ProofOfUpcomingTransactions: typing.Type[ProofOfUpcomingTransactions]
    Registers: typing.Type[Registers]
    RequestsHolder: typing.Type[RequestsHolder]
    Scan: typing.Type[Scan]
    ScanApi: typing.Type[ScanApi]
    ScanId: typing.Type[ScanId]
    ScanIdBoxId: typing.Type[ScanIdBoxId]
    ScanIdsBox: typing.Type[ScanIdsBox]
    ScanRequest: typing.Type[ScanRequest]
    ScanningPredicate: typing.Type[ScanningPredicate]
    ScriptApi: typing.Type[ScriptApi]
    SecretProven: typing.Type[SecretProven]
    SerializedBox: typing.Type[SerializedBox]
    SigmaBoolean: typing.Type[SigmaBoolean]
    SigmaBooleanAndPredicate: typing.Type[SigmaBooleanAndPredicate]
    SigmaBooleanOrPredicate: typing.Type[SigmaBooleanOrPredicate]
    SigmaBooleanThresholdPredicate: typing.Type[SigmaBooleanThresholdPredicate]
    SigmaHeader: typing.Type[SigmaHeader]
    SourceHolder: typing.Type[SourceHolder]
    SpendingProof: typing.Type[SpendingProof]
    StringUtil: typing.Type[StringUtil]
    TransactionHintsBag: typing.Type[TransactionHintsBag]
    TransactionSigningRequest: typing.Type[TransactionSigningRequest]
    TransactionSigningRequestSecrets: typing.Type[TransactionSigningRequestSecrets]
    Transactions: typing.Type[Transactions]
    TransactionsApi: typing.Type[TransactionsApi]
    UnsignedErgoTransaction: typing.Type[UnsignedErgoTransaction]
    UtilsApi: typing.Type[UtilsApi]
    UtxoApi: typing.Type[UtxoApi]
    WalletApi: typing.Type[WalletApi]
    WalletBox: typing.Type[WalletBox]
    WalletTransaction: typing.Type[WalletTransaction]
    WorkMessage: typing.Type[WorkMessage]
    auth: org.ergoplatform.restapi.client.auth.__module_protocol__
