import scala
import scala.collection
import scala.collection.immutable
import scala.reflect
import scala.runtime
import scalan
import special
import special.collection.impl
import typing
import wrappers.scala
import wrappers.scalan



class Builder:
    @staticmethod
    def DefaultCollBuilder() -> 'CollOverArrayBuilder': ...

_Coll__A = typing.TypeVar('_Coll__A')  # <A>
class Coll(typing.Generic[_Coll__A]):
    @staticmethod
    def $init$($this: 'Coll') -> None: ...
    def append(self, other: 'Coll'[_Coll__A]) -> 'Coll'[_Coll__A]: ...
    def append$mcB$sp(self, other: 'Coll'[typing.Any]) -> 'Coll'[typing.Any]: ...
    def append$mcC$sp(self, other: 'Coll'[typing.Any]) -> 'Coll'[typing.Any]: ...
    def append$mcD$sp(self, other: 'Coll'[typing.Any]) -> 'Coll'[typing.Any]: ...
    def append$mcF$sp(self, other: 'Coll'[typing.Any]) -> 'Coll'[typing.Any]: ...
    def append$mcI$sp(self, other: 'Coll'[typing.Any]) -> 'Coll'[typing.Any]: ...
    def append$mcJ$sp(self, other: 'Coll'[typing.Any]) -> 'Coll'[typing.Any]: ...
    def append$mcS$sp(self, other: 'Coll'[typing.Any]) -> 'Coll'[typing.Any]: ...
    def append$mcV$sp(self, other: 'Coll'[scala.runtime.BoxedUnit]) -> 'Coll'[scala.runtime.BoxedUnit]: ...
    def append$mcZ$sp(self, other: 'Coll'[typing.Any]) -> 'Coll'[typing.Any]: ...
    def apply(self, i: int) -> _Coll__A: ...
    def apply$mcB$sp(self, i: int) -> int: ...
    def apply$mcC$sp(self, i: int) -> str: ...
    def apply$mcD$sp(self, i: int) -> float: ...
    def apply$mcF$sp(self, i: int) -> float: ...
    def apply$mcI$sp(self, i: int) -> int: ...
    def apply$mcJ$sp(self, i: int) -> int: ...
    def apply$mcS$sp(self, i: int) -> int: ...
    def apply$mcV$sp(self, i: int) -> None: ...
    def apply$mcZ$sp(self, i: int) -> bool: ...
    def builder(self) -> 'CollBuilder': ...
    def diff(self, that: 'Coll'[_Coll__A]) -> 'Coll'[_Coll__A]: ...
    def diff$mcB$sp(self, that: 'Coll'[typing.Any]) -> 'Coll'[typing.Any]: ...
    def diff$mcC$sp(self, that: 'Coll'[typing.Any]) -> 'Coll'[typing.Any]: ...
    def diff$mcD$sp(self, that: 'Coll'[typing.Any]) -> 'Coll'[typing.Any]: ...
    def diff$mcF$sp(self, that: 'Coll'[typing.Any]) -> 'Coll'[typing.Any]: ...
    def diff$mcI$sp(self, that: 'Coll'[typing.Any]) -> 'Coll'[typing.Any]: ...
    def diff$mcJ$sp(self, that: 'Coll'[typing.Any]) -> 'Coll'[typing.Any]: ...
    def diff$mcS$sp(self, that: 'Coll'[typing.Any]) -> 'Coll'[typing.Any]: ...
    def diff$mcV$sp(self, that: 'Coll'[scala.runtime.BoxedUnit]) -> 'Coll'[scala.runtime.BoxedUnit]: ...
    def diff$mcZ$sp(self, that: 'Coll'[typing.Any]) -> 'Coll'[typing.Any]: ...
    _distinctByKey__T = typing.TypeVar('_distinctByKey__T')  # <T>
    _distinctByKey__U = typing.TypeVar('_distinctByKey__U')  # <U>
    def distinctByKey(self, ev: scala.Predef..less.colon.less[_Coll__A, scala.Tuple2[_distinctByKey__T, _distinctByKey__U]]) -> 'Coll'[_Coll__A]: ...
    _distinctByKey$mcB$sp__T = typing.TypeVar('_distinctByKey$mcB$sp__T')  # <T>
    _distinctByKey$mcB$sp__U = typing.TypeVar('_distinctByKey$mcB$sp__U')  # <U>
    def distinctByKey$mcB$sp(self, ev: scala.Predef..less.colon.less[typing.Any, scala.Tuple2[_distinctByKey.mcB.sp__T, _distinctByKey.mcB.sp__U]]) -> 'Coll'[typing.Any]: ...
    _distinctByKey$mcC$sp__T = typing.TypeVar('_distinctByKey$mcC$sp__T')  # <T>
    _distinctByKey$mcC$sp__U = typing.TypeVar('_distinctByKey$mcC$sp__U')  # <U>
    def distinctByKey$mcC$sp(self, ev: scala.Predef..less.colon.less[typing.Any, scala.Tuple2[_distinctByKey.mcC.sp__T, _distinctByKey.mcC.sp__U]]) -> 'Coll'[typing.Any]: ...
    _distinctByKey$mcD$sp__T = typing.TypeVar('_distinctByKey$mcD$sp__T')  # <T>
    _distinctByKey$mcD$sp__U = typing.TypeVar('_distinctByKey$mcD$sp__U')  # <U>
    def distinctByKey$mcD$sp(self, ev: scala.Predef..less.colon.less[typing.Any, scala.Tuple2[_distinctByKey.mcD.sp__T, _distinctByKey.mcD.sp__U]]) -> 'Coll'[typing.Any]: ...
    _distinctByKey$mcF$sp__T = typing.TypeVar('_distinctByKey$mcF$sp__T')  # <T>
    _distinctByKey$mcF$sp__U = typing.TypeVar('_distinctByKey$mcF$sp__U')  # <U>
    def distinctByKey$mcF$sp(self, ev: scala.Predef..less.colon.less[typing.Any, scala.Tuple2[_distinctByKey.mcF.sp__T, _distinctByKey.mcF.sp__U]]) -> 'Coll'[typing.Any]: ...
    _distinctByKey$mcI$sp__T = typing.TypeVar('_distinctByKey$mcI$sp__T')  # <T>
    _distinctByKey$mcI$sp__U = typing.TypeVar('_distinctByKey$mcI$sp__U')  # <U>
    def distinctByKey$mcI$sp(self, ev: scala.Predef..less.colon.less[typing.Any, scala.Tuple2[_distinctByKey.mcI.sp__T, _distinctByKey.mcI.sp__U]]) -> 'Coll'[typing.Any]: ...
    _distinctByKey$mcJ$sp__T = typing.TypeVar('_distinctByKey$mcJ$sp__T')  # <T>
    _distinctByKey$mcJ$sp__U = typing.TypeVar('_distinctByKey$mcJ$sp__U')  # <U>
    def distinctByKey$mcJ$sp(self, ev: scala.Predef..less.colon.less[typing.Any, scala.Tuple2[_distinctByKey.mcJ.sp__T, _distinctByKey.mcJ.sp__U]]) -> 'Coll'[typing.Any]: ...
    _distinctByKey$mcS$sp__T = typing.TypeVar('_distinctByKey$mcS$sp__T')  # <T>
    _distinctByKey$mcS$sp__U = typing.TypeVar('_distinctByKey$mcS$sp__U')  # <U>
    def distinctByKey$mcS$sp(self, ev: scala.Predef..less.colon.less[typing.Any, scala.Tuple2[_distinctByKey.mcS.sp__T, _distinctByKey.mcS.sp__U]]) -> 'Coll'[typing.Any]: ...
    _distinctByKey$mcV$sp__T = typing.TypeVar('_distinctByKey$mcV$sp__T')  # <T>
    _distinctByKey$mcV$sp__U = typing.TypeVar('_distinctByKey$mcV$sp__U')  # <U>
    def distinctByKey$mcV$sp(self, ev: scala.Predef..less.colon.less[scala.runtime.BoxedUnit, scala.Tuple2[_distinctByKey.mcV.sp__T, _distinctByKey.mcV.sp__U]]) -> 'Coll'[scala.runtime.BoxedUnit]: ...
    _distinctByKey$mcZ$sp__T = typing.TypeVar('_distinctByKey$mcZ$sp__T')  # <T>
    _distinctByKey$mcZ$sp__U = typing.TypeVar('_distinctByKey$mcZ$sp__U')  # <U>
    def distinctByKey$mcZ$sp(self, ev: scala.Predef..less.colon.less[typing.Any, scala.Tuple2[_distinctByKey.mcZ.sp__T, _distinctByKey.mcZ.sp__U]]) -> 'Coll'[typing.Any]: ...
    def exists(self, p: scala.Function1[_Coll__A, typing.Any]) -> bool: ...
    def exists$mcB$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> bool: ...
    def exists$mcC$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> bool: ...
    def exists$mcD$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> bool: ...
    def exists$mcF$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> bool: ...
    def exists$mcI$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> bool: ...
    def exists$mcJ$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> bool: ...
    def exists$mcS$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> bool: ...
    def exists$mcV$sp(self, p: scala.Function1[scala.runtime.BoxedUnit, typing.Any]) -> bool: ...
    def exists$mcZ$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> bool: ...
    def filter(self, p: scala.Function1[_Coll__A, typing.Any]) -> 'Coll'[_Coll__A]: ...
    def filter$mcB$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> 'Coll'[typing.Any]: ...
    def filter$mcC$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> 'Coll'[typing.Any]: ...
    def filter$mcD$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> 'Coll'[typing.Any]: ...
    def filter$mcF$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> 'Coll'[typing.Any]: ...
    def filter$mcI$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> 'Coll'[typing.Any]: ...
    def filter$mcJ$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> 'Coll'[typing.Any]: ...
    def filter$mcS$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> 'Coll'[typing.Any]: ...
    def filter$mcV$sp(self, p: scala.Function1[scala.runtime.BoxedUnit, typing.Any]) -> 'Coll'[scala.runtime.BoxedUnit]: ...
    def filter$mcZ$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> 'Coll'[typing.Any]: ...
    def find(self, p: scala.Function1[_Coll__A, typing.Any]) -> scala.Option[_Coll__A]: ...
    def find$mcB$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> scala.Option[typing.Any]: ...
    def find$mcC$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> scala.Option[typing.Any]: ...
    def find$mcD$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> scala.Option[typing.Any]: ...
    def find$mcF$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> scala.Option[typing.Any]: ...
    def find$mcI$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> scala.Option[typing.Any]: ...
    def find$mcJ$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> scala.Option[typing.Any]: ...
    def find$mcS$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> scala.Option[typing.Any]: ...
    def find$mcV$sp(self, p: scala.Function1[scala.runtime.BoxedUnit, typing.Any]) -> scala.Option[scala.runtime.BoxedUnit]: ...
    def find$mcZ$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> scala.Option[typing.Any]: ...
    _flatMap__B = typing.TypeVar('_flatMap__B')  # <B>
    def flatMap(self, f: scala.Function1[_Coll__A, 'Coll'[_flatMap__B]], evidence$2: scalan.RType[_flatMap__B]) -> 'Coll'[_flatMap__B]: ...
    _flatMap$mcB$sp__B = typing.TypeVar('_flatMap$mcB$sp__B')  # <B>
    def flatMap$mcB$sp(self, f: scala.Function1[typing.Any, 'Coll'[_flatMap.mcB.sp__B]], evidence$2: scalan.RType[_flatMap.mcB.sp__B]) -> 'Coll'[_flatMap.mcB.sp__B]: ...
    _flatMap$mcC$sp__B = typing.TypeVar('_flatMap$mcC$sp__B')  # <B>
    def flatMap$mcC$sp(self, f: scala.Function1[typing.Any, 'Coll'[_flatMap.mcC.sp__B]], evidence$2: scalan.RType[_flatMap.mcC.sp__B]) -> 'Coll'[_flatMap.mcC.sp__B]: ...
    _flatMap$mcD$sp__B = typing.TypeVar('_flatMap$mcD$sp__B')  # <B>
    def flatMap$mcD$sp(self, f: scala.Function1[typing.Any, 'Coll'[_flatMap.mcD.sp__B]], evidence$2: scalan.RType[_flatMap.mcD.sp__B]) -> 'Coll'[_flatMap.mcD.sp__B]: ...
    _flatMap$mcF$sp__B = typing.TypeVar('_flatMap$mcF$sp__B')  # <B>
    def flatMap$mcF$sp(self, f: scala.Function1[typing.Any, 'Coll'[_flatMap.mcF.sp__B]], evidence$2: scalan.RType[_flatMap.mcF.sp__B]) -> 'Coll'[_flatMap.mcF.sp__B]: ...
    _flatMap$mcI$sp__B = typing.TypeVar('_flatMap$mcI$sp__B')  # <B>
    def flatMap$mcI$sp(self, f: scala.Function1[typing.Any, 'Coll'[_flatMap.mcI.sp__B]], evidence$2: scalan.RType[_flatMap.mcI.sp__B]) -> 'Coll'[_flatMap.mcI.sp__B]: ...
    _flatMap$mcJ$sp__B = typing.TypeVar('_flatMap$mcJ$sp__B')  # <B>
    def flatMap$mcJ$sp(self, f: scala.Function1[typing.Any, 'Coll'[_flatMap.mcJ.sp__B]], evidence$2: scalan.RType[_flatMap.mcJ.sp__B]) -> 'Coll'[_flatMap.mcJ.sp__B]: ...
    _flatMap$mcS$sp__B = typing.TypeVar('_flatMap$mcS$sp__B')  # <B>
    def flatMap$mcS$sp(self, f: scala.Function1[typing.Any, 'Coll'[_flatMap.mcS.sp__B]], evidence$2: scalan.RType[_flatMap.mcS.sp__B]) -> 'Coll'[_flatMap.mcS.sp__B]: ...
    _flatMap$mcV$sp__B = typing.TypeVar('_flatMap$mcV$sp__B')  # <B>
    def flatMap$mcV$sp(self, f: scala.Function1[scala.runtime.BoxedUnit, 'Coll'[_flatMap.mcV.sp__B]], evidence$2: scalan.RType[_flatMap.mcV.sp__B]) -> 'Coll'[_flatMap.mcV.sp__B]: ...
    _flatMap$mcZ$sp__B = typing.TypeVar('_flatMap$mcZ$sp__B')  # <B>
    def flatMap$mcZ$sp(self, f: scala.Function1[typing.Any, 'Coll'[_flatMap.mcZ.sp__B]], evidence$2: scalan.RType[_flatMap.mcZ.sp__B]) -> 'Coll'[_flatMap.mcZ.sp__B]: ...
    _foldLeft__B = typing.TypeVar('_foldLeft__B')  # <B>
    def foldLeft(self, zero: _foldLeft__B, op: scala.Function1[scala.Tuple2[_foldLeft__B, _Coll__A], _foldLeft__B]) -> _foldLeft__B: ...
    _foldLeft$mcB$sp__B = typing.TypeVar('_foldLeft$mcB$sp__B')  # <B>
    def foldLeft$mcB$sp(self, zero: _foldLeft.mcB.sp__B, op: scala.Function1[scala.Tuple2[_foldLeft.mcB.sp__B, typing.Any], _foldLeft.mcB.sp__B]) -> _foldLeft.mcB.sp__B: ...
    _foldLeft$mcC$sp__B = typing.TypeVar('_foldLeft$mcC$sp__B')  # <B>
    def foldLeft$mcC$sp(self, zero: _foldLeft.mcC.sp__B, op: scala.Function1[scala.Tuple2[_foldLeft.mcC.sp__B, typing.Any], _foldLeft.mcC.sp__B]) -> _foldLeft.mcC.sp__B: ...
    _foldLeft$mcD$sp__B = typing.TypeVar('_foldLeft$mcD$sp__B')  # <B>
    def foldLeft$mcD$sp(self, zero: _foldLeft.mcD.sp__B, op: scala.Function1[scala.Tuple2[_foldLeft.mcD.sp__B, typing.Any], _foldLeft.mcD.sp__B]) -> _foldLeft.mcD.sp__B: ...
    _foldLeft$mcF$sp__B = typing.TypeVar('_foldLeft$mcF$sp__B')  # <B>
    def foldLeft$mcF$sp(self, zero: _foldLeft.mcF.sp__B, op: scala.Function1[scala.Tuple2[_foldLeft.mcF.sp__B, typing.Any], _foldLeft.mcF.sp__B]) -> _foldLeft.mcF.sp__B: ...
    _foldLeft$mcI$sp__B = typing.TypeVar('_foldLeft$mcI$sp__B')  # <B>
    def foldLeft$mcI$sp(self, zero: _foldLeft.mcI.sp__B, op: scala.Function1[scala.Tuple2[_foldLeft.mcI.sp__B, typing.Any], _foldLeft.mcI.sp__B]) -> _foldLeft.mcI.sp__B: ...
    _foldLeft$mcJ$sp__B = typing.TypeVar('_foldLeft$mcJ$sp__B')  # <B>
    def foldLeft$mcJ$sp(self, zero: _foldLeft.mcJ.sp__B, op: scala.Function1[scala.Tuple2[_foldLeft.mcJ.sp__B, typing.Any], _foldLeft.mcJ.sp__B]) -> _foldLeft.mcJ.sp__B: ...
    _foldLeft$mcS$sp__B = typing.TypeVar('_foldLeft$mcS$sp__B')  # <B>
    def foldLeft$mcS$sp(self, zero: _foldLeft.mcS.sp__B, op: scala.Function1[scala.Tuple2[_foldLeft.mcS.sp__B, typing.Any], _foldLeft.mcS.sp__B]) -> _foldLeft.mcS.sp__B: ...
    _foldLeft$mcV$sp__B = typing.TypeVar('_foldLeft$mcV$sp__B')  # <B>
    def foldLeft$mcV$sp(self, zero: _foldLeft.mcV.sp__B, op: scala.Function1[scala.Tuple2[_foldLeft.mcV.sp__B, scala.runtime.BoxedUnit], _foldLeft.mcV.sp__B]) -> _foldLeft.mcV.sp__B: ...
    _foldLeft$mcZ$sp__B = typing.TypeVar('_foldLeft$mcZ$sp__B')  # <B>
    def foldLeft$mcZ$sp(self, zero: _foldLeft.mcZ.sp__B, op: scala.Function1[scala.Tuple2[_foldLeft.mcZ.sp__B, typing.Any], _foldLeft.mcZ.sp__B]) -> _foldLeft.mcZ.sp__B: ...
    def forall(self, p: scala.Function1[_Coll__A, typing.Any]) -> bool: ...
    def forall$mcB$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> bool: ...
    def forall$mcC$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> bool: ...
    def forall$mcD$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> bool: ...
    def forall$mcF$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> bool: ...
    def forall$mcI$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> bool: ...
    def forall$mcJ$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> bool: ...
    def forall$mcS$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> bool: ...
    def forall$mcV$sp(self, p: scala.Function1[scala.runtime.BoxedUnit, typing.Any]) -> bool: ...
    def forall$mcZ$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> bool: ...
    def getOrElse(self, index: int, default: _Coll__A) -> _Coll__A: ...
    def getOrElse$mcB$sp(self, index: int, default: int) -> int: ...
    def getOrElse$mcC$sp(self, index: int, default: str) -> str: ...
    def getOrElse$mcD$sp(self, index: int, default: float) -> float: ...
    def getOrElse$mcF$sp(self, index: int, default: float) -> float: ...
    def getOrElse$mcI$sp(self, index: int, default: int) -> int: ...
    def getOrElse$mcJ$sp(self, index: int, default: int) -> int: ...
    def getOrElse$mcS$sp(self, index: int, default: int) -> int: ...
    def getOrElse$mcV$sp(self, index: int, default: scala.runtime.BoxedUnit) -> None: ...
    def getOrElse$mcZ$sp(self, index: int, default: bool) -> bool: ...
    _groupBy__K = typing.TypeVar('_groupBy__K')  # <K>
    def groupBy(self, key: scala.Function1[_Coll__A, _groupBy__K], evidence$5: scalan.RType[_groupBy__K]) -> 'Coll'[scala.Tuple2[_groupBy__K, 'Coll'[_Coll__A]]]: ...
    _groupBy$mcB$sp__K = typing.TypeVar('_groupBy$mcB$sp__K')  # <K>
    def groupBy$mcB$sp(self, key: scala.Function1[typing.Any, _groupBy.mcB.sp__K], evidence$5: scalan.RType[_groupBy.mcB.sp__K]) -> 'Coll'[scala.Tuple2[_groupBy.mcB.sp__K, 'Coll'[typing.Any]]]: ...
    _groupBy$mcC$sp__K = typing.TypeVar('_groupBy$mcC$sp__K')  # <K>
    def groupBy$mcC$sp(self, key: scala.Function1[typing.Any, _groupBy.mcC.sp__K], evidence$5: scalan.RType[_groupBy.mcC.sp__K]) -> 'Coll'[scala.Tuple2[_groupBy.mcC.sp__K, 'Coll'[typing.Any]]]: ...
    _groupBy$mcD$sp__K = typing.TypeVar('_groupBy$mcD$sp__K')  # <K>
    def groupBy$mcD$sp(self, key: scala.Function1[typing.Any, _groupBy.mcD.sp__K], evidence$5: scalan.RType[_groupBy.mcD.sp__K]) -> 'Coll'[scala.Tuple2[_groupBy.mcD.sp__K, 'Coll'[typing.Any]]]: ...
    _groupBy$mcF$sp__K = typing.TypeVar('_groupBy$mcF$sp__K')  # <K>
    def groupBy$mcF$sp(self, key: scala.Function1[typing.Any, _groupBy.mcF.sp__K], evidence$5: scalan.RType[_groupBy.mcF.sp__K]) -> 'Coll'[scala.Tuple2[_groupBy.mcF.sp__K, 'Coll'[typing.Any]]]: ...
    _groupBy$mcI$sp__K = typing.TypeVar('_groupBy$mcI$sp__K')  # <K>
    def groupBy$mcI$sp(self, key: scala.Function1[typing.Any, _groupBy.mcI.sp__K], evidence$5: scalan.RType[_groupBy.mcI.sp__K]) -> 'Coll'[scala.Tuple2[_groupBy.mcI.sp__K, 'Coll'[typing.Any]]]: ...
    _groupBy$mcJ$sp__K = typing.TypeVar('_groupBy$mcJ$sp__K')  # <K>
    def groupBy$mcJ$sp(self, key: scala.Function1[typing.Any, _groupBy.mcJ.sp__K], evidence$5: scalan.RType[_groupBy.mcJ.sp__K]) -> 'Coll'[scala.Tuple2[_groupBy.mcJ.sp__K, 'Coll'[typing.Any]]]: ...
    _groupBy$mcS$sp__K = typing.TypeVar('_groupBy$mcS$sp__K')  # <K>
    def groupBy$mcS$sp(self, key: scala.Function1[typing.Any, _groupBy.mcS.sp__K], evidence$5: scalan.RType[_groupBy.mcS.sp__K]) -> 'Coll'[scala.Tuple2[_groupBy.mcS.sp__K, 'Coll'[typing.Any]]]: ...
    _groupBy$mcV$sp__K = typing.TypeVar('_groupBy$mcV$sp__K')  # <K>
    def groupBy$mcV$sp(self, key: scala.Function1[scala.runtime.BoxedUnit, _groupBy.mcV.sp__K], evidence$5: scalan.RType[_groupBy.mcV.sp__K]) -> 'Coll'[scala.Tuple2[_groupBy.mcV.sp__K, 'Coll'[scala.runtime.BoxedUnit]]]: ...
    _groupBy$mcZ$sp__K = typing.TypeVar('_groupBy$mcZ$sp__K')  # <K>
    def groupBy$mcZ$sp(self, key: scala.Function1[typing.Any, _groupBy.mcZ.sp__K], evidence$5: scalan.RType[_groupBy.mcZ.sp__K]) -> 'Coll'[scala.Tuple2[_groupBy.mcZ.sp__K, 'Coll'[typing.Any]]]: ...
    _groupByProjecting__K = typing.TypeVar('_groupByProjecting__K')  # <K>
    _groupByProjecting__V = typing.TypeVar('_groupByProjecting__V')  # <V>
    def groupByProjecting(self, key: scala.Function1[_Coll__A, _groupByProjecting__K], proj: scala.Function1[_Coll__A, _groupByProjecting__V], evidence$6: scalan.RType[_groupByProjecting__K], evidence$7: scalan.RType[_groupByProjecting__V]) -> 'Coll'[scala.Tuple2[_groupByProjecting__K, 'Coll'[_groupByProjecting__V]]]: ...
    _groupByProjecting$mcB$sp__K = typing.TypeVar('_groupByProjecting$mcB$sp__K')  # <K>
    _groupByProjecting$mcB$sp__V = typing.TypeVar('_groupByProjecting$mcB$sp__V')  # <V>
    def groupByProjecting$mcB$sp(self, key: scala.Function1[typing.Any, _groupByProjecting.mcB.sp__K], proj: scala.Function1[typing.Any, _groupByProjecting.mcB.sp__V], evidence$6: scalan.RType[_groupByProjecting.mcB.sp__K], evidence$7: scalan.RType[_groupByProjecting.mcB.sp__V]) -> 'Coll'[scala.Tuple2[_groupByProjecting.mcB.sp__K, 'Coll'[_groupByProjecting.mcB.sp__V]]]: ...
    _groupByProjecting$mcC$sp__K = typing.TypeVar('_groupByProjecting$mcC$sp__K')  # <K>
    _groupByProjecting$mcC$sp__V = typing.TypeVar('_groupByProjecting$mcC$sp__V')  # <V>
    def groupByProjecting$mcC$sp(self, key: scala.Function1[typing.Any, _groupByProjecting.mcC.sp__K], proj: scala.Function1[typing.Any, _groupByProjecting.mcC.sp__V], evidence$6: scalan.RType[_groupByProjecting.mcC.sp__K], evidence$7: scalan.RType[_groupByProjecting.mcC.sp__V]) -> 'Coll'[scala.Tuple2[_groupByProjecting.mcC.sp__K, 'Coll'[_groupByProjecting.mcC.sp__V]]]: ...
    _groupByProjecting$mcD$sp__K = typing.TypeVar('_groupByProjecting$mcD$sp__K')  # <K>
    _groupByProjecting$mcD$sp__V = typing.TypeVar('_groupByProjecting$mcD$sp__V')  # <V>
    def groupByProjecting$mcD$sp(self, key: scala.Function1[typing.Any, _groupByProjecting.mcD.sp__K], proj: scala.Function1[typing.Any, _groupByProjecting.mcD.sp__V], evidence$6: scalan.RType[_groupByProjecting.mcD.sp__K], evidence$7: scalan.RType[_groupByProjecting.mcD.sp__V]) -> 'Coll'[scala.Tuple2[_groupByProjecting.mcD.sp__K, 'Coll'[_groupByProjecting.mcD.sp__V]]]: ...
    _groupByProjecting$mcF$sp__K = typing.TypeVar('_groupByProjecting$mcF$sp__K')  # <K>
    _groupByProjecting$mcF$sp__V = typing.TypeVar('_groupByProjecting$mcF$sp__V')  # <V>
    def groupByProjecting$mcF$sp(self, key: scala.Function1[typing.Any, _groupByProjecting.mcF.sp__K], proj: scala.Function1[typing.Any, _groupByProjecting.mcF.sp__V], evidence$6: scalan.RType[_groupByProjecting.mcF.sp__K], evidence$7: scalan.RType[_groupByProjecting.mcF.sp__V]) -> 'Coll'[scala.Tuple2[_groupByProjecting.mcF.sp__K, 'Coll'[_groupByProjecting.mcF.sp__V]]]: ...
    _groupByProjecting$mcI$sp__K = typing.TypeVar('_groupByProjecting$mcI$sp__K')  # <K>
    _groupByProjecting$mcI$sp__V = typing.TypeVar('_groupByProjecting$mcI$sp__V')  # <V>
    def groupByProjecting$mcI$sp(self, key: scala.Function1[typing.Any, _groupByProjecting.mcI.sp__K], proj: scala.Function1[typing.Any, _groupByProjecting.mcI.sp__V], evidence$6: scalan.RType[_groupByProjecting.mcI.sp__K], evidence$7: scalan.RType[_groupByProjecting.mcI.sp__V]) -> 'Coll'[scala.Tuple2[_groupByProjecting.mcI.sp__K, 'Coll'[_groupByProjecting.mcI.sp__V]]]: ...
    _groupByProjecting$mcJ$sp__K = typing.TypeVar('_groupByProjecting$mcJ$sp__K')  # <K>
    _groupByProjecting$mcJ$sp__V = typing.TypeVar('_groupByProjecting$mcJ$sp__V')  # <V>
    def groupByProjecting$mcJ$sp(self, key: scala.Function1[typing.Any, _groupByProjecting.mcJ.sp__K], proj: scala.Function1[typing.Any, _groupByProjecting.mcJ.sp__V], evidence$6: scalan.RType[_groupByProjecting.mcJ.sp__K], evidence$7: scalan.RType[_groupByProjecting.mcJ.sp__V]) -> 'Coll'[scala.Tuple2[_groupByProjecting.mcJ.sp__K, 'Coll'[_groupByProjecting.mcJ.sp__V]]]: ...
    _groupByProjecting$mcS$sp__K = typing.TypeVar('_groupByProjecting$mcS$sp__K')  # <K>
    _groupByProjecting$mcS$sp__V = typing.TypeVar('_groupByProjecting$mcS$sp__V')  # <V>
    def groupByProjecting$mcS$sp(self, key: scala.Function1[typing.Any, _groupByProjecting.mcS.sp__K], proj: scala.Function1[typing.Any, _groupByProjecting.mcS.sp__V], evidence$6: scalan.RType[_groupByProjecting.mcS.sp__K], evidence$7: scalan.RType[_groupByProjecting.mcS.sp__V]) -> 'Coll'[scala.Tuple2[_groupByProjecting.mcS.sp__K, 'Coll'[_groupByProjecting.mcS.sp__V]]]: ...
    _groupByProjecting$mcV$sp__K = typing.TypeVar('_groupByProjecting$mcV$sp__K')  # <K>
    _groupByProjecting$mcV$sp__V = typing.TypeVar('_groupByProjecting$mcV$sp__V')  # <V>
    def groupByProjecting$mcV$sp(self, key: scala.Function1[scala.runtime.BoxedUnit, _groupByProjecting.mcV.sp__K], proj: scala.Function1[scala.runtime.BoxedUnit, _groupByProjecting.mcV.sp__V], evidence$6: scalan.RType[_groupByProjecting.mcV.sp__K], evidence$7: scalan.RType[_groupByProjecting.mcV.sp__V]) -> 'Coll'[scala.Tuple2[_groupByProjecting.mcV.sp__K, 'Coll'[_groupByProjecting.mcV.sp__V]]]: ...
    _groupByProjecting$mcZ$sp__K = typing.TypeVar('_groupByProjecting$mcZ$sp__K')  # <K>
    _groupByProjecting$mcZ$sp__V = typing.TypeVar('_groupByProjecting$mcZ$sp__V')  # <V>
    def groupByProjecting$mcZ$sp(self, key: scala.Function1[typing.Any, _groupByProjecting.mcZ.sp__K], proj: scala.Function1[typing.Any, _groupByProjecting.mcZ.sp__V], evidence$6: scalan.RType[_groupByProjecting.mcZ.sp__K], evidence$7: scalan.RType[_groupByProjecting.mcZ.sp__V]) -> 'Coll'[scala.Tuple2[_groupByProjecting.mcZ.sp__K, 'Coll'[_groupByProjecting.mcZ.sp__V]]]: ...
    def indexOf(self, elem: _Coll__A, from_: int) -> int: ...
    def indexOf$mcB$sp(self, elem: int, from_: int) -> int: ...
    def indexOf$mcC$sp(self, elem: str, from_: int) -> int: ...
    def indexOf$mcD$sp(self, elem: float, from_: int) -> int: ...
    def indexOf$mcF$sp(self, elem: float, from_: int) -> int: ...
    def indexOf$mcI$sp(self, elem: int, from_: int) -> int: ...
    def indexOf$mcJ$sp(self, elem: int, from_: int) -> int: ...
    def indexOf$mcS$sp(self, elem: int, from_: int) -> int: ...
    def indexOf$mcV$sp(self, elem: scala.runtime.BoxedUnit, from_: int) -> int: ...
    def indexOf$mcZ$sp(self, elem: bool, from_: int) -> int: ...
    def indexWhere(self, p: scala.Function1[_Coll__A, typing.Any], from_: int) -> int: ...
    def indexWhere$mcB$sp(self, p: scala.Function1[typing.Any, typing.Any], from_: int) -> int: ...
    def indexWhere$mcC$sp(self, p: scala.Function1[typing.Any, typing.Any], from_: int) -> int: ...
    def indexWhere$mcD$sp(self, p: scala.Function1[typing.Any, typing.Any], from_: int) -> int: ...
    def indexWhere$mcF$sp(self, p: scala.Function1[typing.Any, typing.Any], from_: int) -> int: ...
    def indexWhere$mcI$sp(self, p: scala.Function1[typing.Any, typing.Any], from_: int) -> int: ...
    def indexWhere$mcJ$sp(self, p: scala.Function1[typing.Any, typing.Any], from_: int) -> int: ...
    def indexWhere$mcS$sp(self, p: scala.Function1[typing.Any, typing.Any], from_: int) -> int: ...
    def indexWhere$mcV$sp(self, p: scala.Function1[scala.runtime.BoxedUnit, typing.Any], from_: int) -> int: ...
    def indexWhere$mcZ$sp(self, p: scala.Function1[typing.Any, typing.Any], from_: int) -> int: ...
    def indices(self) -> 'Coll'[typing.Any]: ...
    def intersect(self, that: 'Coll'[_Coll__A]) -> 'Coll'[_Coll__A]: ...
    def intersect$mcB$sp(self, that: 'Coll'[typing.Any]) -> 'Coll'[typing.Any]: ...
    def intersect$mcC$sp(self, that: 'Coll'[typing.Any]) -> 'Coll'[typing.Any]: ...
    def intersect$mcD$sp(self, that: 'Coll'[typing.Any]) -> 'Coll'[typing.Any]: ...
    def intersect$mcF$sp(self, that: 'Coll'[typing.Any]) -> 'Coll'[typing.Any]: ...
    def intersect$mcI$sp(self, that: 'Coll'[typing.Any]) -> 'Coll'[typing.Any]: ...
    def intersect$mcJ$sp(self, that: 'Coll'[typing.Any]) -> 'Coll'[typing.Any]: ...
    def intersect$mcS$sp(self, that: 'Coll'[typing.Any]) -> 'Coll'[typing.Any]: ...
    def intersect$mcV$sp(self, that: 'Coll'[scala.runtime.BoxedUnit]) -> 'Coll'[scala.runtime.BoxedUnit]: ...
    def intersect$mcZ$sp(self, that: 'Coll'[typing.Any]) -> 'Coll'[typing.Any]: ...
    def isDefinedAt(self, idx: int) -> bool: ...
    def isEmpty(self) -> bool: ...
    def isReplArray(self, len: int, value: _Coll__A) -> bool: ...
    def isReplArray$mcB$sp(self, len: int, value: int) -> bool: ...
    def isReplArray$mcC$sp(self, len: int, value: str) -> bool: ...
    def isReplArray$mcD$sp(self, len: int, value: float) -> bool: ...
    def isReplArray$mcF$sp(self, len: int, value: float) -> bool: ...
    def isReplArray$mcI$sp(self, len: int, value: int) -> bool: ...
    def isReplArray$mcJ$sp(self, len: int, value: int) -> bool: ...
    def isReplArray$mcS$sp(self, len: int, value: int) -> bool: ...
    def isReplArray$mcV$sp(self, len: int, value: scala.runtime.BoxedUnit) -> bool: ...
    def isReplArray$mcZ$sp(self, len: int, value: bool) -> bool: ...
    def isValidIndex(self, i: int) -> bool: ...
    def lastIndexWhere(self, p: scala.Function1[_Coll__A, typing.Any], end: int) -> int: ...
    def lastIndexWhere$mcB$sp(self, p: scala.Function1[typing.Any, typing.Any], end: int) -> int: ...
    def lastIndexWhere$mcC$sp(self, p: scala.Function1[typing.Any, typing.Any], end: int) -> int: ...
    def lastIndexWhere$mcD$sp(self, p: scala.Function1[typing.Any, typing.Any], end: int) -> int: ...
    def lastIndexWhere$mcF$sp(self, p: scala.Function1[typing.Any, typing.Any], end: int) -> int: ...
    def lastIndexWhere$mcI$sp(self, p: scala.Function1[typing.Any, typing.Any], end: int) -> int: ...
    def lastIndexWhere$mcJ$sp(self, p: scala.Function1[typing.Any, typing.Any], end: int) -> int: ...
    def lastIndexWhere$mcS$sp(self, p: scala.Function1[typing.Any, typing.Any], end: int) -> int: ...
    def lastIndexWhere$mcV$sp(self, p: scala.Function1[scala.runtime.BoxedUnit, typing.Any], end: int) -> int: ...
    def lastIndexWhere$mcZ$sp(self, p: scala.Function1[typing.Any, typing.Any], end: int) -> int: ...
    def length(self) -> int: ...
    _map__B = typing.TypeVar('_map__B')  # <B>
    def map(self, f: scala.Function1[_Coll__A, _map__B], evidence$1: scalan.RType[_map__B]) -> 'Coll'[_map__B]: ...
    def map$mBc$sp(self, f: scala.Function1[_Coll__A, typing.Any], evidence$1: scalan.RType[typing.Any]) -> 'Coll'[typing.Any]: ...
    def map$mBcB$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> 'Coll'[typing.Any]: ...
    def map$mBcC$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> 'Coll'[typing.Any]: ...
    def map$mBcD$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> 'Coll'[typing.Any]: ...
    def map$mBcF$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> 'Coll'[typing.Any]: ...
    def map$mBcI$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> 'Coll'[typing.Any]: ...
    def map$mBcJ$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> 'Coll'[typing.Any]: ...
    def map$mBcS$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> 'Coll'[typing.Any]: ...
    def map$mBcV$sp(self, f: scala.Function1[scala.runtime.BoxedUnit, typing.Any], evidence$1: scalan.RType[typing.Any]) -> 'Coll'[typing.Any]: ...
    def map$mBcZ$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> 'Coll'[typing.Any]: ...
    def map$mCc$sp(self, f: scala.Function1[_Coll__A, typing.Any], evidence$1: scalan.RType[typing.Any]) -> 'Coll'[typing.Any]: ...
    def map$mCcB$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> 'Coll'[typing.Any]: ...
    def map$mCcC$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> 'Coll'[typing.Any]: ...
    def map$mCcD$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> 'Coll'[typing.Any]: ...
    def map$mCcF$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> 'Coll'[typing.Any]: ...
    def map$mCcI$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> 'Coll'[typing.Any]: ...
    def map$mCcJ$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> 'Coll'[typing.Any]: ...
    def map$mCcS$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> 'Coll'[typing.Any]: ...
    def map$mCcV$sp(self, f: scala.Function1[scala.runtime.BoxedUnit, typing.Any], evidence$1: scalan.RType[typing.Any]) -> 'Coll'[typing.Any]: ...
    def map$mCcZ$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> 'Coll'[typing.Any]: ...
    def map$mDc$sp(self, f: scala.Function1[_Coll__A, typing.Any], evidence$1: scalan.RType[typing.Any]) -> 'Coll'[typing.Any]: ...
    def map$mDcB$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> 'Coll'[typing.Any]: ...
    def map$mDcC$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> 'Coll'[typing.Any]: ...
    def map$mDcD$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> 'Coll'[typing.Any]: ...
    def map$mDcF$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> 'Coll'[typing.Any]: ...
    def map$mDcI$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> 'Coll'[typing.Any]: ...
    def map$mDcJ$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> 'Coll'[typing.Any]: ...
    def map$mDcS$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> 'Coll'[typing.Any]: ...
    def map$mDcV$sp(self, f: scala.Function1[scala.runtime.BoxedUnit, typing.Any], evidence$1: scalan.RType[typing.Any]) -> 'Coll'[typing.Any]: ...
    def map$mDcZ$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> 'Coll'[typing.Any]: ...
    def map$mFc$sp(self, f: scala.Function1[_Coll__A, typing.Any], evidence$1: scalan.RType[typing.Any]) -> 'Coll'[typing.Any]: ...
    def map$mFcB$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> 'Coll'[typing.Any]: ...
    def map$mFcC$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> 'Coll'[typing.Any]: ...
    def map$mFcD$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> 'Coll'[typing.Any]: ...
    def map$mFcF$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> 'Coll'[typing.Any]: ...
    def map$mFcI$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> 'Coll'[typing.Any]: ...
    def map$mFcJ$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> 'Coll'[typing.Any]: ...
    def map$mFcS$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> 'Coll'[typing.Any]: ...
    def map$mFcV$sp(self, f: scala.Function1[scala.runtime.BoxedUnit, typing.Any], evidence$1: scalan.RType[typing.Any]) -> 'Coll'[typing.Any]: ...
    def map$mFcZ$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> 'Coll'[typing.Any]: ...
    def map$mIc$sp(self, f: scala.Function1[_Coll__A, typing.Any], evidence$1: scalan.RType[typing.Any]) -> 'Coll'[typing.Any]: ...
    def map$mIcB$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> 'Coll'[typing.Any]: ...
    def map$mIcC$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> 'Coll'[typing.Any]: ...
    def map$mIcD$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> 'Coll'[typing.Any]: ...
    def map$mIcF$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> 'Coll'[typing.Any]: ...
    def map$mIcI$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> 'Coll'[typing.Any]: ...
    def map$mIcJ$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> 'Coll'[typing.Any]: ...
    def map$mIcS$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> 'Coll'[typing.Any]: ...
    def map$mIcV$sp(self, f: scala.Function1[scala.runtime.BoxedUnit, typing.Any], evidence$1: scalan.RType[typing.Any]) -> 'Coll'[typing.Any]: ...
    def map$mIcZ$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> 'Coll'[typing.Any]: ...
    def map$mJc$sp(self, f: scala.Function1[_Coll__A, typing.Any], evidence$1: scalan.RType[typing.Any]) -> 'Coll'[typing.Any]: ...
    def map$mJcB$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> 'Coll'[typing.Any]: ...
    def map$mJcC$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> 'Coll'[typing.Any]: ...
    def map$mJcD$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> 'Coll'[typing.Any]: ...
    def map$mJcF$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> 'Coll'[typing.Any]: ...
    def map$mJcI$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> 'Coll'[typing.Any]: ...
    def map$mJcJ$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> 'Coll'[typing.Any]: ...
    def map$mJcS$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> 'Coll'[typing.Any]: ...
    def map$mJcV$sp(self, f: scala.Function1[scala.runtime.BoxedUnit, typing.Any], evidence$1: scalan.RType[typing.Any]) -> 'Coll'[typing.Any]: ...
    def map$mJcZ$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> 'Coll'[typing.Any]: ...
    def map$mSc$sp(self, f: scala.Function1[_Coll__A, typing.Any], evidence$1: scalan.RType[typing.Any]) -> 'Coll'[typing.Any]: ...
    def map$mScB$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> 'Coll'[typing.Any]: ...
    def map$mScC$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> 'Coll'[typing.Any]: ...
    def map$mScD$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> 'Coll'[typing.Any]: ...
    def map$mScF$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> 'Coll'[typing.Any]: ...
    def map$mScI$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> 'Coll'[typing.Any]: ...
    def map$mScJ$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> 'Coll'[typing.Any]: ...
    def map$mScS$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> 'Coll'[typing.Any]: ...
    def map$mScV$sp(self, f: scala.Function1[scala.runtime.BoxedUnit, typing.Any], evidence$1: scalan.RType[typing.Any]) -> 'Coll'[typing.Any]: ...
    def map$mScZ$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> 'Coll'[typing.Any]: ...
    def map$mVc$sp(self, f: scala.Function1[_Coll__A, scala.runtime.BoxedUnit], evidence$1: scalan.RType[scala.runtime.BoxedUnit]) -> 'Coll'[scala.runtime.BoxedUnit]: ...
    def map$mVcB$sp(self, f: scala.Function1[typing.Any, scala.runtime.BoxedUnit], evidence$1: scalan.RType[scala.runtime.BoxedUnit]) -> 'Coll'[scala.runtime.BoxedUnit]: ...
    def map$mVcC$sp(self, f: scala.Function1[typing.Any, scala.runtime.BoxedUnit], evidence$1: scalan.RType[scala.runtime.BoxedUnit]) -> 'Coll'[scala.runtime.BoxedUnit]: ...
    def map$mVcD$sp(self, f: scala.Function1[typing.Any, scala.runtime.BoxedUnit], evidence$1: scalan.RType[scala.runtime.BoxedUnit]) -> 'Coll'[scala.runtime.BoxedUnit]: ...
    def map$mVcF$sp(self, f: scala.Function1[typing.Any, scala.runtime.BoxedUnit], evidence$1: scalan.RType[scala.runtime.BoxedUnit]) -> 'Coll'[scala.runtime.BoxedUnit]: ...
    def map$mVcI$sp(self, f: scala.Function1[typing.Any, scala.runtime.BoxedUnit], evidence$1: scalan.RType[scala.runtime.BoxedUnit]) -> 'Coll'[scala.runtime.BoxedUnit]: ...
    def map$mVcJ$sp(self, f: scala.Function1[typing.Any, scala.runtime.BoxedUnit], evidence$1: scalan.RType[scala.runtime.BoxedUnit]) -> 'Coll'[scala.runtime.BoxedUnit]: ...
    def map$mVcS$sp(self, f: scala.Function1[typing.Any, scala.runtime.BoxedUnit], evidence$1: scalan.RType[scala.runtime.BoxedUnit]) -> 'Coll'[scala.runtime.BoxedUnit]: ...
    def map$mVcV$sp(self, f: scala.Function1[scala.runtime.BoxedUnit, scala.runtime.BoxedUnit], evidence$1: scalan.RType[scala.runtime.BoxedUnit]) -> 'Coll'[scala.runtime.BoxedUnit]: ...
    def map$mVcZ$sp(self, f: scala.Function1[typing.Any, scala.runtime.BoxedUnit], evidence$1: scalan.RType[scala.runtime.BoxedUnit]) -> 'Coll'[scala.runtime.BoxedUnit]: ...
    def map$mZc$sp(self, f: scala.Function1[_Coll__A, typing.Any], evidence$1: scalan.RType[typing.Any]) -> 'Coll'[typing.Any]: ...
    def map$mZcB$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> 'Coll'[typing.Any]: ...
    def map$mZcC$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> 'Coll'[typing.Any]: ...
    def map$mZcD$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> 'Coll'[typing.Any]: ...
    def map$mZcF$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> 'Coll'[typing.Any]: ...
    def map$mZcI$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> 'Coll'[typing.Any]: ...
    def map$mZcJ$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> 'Coll'[typing.Any]: ...
    def map$mZcS$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> 'Coll'[typing.Any]: ...
    def map$mZcV$sp(self, f: scala.Function1[scala.runtime.BoxedUnit, typing.Any], evidence$1: scalan.RType[typing.Any]) -> 'Coll'[typing.Any]: ...
    def map$mZcZ$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> 'Coll'[typing.Any]: ...
    _map$mcB$sp__B = typing.TypeVar('_map$mcB$sp__B')  # <B>
    def map$mcB$sp(self, f: scala.Function1[typing.Any, _map.mcB.sp__B], evidence$1: scalan.RType[_map.mcB.sp__B]) -> 'Coll'[_map.mcB.sp__B]: ...
    _map$mcC$sp__B = typing.TypeVar('_map$mcC$sp__B')  # <B>
    def map$mcC$sp(self, f: scala.Function1[typing.Any, _map.mcC.sp__B], evidence$1: scalan.RType[_map.mcC.sp__B]) -> 'Coll'[_map.mcC.sp__B]: ...
    _map$mcD$sp__B = typing.TypeVar('_map$mcD$sp__B')  # <B>
    def map$mcD$sp(self, f: scala.Function1[typing.Any, _map.mcD.sp__B], evidence$1: scalan.RType[_map.mcD.sp__B]) -> 'Coll'[_map.mcD.sp__B]: ...
    _map$mcF$sp__B = typing.TypeVar('_map$mcF$sp__B')  # <B>
    def map$mcF$sp(self, f: scala.Function1[typing.Any, _map.mcF.sp__B], evidence$1: scalan.RType[_map.mcF.sp__B]) -> 'Coll'[_map.mcF.sp__B]: ...
    _map$mcI$sp__B = typing.TypeVar('_map$mcI$sp__B')  # <B>
    def map$mcI$sp(self, f: scala.Function1[typing.Any, _map.mcI.sp__B], evidence$1: scalan.RType[_map.mcI.sp__B]) -> 'Coll'[_map.mcI.sp__B]: ...
    _map$mcJ$sp__B = typing.TypeVar('_map$mcJ$sp__B')  # <B>
    def map$mcJ$sp(self, f: scala.Function1[typing.Any, _map.mcJ.sp__B], evidence$1: scalan.RType[_map.mcJ.sp__B]) -> 'Coll'[_map.mcJ.sp__B]: ...
    _map$mcS$sp__B = typing.TypeVar('_map$mcS$sp__B')  # <B>
    def map$mcS$sp(self, f: scala.Function1[typing.Any, _map.mcS.sp__B], evidence$1: scalan.RType[_map.mcS.sp__B]) -> 'Coll'[_map.mcS.sp__B]: ...
    _map$mcV$sp__B = typing.TypeVar('_map$mcV$sp__B')  # <B>
    def map$mcV$sp(self, f: scala.Function1[scala.runtime.BoxedUnit, _map.mcV.sp__B], evidence$1: scalan.RType[_map.mcV.sp__B]) -> 'Coll'[_map.mcV.sp__B]: ...
    _map$mcZ$sp__B = typing.TypeVar('_map$mcZ$sp__B')  # <B>
    def map$mcZ$sp(self, f: scala.Function1[typing.Any, _map.mcZ.sp__B], evidence$1: scalan.RType[_map.mcZ.sp__B]) -> 'Coll'[_map.mcZ.sp__B]: ...
    _mapReduce__K = typing.TypeVar('_mapReduce__K')  # <K>
    _mapReduce__V = typing.TypeVar('_mapReduce__V')  # <V>
    def mapReduce(self, m: scala.Function1[_Coll__A, scala.Tuple2[_mapReduce__K, _mapReduce__V]], r: scala.Function1[scala.Tuple2[_mapReduce__V, _mapReduce__V], _mapReduce__V], evidence$3: scalan.RType[_mapReduce__K], evidence$4: scalan.RType[_mapReduce__V]) -> 'Coll'[scala.Tuple2[_mapReduce__K, _mapReduce__V]]: ...
    _mapReduce$mcB$sp__K = typing.TypeVar('_mapReduce$mcB$sp__K')  # <K>
    _mapReduce$mcB$sp__V = typing.TypeVar('_mapReduce$mcB$sp__V')  # <V>
    def mapReduce$mcB$sp(self, m: scala.Function1[typing.Any, scala.Tuple2[_mapReduce.mcB.sp__K, _mapReduce.mcB.sp__V]], r: scala.Function1[scala.Tuple2[_mapReduce.mcB.sp__V, _mapReduce.mcB.sp__V], _mapReduce.mcB.sp__V], evidence$3: scalan.RType[_mapReduce.mcB.sp__K], evidence$4: scalan.RType[_mapReduce.mcB.sp__V]) -> 'Coll'[scala.Tuple2[_mapReduce.mcB.sp__K, _mapReduce.mcB.sp__V]]: ...
    _mapReduce$mcC$sp__K = typing.TypeVar('_mapReduce$mcC$sp__K')  # <K>
    _mapReduce$mcC$sp__V = typing.TypeVar('_mapReduce$mcC$sp__V')  # <V>
    def mapReduce$mcC$sp(self, m: scala.Function1[typing.Any, scala.Tuple2[_mapReduce.mcC.sp__K, _mapReduce.mcC.sp__V]], r: scala.Function1[scala.Tuple2[_mapReduce.mcC.sp__V, _mapReduce.mcC.sp__V], _mapReduce.mcC.sp__V], evidence$3: scalan.RType[_mapReduce.mcC.sp__K], evidence$4: scalan.RType[_mapReduce.mcC.sp__V]) -> 'Coll'[scala.Tuple2[_mapReduce.mcC.sp__K, _mapReduce.mcC.sp__V]]: ...
    _mapReduce$mcD$sp__K = typing.TypeVar('_mapReduce$mcD$sp__K')  # <K>
    _mapReduce$mcD$sp__V = typing.TypeVar('_mapReduce$mcD$sp__V')  # <V>
    def mapReduce$mcD$sp(self, m: scala.Function1[typing.Any, scala.Tuple2[_mapReduce.mcD.sp__K, _mapReduce.mcD.sp__V]], r: scala.Function1[scala.Tuple2[_mapReduce.mcD.sp__V, _mapReduce.mcD.sp__V], _mapReduce.mcD.sp__V], evidence$3: scalan.RType[_mapReduce.mcD.sp__K], evidence$4: scalan.RType[_mapReduce.mcD.sp__V]) -> 'Coll'[scala.Tuple2[_mapReduce.mcD.sp__K, _mapReduce.mcD.sp__V]]: ...
    _mapReduce$mcF$sp__K = typing.TypeVar('_mapReduce$mcF$sp__K')  # <K>
    _mapReduce$mcF$sp__V = typing.TypeVar('_mapReduce$mcF$sp__V')  # <V>
    def mapReduce$mcF$sp(self, m: scala.Function1[typing.Any, scala.Tuple2[_mapReduce.mcF.sp__K, _mapReduce.mcF.sp__V]], r: scala.Function1[scala.Tuple2[_mapReduce.mcF.sp__V, _mapReduce.mcF.sp__V], _mapReduce.mcF.sp__V], evidence$3: scalan.RType[_mapReduce.mcF.sp__K], evidence$4: scalan.RType[_mapReduce.mcF.sp__V]) -> 'Coll'[scala.Tuple2[_mapReduce.mcF.sp__K, _mapReduce.mcF.sp__V]]: ...
    _mapReduce$mcI$sp__K = typing.TypeVar('_mapReduce$mcI$sp__K')  # <K>
    _mapReduce$mcI$sp__V = typing.TypeVar('_mapReduce$mcI$sp__V')  # <V>
    def mapReduce$mcI$sp(self, m: scala.Function1[typing.Any, scala.Tuple2[_mapReduce.mcI.sp__K, _mapReduce.mcI.sp__V]], r: scala.Function1[scala.Tuple2[_mapReduce.mcI.sp__V, _mapReduce.mcI.sp__V], _mapReduce.mcI.sp__V], evidence$3: scalan.RType[_mapReduce.mcI.sp__K], evidence$4: scalan.RType[_mapReduce.mcI.sp__V]) -> 'Coll'[scala.Tuple2[_mapReduce.mcI.sp__K, _mapReduce.mcI.sp__V]]: ...
    _mapReduce$mcJ$sp__K = typing.TypeVar('_mapReduce$mcJ$sp__K')  # <K>
    _mapReduce$mcJ$sp__V = typing.TypeVar('_mapReduce$mcJ$sp__V')  # <V>
    def mapReduce$mcJ$sp(self, m: scala.Function1[typing.Any, scala.Tuple2[_mapReduce.mcJ.sp__K, _mapReduce.mcJ.sp__V]], r: scala.Function1[scala.Tuple2[_mapReduce.mcJ.sp__V, _mapReduce.mcJ.sp__V], _mapReduce.mcJ.sp__V], evidence$3: scalan.RType[_mapReduce.mcJ.sp__K], evidence$4: scalan.RType[_mapReduce.mcJ.sp__V]) -> 'Coll'[scala.Tuple2[_mapReduce.mcJ.sp__K, _mapReduce.mcJ.sp__V]]: ...
    _mapReduce$mcS$sp__K = typing.TypeVar('_mapReduce$mcS$sp__K')  # <K>
    _mapReduce$mcS$sp__V = typing.TypeVar('_mapReduce$mcS$sp__V')  # <V>
    def mapReduce$mcS$sp(self, m: scala.Function1[typing.Any, scala.Tuple2[_mapReduce.mcS.sp__K, _mapReduce.mcS.sp__V]], r: scala.Function1[scala.Tuple2[_mapReduce.mcS.sp__V, _mapReduce.mcS.sp__V], _mapReduce.mcS.sp__V], evidence$3: scalan.RType[_mapReduce.mcS.sp__K], evidence$4: scalan.RType[_mapReduce.mcS.sp__V]) -> 'Coll'[scala.Tuple2[_mapReduce.mcS.sp__K, _mapReduce.mcS.sp__V]]: ...
    _mapReduce$mcV$sp__K = typing.TypeVar('_mapReduce$mcV$sp__K')  # <K>
    _mapReduce$mcV$sp__V = typing.TypeVar('_mapReduce$mcV$sp__V')  # <V>
    def mapReduce$mcV$sp(self, m: scala.Function1[scala.runtime.BoxedUnit, scala.Tuple2[_mapReduce.mcV.sp__K, _mapReduce.mcV.sp__V]], r: scala.Function1[scala.Tuple2[_mapReduce.mcV.sp__V, _mapReduce.mcV.sp__V], _mapReduce.mcV.sp__V], evidence$3: scalan.RType[_mapReduce.mcV.sp__K], evidence$4: scalan.RType[_mapReduce.mcV.sp__V]) -> 'Coll'[scala.Tuple2[_mapReduce.mcV.sp__K, _mapReduce.mcV.sp__V]]: ...
    _mapReduce$mcZ$sp__K = typing.TypeVar('_mapReduce$mcZ$sp__K')  # <K>
    _mapReduce$mcZ$sp__V = typing.TypeVar('_mapReduce$mcZ$sp__V')  # <V>
    def mapReduce$mcZ$sp(self, m: scala.Function1[typing.Any, scala.Tuple2[_mapReduce.mcZ.sp__K, _mapReduce.mcZ.sp__V]], r: scala.Function1[scala.Tuple2[_mapReduce.mcZ.sp__V, _mapReduce.mcZ.sp__V], _mapReduce.mcZ.sp__V], evidence$3: scalan.RType[_mapReduce.mcZ.sp__K], evidence$4: scalan.RType[_mapReduce.mcZ.sp__V]) -> 'Coll'[scala.Tuple2[_mapReduce.mcZ.sp__K, _mapReduce.mcZ.sp__V]]: ...
    def nonEmpty(self) -> bool: ...
    def partition(self, pred: scala.Function1[_Coll__A, typing.Any]) -> scala.Tuple2['Coll'[_Coll__A], 'Coll'[_Coll__A]]: ...
    def partition$mcB$sp(self, pred: scala.Function1[typing.Any, typing.Any]) -> scala.Tuple2['Coll'[typing.Any], 'Coll'[typing.Any]]: ...
    def partition$mcC$sp(self, pred: scala.Function1[typing.Any, typing.Any]) -> scala.Tuple2['Coll'[typing.Any], 'Coll'[typing.Any]]: ...
    def partition$mcD$sp(self, pred: scala.Function1[typing.Any, typing.Any]) -> scala.Tuple2['Coll'[typing.Any], 'Coll'[typing.Any]]: ...
    def partition$mcF$sp(self, pred: scala.Function1[typing.Any, typing.Any]) -> scala.Tuple2['Coll'[typing.Any], 'Coll'[typing.Any]]: ...
    def partition$mcI$sp(self, pred: scala.Function1[typing.Any, typing.Any]) -> scala.Tuple2['Coll'[typing.Any], 'Coll'[typing.Any]]: ...
    def partition$mcJ$sp(self, pred: scala.Function1[typing.Any, typing.Any]) -> scala.Tuple2['Coll'[typing.Any], 'Coll'[typing.Any]]: ...
    def partition$mcS$sp(self, pred: scala.Function1[typing.Any, typing.Any]) -> scala.Tuple2['Coll'[typing.Any], 'Coll'[typing.Any]]: ...
    def partition$mcV$sp(self, pred: scala.Function1[scala.runtime.BoxedUnit, typing.Any]) -> scala.Tuple2['Coll'[scala.runtime.BoxedUnit], 'Coll'[scala.runtime.BoxedUnit]]: ...
    def partition$mcZ$sp(self, pred: scala.Function1[typing.Any, typing.Any]) -> scala.Tuple2['Coll'[typing.Any], 'Coll'[typing.Any]]: ...
    def patch(self, from_: int, patch: 'Coll'[_Coll__A], replaced: int) -> 'Coll'[_Coll__A]: ...
    def patch$mcB$sp(self, from_: int, patch: 'Coll'[typing.Any], replaced: int) -> 'Coll'[typing.Any]: ...
    def patch$mcC$sp(self, from_: int, patch: 'Coll'[typing.Any], replaced: int) -> 'Coll'[typing.Any]: ...
    def patch$mcD$sp(self, from_: int, patch: 'Coll'[typing.Any], replaced: int) -> 'Coll'[typing.Any]: ...
    def patch$mcF$sp(self, from_: int, patch: 'Coll'[typing.Any], replaced: int) -> 'Coll'[typing.Any]: ...
    def patch$mcI$sp(self, from_: int, patch: 'Coll'[typing.Any], replaced: int) -> 'Coll'[typing.Any]: ...
    def patch$mcJ$sp(self, from_: int, patch: 'Coll'[typing.Any], replaced: int) -> 'Coll'[typing.Any]: ...
    def patch$mcS$sp(self, from_: int, patch: 'Coll'[typing.Any], replaced: int) -> 'Coll'[typing.Any]: ...
    def patch$mcV$sp(self, from_: int, patch: 'Coll'[scala.runtime.BoxedUnit], replaced: int) -> 'Coll'[scala.runtime.BoxedUnit]: ...
    def patch$mcZ$sp(self, from_: int, patch: 'Coll'[typing.Any], replaced: int) -> 'Coll'[typing.Any]: ...
    def reverse(self) -> 'Coll'[_Coll__A]: ...
    def reverse$mcB$sp(self) -> 'Coll'[typing.Any]: ...
    def reverse$mcC$sp(self) -> 'Coll'[typing.Any]: ...
    def reverse$mcD$sp(self) -> 'Coll'[typing.Any]: ...
    def reverse$mcF$sp(self) -> 'Coll'[typing.Any]: ...
    def reverse$mcI$sp(self) -> 'Coll'[typing.Any]: ...
    def reverse$mcJ$sp(self) -> 'Coll'[typing.Any]: ...
    def reverse$mcS$sp(self) -> 'Coll'[typing.Any]: ...
    def reverse$mcV$sp(self) -> 'Coll'[scala.runtime.BoxedUnit]: ...
    def reverse$mcZ$sp(self) -> 'Coll'[typing.Any]: ...
    def segmentLength(self, p: scala.Function1[_Coll__A, typing.Any], from_: int) -> int: ...
    def segmentLength$mcB$sp(self, p: scala.Function1[typing.Any, typing.Any], from_: int) -> int: ...
    def segmentLength$mcC$sp(self, p: scala.Function1[typing.Any, typing.Any], from_: int) -> int: ...
    def segmentLength$mcD$sp(self, p: scala.Function1[typing.Any, typing.Any], from_: int) -> int: ...
    def segmentLength$mcF$sp(self, p: scala.Function1[typing.Any, typing.Any], from_: int) -> int: ...
    def segmentLength$mcI$sp(self, p: scala.Function1[typing.Any, typing.Any], from_: int) -> int: ...
    def segmentLength$mcJ$sp(self, p: scala.Function1[typing.Any, typing.Any], from_: int) -> int: ...
    def segmentLength$mcS$sp(self, p: scala.Function1[typing.Any, typing.Any], from_: int) -> int: ...
    def segmentLength$mcV$sp(self, p: scala.Function1[scala.runtime.BoxedUnit, typing.Any], from_: int) -> int: ...
    def segmentLength$mcZ$sp(self, p: scala.Function1[typing.Any, typing.Any], from_: int) -> int: ...
    def size(self) -> int: ...
    def slice(self, from_: int, until: int) -> 'Coll'[_Coll__A]: ...
    def slice$mcB$sp(self, from_: int, until: int) -> 'Coll'[typing.Any]: ...
    def slice$mcC$sp(self, from_: int, until: int) -> 'Coll'[typing.Any]: ...
    def slice$mcD$sp(self, from_: int, until: int) -> 'Coll'[typing.Any]: ...
    def slice$mcF$sp(self, from_: int, until: int) -> 'Coll'[typing.Any]: ...
    def slice$mcI$sp(self, from_: int, until: int) -> 'Coll'[typing.Any]: ...
    def slice$mcJ$sp(self, from_: int, until: int) -> 'Coll'[typing.Any]: ...
    def slice$mcS$sp(self, from_: int, until: int) -> 'Coll'[typing.Any]: ...
    def slice$mcV$sp(self, from_: int, until: int) -> 'Coll'[scala.runtime.BoxedUnit]: ...
    def slice$mcZ$sp(self, from_: int, until: int) -> 'Coll'[typing.Any]: ...
    def sum(self, m: 'Monoid'[_Coll__A]) -> _Coll__A: ...
    def sum$mcB$sp(self, m: 'Monoid'[typing.Any]) -> int: ...
    def sum$mcC$sp(self, m: 'Monoid'[typing.Any]) -> str: ...
    def sum$mcD$sp(self, m: 'Monoid'[typing.Any]) -> float: ...
    def sum$mcF$sp(self, m: 'Monoid'[typing.Any]) -> float: ...
    def sum$mcI$sp(self, m: 'Monoid'[typing.Any]) -> int: ...
    def sum$mcJ$sp(self, m: 'Monoid'[typing.Any]) -> int: ...
    def sum$mcS$sp(self, m: 'Monoid'[typing.Any]) -> int: ...
    def sum$mcV$sp(self, m: 'Monoid'[scala.runtime.BoxedUnit]) -> None: ...
    def sum$mcZ$sp(self, m: 'Monoid'[typing.Any]) -> bool: ...
    def tItem(self) -> scalan.RType[_Coll__A]: ...
    def take(self, n: int) -> 'Coll'[_Coll__A]: ...
    def take$mcB$sp(self, n: int) -> 'Coll'[typing.Any]: ...
    def take$mcC$sp(self, n: int) -> 'Coll'[typing.Any]: ...
    def take$mcD$sp(self, n: int) -> 'Coll'[typing.Any]: ...
    def take$mcF$sp(self, n: int) -> 'Coll'[typing.Any]: ...
    def take$mcI$sp(self, n: int) -> 'Coll'[typing.Any]: ...
    def take$mcJ$sp(self, n: int) -> 'Coll'[typing.Any]: ...
    def take$mcS$sp(self, n: int) -> 'Coll'[typing.Any]: ...
    def take$mcV$sp(self, n: int) -> 'Coll'[scala.runtime.BoxedUnit]: ...
    def take$mcZ$sp(self, n: int) -> 'Coll'[typing.Any]: ...
    def toArray(self) -> typing.Any: ...
    def toArray$mcB$sp(self) -> typing.List[int]: ...
    def toArray$mcC$sp(self) -> typing.List[str]: ...
    def toArray$mcD$sp(self) -> typing.List[float]: ...
    def toArray$mcF$sp(self) -> typing.List[float]: ...
    def toArray$mcI$sp(self) -> typing.List[int]: ...
    def toArray$mcJ$sp(self) -> typing.List[int]: ...
    def toArray$mcS$sp(self) -> typing.List[int]: ...
    def toArray$mcV$sp(self) -> typing.List[scala.runtime.BoxedUnit]: ...
    def toArray$mcZ$sp(self) -> typing.List[bool]: ...
    _toMap__T = typing.TypeVar('_toMap__T')  # <T>
    _toMap__U = typing.TypeVar('_toMap__U')  # <U>
    def toMap(self, ev: scala.Predef..less.colon.less[_Coll__A, scala.Tuple2[_toMap__T, _toMap__U]]) -> scala.collection.immutable.Map[_toMap__T, _toMap__U]: ...
    def toString(self) -> str: ...
    def unionSet(self, that: 'Coll'[_Coll__A]) -> 'Coll'[_Coll__A]: ...
    def unionSet$mcB$sp(self, that: 'Coll'[typing.Any]) -> 'Coll'[typing.Any]: ...
    def unionSet$mcC$sp(self, that: 'Coll'[typing.Any]) -> 'Coll'[typing.Any]: ...
    def unionSet$mcD$sp(self, that: 'Coll'[typing.Any]) -> 'Coll'[typing.Any]: ...
    def unionSet$mcF$sp(self, that: 'Coll'[typing.Any]) -> 'Coll'[typing.Any]: ...
    def unionSet$mcI$sp(self, that: 'Coll'[typing.Any]) -> 'Coll'[typing.Any]: ...
    def unionSet$mcJ$sp(self, that: 'Coll'[typing.Any]) -> 'Coll'[typing.Any]: ...
    def unionSet$mcS$sp(self, that: 'Coll'[typing.Any]) -> 'Coll'[typing.Any]: ...
    def unionSet$mcV$sp(self, that: 'Coll'[scala.runtime.BoxedUnit]) -> 'Coll'[scala.runtime.BoxedUnit]: ...
    def unionSet$mcZ$sp(self, that: 'Coll'[typing.Any]) -> 'Coll'[typing.Any]: ...
    _unionSetByKey__T = typing.TypeVar('_unionSetByKey__T')  # <T>
    _unionSetByKey__U = typing.TypeVar('_unionSetByKey__U')  # <U>
    def unionSetByKey(self, that: 'Coll'[_Coll__A], ev: scala.Predef..less.colon.less[_Coll__A, scala.Tuple2[_unionSetByKey__T, _unionSetByKey__U]]) -> 'Coll'[_Coll__A]: ...
    _unionSetByKey$mcB$sp__T = typing.TypeVar('_unionSetByKey$mcB$sp__T')  # <T>
    _unionSetByKey$mcB$sp__U = typing.TypeVar('_unionSetByKey$mcB$sp__U')  # <U>
    def unionSetByKey$mcB$sp(self, that: 'Coll'[typing.Any], ev: scala.Predef..less.colon.less[typing.Any, scala.Tuple2[_unionSetByKey.mcB.sp__T, _unionSetByKey.mcB.sp__U]]) -> 'Coll'[typing.Any]: ...
    _unionSetByKey$mcC$sp__T = typing.TypeVar('_unionSetByKey$mcC$sp__T')  # <T>
    _unionSetByKey$mcC$sp__U = typing.TypeVar('_unionSetByKey$mcC$sp__U')  # <U>
    def unionSetByKey$mcC$sp(self, that: 'Coll'[typing.Any], ev: scala.Predef..less.colon.less[typing.Any, scala.Tuple2[_unionSetByKey.mcC.sp__T, _unionSetByKey.mcC.sp__U]]) -> 'Coll'[typing.Any]: ...
    _unionSetByKey$mcD$sp__T = typing.TypeVar('_unionSetByKey$mcD$sp__T')  # <T>
    _unionSetByKey$mcD$sp__U = typing.TypeVar('_unionSetByKey$mcD$sp__U')  # <U>
    def unionSetByKey$mcD$sp(self, that: 'Coll'[typing.Any], ev: scala.Predef..less.colon.less[typing.Any, scala.Tuple2[_unionSetByKey.mcD.sp__T, _unionSetByKey.mcD.sp__U]]) -> 'Coll'[typing.Any]: ...
    _unionSetByKey$mcF$sp__T = typing.TypeVar('_unionSetByKey$mcF$sp__T')  # <T>
    _unionSetByKey$mcF$sp__U = typing.TypeVar('_unionSetByKey$mcF$sp__U')  # <U>
    def unionSetByKey$mcF$sp(self, that: 'Coll'[typing.Any], ev: scala.Predef..less.colon.less[typing.Any, scala.Tuple2[_unionSetByKey.mcF.sp__T, _unionSetByKey.mcF.sp__U]]) -> 'Coll'[typing.Any]: ...
    _unionSetByKey$mcI$sp__T = typing.TypeVar('_unionSetByKey$mcI$sp__T')  # <T>
    _unionSetByKey$mcI$sp__U = typing.TypeVar('_unionSetByKey$mcI$sp__U')  # <U>
    def unionSetByKey$mcI$sp(self, that: 'Coll'[typing.Any], ev: scala.Predef..less.colon.less[typing.Any, scala.Tuple2[_unionSetByKey.mcI.sp__T, _unionSetByKey.mcI.sp__U]]) -> 'Coll'[typing.Any]: ...
    _unionSetByKey$mcJ$sp__T = typing.TypeVar('_unionSetByKey$mcJ$sp__T')  # <T>
    _unionSetByKey$mcJ$sp__U = typing.TypeVar('_unionSetByKey$mcJ$sp__U')  # <U>
    def unionSetByKey$mcJ$sp(self, that: 'Coll'[typing.Any], ev: scala.Predef..less.colon.less[typing.Any, scala.Tuple2[_unionSetByKey.mcJ.sp__T, _unionSetByKey.mcJ.sp__U]]) -> 'Coll'[typing.Any]: ...
    _unionSetByKey$mcS$sp__T = typing.TypeVar('_unionSetByKey$mcS$sp__T')  # <T>
    _unionSetByKey$mcS$sp__U = typing.TypeVar('_unionSetByKey$mcS$sp__U')  # <U>
    def unionSetByKey$mcS$sp(self, that: 'Coll'[typing.Any], ev: scala.Predef..less.colon.less[typing.Any, scala.Tuple2[_unionSetByKey.mcS.sp__T, _unionSetByKey.mcS.sp__U]]) -> 'Coll'[typing.Any]: ...
    _unionSetByKey$mcV$sp__T = typing.TypeVar('_unionSetByKey$mcV$sp__T')  # <T>
    _unionSetByKey$mcV$sp__U = typing.TypeVar('_unionSetByKey$mcV$sp__U')  # <U>
    def unionSetByKey$mcV$sp(self, that: 'Coll'[scala.runtime.BoxedUnit], ev: scala.Predef..less.colon.less[scala.runtime.BoxedUnit, scala.Tuple2[_unionSetByKey.mcV.sp__T, _unionSetByKey.mcV.sp__U]]) -> 'Coll'[scala.runtime.BoxedUnit]: ...
    _unionSetByKey$mcZ$sp__T = typing.TypeVar('_unionSetByKey$mcZ$sp__T')  # <T>
    _unionSetByKey$mcZ$sp__U = typing.TypeVar('_unionSetByKey$mcZ$sp__U')  # <U>
    def unionSetByKey$mcZ$sp(self, that: 'Coll'[typing.Any], ev: scala.Predef..less.colon.less[typing.Any, scala.Tuple2[_unionSetByKey.mcZ.sp__T, _unionSetByKey.mcZ.sp__U]]) -> 'Coll'[typing.Any]: ...
    def updateMany(self, indexes: 'Coll'[typing.Any], values: 'Coll'[_Coll__A]) -> 'Coll'[_Coll__A]: ...
    def updateMany$mcB$sp(self, indexes: 'Coll'[typing.Any], values: 'Coll'[typing.Any]) -> 'Coll'[typing.Any]: ...
    def updateMany$mcC$sp(self, indexes: 'Coll'[typing.Any], values: 'Coll'[typing.Any]) -> 'Coll'[typing.Any]: ...
    def updateMany$mcD$sp(self, indexes: 'Coll'[typing.Any], values: 'Coll'[typing.Any]) -> 'Coll'[typing.Any]: ...
    def updateMany$mcF$sp(self, indexes: 'Coll'[typing.Any], values: 'Coll'[typing.Any]) -> 'Coll'[typing.Any]: ...
    def updateMany$mcI$sp(self, indexes: 'Coll'[typing.Any], values: 'Coll'[typing.Any]) -> 'Coll'[typing.Any]: ...
    def updateMany$mcJ$sp(self, indexes: 'Coll'[typing.Any], values: 'Coll'[typing.Any]) -> 'Coll'[typing.Any]: ...
    def updateMany$mcS$sp(self, indexes: 'Coll'[typing.Any], values: 'Coll'[typing.Any]) -> 'Coll'[typing.Any]: ...
    def updateMany$mcV$sp(self, indexes: 'Coll'[typing.Any], values: 'Coll'[scala.runtime.BoxedUnit]) -> 'Coll'[scala.runtime.BoxedUnit]: ...
    def updateMany$mcZ$sp(self, indexes: 'Coll'[typing.Any], values: 'Coll'[typing.Any]) -> 'Coll'[typing.Any]: ...
    def updated(self, index: int, elem: _Coll__A) -> 'Coll'[_Coll__A]: ...
    def updated$mcB$sp(self, index: int, elem: int) -> 'Coll'[typing.Any]: ...
    def updated$mcC$sp(self, index: int, elem: str) -> 'Coll'[typing.Any]: ...
    def updated$mcD$sp(self, index: int, elem: float) -> 'Coll'[typing.Any]: ...
    def updated$mcF$sp(self, index: int, elem: float) -> 'Coll'[typing.Any]: ...
    def updated$mcI$sp(self, index: int, elem: int) -> 'Coll'[typing.Any]: ...
    def updated$mcJ$sp(self, index: int, elem: int) -> 'Coll'[typing.Any]: ...
    def updated$mcS$sp(self, index: int, elem: int) -> 'Coll'[typing.Any]: ...
    def updated$mcV$sp(self, index: int, elem: scala.runtime.BoxedUnit) -> 'Coll'[scala.runtime.BoxedUnit]: ...
    def updated$mcZ$sp(self, index: int, elem: bool) -> 'Coll'[typing.Any]: ...
    _zip__B = typing.TypeVar('_zip__B')  # <B>
    def zip(self, ys: 'Coll'[_zip__B]) -> 'Coll'[scala.Tuple2[_Coll__A, _zip__B]]: ...
    def zip$mBc$sp(self, ys: 'Coll'[typing.Any]) -> 'Coll'[scala.Tuple2[_Coll__A, typing.Any]]: ...
    def zip$mBcB$sp(self, ys: 'Coll'[typing.Any]) -> 'Coll'[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mBcC$sp(self, ys: 'Coll'[typing.Any]) -> 'Coll'[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mBcD$sp(self, ys: 'Coll'[typing.Any]) -> 'Coll'[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mBcF$sp(self, ys: 'Coll'[typing.Any]) -> 'Coll'[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mBcI$sp(self, ys: 'Coll'[typing.Any]) -> 'Coll'[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mBcJ$sp(self, ys: 'Coll'[typing.Any]) -> 'Coll'[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mBcS$sp(self, ys: 'Coll'[typing.Any]) -> 'Coll'[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mBcV$sp(self, ys: 'Coll'[typing.Any]) -> 'Coll'[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]: ...
    def zip$mBcZ$sp(self, ys: 'Coll'[typing.Any]) -> 'Coll'[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mCc$sp(self, ys: 'Coll'[typing.Any]) -> 'Coll'[scala.Tuple2[_Coll__A, typing.Any]]: ...
    def zip$mCcB$sp(self, ys: 'Coll'[typing.Any]) -> 'Coll'[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mCcC$sp(self, ys: 'Coll'[typing.Any]) -> 'Coll'[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mCcD$sp(self, ys: 'Coll'[typing.Any]) -> 'Coll'[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mCcF$sp(self, ys: 'Coll'[typing.Any]) -> 'Coll'[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mCcI$sp(self, ys: 'Coll'[typing.Any]) -> 'Coll'[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mCcJ$sp(self, ys: 'Coll'[typing.Any]) -> 'Coll'[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mCcS$sp(self, ys: 'Coll'[typing.Any]) -> 'Coll'[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mCcV$sp(self, ys: 'Coll'[typing.Any]) -> 'Coll'[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]: ...
    def zip$mCcZ$sp(self, ys: 'Coll'[typing.Any]) -> 'Coll'[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mDc$sp(self, ys: 'Coll'[typing.Any]) -> 'Coll'[scala.Tuple2[_Coll__A, typing.Any]]: ...
    def zip$mDcB$sp(self, ys: 'Coll'[typing.Any]) -> 'Coll'[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mDcC$sp(self, ys: 'Coll'[typing.Any]) -> 'Coll'[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mDcD$sp(self, ys: 'Coll'[typing.Any]) -> 'Coll'[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mDcF$sp(self, ys: 'Coll'[typing.Any]) -> 'Coll'[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mDcI$sp(self, ys: 'Coll'[typing.Any]) -> 'Coll'[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mDcJ$sp(self, ys: 'Coll'[typing.Any]) -> 'Coll'[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mDcS$sp(self, ys: 'Coll'[typing.Any]) -> 'Coll'[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mDcV$sp(self, ys: 'Coll'[typing.Any]) -> 'Coll'[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]: ...
    def zip$mDcZ$sp(self, ys: 'Coll'[typing.Any]) -> 'Coll'[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mFc$sp(self, ys: 'Coll'[typing.Any]) -> 'Coll'[scala.Tuple2[_Coll__A, typing.Any]]: ...
    def zip$mFcB$sp(self, ys: 'Coll'[typing.Any]) -> 'Coll'[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mFcC$sp(self, ys: 'Coll'[typing.Any]) -> 'Coll'[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mFcD$sp(self, ys: 'Coll'[typing.Any]) -> 'Coll'[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mFcF$sp(self, ys: 'Coll'[typing.Any]) -> 'Coll'[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mFcI$sp(self, ys: 'Coll'[typing.Any]) -> 'Coll'[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mFcJ$sp(self, ys: 'Coll'[typing.Any]) -> 'Coll'[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mFcS$sp(self, ys: 'Coll'[typing.Any]) -> 'Coll'[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mFcV$sp(self, ys: 'Coll'[typing.Any]) -> 'Coll'[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]: ...
    def zip$mFcZ$sp(self, ys: 'Coll'[typing.Any]) -> 'Coll'[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mIc$sp(self, ys: 'Coll'[typing.Any]) -> 'Coll'[scala.Tuple2[_Coll__A, typing.Any]]: ...
    def zip$mIcB$sp(self, ys: 'Coll'[typing.Any]) -> 'Coll'[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mIcC$sp(self, ys: 'Coll'[typing.Any]) -> 'Coll'[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mIcD$sp(self, ys: 'Coll'[typing.Any]) -> 'Coll'[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mIcF$sp(self, ys: 'Coll'[typing.Any]) -> 'Coll'[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mIcI$sp(self, ys: 'Coll'[typing.Any]) -> 'Coll'[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mIcJ$sp(self, ys: 'Coll'[typing.Any]) -> 'Coll'[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mIcS$sp(self, ys: 'Coll'[typing.Any]) -> 'Coll'[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mIcV$sp(self, ys: 'Coll'[typing.Any]) -> 'Coll'[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]: ...
    def zip$mIcZ$sp(self, ys: 'Coll'[typing.Any]) -> 'Coll'[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mJc$sp(self, ys: 'Coll'[typing.Any]) -> 'Coll'[scala.Tuple2[_Coll__A, typing.Any]]: ...
    def zip$mJcB$sp(self, ys: 'Coll'[typing.Any]) -> 'Coll'[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mJcC$sp(self, ys: 'Coll'[typing.Any]) -> 'Coll'[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mJcD$sp(self, ys: 'Coll'[typing.Any]) -> 'Coll'[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mJcF$sp(self, ys: 'Coll'[typing.Any]) -> 'Coll'[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mJcI$sp(self, ys: 'Coll'[typing.Any]) -> 'Coll'[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mJcJ$sp(self, ys: 'Coll'[typing.Any]) -> 'Coll'[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mJcS$sp(self, ys: 'Coll'[typing.Any]) -> 'Coll'[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mJcV$sp(self, ys: 'Coll'[typing.Any]) -> 'Coll'[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]: ...
    def zip$mJcZ$sp(self, ys: 'Coll'[typing.Any]) -> 'Coll'[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mSc$sp(self, ys: 'Coll'[typing.Any]) -> 'Coll'[scala.Tuple2[_Coll__A, typing.Any]]: ...
    def zip$mScB$sp(self, ys: 'Coll'[typing.Any]) -> 'Coll'[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mScC$sp(self, ys: 'Coll'[typing.Any]) -> 'Coll'[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mScD$sp(self, ys: 'Coll'[typing.Any]) -> 'Coll'[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mScF$sp(self, ys: 'Coll'[typing.Any]) -> 'Coll'[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mScI$sp(self, ys: 'Coll'[typing.Any]) -> 'Coll'[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mScJ$sp(self, ys: 'Coll'[typing.Any]) -> 'Coll'[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mScS$sp(self, ys: 'Coll'[typing.Any]) -> 'Coll'[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mScV$sp(self, ys: 'Coll'[typing.Any]) -> 'Coll'[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]: ...
    def zip$mScZ$sp(self, ys: 'Coll'[typing.Any]) -> 'Coll'[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mVc$sp(self, ys: 'Coll'[scala.runtime.BoxedUnit]) -> 'Coll'[scala.Tuple2[_Coll__A, scala.runtime.BoxedUnit]]: ...
    def zip$mVcB$sp(self, ys: 'Coll'[scala.runtime.BoxedUnit]) -> 'Coll'[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]: ...
    def zip$mVcC$sp(self, ys: 'Coll'[scala.runtime.BoxedUnit]) -> 'Coll'[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]: ...
    def zip$mVcD$sp(self, ys: 'Coll'[scala.runtime.BoxedUnit]) -> 'Coll'[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]: ...
    def zip$mVcF$sp(self, ys: 'Coll'[scala.runtime.BoxedUnit]) -> 'Coll'[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]: ...
    def zip$mVcI$sp(self, ys: 'Coll'[scala.runtime.BoxedUnit]) -> 'Coll'[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]: ...
    def zip$mVcJ$sp(self, ys: 'Coll'[scala.runtime.BoxedUnit]) -> 'Coll'[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]: ...
    def zip$mVcS$sp(self, ys: 'Coll'[scala.runtime.BoxedUnit]) -> 'Coll'[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]: ...
    def zip$mVcV$sp(self, ys: 'Coll'[scala.runtime.BoxedUnit]) -> 'Coll'[scala.Tuple2[scala.runtime.BoxedUnit, scala.runtime.BoxedUnit]]: ...
    def zip$mVcZ$sp(self, ys: 'Coll'[scala.runtime.BoxedUnit]) -> 'Coll'[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]: ...
    def zip$mZc$sp(self, ys: 'Coll'[typing.Any]) -> 'Coll'[scala.Tuple2[_Coll__A, typing.Any]]: ...
    def zip$mZcB$sp(self, ys: 'Coll'[typing.Any]) -> 'Coll'[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mZcC$sp(self, ys: 'Coll'[typing.Any]) -> 'Coll'[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mZcD$sp(self, ys: 'Coll'[typing.Any]) -> 'Coll'[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mZcF$sp(self, ys: 'Coll'[typing.Any]) -> 'Coll'[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mZcI$sp(self, ys: 'Coll'[typing.Any]) -> 'Coll'[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mZcJ$sp(self, ys: 'Coll'[typing.Any]) -> 'Coll'[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mZcS$sp(self, ys: 'Coll'[typing.Any]) -> 'Coll'[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mZcV$sp(self, ys: 'Coll'[typing.Any]) -> 'Coll'[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]: ...
    def zip$mZcZ$sp(self, ys: 'Coll'[typing.Any]) -> 'Coll'[scala.Tuple2[typing.Any, typing.Any]]: ...
    _zip$mcB$sp__B = typing.TypeVar('_zip$mcB$sp__B')  # <B>
    def zip$mcB$sp(self, ys: 'Coll'[_zip.mcB.sp__B]) -> 'Coll'[scala.Tuple2[typing.Any, _zip.mcB.sp__B]]: ...
    _zip$mcC$sp__B = typing.TypeVar('_zip$mcC$sp__B')  # <B>
    def zip$mcC$sp(self, ys: 'Coll'[_zip.mcC.sp__B]) -> 'Coll'[scala.Tuple2[typing.Any, _zip.mcC.sp__B]]: ...
    _zip$mcD$sp__B = typing.TypeVar('_zip$mcD$sp__B')  # <B>
    def zip$mcD$sp(self, ys: 'Coll'[_zip.mcD.sp__B]) -> 'Coll'[scala.Tuple2[typing.Any, _zip.mcD.sp__B]]: ...
    _zip$mcF$sp__B = typing.TypeVar('_zip$mcF$sp__B')  # <B>
    def zip$mcF$sp(self, ys: 'Coll'[_zip.mcF.sp__B]) -> 'Coll'[scala.Tuple2[typing.Any, _zip.mcF.sp__B]]: ...
    _zip$mcI$sp__B = typing.TypeVar('_zip$mcI$sp__B')  # <B>
    def zip$mcI$sp(self, ys: 'Coll'[_zip.mcI.sp__B]) -> 'Coll'[scala.Tuple2[typing.Any, _zip.mcI.sp__B]]: ...
    _zip$mcJ$sp__B = typing.TypeVar('_zip$mcJ$sp__B')  # <B>
    def zip$mcJ$sp(self, ys: 'Coll'[_zip.mcJ.sp__B]) -> 'Coll'[scala.Tuple2[typing.Any, _zip.mcJ.sp__B]]: ...
    _zip$mcS$sp__B = typing.TypeVar('_zip$mcS$sp__B')  # <B>
    def zip$mcS$sp(self, ys: 'Coll'[_zip.mcS.sp__B]) -> 'Coll'[scala.Tuple2[typing.Any, _zip.mcS.sp__B]]: ...
    _zip$mcV$sp__B = typing.TypeVar('_zip$mcV$sp__B')  # <B>
    def zip$mcV$sp(self, ys: 'Coll'[_zip.mcV.sp__B]) -> 'Coll'[scala.Tuple2[scala.runtime.BoxedUnit, _zip.mcV.sp__B]]: ...
    _zip$mcZ$sp__B = typing.TypeVar('_zip$mcZ$sp__B')  # <B>
    def zip$mcZ$sp(self, ys: 'Coll'[_zip.mcZ.sp__B]) -> 'Coll'[scala.Tuple2[typing.Any, _zip.mcZ.sp__B]]: ...

class CollBuilder:
    @staticmethod
    def $init$($this: 'CollBuilder') -> None: ...
    def Monoids(self) -> 'MonoidBuilder': ...
    _emptyColl__T = typing.TypeVar('_emptyColl__T')  # <T>
    def emptyColl(self, tT: scalan.RType[_emptyColl__T]) -> Coll[_emptyColl__T]: ...
    _flattenColl__A = typing.TypeVar('_flattenColl__A')  # <A>
    def flattenColl(self, coll: Coll[Coll[_flattenColl__A]], evidence$20: scalan.RType[_flattenColl__A]) -> Coll[_flattenColl__A]: ...
    _fromArray__T = typing.TypeVar('_fromArray__T')  # <T>
    def fromArray(self, arr: typing.Any, evidence$14: scalan.RType[_fromArray__T]) -> Coll[_fromArray__T]: ...
    def fromArray$mBc$sp(self, arr: typing.List[int], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def fromArray$mCc$sp(self, arr: typing.List[str], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def fromArray$mDc$sp(self, arr: typing.List[float], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def fromArray$mFc$sp(self, arr: typing.List[float], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def fromArray$mIc$sp(self, arr: typing.List[int], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def fromArray$mJc$sp(self, arr: typing.List[int], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def fromArray$mSc$sp(self, arr: typing.List[int], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def fromArray$mVc$sp(self, arr: typing.List[scala.runtime.BoxedUnit], evidence$14: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def fromArray$mZc$sp(self, arr: typing.List[bool], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    _fromItems__T = typing.TypeVar('_fromItems__T')  # <T>
    def fromItems(self, items: scala.collection.Seq[_fromItems__T], cT: scalan.RType[_fromItems__T]) -> Coll[_fromItems__T]: ...
    _fromMap__K = typing.TypeVar('_fromMap__K')  # <K>
    _fromMap__V = typing.TypeVar('_fromMap__V')  # <V>
    def fromMap(self, m: scala.collection.immutable.Map[_fromMap__K, _fromMap__V], evidence$12: scalan.RType[_fromMap__K], evidence$13: scalan.RType[_fromMap__V]) -> Coll[scala.Tuple2[_fromMap__K, _fromMap__V]]: ...
    _makePartialView__A = typing.TypeVar('_makePartialView__A')  # <A>
    _makePartialView__B = typing.TypeVar('_makePartialView__B')  # <B>
    def makePartialView(self, source: Coll[_makePartialView__A], f: scala.Function1[_makePartialView__A, _makePartialView__B], calculated: typing.List[bool], calculatedItems: typing.Any, evidence$17: scalan.RType[_makePartialView__B]) -> Coll[_makePartialView__B]: ...
    def makePartialView$mBBc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], calculated: typing.List[bool], calculatedItems: typing.List[int], evidence$17: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makePartialView$mBCc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], calculated: typing.List[bool], calculatedItems: typing.List[str], evidence$17: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makePartialView$mBDc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], calculated: typing.List[bool], calculatedItems: typing.List[float], evidence$17: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makePartialView$mBFc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], calculated: typing.List[bool], calculatedItems: typing.List[float], evidence$17: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makePartialView$mBIc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], calculated: typing.List[bool], calculatedItems: typing.List[int], evidence$17: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makePartialView$mBJc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], calculated: typing.List[bool], calculatedItems: typing.List[int], evidence$17: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makePartialView$mBSc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], calculated: typing.List[bool], calculatedItems: typing.List[int], evidence$17: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makePartialView$mBVc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, scala.runtime.BoxedUnit], calculated: typing.List[bool], calculatedItems: typing.List[scala.runtime.BoxedUnit], evidence$17: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def makePartialView$mBZc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], calculated: typing.List[bool], calculatedItems: typing.List[bool], evidence$17: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makePartialView$mCBc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], calculated: typing.List[bool], calculatedItems: typing.List[int], evidence$17: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makePartialView$mCCc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], calculated: typing.List[bool], calculatedItems: typing.List[str], evidence$17: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makePartialView$mCDc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], calculated: typing.List[bool], calculatedItems: typing.List[float], evidence$17: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makePartialView$mCFc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], calculated: typing.List[bool], calculatedItems: typing.List[float], evidence$17: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makePartialView$mCIc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], calculated: typing.List[bool], calculatedItems: typing.List[int], evidence$17: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makePartialView$mCJc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], calculated: typing.List[bool], calculatedItems: typing.List[int], evidence$17: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makePartialView$mCSc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], calculated: typing.List[bool], calculatedItems: typing.List[int], evidence$17: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makePartialView$mCVc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, scala.runtime.BoxedUnit], calculated: typing.List[bool], calculatedItems: typing.List[scala.runtime.BoxedUnit], evidence$17: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def makePartialView$mCZc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], calculated: typing.List[bool], calculatedItems: typing.List[bool], evidence$17: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makePartialView$mDBc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], calculated: typing.List[bool], calculatedItems: typing.List[int], evidence$17: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makePartialView$mDCc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], calculated: typing.List[bool], calculatedItems: typing.List[str], evidence$17: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makePartialView$mDDc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], calculated: typing.List[bool], calculatedItems: typing.List[float], evidence$17: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makePartialView$mDFc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], calculated: typing.List[bool], calculatedItems: typing.List[float], evidence$17: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makePartialView$mDIc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], calculated: typing.List[bool], calculatedItems: typing.List[int], evidence$17: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makePartialView$mDJc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], calculated: typing.List[bool], calculatedItems: typing.List[int], evidence$17: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makePartialView$mDSc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], calculated: typing.List[bool], calculatedItems: typing.List[int], evidence$17: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makePartialView$mDVc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, scala.runtime.BoxedUnit], calculated: typing.List[bool], calculatedItems: typing.List[scala.runtime.BoxedUnit], evidence$17: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def makePartialView$mDZc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], calculated: typing.List[bool], calculatedItems: typing.List[bool], evidence$17: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makePartialView$mFBc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], calculated: typing.List[bool], calculatedItems: typing.List[int], evidence$17: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makePartialView$mFCc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], calculated: typing.List[bool], calculatedItems: typing.List[str], evidence$17: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makePartialView$mFDc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], calculated: typing.List[bool], calculatedItems: typing.List[float], evidence$17: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makePartialView$mFFc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], calculated: typing.List[bool], calculatedItems: typing.List[float], evidence$17: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makePartialView$mFIc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], calculated: typing.List[bool], calculatedItems: typing.List[int], evidence$17: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makePartialView$mFJc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], calculated: typing.List[bool], calculatedItems: typing.List[int], evidence$17: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makePartialView$mFSc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], calculated: typing.List[bool], calculatedItems: typing.List[int], evidence$17: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makePartialView$mFVc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, scala.runtime.BoxedUnit], calculated: typing.List[bool], calculatedItems: typing.List[scala.runtime.BoxedUnit], evidence$17: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def makePartialView$mFZc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], calculated: typing.List[bool], calculatedItems: typing.List[bool], evidence$17: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makePartialView$mIBc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], calculated: typing.List[bool], calculatedItems: typing.List[int], evidence$17: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makePartialView$mICc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], calculated: typing.List[bool], calculatedItems: typing.List[str], evidence$17: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makePartialView$mIDc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], calculated: typing.List[bool], calculatedItems: typing.List[float], evidence$17: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makePartialView$mIFc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], calculated: typing.List[bool], calculatedItems: typing.List[float], evidence$17: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makePartialView$mIIc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], calculated: typing.List[bool], calculatedItems: typing.List[int], evidence$17: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makePartialView$mIJc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], calculated: typing.List[bool], calculatedItems: typing.List[int], evidence$17: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makePartialView$mISc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], calculated: typing.List[bool], calculatedItems: typing.List[int], evidence$17: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makePartialView$mIVc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, scala.runtime.BoxedUnit], calculated: typing.List[bool], calculatedItems: typing.List[scala.runtime.BoxedUnit], evidence$17: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def makePartialView$mIZc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], calculated: typing.List[bool], calculatedItems: typing.List[bool], evidence$17: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makePartialView$mJBc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], calculated: typing.List[bool], calculatedItems: typing.List[int], evidence$17: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makePartialView$mJCc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], calculated: typing.List[bool], calculatedItems: typing.List[str], evidence$17: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makePartialView$mJDc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], calculated: typing.List[bool], calculatedItems: typing.List[float], evidence$17: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makePartialView$mJFc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], calculated: typing.List[bool], calculatedItems: typing.List[float], evidence$17: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makePartialView$mJIc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], calculated: typing.List[bool], calculatedItems: typing.List[int], evidence$17: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makePartialView$mJJc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], calculated: typing.List[bool], calculatedItems: typing.List[int], evidence$17: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makePartialView$mJSc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], calculated: typing.List[bool], calculatedItems: typing.List[int], evidence$17: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makePartialView$mJVc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, scala.runtime.BoxedUnit], calculated: typing.List[bool], calculatedItems: typing.List[scala.runtime.BoxedUnit], evidence$17: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def makePartialView$mJZc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], calculated: typing.List[bool], calculatedItems: typing.List[bool], evidence$17: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makePartialView$mSBc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], calculated: typing.List[bool], calculatedItems: typing.List[int], evidence$17: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makePartialView$mSCc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], calculated: typing.List[bool], calculatedItems: typing.List[str], evidence$17: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makePartialView$mSDc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], calculated: typing.List[bool], calculatedItems: typing.List[float], evidence$17: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makePartialView$mSFc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], calculated: typing.List[bool], calculatedItems: typing.List[float], evidence$17: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makePartialView$mSIc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], calculated: typing.List[bool], calculatedItems: typing.List[int], evidence$17: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makePartialView$mSJc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], calculated: typing.List[bool], calculatedItems: typing.List[int], evidence$17: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makePartialView$mSSc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], calculated: typing.List[bool], calculatedItems: typing.List[int], evidence$17: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makePartialView$mSVc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, scala.runtime.BoxedUnit], calculated: typing.List[bool], calculatedItems: typing.List[scala.runtime.BoxedUnit], evidence$17: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def makePartialView$mSZc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], calculated: typing.List[bool], calculatedItems: typing.List[bool], evidence$17: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makePartialView$mVBc$sp(self, source: Coll[scala.runtime.BoxedUnit], f: scala.Function1[scala.runtime.BoxedUnit, typing.Any], calculated: typing.List[bool], calculatedItems: typing.List[int], evidence$17: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makePartialView$mVCc$sp(self, source: Coll[scala.runtime.BoxedUnit], f: scala.Function1[scala.runtime.BoxedUnit, typing.Any], calculated: typing.List[bool], calculatedItems: typing.List[str], evidence$17: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makePartialView$mVDc$sp(self, source: Coll[scala.runtime.BoxedUnit], f: scala.Function1[scala.runtime.BoxedUnit, typing.Any], calculated: typing.List[bool], calculatedItems: typing.List[float], evidence$17: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makePartialView$mVFc$sp(self, source: Coll[scala.runtime.BoxedUnit], f: scala.Function1[scala.runtime.BoxedUnit, typing.Any], calculated: typing.List[bool], calculatedItems: typing.List[float], evidence$17: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makePartialView$mVIc$sp(self, source: Coll[scala.runtime.BoxedUnit], f: scala.Function1[scala.runtime.BoxedUnit, typing.Any], calculated: typing.List[bool], calculatedItems: typing.List[int], evidence$17: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makePartialView$mVJc$sp(self, source: Coll[scala.runtime.BoxedUnit], f: scala.Function1[scala.runtime.BoxedUnit, typing.Any], calculated: typing.List[bool], calculatedItems: typing.List[int], evidence$17: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makePartialView$mVSc$sp(self, source: Coll[scala.runtime.BoxedUnit], f: scala.Function1[scala.runtime.BoxedUnit, typing.Any], calculated: typing.List[bool], calculatedItems: typing.List[int], evidence$17: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makePartialView$mVVc$sp(self, source: Coll[scala.runtime.BoxedUnit], f: scala.Function1[scala.runtime.BoxedUnit, scala.runtime.BoxedUnit], calculated: typing.List[bool], calculatedItems: typing.List[scala.runtime.BoxedUnit], evidence$17: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def makePartialView$mVZc$sp(self, source: Coll[scala.runtime.BoxedUnit], f: scala.Function1[scala.runtime.BoxedUnit, typing.Any], calculated: typing.List[bool], calculatedItems: typing.List[bool], evidence$17: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makePartialView$mZBc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], calculated: typing.List[bool], calculatedItems: typing.List[int], evidence$17: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makePartialView$mZCc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], calculated: typing.List[bool], calculatedItems: typing.List[str], evidence$17: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makePartialView$mZDc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], calculated: typing.List[bool], calculatedItems: typing.List[float], evidence$17: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makePartialView$mZFc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], calculated: typing.List[bool], calculatedItems: typing.List[float], evidence$17: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makePartialView$mZIc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], calculated: typing.List[bool], calculatedItems: typing.List[int], evidence$17: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makePartialView$mZJc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], calculated: typing.List[bool], calculatedItems: typing.List[int], evidence$17: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makePartialView$mZSc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], calculated: typing.List[bool], calculatedItems: typing.List[int], evidence$17: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makePartialView$mZVc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, scala.runtime.BoxedUnit], calculated: typing.List[bool], calculatedItems: typing.List[scala.runtime.BoxedUnit], evidence$17: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def makePartialView$mZZc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], calculated: typing.List[bool], calculatedItems: typing.List[bool], evidence$17: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    _makeView__A = typing.TypeVar('_makeView__A')  # <A>
    _makeView__B = typing.TypeVar('_makeView__B')  # <B>
    def makeView(self, source: Coll[_makeView__A], f: scala.Function1[_makeView__A, _makeView__B], evidence$16: scalan.RType[_makeView__B]) -> Coll[_makeView__B]: ...
    def makeView$mBBc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], evidence$16: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makeView$mBCc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], evidence$16: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makeView$mBDc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], evidence$16: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makeView$mBFc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], evidence$16: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makeView$mBIc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], evidence$16: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makeView$mBJc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], evidence$16: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makeView$mBSc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], evidence$16: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makeView$mBVc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, scala.runtime.BoxedUnit], evidence$16: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def makeView$mBZc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], evidence$16: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makeView$mCBc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], evidence$16: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makeView$mCCc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], evidence$16: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makeView$mCDc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], evidence$16: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makeView$mCFc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], evidence$16: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makeView$mCIc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], evidence$16: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makeView$mCJc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], evidence$16: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makeView$mCSc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], evidence$16: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makeView$mCVc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, scala.runtime.BoxedUnit], evidence$16: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def makeView$mCZc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], evidence$16: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makeView$mDBc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], evidence$16: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makeView$mDCc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], evidence$16: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makeView$mDDc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], evidence$16: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makeView$mDFc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], evidence$16: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makeView$mDIc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], evidence$16: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makeView$mDJc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], evidence$16: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makeView$mDSc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], evidence$16: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makeView$mDVc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, scala.runtime.BoxedUnit], evidence$16: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def makeView$mDZc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], evidence$16: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makeView$mFBc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], evidence$16: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makeView$mFCc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], evidence$16: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makeView$mFDc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], evidence$16: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makeView$mFFc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], evidence$16: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makeView$mFIc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], evidence$16: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makeView$mFJc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], evidence$16: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makeView$mFSc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], evidence$16: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makeView$mFVc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, scala.runtime.BoxedUnit], evidence$16: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def makeView$mFZc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], evidence$16: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makeView$mIBc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], evidence$16: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makeView$mICc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], evidence$16: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makeView$mIDc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], evidence$16: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makeView$mIFc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], evidence$16: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makeView$mIIc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], evidence$16: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makeView$mIJc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], evidence$16: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makeView$mISc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], evidence$16: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makeView$mIVc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, scala.runtime.BoxedUnit], evidence$16: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def makeView$mIZc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], evidence$16: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makeView$mJBc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], evidence$16: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makeView$mJCc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], evidence$16: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makeView$mJDc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], evidence$16: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makeView$mJFc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], evidence$16: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makeView$mJIc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], evidence$16: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makeView$mJJc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], evidence$16: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makeView$mJSc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], evidence$16: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makeView$mJVc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, scala.runtime.BoxedUnit], evidence$16: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def makeView$mJZc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], evidence$16: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makeView$mSBc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], evidence$16: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makeView$mSCc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], evidence$16: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makeView$mSDc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], evidence$16: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makeView$mSFc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], evidence$16: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makeView$mSIc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], evidence$16: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makeView$mSJc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], evidence$16: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makeView$mSSc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], evidence$16: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makeView$mSVc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, scala.runtime.BoxedUnit], evidence$16: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def makeView$mSZc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], evidence$16: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makeView$mVBc$sp(self, source: Coll[scala.runtime.BoxedUnit], f: scala.Function1[scala.runtime.BoxedUnit, typing.Any], evidence$16: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makeView$mVCc$sp(self, source: Coll[scala.runtime.BoxedUnit], f: scala.Function1[scala.runtime.BoxedUnit, typing.Any], evidence$16: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makeView$mVDc$sp(self, source: Coll[scala.runtime.BoxedUnit], f: scala.Function1[scala.runtime.BoxedUnit, typing.Any], evidence$16: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makeView$mVFc$sp(self, source: Coll[scala.runtime.BoxedUnit], f: scala.Function1[scala.runtime.BoxedUnit, typing.Any], evidence$16: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makeView$mVIc$sp(self, source: Coll[scala.runtime.BoxedUnit], f: scala.Function1[scala.runtime.BoxedUnit, typing.Any], evidence$16: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makeView$mVJc$sp(self, source: Coll[scala.runtime.BoxedUnit], f: scala.Function1[scala.runtime.BoxedUnit, typing.Any], evidence$16: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makeView$mVSc$sp(self, source: Coll[scala.runtime.BoxedUnit], f: scala.Function1[scala.runtime.BoxedUnit, typing.Any], evidence$16: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makeView$mVVc$sp(self, source: Coll[scala.runtime.BoxedUnit], f: scala.Function1[scala.runtime.BoxedUnit, scala.runtime.BoxedUnit], evidence$16: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def makeView$mVZc$sp(self, source: Coll[scala.runtime.BoxedUnit], f: scala.Function1[scala.runtime.BoxedUnit, typing.Any], evidence$16: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makeView$mZBc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], evidence$16: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makeView$mZCc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], evidence$16: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makeView$mZDc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], evidence$16: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makeView$mZFc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], evidence$16: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makeView$mZIc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], evidence$16: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makeView$mZJc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], evidence$16: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makeView$mZSc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], evidence$16: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makeView$mZVc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, scala.runtime.BoxedUnit], evidence$16: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def makeView$mZZc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], evidence$16: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    _outerJoin__K = typing.TypeVar('_outerJoin__K')  # <K>
    _outerJoin__L = typing.TypeVar('_outerJoin__L')  # <L>
    _outerJoin__R = typing.TypeVar('_outerJoin__R')  # <R>
    _outerJoin__O = typing.TypeVar('_outerJoin__O')  # <O>
    def outerJoin(self, left: Coll[scala.Tuple2[_outerJoin__K, _outerJoin__L]], right: Coll[scala.Tuple2[_outerJoin__K, _outerJoin__R]], l: scala.Function1[scala.Tuple2[_outerJoin__K, _outerJoin__L], _outerJoin__O], r: scala.Function1[scala.Tuple2[_outerJoin__K, _outerJoin__R], _outerJoin__O], inner: scala.Function1[scala.Tuple2[_outerJoin__K, scala.Tuple2[_outerJoin__L, _outerJoin__R]], _outerJoin__O], evidence$18: scalan.RType[_outerJoin__K], evidence$19: scalan.RType[_outerJoin__O]) -> Coll[scala.Tuple2[_outerJoin__K, _outerJoin__O]]: ...
    _pairColl__A = typing.TypeVar('_pairColl__A')  # <A>
    _pairColl__B = typing.TypeVar('_pairColl__B')  # <B>
    def pairColl(self, as_: Coll[_pairColl__A], bs: Coll[_pairColl__B]) -> 'PairColl'[_pairColl__A, _pairColl__B]: ...
    def pairColl$mBBc$sp(self, as_: Coll[typing.Any], bs: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def pairColl$mBCc$sp(self, as_: Coll[typing.Any], bs: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def pairColl$mBDc$sp(self, as_: Coll[typing.Any], bs: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def pairColl$mBFc$sp(self, as_: Coll[typing.Any], bs: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def pairColl$mBIc$sp(self, as_: Coll[typing.Any], bs: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def pairColl$mBJc$sp(self, as_: Coll[typing.Any], bs: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def pairColl$mBSc$sp(self, as_: Coll[typing.Any], bs: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def pairColl$mBVc$sp(self, as_: Coll[typing.Any], bs: Coll[scala.runtime.BoxedUnit]) -> 'PairColl'[typing.Any, scala.runtime.BoxedUnit]: ...
    def pairColl$mBZc$sp(self, as_: Coll[typing.Any], bs: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def pairColl$mCBc$sp(self, as_: Coll[typing.Any], bs: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def pairColl$mCCc$sp(self, as_: Coll[typing.Any], bs: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def pairColl$mCDc$sp(self, as_: Coll[typing.Any], bs: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def pairColl$mCFc$sp(self, as_: Coll[typing.Any], bs: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def pairColl$mCIc$sp(self, as_: Coll[typing.Any], bs: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def pairColl$mCJc$sp(self, as_: Coll[typing.Any], bs: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def pairColl$mCSc$sp(self, as_: Coll[typing.Any], bs: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def pairColl$mCVc$sp(self, as_: Coll[typing.Any], bs: Coll[scala.runtime.BoxedUnit]) -> 'PairColl'[typing.Any, scala.runtime.BoxedUnit]: ...
    def pairColl$mCZc$sp(self, as_: Coll[typing.Any], bs: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def pairColl$mDBc$sp(self, as_: Coll[typing.Any], bs: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def pairColl$mDCc$sp(self, as_: Coll[typing.Any], bs: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def pairColl$mDDc$sp(self, as_: Coll[typing.Any], bs: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def pairColl$mDFc$sp(self, as_: Coll[typing.Any], bs: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def pairColl$mDIc$sp(self, as_: Coll[typing.Any], bs: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def pairColl$mDJc$sp(self, as_: Coll[typing.Any], bs: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def pairColl$mDSc$sp(self, as_: Coll[typing.Any], bs: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def pairColl$mDVc$sp(self, as_: Coll[typing.Any], bs: Coll[scala.runtime.BoxedUnit]) -> 'PairColl'[typing.Any, scala.runtime.BoxedUnit]: ...
    def pairColl$mDZc$sp(self, as_: Coll[typing.Any], bs: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def pairColl$mFBc$sp(self, as_: Coll[typing.Any], bs: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def pairColl$mFCc$sp(self, as_: Coll[typing.Any], bs: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def pairColl$mFDc$sp(self, as_: Coll[typing.Any], bs: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def pairColl$mFFc$sp(self, as_: Coll[typing.Any], bs: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def pairColl$mFIc$sp(self, as_: Coll[typing.Any], bs: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def pairColl$mFJc$sp(self, as_: Coll[typing.Any], bs: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def pairColl$mFSc$sp(self, as_: Coll[typing.Any], bs: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def pairColl$mFVc$sp(self, as_: Coll[typing.Any], bs: Coll[scala.runtime.BoxedUnit]) -> 'PairColl'[typing.Any, scala.runtime.BoxedUnit]: ...
    def pairColl$mFZc$sp(self, as_: Coll[typing.Any], bs: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def pairColl$mIBc$sp(self, as_: Coll[typing.Any], bs: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def pairColl$mICc$sp(self, as_: Coll[typing.Any], bs: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def pairColl$mIDc$sp(self, as_: Coll[typing.Any], bs: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def pairColl$mIFc$sp(self, as_: Coll[typing.Any], bs: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def pairColl$mIIc$sp(self, as_: Coll[typing.Any], bs: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def pairColl$mIJc$sp(self, as_: Coll[typing.Any], bs: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def pairColl$mISc$sp(self, as_: Coll[typing.Any], bs: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def pairColl$mIVc$sp(self, as_: Coll[typing.Any], bs: Coll[scala.runtime.BoxedUnit]) -> 'PairColl'[typing.Any, scala.runtime.BoxedUnit]: ...
    def pairColl$mIZc$sp(self, as_: Coll[typing.Any], bs: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def pairColl$mJBc$sp(self, as_: Coll[typing.Any], bs: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def pairColl$mJCc$sp(self, as_: Coll[typing.Any], bs: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def pairColl$mJDc$sp(self, as_: Coll[typing.Any], bs: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def pairColl$mJFc$sp(self, as_: Coll[typing.Any], bs: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def pairColl$mJIc$sp(self, as_: Coll[typing.Any], bs: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def pairColl$mJJc$sp(self, as_: Coll[typing.Any], bs: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def pairColl$mJSc$sp(self, as_: Coll[typing.Any], bs: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def pairColl$mJVc$sp(self, as_: Coll[typing.Any], bs: Coll[scala.runtime.BoxedUnit]) -> 'PairColl'[typing.Any, scala.runtime.BoxedUnit]: ...
    def pairColl$mJZc$sp(self, as_: Coll[typing.Any], bs: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def pairColl$mSBc$sp(self, as_: Coll[typing.Any], bs: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def pairColl$mSCc$sp(self, as_: Coll[typing.Any], bs: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def pairColl$mSDc$sp(self, as_: Coll[typing.Any], bs: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def pairColl$mSFc$sp(self, as_: Coll[typing.Any], bs: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def pairColl$mSIc$sp(self, as_: Coll[typing.Any], bs: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def pairColl$mSJc$sp(self, as_: Coll[typing.Any], bs: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def pairColl$mSSc$sp(self, as_: Coll[typing.Any], bs: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def pairColl$mSVc$sp(self, as_: Coll[typing.Any], bs: Coll[scala.runtime.BoxedUnit]) -> 'PairColl'[typing.Any, scala.runtime.BoxedUnit]: ...
    def pairColl$mSZc$sp(self, as_: Coll[typing.Any], bs: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def pairColl$mVBc$sp(self, as_: Coll[scala.runtime.BoxedUnit], bs: Coll[typing.Any]) -> 'PairColl'[scala.runtime.BoxedUnit, typing.Any]: ...
    def pairColl$mVCc$sp(self, as_: Coll[scala.runtime.BoxedUnit], bs: Coll[typing.Any]) -> 'PairColl'[scala.runtime.BoxedUnit, typing.Any]: ...
    def pairColl$mVDc$sp(self, as_: Coll[scala.runtime.BoxedUnit], bs: Coll[typing.Any]) -> 'PairColl'[scala.runtime.BoxedUnit, typing.Any]: ...
    def pairColl$mVFc$sp(self, as_: Coll[scala.runtime.BoxedUnit], bs: Coll[typing.Any]) -> 'PairColl'[scala.runtime.BoxedUnit, typing.Any]: ...
    def pairColl$mVIc$sp(self, as_: Coll[scala.runtime.BoxedUnit], bs: Coll[typing.Any]) -> 'PairColl'[scala.runtime.BoxedUnit, typing.Any]: ...
    def pairColl$mVJc$sp(self, as_: Coll[scala.runtime.BoxedUnit], bs: Coll[typing.Any]) -> 'PairColl'[scala.runtime.BoxedUnit, typing.Any]: ...
    def pairColl$mVSc$sp(self, as_: Coll[scala.runtime.BoxedUnit], bs: Coll[typing.Any]) -> 'PairColl'[scala.runtime.BoxedUnit, typing.Any]: ...
    def pairColl$mVVc$sp(self, as_: Coll[scala.runtime.BoxedUnit], bs: Coll[scala.runtime.BoxedUnit]) -> 'PairColl'[scala.runtime.BoxedUnit, scala.runtime.BoxedUnit]: ...
    def pairColl$mVZc$sp(self, as_: Coll[scala.runtime.BoxedUnit], bs: Coll[typing.Any]) -> 'PairColl'[scala.runtime.BoxedUnit, typing.Any]: ...
    def pairColl$mZBc$sp(self, as_: Coll[typing.Any], bs: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def pairColl$mZCc$sp(self, as_: Coll[typing.Any], bs: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def pairColl$mZDc$sp(self, as_: Coll[typing.Any], bs: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def pairColl$mZFc$sp(self, as_: Coll[typing.Any], bs: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def pairColl$mZIc$sp(self, as_: Coll[typing.Any], bs: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def pairColl$mZJc$sp(self, as_: Coll[typing.Any], bs: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def pairColl$mZSc$sp(self, as_: Coll[typing.Any], bs: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def pairColl$mZVc$sp(self, as_: Coll[typing.Any], bs: Coll[scala.runtime.BoxedUnit]) -> 'PairColl'[typing.Any, scala.runtime.BoxedUnit]: ...
    def pairColl$mZZc$sp(self, as_: Coll[typing.Any], bs: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    _pairCollFromArrays__A = typing.TypeVar('_pairCollFromArrays__A')  # <A>
    _pairCollFromArrays__B = typing.TypeVar('_pairCollFromArrays__B')  # <B>
    def pairCollFromArrays(self, as_: typing.Any, bs: typing.Any, evidence$10: scalan.RType[_pairCollFromArrays__A], evidence$11: scalan.RType[_pairCollFromArrays__B]) -> 'PairColl'[_pairCollFromArrays__A, _pairCollFromArrays__B]: ...
    _replicate__T = typing.TypeVar('_replicate__T')  # <T>
    def replicate(self, n: int, v: _replicate__T, evidence$15: scalan.RType[_replicate__T]) -> Coll[_replicate__T]: ...
    def replicate$mBc$sp(self, n: int, v: int, evidence$15: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def replicate$mCc$sp(self, n: int, v: str, evidence$15: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def replicate$mDc$sp(self, n: int, v: float, evidence$15: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def replicate$mFc$sp(self, n: int, v: float, evidence$15: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def replicate$mIc$sp(self, n: int, v: int, evidence$15: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def replicate$mJc$sp(self, n: int, v: int, evidence$15: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def replicate$mSc$sp(self, n: int, v: int, evidence$15: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def replicate$mVc$sp(self, n: int, v: scala.runtime.BoxedUnit, evidence$15: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def replicate$mZc$sp(self, n: int, v: bool, evidence$15: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    _unzip__A = typing.TypeVar('_unzip__A')  # <A>
    _unzip__B = typing.TypeVar('_unzip__B')  # <B>
    def unzip(self, xs: Coll[scala.Tuple2[_unzip__A, _unzip__B]]) -> scala.Tuple2[Coll[_unzip__A], Coll[_unzip__B]]: ...
    def unzip$mBBc$sp(self, xs: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def unzip$mBCc$sp(self, xs: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def unzip$mBDc$sp(self, xs: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def unzip$mBFc$sp(self, xs: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def unzip$mBIc$sp(self, xs: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def unzip$mBJc$sp(self, xs: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def unzip$mBSc$sp(self, xs: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def unzip$mBVc$sp(self, xs: Coll[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]) -> scala.Tuple2[Coll[typing.Any], Coll[scala.runtime.BoxedUnit]]: ...
    def unzip$mBZc$sp(self, xs: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def unzip$mCBc$sp(self, xs: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def unzip$mCCc$sp(self, xs: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def unzip$mCDc$sp(self, xs: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def unzip$mCFc$sp(self, xs: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def unzip$mCIc$sp(self, xs: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def unzip$mCJc$sp(self, xs: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def unzip$mCSc$sp(self, xs: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def unzip$mCVc$sp(self, xs: Coll[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]) -> scala.Tuple2[Coll[typing.Any], Coll[scala.runtime.BoxedUnit]]: ...
    def unzip$mCZc$sp(self, xs: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def unzip$mDBc$sp(self, xs: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def unzip$mDCc$sp(self, xs: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def unzip$mDDc$sp(self, xs: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def unzip$mDFc$sp(self, xs: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def unzip$mDIc$sp(self, xs: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def unzip$mDJc$sp(self, xs: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def unzip$mDSc$sp(self, xs: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def unzip$mDVc$sp(self, xs: Coll[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]) -> scala.Tuple2[Coll[typing.Any], Coll[scala.runtime.BoxedUnit]]: ...
    def unzip$mDZc$sp(self, xs: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def unzip$mFBc$sp(self, xs: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def unzip$mFCc$sp(self, xs: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def unzip$mFDc$sp(self, xs: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def unzip$mFFc$sp(self, xs: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def unzip$mFIc$sp(self, xs: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def unzip$mFJc$sp(self, xs: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def unzip$mFSc$sp(self, xs: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def unzip$mFVc$sp(self, xs: Coll[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]) -> scala.Tuple2[Coll[typing.Any], Coll[scala.runtime.BoxedUnit]]: ...
    def unzip$mFZc$sp(self, xs: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def unzip$mIBc$sp(self, xs: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def unzip$mICc$sp(self, xs: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def unzip$mIDc$sp(self, xs: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def unzip$mIFc$sp(self, xs: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def unzip$mIIc$sp(self, xs: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def unzip$mIJc$sp(self, xs: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def unzip$mISc$sp(self, xs: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def unzip$mIVc$sp(self, xs: Coll[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]) -> scala.Tuple2[Coll[typing.Any], Coll[scala.runtime.BoxedUnit]]: ...
    def unzip$mIZc$sp(self, xs: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def unzip$mJBc$sp(self, xs: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def unzip$mJCc$sp(self, xs: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def unzip$mJDc$sp(self, xs: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def unzip$mJFc$sp(self, xs: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def unzip$mJIc$sp(self, xs: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def unzip$mJJc$sp(self, xs: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def unzip$mJSc$sp(self, xs: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def unzip$mJVc$sp(self, xs: Coll[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]) -> scala.Tuple2[Coll[typing.Any], Coll[scala.runtime.BoxedUnit]]: ...
    def unzip$mJZc$sp(self, xs: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def unzip$mSBc$sp(self, xs: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def unzip$mSCc$sp(self, xs: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def unzip$mSDc$sp(self, xs: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def unzip$mSFc$sp(self, xs: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def unzip$mSIc$sp(self, xs: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def unzip$mSJc$sp(self, xs: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def unzip$mSSc$sp(self, xs: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def unzip$mSVc$sp(self, xs: Coll[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]) -> scala.Tuple2[Coll[typing.Any], Coll[scala.runtime.BoxedUnit]]: ...
    def unzip$mSZc$sp(self, xs: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def unzip$mVBc$sp(self, xs: Coll[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]) -> scala.Tuple2[Coll[scala.runtime.BoxedUnit], Coll[typing.Any]]: ...
    def unzip$mVCc$sp(self, xs: Coll[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]) -> scala.Tuple2[Coll[scala.runtime.BoxedUnit], Coll[typing.Any]]: ...
    def unzip$mVDc$sp(self, xs: Coll[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]) -> scala.Tuple2[Coll[scala.runtime.BoxedUnit], Coll[typing.Any]]: ...
    def unzip$mVFc$sp(self, xs: Coll[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]) -> scala.Tuple2[Coll[scala.runtime.BoxedUnit], Coll[typing.Any]]: ...
    def unzip$mVIc$sp(self, xs: Coll[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]) -> scala.Tuple2[Coll[scala.runtime.BoxedUnit], Coll[typing.Any]]: ...
    def unzip$mVJc$sp(self, xs: Coll[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]) -> scala.Tuple2[Coll[scala.runtime.BoxedUnit], Coll[typing.Any]]: ...
    def unzip$mVSc$sp(self, xs: Coll[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]) -> scala.Tuple2[Coll[scala.runtime.BoxedUnit], Coll[typing.Any]]: ...
    def unzip$mVVc$sp(self, xs: Coll[scala.Tuple2[scala.runtime.BoxedUnit, scala.runtime.BoxedUnit]]) -> scala.Tuple2[Coll[scala.runtime.BoxedUnit], Coll[scala.runtime.BoxedUnit]]: ...
    def unzip$mVZc$sp(self, xs: Coll[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]) -> scala.Tuple2[Coll[scala.runtime.BoxedUnit], Coll[typing.Any]]: ...
    def unzip$mZBc$sp(self, xs: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def unzip$mZCc$sp(self, xs: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def unzip$mZDc$sp(self, xs: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def unzip$mZFc$sp(self, xs: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def unzip$mZIc$sp(self, xs: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def unzip$mZJc$sp(self, xs: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def unzip$mZSc$sp(self, xs: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def unzip$mZVc$sp(self, xs: Coll[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]) -> scala.Tuple2[Coll[typing.Any], Coll[scala.runtime.BoxedUnit]]: ...
    def unzip$mZZc$sp(self, xs: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def xor(self, left: Coll[typing.Any], right: Coll[typing.Any]) -> Coll[typing.Any]: ...

_CollType__A = typing.TypeVar('_CollType__A')  # <A>
class CollType(scalan.RType[Coll[_CollType__A]], scala.Product, scala.Serializable, typing.Generic[_CollType__A]):
    def __init__(self, tItem: scalan.RType[_CollType__A]): ...
    _apply_0__A = typing.TypeVar('_apply_0__A')  # <A>
    _apply_1__A = typing.TypeVar('_apply_1__A')  # <A>
    @typing.overload
    @staticmethod
    def apply(t: scalan.RType[_apply_0__A]) -> scalan.RType[_apply_0__A]: ...
    @typing.overload
    @staticmethod
    def apply(tItem: scalan.RType[_apply_1__A]) -> 'CollType'[_apply_1__A]: ...
    def canEqual(self, x$1: typing.Any) -> bool: ...
    def classTag(self) -> scala.reflect.ClassTag[Coll[_CollType__A]]: ...
    _copy__A = typing.TypeVar('_copy__A')  # <A>
    def copy(self, tItem: scalan.RType[typing.Any]) -> 'CollType'[typing.Any]: ...
    _copy$default$1__A = typing.TypeVar('_copy$default$1__A')  # <A>
    def copy$default$1(self) -> scalan.RType[typing.Any]: ...
    def equals(self, x$1: typing.Any) -> bool: ...
    def hashCode(self) -> int: ...
    def isConstantSize(self) -> bool: ...
    def name(self) -> str: ...
    def productArity(self) -> int: ...
    def productElement(self, x$1: int) -> typing.Any: ...
    def productIterator(self) -> scala.collection.Iterator[typing.Any]: ...
    def productPrefix(self) -> str: ...
    def tItem(self) -> scalan.RType[_CollType__A]: ...
    def toString(self) -> str: ...
    _unapply__A = typing.TypeVar('_unapply__A')  # <A>
    @staticmethod
    def unapply(x$0: 'CollType'[_unapply__A]) -> scala.Option[scalan.RType[_unapply__A]]: ...

class CollsModule(special.collection.impl.CollsDefs): ...

class ConcreteCostsModule(special.collection.impl.ConcreteCostsDefs): ...

class ConcreteSizesModule(special.collection.impl.ConcreteSizesDefs): ...

_Costed__Val = typing.TypeVar('_Costed__Val')  # <Val>
class Costed(typing.Generic[_Costed__Val]):
    def builder(self) -> 'CostedBuilder': ...
    def cost(self) -> int: ...
    def size(self) -> 'Size'[_Costed__Val]: ...
    def value(self) -> _Costed__Val: ...

class CostedBuilder:
    @staticmethod
    def $init$($this: 'CostedBuilder') -> None: ...
    def ConstructSumCost(self) -> int: ...
    def ConstructTupleCost(self) -> int: ...
    def SelectFieldCost(self) -> int: ...
    def SumTagSize(self) -> int: ...
    _costedValue__T = typing.TypeVar('_costedValue__T')  # <T>
    def costedValue(self, x: _costedValue__T, optCost: scala.Option[typing.Any], cT: scalan.RType[_costedValue__T]) -> Costed[_costedValue__T]: ...
    _defaultValue__T = typing.TypeVar('_defaultValue__T')  # <T>
    def defaultValue(self, valueType: scalan.RType[_defaultValue__T]) -> _defaultValue__T: ...
    _mkCostedColl__T = typing.TypeVar('_mkCostedColl__T')  # <T>
    def mkCostedColl(self, values: Coll[_mkCostedColl__T], costs: Coll[typing.Any], sizes: Coll['Size'[_mkCostedColl__T]], valuesCost: int) -> 'CostedColl'[_mkCostedColl__T]: ...
    _mkCostedFunc__Env = typing.TypeVar('_mkCostedFunc__Env')  # <Env>
    _mkCostedFunc__Arg = typing.TypeVar('_mkCostedFunc__Arg')  # <Arg>
    _mkCostedFunc__Res = typing.TypeVar('_mkCostedFunc__Res')  # <Res>
    def mkCostedFunc(self, envCosted: Costed[_mkCostedFunc__Env], func: scala.Function1[Costed[_mkCostedFunc__Arg], Costed[_mkCostedFunc__Res]], cost: int, size: 'Size'[scala.Function1[_mkCostedFunc__Arg, _mkCostedFunc__Res]]) -> 'CostedFunc'[_mkCostedFunc__Env, _mkCostedFunc__Arg, _mkCostedFunc__Res]: ...
    _mkCostedOption__T = typing.TypeVar('_mkCostedOption__T')  # <T>
    def mkCostedOption(self, value: scala.Option[_mkCostedOption__T], costOpt: scala.Option[typing.Any], sizeOpt: scala.Option['Size'[_mkCostedOption__T]], accumulatedCost: int) -> 'CostedOption'[_mkCostedOption__T]: ...
    _mkCostedPair__L = typing.TypeVar('_mkCostedPair__L')  # <L>
    _mkCostedPair__R = typing.TypeVar('_mkCostedPair__R')  # <R>
    def mkCostedPair(self, first: Costed[_mkCostedPair__L], second: Costed[_mkCostedPair__R], accCost: int) -> 'CostedPair'[_mkCostedPair__L, _mkCostedPair__R]: ...
    _mkCostedPrim__T = typing.TypeVar('_mkCostedPrim__T')  # <T>
    def mkCostedPrim(self, value: _mkCostedPrim__T, cost: int, size: 'Size'[_mkCostedPrim__T]) -> 'CostedPrim'[_mkCostedPrim__T]: ...
    _mkSizeColl__T = typing.TypeVar('_mkSizeColl__T')  # <T>
    def mkSizeColl(self, sizes: Coll['Size'[_mkSizeColl__T]]) -> 'SizeColl'[_mkSizeColl__T]: ...
    _mkSizeFunc__E = typing.TypeVar('_mkSizeFunc__E')  # <E>
    _mkSizeFunc__A = typing.TypeVar('_mkSizeFunc__A')  # <A>
    _mkSizeFunc__R = typing.TypeVar('_mkSizeFunc__R')  # <R>
    def mkSizeFunc(self, sizeEnv: 'Size'[_mkSizeFunc__E], sizeFunc: int, tA: scalan.RType[_mkSizeFunc__A], tR: scalan.RType[_mkSizeFunc__R]) -> 'SizeFunc'[_mkSizeFunc__E, _mkSizeFunc__A, _mkSizeFunc__R]: ...
    _mkSizeOption__T = typing.TypeVar('_mkSizeOption__T')  # <T>
    def mkSizeOption(self, sizeOpt: scala.Option['Size'[_mkSizeOption__T]]) -> 'SizeOption'[_mkSizeOption__T]: ...
    _mkSizePair__L = typing.TypeVar('_mkSizePair__L')  # <L>
    _mkSizePair__R = typing.TypeVar('_mkSizePair__R')  # <R>
    def mkSizePair(self, l: 'Size'[_mkSizePair__L], r: 'Size'[_mkSizePair__R]) -> 'SizePair'[_mkSizePair__L, _mkSizePair__R]: ...
    _mkSizePrim__T = typing.TypeVar('_mkSizePrim__T')  # <T>
    def mkSizePrim(self, dataSize: int, tT: scalan.RType[_mkSizePrim__T]) -> 'SizePrim'[_mkSizePrim__T]: ...
    def monoidBuilder(self) -> 'MonoidBuilder': ...

class CostedOptionsModule(special.collection.impl.CostedOptionsDefs): ...

class CostsModule(special.collection.impl.CostsDefs): ...

_ExtensionMethods__CollOps__A = typing.TypeVar('_ExtensionMethods__CollOps__A')  # <A>
_ExtensionMethods__NestedCollOps__A = typing.TypeVar('_ExtensionMethods__NestedCollOps__A')  # <A>
_ExtensionMethods__OptionOps__A = typing.TypeVar('_ExtensionMethods__OptionOps__A')  # <A>
_ExtensionMethods__PairCollOps__A = typing.TypeVar('_ExtensionMethods__PairCollOps__A')  # <A>
_ExtensionMethods__PairCollOps__B = typing.TypeVar('_ExtensionMethods__PairCollOps__B')  # <B>
class ExtensionMethods:
    class CollOps(typing.Generic[_ExtensionMethods__CollOps__A]):
        def __init__(self, source: Coll[_ExtensionMethods__CollOps__A]): ...
        _corresponds__B = typing.TypeVar('_corresponds__B')  # <B>
        def corresponds(self, that: Coll[_corresponds__B], p: scala.Function1[scala.Tuple2[_ExtensionMethods__CollOps__A, _corresponds__B], typing.Any]) -> bool: ...
        def distinct(self) -> Coll[_ExtensionMethods__CollOps__A]: ...
        def equals(self, x$1: typing.Any) -> bool: ...
        def hashCode(self) -> int: ...
        def source(self) -> Coll[_ExtensionMethods__CollOps__A]: ...
    class CollOps$:
        MODULE$: typing.ClassVar['ExtensionMethods.CollOps.'] = ...
        def __init__(self): ...
        _corresponds$extension__B = typing.TypeVar('_corresponds$extension__B')  # <B>
        _corresponds$extension__A = typing.TypeVar('_corresponds$extension__A')  # <A>
        def corresponds$extension(self, $this: Coll[_corresponds.extension__A], that: Coll[_corresponds.extension__B], p: scala.Function1[scala.Tuple2[_corresponds.extension__A, _corresponds.extension__B], typing.Any]) -> bool: ...
        _distinct$extension__A = typing.TypeVar('_distinct$extension__A')  # <A>
        def distinct$extension(self, $this: Coll[_distinct.extension__A]) -> Coll[_distinct.extension__A]: ...
        _equals$extension__A = typing.TypeVar('_equals$extension__A')  # <A>
        def equals$extension(self, $this: Coll[_equals.extension__A], x$1: typing.Any) -> bool: ...
        _hashCode$extension__A = typing.TypeVar('_hashCode$extension__A')  # <A>
        def hashCode$extension(self, $this: Coll[_hashCode.extension__A]) -> int: ...
    class NestedCollOps(typing.Generic[_ExtensionMethods__NestedCollOps__A]):
        def __init__(self, source: Coll[Coll[_ExtensionMethods__NestedCollOps__A]]): ...
        def equals(self, x$1: typing.Any) -> bool: ...
        def flatten(self) -> Coll[_ExtensionMethods__NestedCollOps__A]: ...
        def hashCode(self) -> int: ...
        def source(self) -> Coll[Coll[_ExtensionMethods__NestedCollOps__A]]: ...
        def tA(self) -> scalan.RType[_ExtensionMethods__NestedCollOps__A]: ...
    class NestedCollOps$:
        MODULE$: typing.ClassVar['ExtensionMethods.NestedCollOps.'] = ...
        def __init__(self): ...
        _equals$extension__A = typing.TypeVar('_equals$extension__A')  # <A>
        def equals$extension(self, $this: Coll[Coll[_equals.extension__A]], x$1: typing.Any) -> bool: ...
        _flatten$extension__A = typing.TypeVar('_flatten$extension__A')  # <A>
        def flatten$extension(self, $this: Coll[Coll[_flatten.extension__A]]) -> Coll[_flatten.extension__A]: ...
        _hashCode$extension__A = typing.TypeVar('_hashCode$extension__A')  # <A>
        def hashCode$extension(self, $this: Coll[Coll[_hashCode.extension__A]]) -> int: ...
        _tA$extension__A = typing.TypeVar('_tA$extension__A')  # <A>
        def tA$extension(self, $this: Coll[Coll[_tA.extension__A]]) -> scalan.RType[_tA.extension__A]: ...
    class OptionOps(typing.Generic[_ExtensionMethods__OptionOps__A]):
        def __init__(self, source: scala.Option[_ExtensionMethods__OptionOps__A]): ...
        def equals(self, x$1: typing.Any) -> bool: ...
        def hashCode(self) -> int: ...
        def source(self) -> scala.Option[_ExtensionMethods__OptionOps__A]: ...
        def toColl(self, tA: scalan.RType[_ExtensionMethods__OptionOps__A]) -> Coll[_ExtensionMethods__OptionOps__A]: ...
    class OptionOps$:
        MODULE$: typing.ClassVar['ExtensionMethods.OptionOps.'] = ...
        def __init__(self): ...
        _equals$extension__A = typing.TypeVar('_equals$extension__A')  # <A>
        def equals$extension(self, $this: scala.Option[_equals.extension__A], x$1: typing.Any) -> bool: ...
        _hashCode$extension__A = typing.TypeVar('_hashCode$extension__A')  # <A>
        def hashCode$extension(self, $this: scala.Option[_hashCode.extension__A]) -> int: ...
        _toColl$extension__A = typing.TypeVar('_toColl$extension__A')  # <A>
        def toColl$extension(self, $this: scala.Option[_toColl.extension__A], tA: scalan.RType[_toColl.extension__A]) -> Coll[_toColl.extension__A]: ...
    class PairCollOps(typing.Generic[_ExtensionMethods__PairCollOps__A, _ExtensionMethods__PairCollOps__B]):
        def __init__(self, source: Coll[scala.Tuple2[_ExtensionMethods__PairCollOps__A, _ExtensionMethods__PairCollOps__B]]): ...
        def equals(self, x$1: typing.Any) -> bool: ...
        def groupByKey(self) -> Coll[scala.Tuple2[_ExtensionMethods__PairCollOps__A, Coll[_ExtensionMethods__PairCollOps__B]]]: ...
        def hashCode(self) -> int: ...
        _mapFirst__A1 = typing.TypeVar('_mapFirst__A1')  # <A1>
        def mapFirst(self, f: scala.Function1[_ExtensionMethods__PairCollOps__A, _mapFirst__A1], evidence$1: scalan.RType[_mapFirst__A1]) -> Coll[scala.Tuple2[_mapFirst__A1, _ExtensionMethods__PairCollOps__B]]: ...
        _mapSecond__B1 = typing.TypeVar('_mapSecond__B1')  # <B1>
        def mapSecond(self, f: scala.Function1[_ExtensionMethods__PairCollOps__B, _mapSecond__B1], evidence$2: scalan.RType[_mapSecond__B1]) -> Coll[scala.Tuple2[_ExtensionMethods__PairCollOps__A, _mapSecond__B1]]: ...
        def reduceByKey(self, r: scala.Function1[scala.Tuple2[_ExtensionMethods__PairCollOps__B, _ExtensionMethods__PairCollOps__B], _ExtensionMethods__PairCollOps__B]) -> Coll[scala.Tuple2[_ExtensionMethods__PairCollOps__A, _ExtensionMethods__PairCollOps__B]]: ...
        def source(self) -> Coll[scala.Tuple2[_ExtensionMethods__PairCollOps__A, _ExtensionMethods__PairCollOps__B]]: ...
        def sumByKey(self, m: 'Monoid'[_ExtensionMethods__PairCollOps__B]) -> Coll[scala.Tuple2[_ExtensionMethods__PairCollOps__A, _ExtensionMethods__PairCollOps__B]]: ...
        def tA(self) -> scalan.RType[_ExtensionMethods__PairCollOps__A]: ...
        def tB(self) -> scalan.RType[_ExtensionMethods__PairCollOps__B]: ...
        def unionSetByKey(self, that: Coll[scala.Tuple2[_ExtensionMethods__PairCollOps__A, _ExtensionMethods__PairCollOps__B]]) -> Coll[scala.Tuple2[_ExtensionMethods__PairCollOps__A, _ExtensionMethods__PairCollOps__B]]: ...
    class PairCollOps$:
        MODULE$: typing.ClassVar['ExtensionMethods.PairCollOps.'] = ...
        def __init__(self): ...
        _equals$extension__A = typing.TypeVar('_equals$extension__A')  # <A>
        _equals$extension__B = typing.TypeVar('_equals$extension__B')  # <B>
        def equals$extension(self, $this: Coll[scala.Tuple2[_equals.extension__A, _equals.extension__B]], x$1: typing.Any) -> bool: ...
        _groupByKey$extension__A = typing.TypeVar('_groupByKey$extension__A')  # <A>
        _groupByKey$extension__B = typing.TypeVar('_groupByKey$extension__B')  # <B>
        def groupByKey$extension(self, $this: Coll[scala.Tuple2[_groupByKey.extension__A, _groupByKey.extension__B]]) -> Coll[scala.Tuple2[_groupByKey.extension__A, Coll[_groupByKey.extension__B]]]: ...
        _hashCode$extension__A = typing.TypeVar('_hashCode$extension__A')  # <A>
        _hashCode$extension__B = typing.TypeVar('_hashCode$extension__B')  # <B>
        def hashCode$extension(self, $this: Coll[scala.Tuple2[_hashCode.extension__A, _hashCode.extension__B]]) -> int: ...
        _mapFirst$extension__A1 = typing.TypeVar('_mapFirst$extension__A1')  # <A1>
        _mapFirst$extension__A = typing.TypeVar('_mapFirst$extension__A')  # <A>
        _mapFirst$extension__B = typing.TypeVar('_mapFirst$extension__B')  # <B>
        def mapFirst$extension(self, $this: Coll[scala.Tuple2[_mapFirst.extension__A, _mapFirst.extension__B]], f: scala.Function1[_mapFirst.extension__A, _mapFirst.extension__A1], evidence$1: scalan.RType[_mapFirst.extension__A1]) -> Coll[scala.Tuple2[_mapFirst.extension__A1, _mapFirst.extension__B]]: ...
        _mapSecond$extension__B1 = typing.TypeVar('_mapSecond$extension__B1')  # <B1>
        _mapSecond$extension__A = typing.TypeVar('_mapSecond$extension__A')  # <A>
        _mapSecond$extension__B = typing.TypeVar('_mapSecond$extension__B')  # <B>
        def mapSecond$extension(self, $this: Coll[scala.Tuple2[_mapSecond.extension__A, _mapSecond.extension__B]], f: scala.Function1[_mapSecond.extension__B, _mapSecond.extension__B1], evidence$2: scalan.RType[_mapSecond.extension__B1]) -> Coll[scala.Tuple2[_mapSecond.extension__A, _mapSecond.extension__B1]]: ...
        _reduceByKey$extension__A = typing.TypeVar('_reduceByKey$extension__A')  # <A>
        _reduceByKey$extension__B = typing.TypeVar('_reduceByKey$extension__B')  # <B>
        def reduceByKey$extension(self, $this: Coll[scala.Tuple2[_reduceByKey.extension__A, _reduceByKey.extension__B]], r: scala.Function1[scala.Tuple2[_reduceByKey.extension__B, _reduceByKey.extension__B], _reduceByKey.extension__B]) -> Coll[scala.Tuple2[_reduceByKey.extension__A, _reduceByKey.extension__B]]: ...
        _sumByKey$extension__A = typing.TypeVar('_sumByKey$extension__A')  # <A>
        _sumByKey$extension__B = typing.TypeVar('_sumByKey$extension__B')  # <B>
        def sumByKey$extension(self, $this: Coll[scala.Tuple2[_sumByKey.extension__A, _sumByKey.extension__B]], m: 'Monoid'[_sumByKey.extension__B]) -> Coll[scala.Tuple2[_sumByKey.extension__A, _sumByKey.extension__B]]: ...
        _tA$extension__A = typing.TypeVar('_tA$extension__A')  # <A>
        _tA$extension__B = typing.TypeVar('_tA$extension__B')  # <B>
        def tA$extension(self, $this: Coll[scala.Tuple2[_tA.extension__A, _tA.extension__B]]) -> scalan.RType[_tA.extension__A]: ...
        _tB$extension__A = typing.TypeVar('_tB$extension__A')  # <A>
        _tB$extension__B = typing.TypeVar('_tB$extension__B')  # <B>
        def tB$extension(self, $this: Coll[scala.Tuple2[_tB.extension__A, _tB.extension__B]]) -> scalan.RType[_tB.extension__B]: ...
        _unionSetByKey$extension__A = typing.TypeVar('_unionSetByKey$extension__A')  # <A>
        _unionSetByKey$extension__B = typing.TypeVar('_unionSetByKey$extension__B')  # <B>
        def unionSetByKey$extension(self, $this: Coll[scala.Tuple2[_unionSetByKey.extension__A, _unionSetByKey.extension__B]], that: Coll[scala.Tuple2[_unionSetByKey.extension__A, _unionSetByKey.extension__B]]) -> Coll[scala.Tuple2[_unionSetByKey.extension__A, _unionSetByKey.extension__B]]: ...

class Helpers:
    _asColl__T = typing.TypeVar('_asColl__T')  # <T>
    @staticmethod
    def asColl(coll: Coll[typing.Any]) -> Coll[_asColl__T]: ...
    _assertSameLength__A = typing.TypeVar('_assertSameLength__A')  # <A>
    _assertSameLength__B = typing.TypeVar('_assertSameLength__B')  # <B>
    @staticmethod
    def assertSameLength(xs: Coll[_assertSameLength__A], ys: Coll[_assertSameLength__B]) -> None: ...
    _mapReduce__A = typing.TypeVar('_mapReduce__A')  # <A>
    _mapReduce__K = typing.TypeVar('_mapReduce__K')  # <K>
    _mapReduce__V = typing.TypeVar('_mapReduce__V')  # <V>
    @staticmethod
    def mapReduce(arr: typing.Any, m: scala.Function1[_mapReduce__A, scala.Tuple2[_mapReduce__K, _mapReduce__V]], r: scala.Function1[scala.Tuple2[_mapReduce__V, _mapReduce__V], _mapReduce__V], evidence$1: scala.reflect.ClassTag[_mapReduce__K], evidence$2: scala.reflect.ClassTag[_mapReduce__V]) -> scala.Tuple2[typing.Any, typing.Any]: ...
    _mapToArrays__K = typing.TypeVar('_mapToArrays__K')  # <K>
    _mapToArrays__V = typing.TypeVar('_mapToArrays__V')  # <V>
    @staticmethod
    def mapToArrays(m: scala.collection.immutable.Map[_mapToArrays__K, _mapToArrays__V], evidence$3: scala.reflect.ClassTag[_mapToArrays__K], evidence$4: scala.reflect.ClassTag[_mapToArrays__V]) -> scala.Tuple2[typing.Any, typing.Any]: ...
    _requireSameLength__A = typing.TypeVar('_requireSameLength__A')  # <A>
    _requireSameLength__B = typing.TypeVar('_requireSameLength__B')  # <B>
    @staticmethod
    def requireSameLength(xs: Coll[_requireSameLength__A], ys: Coll[_requireSameLength__B]) -> None: ...

_Monoid__T = typing.TypeVar('_Monoid__T')  # <T>
class Monoid(typing.Generic[_Monoid__T]):
    def plus(self, x: _Monoid__T, y: _Monoid__T) -> _Monoid__T: ...
    def plus$mcI$sp(self, x: int, y: int) -> int: ...
    def plus$mcJ$sp(self, x: int, y: int) -> int: ...
    def power(self, x: _Monoid__T, n: int) -> _Monoid__T: ...
    def power$mcI$sp(self, x: int, n: int) -> int: ...
    def power$mcJ$sp(self, x: int, n: int) -> int: ...
    def zero(self) -> _Monoid__T: ...
    def zero$mcI$sp(self) -> int: ...
    def zero$mcJ$sp(self) -> int: ...

class MonoidBuilder:
    def intMaxMonoid(self) -> Monoid[typing.Any]: ...
    def intMinMonoid(self) -> Monoid[typing.Any]: ...
    def intPlusMonoid(self) -> Monoid[typing.Any]: ...
    def longMaxMonoid(self) -> Monoid[typing.Any]: ...
    def longMinMonoid(self) -> Monoid[typing.Any]: ...
    def longPlusMonoid(self) -> Monoid[typing.Any]: ...
    _pairMonoid__A = typing.TypeVar('_pairMonoid__A')  # <A>
    _pairMonoid__B = typing.TypeVar('_pairMonoid__B')  # <B>
    def pairMonoid(self, m1: Monoid[_pairMonoid__A], m2: Monoid[_pairMonoid__B]) -> Monoid[scala.Tuple2[_pairMonoid__A, _pairMonoid__B]]: ...
    def pairMonoid$mIIc$sp(self, m1: Monoid[typing.Any], m2: Monoid[typing.Any]) -> Monoid[scala.Tuple2[typing.Any, typing.Any]]: ...
    def pairMonoid$mIJc$sp(self, m1: Monoid[typing.Any], m2: Monoid[typing.Any]) -> Monoid[scala.Tuple2[typing.Any, typing.Any]]: ...
    def pairMonoid$mJIc$sp(self, m1: Monoid[typing.Any], m2: Monoid[typing.Any]) -> Monoid[scala.Tuple2[typing.Any, typing.Any]]: ...
    def pairMonoid$mJJc$sp(self, m1: Monoid[typing.Any], m2: Monoid[typing.Any]) -> Monoid[scala.Tuple2[typing.Any, typing.Any]]: ...

class MonoidInstancesModule(special.collection.impl.MonoidInstancesDefs): ...

_Monoids__Monoid__T = typing.TypeVar('_Monoids__Monoid__T')  # <T>
class Monoids:
    @staticmethod
    def $init$($this: 'Monoids') -> None: ...
    class Monoid(scalan.Base.Def['Monoids.Monoid'[_Monoids__Monoid__T]], typing.Generic[_Monoids__Monoid__T]):
        def eT(self) -> scalan.TypeDescs.Elem[_Monoids__Monoid__T]: ...
        def plus(self, x: scalan.Base.Ref[_Monoids__Monoid__T], y: scalan.Base.Ref[_Monoids__Monoid__T]) -> scalan.Base.Ref[_Monoids__Monoid__T]: ...
        def power(self, x: scalan.Base.Ref[_Monoids__Monoid__T], n: scalan.Base.Ref[typing.Any]) -> scalan.Base.Ref[_Monoids__Monoid__T]: ...
        def zero(self) -> scalan.Base.Ref[_Monoids__Monoid__T]: ...
    class MonoidBuilder(scalan.Base.Def['Monoids.MonoidBuilder']):
        def intPlusMonoid(self) -> scalan.Base.Ref['Monoids.Monoid'[typing.Any]]: ...
        def longPlusMonoid(self) -> scalan.Base.Ref['Monoids.Monoid'[typing.Any]]: ...
    class MonoidBuilderCompanion: ...
    class MonoidCompanion: ...

class MonoidsModule(special.collection.impl.MonoidsDefs): ...

_ReplCollType__A = typing.TypeVar('_ReplCollType__A')  # <A>
class ReplCollType(scalan.RType['ReplColl'[_ReplCollType__A]], scala.Product, scala.Serializable, typing.Generic[_ReplCollType__A]):
    def __init__(self, tItem: scalan.RType[_ReplCollType__A]): ...
    _apply_0__A = typing.TypeVar('_apply_0__A')  # <A>
    _apply_1__A = typing.TypeVar('_apply_1__A')  # <A>
    @typing.overload
    @staticmethod
    def apply(t: scalan.RType[_apply_0__A]) -> scalan.RType[_apply_0__A]: ...
    @typing.overload
    @staticmethod
    def apply(tItem: scalan.RType[_apply_1__A]) -> 'ReplCollType'[_apply_1__A]: ...
    def canEqual(self, x$1: typing.Any) -> bool: ...
    def classTag(self) -> scala.reflect.ClassTag['ReplColl'[_ReplCollType__A]]: ...
    _copy__A = typing.TypeVar('_copy__A')  # <A>
    def copy(self, tItem: scalan.RType[typing.Any]) -> 'ReplCollType'[typing.Any]: ...
    _copy$default$1__A = typing.TypeVar('_copy$default$1__A')  # <A>
    def copy$default$1(self) -> scalan.RType[typing.Any]: ...
    def equals(self, x$1: typing.Any) -> bool: ...
    def hashCode(self) -> int: ...
    def isConstantSize(self) -> bool: ...
    def name(self) -> str: ...
    def productArity(self) -> int: ...
    def productElement(self, x$1: int) -> typing.Any: ...
    def productIterator(self) -> scala.collection.Iterator[typing.Any]: ...
    def productPrefix(self) -> str: ...
    def tItem(self) -> scalan.RType[_ReplCollType__A]: ...
    def toString(self) -> str: ...
    _unapply__A = typing.TypeVar('_unapply__A')  # <A>
    @staticmethod
    def unapply(x$0: 'ReplCollType'[_unapply__A]) -> scala.Option[scalan.RType[_unapply__A]]: ...

_Size__Val = typing.TypeVar('_Size__Val')  # <Val>
class Size(typing.Generic[_Size__Val]):
    def dataSize(self) -> int: ...

_SizeCollType__A = typing.TypeVar('_SizeCollType__A')  # <A>
class SizeCollType(scalan.RType['SizeColl'[_SizeCollType__A]], scala.Product, scala.Serializable, typing.Generic[_SizeCollType__A]):
    def __init__(self, tItem: scalan.RType[_SizeCollType__A]): ...
    _apply_0__A = typing.TypeVar('_apply_0__A')  # <A>
    _apply_1__A = typing.TypeVar('_apply_1__A')  # <A>
    @typing.overload
    @staticmethod
    def apply(t: scalan.RType[_apply_0__A]) -> scalan.RType[_apply_0__A]: ...
    @typing.overload
    @staticmethod
    def apply(tItem: scalan.RType[_apply_1__A]) -> 'SizeCollType'[_apply_1__A]: ...
    def canEqual(self, x$1: typing.Any) -> bool: ...
    def classTag(self) -> scala.reflect.ClassTag['SizeColl'[_SizeCollType__A]]: ...
    _copy__A = typing.TypeVar('_copy__A')  # <A>
    def copy(self, tItem: scalan.RType[typing.Any]) -> 'SizeCollType'[typing.Any]: ...
    _copy$default$1__A = typing.TypeVar('_copy$default$1__A')  # <A>
    def copy$default$1(self) -> scalan.RType[typing.Any]: ...
    def equals(self, x$1: typing.Any) -> bool: ...
    def hashCode(self) -> int: ...
    def isConstantSize(self) -> bool: ...
    def name(self) -> str: ...
    def productArity(self) -> int: ...
    def productElement(self, x$1: int) -> typing.Any: ...
    def productIterator(self) -> scala.collection.Iterator[typing.Any]: ...
    def productPrefix(self) -> str: ...
    def tItem(self) -> scalan.RType[_SizeCollType__A]: ...
    def toString(self) -> str: ...
    _unapply__A = typing.TypeVar('_unapply__A')  # <A>
    @staticmethod
    def unapply(x$0: 'SizeCollType'[_unapply__A]) -> scala.Option[scalan.RType[_unapply__A]]: ...

_SizeFuncType__E = typing.TypeVar('_SizeFuncType__E')  # <E>
_SizeFuncType__A = typing.TypeVar('_SizeFuncType__A')  # <A>
_SizeFuncType__B = typing.TypeVar('_SizeFuncType__B')  # <B>
class SizeFuncType(scalan.RType['SizeFunc'[_SizeFuncType__E, _SizeFuncType__A, _SizeFuncType__B]], scala.Product, scala.Serializable, typing.Generic[_SizeFuncType__E, _SizeFuncType__A, _SizeFuncType__B]):
    def __init__(self, tEnv: scalan.RType[_SizeFuncType__E], tDom: scalan.RType[_SizeFuncType__A], tRange: scalan.RType[_SizeFuncType__B]): ...
    _apply_0__A = typing.TypeVar('_apply_0__A')  # <A>
    _apply_1__E = typing.TypeVar('_apply_1__E')  # <E>
    _apply_1__A = typing.TypeVar('_apply_1__A')  # <A>
    _apply_1__B = typing.TypeVar('_apply_1__B')  # <B>
    @typing.overload
    @staticmethod
    def apply(t: scalan.RType[_apply_0__A]) -> scalan.RType[_apply_0__A]: ...
    @typing.overload
    @staticmethod
    def apply(tEnv: scalan.RType[_apply_1__E], tDom: scalan.RType[_apply_1__A], tRange: scalan.RType[_apply_1__B]) -> 'SizeFuncType'[_apply_1__E, _apply_1__A, _apply_1__B]: ...
    def canEqual(self, x$1: typing.Any) -> bool: ...
    def classTag(self) -> scala.reflect.ClassTag['SizeFunc'[_SizeFuncType__E, _SizeFuncType__A, _SizeFuncType__B]]: ...
    _copy__E = typing.TypeVar('_copy__E')  # <E>
    _copy__A = typing.TypeVar('_copy__A')  # <A>
    _copy__B = typing.TypeVar('_copy__B')  # <B>
    def copy(self, tEnv: scalan.RType[typing.Any], tDom: scalan.RType[typing.Any], tRange: scalan.RType[typing.Any]) -> 'SizeFuncType'[typing.Any, typing.Any, typing.Any]: ...
    _copy$default$1__E = typing.TypeVar('_copy$default$1__E')  # <E>
    _copy$default$1__A = typing.TypeVar('_copy$default$1__A')  # <A>
    _copy$default$1__B = typing.TypeVar('_copy$default$1__B')  # <B>
    def copy$default$1(self) -> scalan.RType[typing.Any]: ...
    _copy$default$2__E = typing.TypeVar('_copy$default$2__E')  # <E>
    _copy$default$2__A = typing.TypeVar('_copy$default$2__A')  # <A>
    _copy$default$2__B = typing.TypeVar('_copy$default$2__B')  # <B>
    def copy$default$2(self) -> scalan.RType[typing.Any]: ...
    _copy$default$3__E = typing.TypeVar('_copy$default$3__E')  # <E>
    _copy$default$3__A = typing.TypeVar('_copy$default$3__A')  # <A>
    _copy$default$3__B = typing.TypeVar('_copy$default$3__B')  # <B>
    def copy$default$3(self) -> scalan.RType[typing.Any]: ...
    def equals(self, x$1: typing.Any) -> bool: ...
    def hashCode(self) -> int: ...
    def isConstantSize(self) -> bool: ...
    def name(self) -> str: ...
    def productArity(self) -> int: ...
    def productElement(self, x$1: int) -> typing.Any: ...
    def productIterator(self) -> scala.collection.Iterator[typing.Any]: ...
    def productPrefix(self) -> str: ...
    def tDom(self) -> scalan.RType[_SizeFuncType__A]: ...
    def tEnv(self) -> scalan.RType[_SizeFuncType__E]: ...
    def tRange(self) -> scalan.RType[_SizeFuncType__B]: ...
    def toString(self) -> str: ...
    _unapply__E = typing.TypeVar('_unapply__E')  # <E>
    _unapply__A = typing.TypeVar('_unapply__A')  # <A>
    _unapply__B = typing.TypeVar('_unapply__B')  # <B>
    @staticmethod
    def unapply(x$0: 'SizeFuncType'[_unapply__E, _unapply__A, _unapply__B]) -> scala.Option[scala.Tuple3[scalan.RType[_unapply__E], scalan.RType[_unapply__A], scalan.RType[_unapply__B]]]: ...

_SizeOptionType__A = typing.TypeVar('_SizeOptionType__A')  # <A>
class SizeOptionType(scalan.RType['SizeOption'[_SizeOptionType__A]], scala.Product, scala.Serializable, typing.Generic[_SizeOptionType__A]):
    def __init__(self, tItem: scalan.RType[_SizeOptionType__A]): ...
    _apply_0__A = typing.TypeVar('_apply_0__A')  # <A>
    _apply_1__A = typing.TypeVar('_apply_1__A')  # <A>
    @typing.overload
    @staticmethod
    def apply(t: scalan.RType[_apply_0__A]) -> scalan.RType[_apply_0__A]: ...
    @typing.overload
    @staticmethod
    def apply(tItem: scalan.RType[_apply_1__A]) -> 'SizeOptionType'[_apply_1__A]: ...
    def canEqual(self, x$1: typing.Any) -> bool: ...
    def classTag(self) -> scala.reflect.ClassTag['SizeOption'[_SizeOptionType__A]]: ...
    _copy__A = typing.TypeVar('_copy__A')  # <A>
    def copy(self, tItem: scalan.RType[typing.Any]) -> 'SizeOptionType'[typing.Any]: ...
    _copy$default$1__A = typing.TypeVar('_copy$default$1__A')  # <A>
    def copy$default$1(self) -> scalan.RType[typing.Any]: ...
    def equals(self, x$1: typing.Any) -> bool: ...
    def hashCode(self) -> int: ...
    def isConstantSize(self) -> bool: ...
    def name(self) -> str: ...
    def productArity(self) -> int: ...
    def productElement(self, x$1: int) -> typing.Any: ...
    def productIterator(self) -> scala.collection.Iterator[typing.Any]: ...
    def productPrefix(self) -> str: ...
    def tItem(self) -> scalan.RType[_SizeOptionType__A]: ...
    def toString(self) -> str: ...
    _unapply__A = typing.TypeVar('_unapply__A')  # <A>
    @staticmethod
    def unapply(x$0: 'SizeOptionType'[_unapply__A]) -> scala.Option[scalan.RType[_unapply__A]]: ...

_SizePairType__A = typing.TypeVar('_SizePairType__A')  # <A>
_SizePairType__B = typing.TypeVar('_SizePairType__B')  # <B>
class SizePairType(scalan.RType['SizePair'[_SizePairType__A, _SizePairType__B]], scala.Product, scala.Serializable, typing.Generic[_SizePairType__A, _SizePairType__B]):
    def __init__(self, tFst: scalan.RType[_SizePairType__A], tSnd: scalan.RType[_SizePairType__B]): ...
    _apply_0__A = typing.TypeVar('_apply_0__A')  # <A>
    _apply_1__A = typing.TypeVar('_apply_1__A')  # <A>
    _apply_1__B = typing.TypeVar('_apply_1__B')  # <B>
    @typing.overload
    @staticmethod
    def apply(t: scalan.RType[_apply_0__A]) -> scalan.RType[_apply_0__A]: ...
    @typing.overload
    @staticmethod
    def apply(tFst: scalan.RType[_apply_1__A], tSnd: scalan.RType[_apply_1__B]) -> 'SizePairType'[_apply_1__A, _apply_1__B]: ...
    def canEqual(self, x$1: typing.Any) -> bool: ...
    def classTag(self) -> scala.reflect.ClassTag['SizePair'[_SizePairType__A, _SizePairType__B]]: ...
    _copy__A = typing.TypeVar('_copy__A')  # <A>
    _copy__B = typing.TypeVar('_copy__B')  # <B>
    def copy(self, tFst: scalan.RType[typing.Any], tSnd: scalan.RType[typing.Any]) -> 'SizePairType'[typing.Any, typing.Any]: ...
    _copy$default$1__A = typing.TypeVar('_copy$default$1__A')  # <A>
    _copy$default$1__B = typing.TypeVar('_copy$default$1__B')  # <B>
    def copy$default$1(self) -> scalan.RType[typing.Any]: ...
    _copy$default$2__A = typing.TypeVar('_copy$default$2__A')  # <A>
    _copy$default$2__B = typing.TypeVar('_copy$default$2__B')  # <B>
    def copy$default$2(self) -> scalan.RType[typing.Any]: ...
    def equals(self, x$1: typing.Any) -> bool: ...
    def hashCode(self) -> int: ...
    def isConstantSize(self) -> bool: ...
    def name(self) -> str: ...
    def productArity(self) -> int: ...
    def productElement(self, x$1: int) -> typing.Any: ...
    def productIterator(self) -> scala.collection.Iterator[typing.Any]: ...
    def productPrefix(self) -> str: ...
    def tFst(self) -> scalan.RType[_SizePairType__A]: ...
    def tSnd(self) -> scalan.RType[_SizePairType__B]: ...
    def toString(self) -> str: ...
    _unapply__A = typing.TypeVar('_unapply__A')  # <A>
    _unapply__B = typing.TypeVar('_unapply__B')  # <B>
    @staticmethod
    def unapply(x$0: 'SizePairType'[_unapply__A, _unapply__B]) -> scala.Option[scala.Tuple2[scalan.RType[_unapply__A], scalan.RType[_unapply__B]]]: ...

_SizePrimType__A = typing.TypeVar('_SizePrimType__A')  # <A>
class SizePrimType(scalan.RType['SizePrim'[_SizePrimType__A]], scala.Product, scala.Serializable, typing.Generic[_SizePrimType__A]):
    def __init__(self, tVal: scalan.RType[_SizePrimType__A]): ...
    _apply_0__A = typing.TypeVar('_apply_0__A')  # <A>
    _apply_1__A = typing.TypeVar('_apply_1__A')  # <A>
    @typing.overload
    @staticmethod
    def apply(t: scalan.RType[_apply_0__A]) -> scalan.RType[_apply_0__A]: ...
    @typing.overload
    @staticmethod
    def apply(tVal: scalan.RType[_apply_1__A]) -> 'SizePrimType'[_apply_1__A]: ...
    def canEqual(self, x$1: typing.Any) -> bool: ...
    def classTag(self) -> scala.reflect.ClassTag['SizePrim'[_SizePrimType__A]]: ...
    _copy__A = typing.TypeVar('_copy__A')  # <A>
    def copy(self, tVal: scalan.RType[typing.Any]) -> 'SizePrimType'[typing.Any]: ...
    _copy$default$1__A = typing.TypeVar('_copy$default$1__A')  # <A>
    def copy$default$1(self) -> scalan.RType[typing.Any]: ...
    def equals(self, x$1: typing.Any) -> bool: ...
    def hashCode(self) -> int: ...
    def isConstantSize(self) -> bool: ...
    def name(self) -> str: ...
    def productArity(self) -> int: ...
    def productElement(self, x$1: int) -> typing.Any: ...
    def productIterator(self) -> scala.collection.Iterator[typing.Any]: ...
    def productPrefix(self) -> str: ...
    def tVal(self) -> scalan.RType[_SizePrimType__A]: ...
    def toString(self) -> str: ...
    _unapply__A = typing.TypeVar('_unapply__A')  # <A>
    @staticmethod
    def unapply(x$0: 'SizePrimType'[_unapply__A]) -> scala.Option[scalan.RType[_unapply__A]]: ...

_SizeType__A = typing.TypeVar('_SizeType__A')  # <A>
class SizeType(scalan.RType[Size[_SizeType__A]], scala.Product, scala.Serializable, typing.Generic[_SizeType__A]):
    def __init__(self, tVal: scalan.RType[_SizeType__A]): ...
    _apply_0__A = typing.TypeVar('_apply_0__A')  # <A>
    _apply_1__A = typing.TypeVar('_apply_1__A')  # <A>
    @typing.overload
    @staticmethod
    def apply(t: scalan.RType[_apply_0__A]) -> scalan.RType[_apply_0__A]: ...
    @typing.overload
    @staticmethod
    def apply(tVal: scalan.RType[_apply_1__A]) -> 'SizeType'[_apply_1__A]: ...
    def canEqual(self, x$1: typing.Any) -> bool: ...
    def classTag(self) -> scala.reflect.ClassTag[Size[_SizeType__A]]: ...
    _copy__A = typing.TypeVar('_copy__A')  # <A>
    def copy(self, tVal: scalan.RType[typing.Any]) -> 'SizeType'[typing.Any]: ...
    _copy$default$1__A = typing.TypeVar('_copy$default$1__A')  # <A>
    def copy$default$1(self) -> scalan.RType[typing.Any]: ...
    def equals(self, x$1: typing.Any) -> bool: ...
    def hashCode(self) -> int: ...
    def isConstantSize(self) -> bool: ...
    def name(self) -> str: ...
    def productArity(self) -> int: ...
    def productElement(self, x$1: int) -> typing.Any: ...
    def productIterator(self) -> scala.collection.Iterator[typing.Any]: ...
    def productPrefix(self) -> str: ...
    def tVal(self) -> scalan.RType[_SizeType__A]: ...
    def toString(self) -> str: ...
    _unapply__A = typing.TypeVar('_unapply__A')  # <A>
    @staticmethod
    def unapply(x$0: 'SizeType'[_unapply__A]) -> scala.Option[scalan.RType[_unapply__A]]: ...

class SizesModule(special.collection.impl.SizesDefs): ...

class package:
    @staticmethod
    def collBuilderRType() -> scalan.RType[CollBuilder]: ...
    _collRType__A = typing.TypeVar('_collRType__A')  # <A>
    @staticmethod
    def collRType(tA: scalan.RType[_collRType__A]) -> scalan.RType[Coll[_collRType__A]]: ...
    _extendCollType__A = typing.TypeVar('_extendCollType__A')  # <A>
    @staticmethod
    def extendCollType(ct: scalan.RType[Coll[_extendCollType__A]]) -> CollType[_extendCollType__A]: ...
    _extendSizeCollType__A = typing.TypeVar('_extendSizeCollType__A')  # <A>
    @staticmethod
    def extendSizeCollType(ct: scalan.RType['SizeColl'[_extendSizeCollType__A]]) -> SizeCollType[_extendSizeCollType__A]: ...
    _extendSizeFuncType__E = typing.TypeVar('_extendSizeFuncType__E')  # <E>
    _extendSizeFuncType__A = typing.TypeVar('_extendSizeFuncType__A')  # <A>
    _extendSizeFuncType__B = typing.TypeVar('_extendSizeFuncType__B')  # <B>
    @staticmethod
    def extendSizeFuncType(ct: scalan.RType['SizeFunc'[_extendSizeFuncType__E, _extendSizeFuncType__A, _extendSizeFuncType__B]]) -> SizeFuncType[_extendSizeFuncType__E, _extendSizeFuncType__A, _extendSizeFuncType__B]: ...
    _extendSizeOptionType__A = typing.TypeVar('_extendSizeOptionType__A')  # <A>
    @staticmethod
    def extendSizeOptionType(ct: scalan.RType['SizeOption'[_extendSizeOptionType__A]]) -> SizeOptionType[_extendSizeOptionType__A]: ...
    _extendSizePairType__A = typing.TypeVar('_extendSizePairType__A')  # <A>
    _extendSizePairType__B = typing.TypeVar('_extendSizePairType__B')  # <B>
    @staticmethod
    def extendSizePairType(ct: scalan.RType['SizePair'[_extendSizePairType__A, _extendSizePairType__B]]) -> SizePairType[_extendSizePairType__A, _extendSizePairType__B]: ...
    _extendSizePrimType__A = typing.TypeVar('_extendSizePrimType__A')  # <A>
    @staticmethod
    def extendSizePrimType(ct: scalan.RType['SizePrim'[_extendSizePrimType__A]]) -> SizePrimType[_extendSizePrimType__A]: ...
    _extendSizeType__A = typing.TypeVar('_extendSizeType__A')  # <A>
    @staticmethod
    def extendSizeType(ct: scalan.RType[Size[_extendSizeType__A]]) -> SizeType[_extendSizeType__A]: ...
    _replCollRType__A = typing.TypeVar('_replCollRType__A')  # <A>
    @staticmethod
    def replCollRType(tA: scalan.RType[_replCollRType__A]) -> scalan.RType['ReplColl'[_replCollRType__A]]: ...
    _sizeCollRType__A = typing.TypeVar('_sizeCollRType__A')  # <A>
    @staticmethod
    def sizeCollRType(tA: scalan.RType[_sizeCollRType__A]) -> scalan.RType['SizeColl'[_sizeCollRType__A]]: ...
    _sizeFuncType__E = typing.TypeVar('_sizeFuncType__E')  # <E>
    _sizeFuncType__A = typing.TypeVar('_sizeFuncType__A')  # <A>
    _sizeFuncType__B = typing.TypeVar('_sizeFuncType__B')  # <B>
    @staticmethod
    def sizeFuncType(tE: scalan.RType[_sizeFuncType__E], tA: scalan.RType[_sizeFuncType__A], tB: scalan.RType[_sizeFuncType__B]) -> scalan.RType['SizeFunc'[_sizeFuncType__E, _sizeFuncType__A, _sizeFuncType__B]]: ...
    _sizeOptionRType__A = typing.TypeVar('_sizeOptionRType__A')  # <A>
    @staticmethod
    def sizeOptionRType(tA: scalan.RType[_sizeOptionRType__A]) -> scalan.RType['SizeOption'[_sizeOptionRType__A]]: ...
    _sizePairRType__A = typing.TypeVar('_sizePairRType__A')  # <A>
    _sizePairRType__B = typing.TypeVar('_sizePairRType__B')  # <B>
    @staticmethod
    def sizePairRType(tA: scalan.RType[_sizePairRType__A], tB: scalan.RType[_sizePairRType__B]) -> scalan.RType['SizePair'[_sizePairRType__A, _sizePairRType__B]]: ...
    _sizePrimRType__A = typing.TypeVar('_sizePrimRType__A')  # <A>
    @staticmethod
    def sizePrimRType(tA: scalan.RType[_sizePrimRType__A]) -> scalan.RType['SizePrim'[_sizePrimRType__A]]: ...
    _sizeRType__A = typing.TypeVar('_sizeRType__A')  # <A>
    @staticmethod
    def sizeRType(tA: scalan.RType[_sizeRType__A]) -> scalan.RType[Size[_sizeRType__A]]: ...

class CCostedBuilder(CostedBuilder):
    def __init__(self): ...
    def ConstructSumCost(self) -> int: ...
    def ConstructTupleCost(self) -> int: ...
    def SelectFieldCost(self) -> int: ...
    def SumTagSize(self) -> int: ...
    _costedValue__T = typing.TypeVar('_costedValue__T')  # <T>
    def costedValue(self, x: _costedValue__T, optCost: scala.Option[typing.Any], cT: scalan.RType[_costedValue__T]) -> Costed[_costedValue__T]: ...
    _defaultValue__T = typing.TypeVar('_defaultValue__T')  # <T>
    def defaultValue(self, valueType: scalan.RType[_defaultValue__T]) -> _defaultValue__T: ...
    _mkCostedColl__T = typing.TypeVar('_mkCostedColl__T')  # <T>
    def mkCostedColl(self, values: Coll[_mkCostedColl__T], costs: Coll[typing.Any], sizes: Coll[Size[_mkCostedColl__T]], valuesCost: int) -> 'CostedColl'[_mkCostedColl__T]: ...
    _mkCostedFunc__Env = typing.TypeVar('_mkCostedFunc__Env')  # <Env>
    _mkCostedFunc__Arg = typing.TypeVar('_mkCostedFunc__Arg')  # <Arg>
    _mkCostedFunc__Res = typing.TypeVar('_mkCostedFunc__Res')  # <Res>
    def mkCostedFunc(self, envCosted: Costed[_mkCostedFunc__Env], func: scala.Function1[Costed[_mkCostedFunc__Arg], Costed[_mkCostedFunc__Res]], cost: int, size: Size[scala.Function1[_mkCostedFunc__Arg, _mkCostedFunc__Res]]) -> 'CostedFunc'[_mkCostedFunc__Env, _mkCostedFunc__Arg, _mkCostedFunc__Res]: ...
    _mkCostedOption__T = typing.TypeVar('_mkCostedOption__T')  # <T>
    def mkCostedOption(self, value: scala.Option[_mkCostedOption__T], costOpt: scala.Option[typing.Any], sizeOpt: scala.Option[Size[_mkCostedOption__T]], accumulatedCost: int) -> 'CostedOption'[_mkCostedOption__T]: ...
    _mkCostedPair__L = typing.TypeVar('_mkCostedPair__L')  # <L>
    _mkCostedPair__R = typing.TypeVar('_mkCostedPair__R')  # <R>
    def mkCostedPair(self, first: Costed[_mkCostedPair__L], second: Costed[_mkCostedPair__R], accCost: int) -> 'CostedPair'[_mkCostedPair__L, _mkCostedPair__R]: ...
    _mkCostedPrim__T = typing.TypeVar('_mkCostedPrim__T')  # <T>
    def mkCostedPrim(self, value: _mkCostedPrim__T, cost: int, size: Size[_mkCostedPrim__T]) -> 'CostedPrim'[_mkCostedPrim__T]: ...
    _mkSizeColl__T = typing.TypeVar('_mkSizeColl__T')  # <T>
    def mkSizeColl(self, sizes: Coll[Size[_mkSizeColl__T]]) -> 'SizeColl'[_mkSizeColl__T]: ...
    _mkSizeFunc__E = typing.TypeVar('_mkSizeFunc__E')  # <E>
    _mkSizeFunc__A = typing.TypeVar('_mkSizeFunc__A')  # <A>
    _mkSizeFunc__R = typing.TypeVar('_mkSizeFunc__R')  # <R>
    def mkSizeFunc(self, sizeEnv: Size[_mkSizeFunc__E], sizeFunc: int, tA: scalan.RType[_mkSizeFunc__A], tR: scalan.RType[_mkSizeFunc__R]) -> 'SizeFunc'[_mkSizeFunc__E, _mkSizeFunc__A, _mkSizeFunc__R]: ...
    _mkSizeOption__T = typing.TypeVar('_mkSizeOption__T')  # <T>
    def mkSizeOption(self, sizeOpt: scala.Option[Size[_mkSizeOption__T]]) -> 'SizeOption'[_mkSizeOption__T]: ...
    _mkSizePair__L = typing.TypeVar('_mkSizePair__L')  # <L>
    _mkSizePair__R = typing.TypeVar('_mkSizePair__R')  # <R>
    def mkSizePair(self, l: Size[_mkSizePair__L], r: Size[_mkSizePair__R]) -> 'SizePair'[_mkSizePair__L, _mkSizePair__R]: ...
    _mkSizePrim__T = typing.TypeVar('_mkSizePrim__T')  # <T>
    def mkSizePrim(self, dataSize: int, tT: scalan.RType[_mkSizePrim__T]) -> 'SizePrim'[_mkSizePrim__T]: ...
    def monoidBuilder(self) -> MonoidBuilder: ...

_CViewColl__A = typing.TypeVar('_CViewColl__A')  # <A>
_CViewColl__B = typing.TypeVar('_CViewColl__B')  # <B>
class CViewColl(Coll[_CViewColl__B], typing.Generic[_CViewColl__A, _CViewColl__B]):
    source: Coll = ...
    f: scala.Function1 = ...
    special$collection$CViewColl$$isCalculated: typing.List[bool] = ...
    special$collection$CViewColl$$items: typing.Any = ...
    special$collection$CViewColl$$calculatedCount: int = ...
    def __init__(self, source: Coll[_CViewColl__A], f: scala.Function1[_CViewColl__A, _CViewColl__B], tItem: scalan.RType[_CViewColl__B]): ...
    def append(self, other: Coll[_CViewColl__B]) -> Coll[_CViewColl__B]: ...
    def append$mcB$sp(self, other: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def append$mcC$sp(self, other: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def append$mcD$sp(self, other: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def append$mcF$sp(self, other: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def append$mcI$sp(self, other: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def append$mcJ$sp(self, other: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def append$mcS$sp(self, other: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def append$mcV$sp(self, other: Coll[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def append$mcZ$sp(self, other: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def apply(self, i: int) -> _CViewColl__B: ...
    def apply$mcB$sp(self, i: int) -> int: ...
    def apply$mcC$sp(self, i: int) -> str: ...
    def apply$mcD$sp(self, i: int) -> float: ...
    def apply$mcF$sp(self, i: int) -> float: ...
    def apply$mcI$sp(self, i: int) -> int: ...
    def apply$mcJ$sp(self, i: int) -> int: ...
    def apply$mcS$sp(self, i: int) -> int: ...
    def apply$mcV$sp(self, i: int) -> None: ...
    def apply$mcZ$sp(self, i: int) -> bool: ...
    def builder(self) -> CollBuilder: ...
    def diff(self, that: Coll[_CViewColl__B]) -> Coll[_CViewColl__B]: ...
    def diff$mcB$sp(self, that: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def diff$mcC$sp(self, that: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def diff$mcD$sp(self, that: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def diff$mcF$sp(self, that: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def diff$mcI$sp(self, that: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def diff$mcJ$sp(self, that: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def diff$mcS$sp(self, that: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def diff$mcV$sp(self, that: Coll[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def diff$mcZ$sp(self, that: Coll[typing.Any]) -> Coll[typing.Any]: ...
    _distinctByKey__T = typing.TypeVar('_distinctByKey__T')  # <T>
    _distinctByKey__U = typing.TypeVar('_distinctByKey__U')  # <U>
    def distinctByKey(self, ev: scala.Predef..less.colon.less[_CViewColl__B, scala.Tuple2[_distinctByKey__T, _distinctByKey__U]]) -> Coll[_CViewColl__B]: ...
    _distinctByKey$mcB$sp__T = typing.TypeVar('_distinctByKey$mcB$sp__T')  # <T>
    _distinctByKey$mcB$sp__U = typing.TypeVar('_distinctByKey$mcB$sp__U')  # <U>
    def distinctByKey$mcB$sp(self, ev: scala.Predef..less.colon.less[typing.Any, scala.Tuple2[_distinctByKey.mcB.sp__T, _distinctByKey.mcB.sp__U]]) -> Coll[typing.Any]: ...
    _distinctByKey$mcC$sp__T = typing.TypeVar('_distinctByKey$mcC$sp__T')  # <T>
    _distinctByKey$mcC$sp__U = typing.TypeVar('_distinctByKey$mcC$sp__U')  # <U>
    def distinctByKey$mcC$sp(self, ev: scala.Predef..less.colon.less[typing.Any, scala.Tuple2[_distinctByKey.mcC.sp__T, _distinctByKey.mcC.sp__U]]) -> Coll[typing.Any]: ...
    _distinctByKey$mcD$sp__T = typing.TypeVar('_distinctByKey$mcD$sp__T')  # <T>
    _distinctByKey$mcD$sp__U = typing.TypeVar('_distinctByKey$mcD$sp__U')  # <U>
    def distinctByKey$mcD$sp(self, ev: scala.Predef..less.colon.less[typing.Any, scala.Tuple2[_distinctByKey.mcD.sp__T, _distinctByKey.mcD.sp__U]]) -> Coll[typing.Any]: ...
    _distinctByKey$mcF$sp__T = typing.TypeVar('_distinctByKey$mcF$sp__T')  # <T>
    _distinctByKey$mcF$sp__U = typing.TypeVar('_distinctByKey$mcF$sp__U')  # <U>
    def distinctByKey$mcF$sp(self, ev: scala.Predef..less.colon.less[typing.Any, scala.Tuple2[_distinctByKey.mcF.sp__T, _distinctByKey.mcF.sp__U]]) -> Coll[typing.Any]: ...
    _distinctByKey$mcI$sp__T = typing.TypeVar('_distinctByKey$mcI$sp__T')  # <T>
    _distinctByKey$mcI$sp__U = typing.TypeVar('_distinctByKey$mcI$sp__U')  # <U>
    def distinctByKey$mcI$sp(self, ev: scala.Predef..less.colon.less[typing.Any, scala.Tuple2[_distinctByKey.mcI.sp__T, _distinctByKey.mcI.sp__U]]) -> Coll[typing.Any]: ...
    _distinctByKey$mcJ$sp__T = typing.TypeVar('_distinctByKey$mcJ$sp__T')  # <T>
    _distinctByKey$mcJ$sp__U = typing.TypeVar('_distinctByKey$mcJ$sp__U')  # <U>
    def distinctByKey$mcJ$sp(self, ev: scala.Predef..less.colon.less[typing.Any, scala.Tuple2[_distinctByKey.mcJ.sp__T, _distinctByKey.mcJ.sp__U]]) -> Coll[typing.Any]: ...
    _distinctByKey$mcS$sp__T = typing.TypeVar('_distinctByKey$mcS$sp__T')  # <T>
    _distinctByKey$mcS$sp__U = typing.TypeVar('_distinctByKey$mcS$sp__U')  # <U>
    def distinctByKey$mcS$sp(self, ev: scala.Predef..less.colon.less[typing.Any, scala.Tuple2[_distinctByKey.mcS.sp__T, _distinctByKey.mcS.sp__U]]) -> Coll[typing.Any]: ...
    _distinctByKey$mcV$sp__T = typing.TypeVar('_distinctByKey$mcV$sp__T')  # <T>
    _distinctByKey$mcV$sp__U = typing.TypeVar('_distinctByKey$mcV$sp__U')  # <U>
    def distinctByKey$mcV$sp(self, ev: scala.Predef..less.colon.less[scala.runtime.BoxedUnit, scala.Tuple2[_distinctByKey.mcV.sp__T, _distinctByKey.mcV.sp__U]]) -> Coll[scala.runtime.BoxedUnit]: ...
    _distinctByKey$mcZ$sp__T = typing.TypeVar('_distinctByKey$mcZ$sp__T')  # <T>
    _distinctByKey$mcZ$sp__U = typing.TypeVar('_distinctByKey$mcZ$sp__U')  # <U>
    def distinctByKey$mcZ$sp(self, ev: scala.Predef..less.colon.less[typing.Any, scala.Tuple2[_distinctByKey.mcZ.sp__T, _distinctByKey.mcZ.sp__U]]) -> Coll[typing.Any]: ...
    def ensureAndGetItem(self, index: int) -> _CViewColl__B: ...
    def ensureAndGetItem$mcB$sp(self, index: int) -> int: ...
    def ensureAndGetItem$mcC$sp(self, index: int) -> str: ...
    def ensureAndGetItem$mcD$sp(self, index: int) -> float: ...
    def ensureAndGetItem$mcF$sp(self, index: int) -> float: ...
    def ensureAndGetItem$mcI$sp(self, index: int) -> int: ...
    def ensureAndGetItem$mcJ$sp(self, index: int) -> int: ...
    def ensureAndGetItem$mcS$sp(self, index: int) -> int: ...
    def ensureAndGetItem$mcV$sp(self, index: int) -> None: ...
    def ensureAndGetItem$mcZ$sp(self, index: int) -> bool: ...
    def exists(self, p: scala.Function1[_CViewColl__B, typing.Any]) -> bool: ...
    def exists$mcB$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> bool: ...
    def exists$mcC$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> bool: ...
    def exists$mcD$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> bool: ...
    def exists$mcF$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> bool: ...
    def exists$mcI$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> bool: ...
    def exists$mcJ$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> bool: ...
    def exists$mcS$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> bool: ...
    def exists$mcV$sp(self, p: scala.Function1[scala.runtime.BoxedUnit, typing.Any]) -> bool: ...
    def exists$mcZ$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> bool: ...
    def f(self) -> scala.Function1[_CViewColl__A, _CViewColl__B]: ...
    def f$mcBB$sp(self) -> scala.Function1[typing.Any, typing.Any]: ...
    def f$mcBC$sp(self) -> scala.Function1[typing.Any, typing.Any]: ...
    def f$mcBD$sp(self) -> scala.Function1[typing.Any, typing.Any]: ...
    def f$mcBF$sp(self) -> scala.Function1[typing.Any, typing.Any]: ...
    def f$mcBI$sp(self) -> scala.Function1[typing.Any, typing.Any]: ...
    def f$mcBJ$sp(self) -> scala.Function1[typing.Any, typing.Any]: ...
    def f$mcBS$sp(self) -> scala.Function1[typing.Any, typing.Any]: ...
    def f$mcBV$sp(self) -> scala.Function1[typing.Any, scala.runtime.BoxedUnit]: ...
    def f$mcBZ$sp(self) -> scala.Function1[typing.Any, typing.Any]: ...
    def f$mcCB$sp(self) -> scala.Function1[typing.Any, typing.Any]: ...
    def f$mcCC$sp(self) -> scala.Function1[typing.Any, typing.Any]: ...
    def f$mcCD$sp(self) -> scala.Function1[typing.Any, typing.Any]: ...
    def f$mcCF$sp(self) -> scala.Function1[typing.Any, typing.Any]: ...
    def f$mcCI$sp(self) -> scala.Function1[typing.Any, typing.Any]: ...
    def f$mcCJ$sp(self) -> scala.Function1[typing.Any, typing.Any]: ...
    def f$mcCS$sp(self) -> scala.Function1[typing.Any, typing.Any]: ...
    def f$mcCV$sp(self) -> scala.Function1[typing.Any, scala.runtime.BoxedUnit]: ...
    def f$mcCZ$sp(self) -> scala.Function1[typing.Any, typing.Any]: ...
    def f$mcDB$sp(self) -> scala.Function1[typing.Any, typing.Any]: ...
    def f$mcDC$sp(self) -> scala.Function1[typing.Any, typing.Any]: ...
    def f$mcDD$sp(self) -> scala.Function1[typing.Any, typing.Any]: ...
    def f$mcDF$sp(self) -> scala.Function1[typing.Any, typing.Any]: ...
    def f$mcDI$sp(self) -> scala.Function1[typing.Any, typing.Any]: ...
    def f$mcDJ$sp(self) -> scala.Function1[typing.Any, typing.Any]: ...
    def f$mcDS$sp(self) -> scala.Function1[typing.Any, typing.Any]: ...
    def f$mcDV$sp(self) -> scala.Function1[typing.Any, scala.runtime.BoxedUnit]: ...
    def f$mcDZ$sp(self) -> scala.Function1[typing.Any, typing.Any]: ...
    def f$mcFB$sp(self) -> scala.Function1[typing.Any, typing.Any]: ...
    def f$mcFC$sp(self) -> scala.Function1[typing.Any, typing.Any]: ...
    def f$mcFD$sp(self) -> scala.Function1[typing.Any, typing.Any]: ...
    def f$mcFF$sp(self) -> scala.Function1[typing.Any, typing.Any]: ...
    def f$mcFI$sp(self) -> scala.Function1[typing.Any, typing.Any]: ...
    def f$mcFJ$sp(self) -> scala.Function1[typing.Any, typing.Any]: ...
    def f$mcFS$sp(self) -> scala.Function1[typing.Any, typing.Any]: ...
    def f$mcFV$sp(self) -> scala.Function1[typing.Any, scala.runtime.BoxedUnit]: ...
    def f$mcFZ$sp(self) -> scala.Function1[typing.Any, typing.Any]: ...
    def f$mcIB$sp(self) -> scala.Function1[typing.Any, typing.Any]: ...
    def f$mcIC$sp(self) -> scala.Function1[typing.Any, typing.Any]: ...
    def f$mcID$sp(self) -> scala.Function1[typing.Any, typing.Any]: ...
    def f$mcIF$sp(self) -> scala.Function1[typing.Any, typing.Any]: ...
    def f$mcII$sp(self) -> scala.Function1[typing.Any, typing.Any]: ...
    def f$mcIJ$sp(self) -> scala.Function1[typing.Any, typing.Any]: ...
    def f$mcIS$sp(self) -> scala.Function1[typing.Any, typing.Any]: ...
    def f$mcIV$sp(self) -> scala.Function1[typing.Any, scala.runtime.BoxedUnit]: ...
    def f$mcIZ$sp(self) -> scala.Function1[typing.Any, typing.Any]: ...
    def f$mcJB$sp(self) -> scala.Function1[typing.Any, typing.Any]: ...
    def f$mcJC$sp(self) -> scala.Function1[typing.Any, typing.Any]: ...
    def f$mcJD$sp(self) -> scala.Function1[typing.Any, typing.Any]: ...
    def f$mcJF$sp(self) -> scala.Function1[typing.Any, typing.Any]: ...
    def f$mcJI$sp(self) -> scala.Function1[typing.Any, typing.Any]: ...
    def f$mcJJ$sp(self) -> scala.Function1[typing.Any, typing.Any]: ...
    def f$mcJS$sp(self) -> scala.Function1[typing.Any, typing.Any]: ...
    def f$mcJV$sp(self) -> scala.Function1[typing.Any, scala.runtime.BoxedUnit]: ...
    def f$mcJZ$sp(self) -> scala.Function1[typing.Any, typing.Any]: ...
    def f$mcSB$sp(self) -> scala.Function1[typing.Any, typing.Any]: ...
    def f$mcSC$sp(self) -> scala.Function1[typing.Any, typing.Any]: ...
    def f$mcSD$sp(self) -> scala.Function1[typing.Any, typing.Any]: ...
    def f$mcSF$sp(self) -> scala.Function1[typing.Any, typing.Any]: ...
    def f$mcSI$sp(self) -> scala.Function1[typing.Any, typing.Any]: ...
    def f$mcSJ$sp(self) -> scala.Function1[typing.Any, typing.Any]: ...
    def f$mcSS$sp(self) -> scala.Function1[typing.Any, typing.Any]: ...
    def f$mcSV$sp(self) -> scala.Function1[typing.Any, scala.runtime.BoxedUnit]: ...
    def f$mcSZ$sp(self) -> scala.Function1[typing.Any, typing.Any]: ...
    def f$mcVB$sp(self) -> scala.Function1[scala.runtime.BoxedUnit, typing.Any]: ...
    def f$mcVC$sp(self) -> scala.Function1[scala.runtime.BoxedUnit, typing.Any]: ...
    def f$mcVD$sp(self) -> scala.Function1[scala.runtime.BoxedUnit, typing.Any]: ...
    def f$mcVF$sp(self) -> scala.Function1[scala.runtime.BoxedUnit, typing.Any]: ...
    def f$mcVI$sp(self) -> scala.Function1[scala.runtime.BoxedUnit, typing.Any]: ...
    def f$mcVJ$sp(self) -> scala.Function1[scala.runtime.BoxedUnit, typing.Any]: ...
    def f$mcVS$sp(self) -> scala.Function1[scala.runtime.BoxedUnit, typing.Any]: ...
    def f$mcVV$sp(self) -> scala.Function1[scala.runtime.BoxedUnit, scala.runtime.BoxedUnit]: ...
    def f$mcVZ$sp(self) -> scala.Function1[scala.runtime.BoxedUnit, typing.Any]: ...
    def f$mcZB$sp(self) -> scala.Function1[typing.Any, typing.Any]: ...
    def f$mcZC$sp(self) -> scala.Function1[typing.Any, typing.Any]: ...
    def f$mcZD$sp(self) -> scala.Function1[typing.Any, typing.Any]: ...
    def f$mcZF$sp(self) -> scala.Function1[typing.Any, typing.Any]: ...
    def f$mcZI$sp(self) -> scala.Function1[typing.Any, typing.Any]: ...
    def f$mcZJ$sp(self) -> scala.Function1[typing.Any, typing.Any]: ...
    def f$mcZS$sp(self) -> scala.Function1[typing.Any, typing.Any]: ...
    def f$mcZV$sp(self) -> scala.Function1[typing.Any, scala.runtime.BoxedUnit]: ...
    def f$mcZZ$sp(self) -> scala.Function1[typing.Any, typing.Any]: ...
    def filter(self, p: scala.Function1[_CViewColl__B, typing.Any]) -> Coll[_CViewColl__B]: ...
    def filter$mcB$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> Coll[typing.Any]: ...
    def filter$mcC$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> Coll[typing.Any]: ...
    def filter$mcD$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> Coll[typing.Any]: ...
    def filter$mcF$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> Coll[typing.Any]: ...
    def filter$mcI$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> Coll[typing.Any]: ...
    def filter$mcJ$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> Coll[typing.Any]: ...
    def filter$mcS$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> Coll[typing.Any]: ...
    def filter$mcV$sp(self, p: scala.Function1[scala.runtime.BoxedUnit, typing.Any]) -> Coll[scala.runtime.BoxedUnit]: ...
    def filter$mcZ$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> Coll[typing.Any]: ...
    def find(self, p: scala.Function1[_CViewColl__B, typing.Any]) -> scala.Option[_CViewColl__B]: ...
    def find$mcB$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> scala.Option[typing.Any]: ...
    def find$mcC$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> scala.Option[typing.Any]: ...
    def find$mcD$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> scala.Option[typing.Any]: ...
    def find$mcF$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> scala.Option[typing.Any]: ...
    def find$mcI$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> scala.Option[typing.Any]: ...
    def find$mcJ$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> scala.Option[typing.Any]: ...
    def find$mcS$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> scala.Option[typing.Any]: ...
    def find$mcV$sp(self, p: scala.Function1[scala.runtime.BoxedUnit, typing.Any]) -> scala.Option[scala.runtime.BoxedUnit]: ...
    def find$mcZ$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> scala.Option[typing.Any]: ...
    _flatMap__C = typing.TypeVar('_flatMap__C')  # <C>
    def flatMap(self, g: scala.Function1[_CViewColl__B, Coll[_flatMap__C]], evidence$2: scalan.RType[_flatMap__C]) -> Coll[_flatMap__C]: ...
    _flatMap$mcB$sp__C = typing.TypeVar('_flatMap$mcB$sp__C')  # <C>
    def flatMap$mcB$sp(self, g: scala.Function1[typing.Any, Coll[_flatMap.mcB.sp__C]], evidence$2: scalan.RType[_flatMap.mcB.sp__C]) -> Coll[_flatMap.mcB.sp__C]: ...
    _flatMap$mcC$sp__C = typing.TypeVar('_flatMap$mcC$sp__C')  # <C>
    def flatMap$mcC$sp(self, g: scala.Function1[typing.Any, Coll[_flatMap.mcC.sp__C]], evidence$2: scalan.RType[_flatMap.mcC.sp__C]) -> Coll[_flatMap.mcC.sp__C]: ...
    _flatMap$mcD$sp__C = typing.TypeVar('_flatMap$mcD$sp__C')  # <C>
    def flatMap$mcD$sp(self, g: scala.Function1[typing.Any, Coll[_flatMap.mcD.sp__C]], evidence$2: scalan.RType[_flatMap.mcD.sp__C]) -> Coll[_flatMap.mcD.sp__C]: ...
    _flatMap$mcF$sp__C = typing.TypeVar('_flatMap$mcF$sp__C')  # <C>
    def flatMap$mcF$sp(self, g: scala.Function1[typing.Any, Coll[_flatMap.mcF.sp__C]], evidence$2: scalan.RType[_flatMap.mcF.sp__C]) -> Coll[_flatMap.mcF.sp__C]: ...
    _flatMap$mcI$sp__C = typing.TypeVar('_flatMap$mcI$sp__C')  # <C>
    def flatMap$mcI$sp(self, g: scala.Function1[typing.Any, Coll[_flatMap.mcI.sp__C]], evidence$2: scalan.RType[_flatMap.mcI.sp__C]) -> Coll[_flatMap.mcI.sp__C]: ...
    _flatMap$mcJ$sp__C = typing.TypeVar('_flatMap$mcJ$sp__C')  # <C>
    def flatMap$mcJ$sp(self, g: scala.Function1[typing.Any, Coll[_flatMap.mcJ.sp__C]], evidence$2: scalan.RType[_flatMap.mcJ.sp__C]) -> Coll[_flatMap.mcJ.sp__C]: ...
    _flatMap$mcS$sp__C = typing.TypeVar('_flatMap$mcS$sp__C')  # <C>
    def flatMap$mcS$sp(self, g: scala.Function1[typing.Any, Coll[_flatMap.mcS.sp__C]], evidence$2: scalan.RType[_flatMap.mcS.sp__C]) -> Coll[_flatMap.mcS.sp__C]: ...
    _flatMap$mcV$sp__C = typing.TypeVar('_flatMap$mcV$sp__C')  # <C>
    def flatMap$mcV$sp(self, g: scala.Function1[scala.runtime.BoxedUnit, Coll[_flatMap.mcV.sp__C]], evidence$2: scalan.RType[_flatMap.mcV.sp__C]) -> Coll[_flatMap.mcV.sp__C]: ...
    _flatMap$mcZ$sp__C = typing.TypeVar('_flatMap$mcZ$sp__C')  # <C>
    def flatMap$mcZ$sp(self, g: scala.Function1[typing.Any, Coll[_flatMap.mcZ.sp__C]], evidence$2: scalan.RType[_flatMap.mcZ.sp__C]) -> Coll[_flatMap.mcZ.sp__C]: ...
    _foldLeft__C = typing.TypeVar('_foldLeft__C')  # <C>
    def foldLeft(self, zero: _foldLeft__C, op: scala.Function1[scala.Tuple2[_foldLeft__C, _CViewColl__B], _foldLeft__C]) -> _foldLeft__C: ...
    _foldLeft$mcB$sp__C = typing.TypeVar('_foldLeft$mcB$sp__C')  # <C>
    def foldLeft$mcB$sp(self, zero: _foldLeft.mcB.sp__C, op: scala.Function1[scala.Tuple2[_foldLeft.mcB.sp__C, typing.Any], _foldLeft.mcB.sp__C]) -> _foldLeft.mcB.sp__C: ...
    _foldLeft$mcC$sp__C = typing.TypeVar('_foldLeft$mcC$sp__C')  # <C>
    def foldLeft$mcC$sp(self, zero: _foldLeft.mcC.sp__C, op: scala.Function1[scala.Tuple2[_foldLeft.mcC.sp__C, typing.Any], _foldLeft.mcC.sp__C]) -> _foldLeft.mcC.sp__C: ...
    _foldLeft$mcD$sp__C = typing.TypeVar('_foldLeft$mcD$sp__C')  # <C>
    def foldLeft$mcD$sp(self, zero: _foldLeft.mcD.sp__C, op: scala.Function1[scala.Tuple2[_foldLeft.mcD.sp__C, typing.Any], _foldLeft.mcD.sp__C]) -> _foldLeft.mcD.sp__C: ...
    _foldLeft$mcF$sp__C = typing.TypeVar('_foldLeft$mcF$sp__C')  # <C>
    def foldLeft$mcF$sp(self, zero: _foldLeft.mcF.sp__C, op: scala.Function1[scala.Tuple2[_foldLeft.mcF.sp__C, typing.Any], _foldLeft.mcF.sp__C]) -> _foldLeft.mcF.sp__C: ...
    _foldLeft$mcI$sp__C = typing.TypeVar('_foldLeft$mcI$sp__C')  # <C>
    def foldLeft$mcI$sp(self, zero: _foldLeft.mcI.sp__C, op: scala.Function1[scala.Tuple2[_foldLeft.mcI.sp__C, typing.Any], _foldLeft.mcI.sp__C]) -> _foldLeft.mcI.sp__C: ...
    _foldLeft$mcJ$sp__C = typing.TypeVar('_foldLeft$mcJ$sp__C')  # <C>
    def foldLeft$mcJ$sp(self, zero: _foldLeft.mcJ.sp__C, op: scala.Function1[scala.Tuple2[_foldLeft.mcJ.sp__C, typing.Any], _foldLeft.mcJ.sp__C]) -> _foldLeft.mcJ.sp__C: ...
    _foldLeft$mcS$sp__C = typing.TypeVar('_foldLeft$mcS$sp__C')  # <C>
    def foldLeft$mcS$sp(self, zero: _foldLeft.mcS.sp__C, op: scala.Function1[scala.Tuple2[_foldLeft.mcS.sp__C, typing.Any], _foldLeft.mcS.sp__C]) -> _foldLeft.mcS.sp__C: ...
    _foldLeft$mcV$sp__C = typing.TypeVar('_foldLeft$mcV$sp__C')  # <C>
    def foldLeft$mcV$sp(self, zero: _foldLeft.mcV.sp__C, op: scala.Function1[scala.Tuple2[_foldLeft.mcV.sp__C, scala.runtime.BoxedUnit], _foldLeft.mcV.sp__C]) -> _foldLeft.mcV.sp__C: ...
    _foldLeft$mcZ$sp__C = typing.TypeVar('_foldLeft$mcZ$sp__C')  # <C>
    def foldLeft$mcZ$sp(self, zero: _foldLeft.mcZ.sp__C, op: scala.Function1[scala.Tuple2[_foldLeft.mcZ.sp__C, typing.Any], _foldLeft.mcZ.sp__C]) -> _foldLeft.mcZ.sp__C: ...
    def forall(self, p: scala.Function1[_CViewColl__B, typing.Any]) -> bool: ...
    def forall$mcB$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> bool: ...
    def forall$mcC$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> bool: ...
    def forall$mcD$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> bool: ...
    def forall$mcF$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> bool: ...
    def forall$mcI$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> bool: ...
    def forall$mcJ$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> bool: ...
    def forall$mcS$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> bool: ...
    def forall$mcV$sp(self, p: scala.Function1[scala.runtime.BoxedUnit, typing.Any]) -> bool: ...
    def forall$mcZ$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> bool: ...
    def fromPartialCalculation(self, calculated: typing.List[bool], calculatedItems: typing.Any) -> 'CViewColl'[_CViewColl__A, _CViewColl__B]: ...
    def fromPartialCalculation$mcBB$sp(self, calculated: typing.List[bool], calculatedItems: typing.List[int]) -> 'CViewColl'[typing.Any, typing.Any]: ...
    def fromPartialCalculation$mcBC$sp(self, calculated: typing.List[bool], calculatedItems: typing.List[str]) -> 'CViewColl'[typing.Any, typing.Any]: ...
    def fromPartialCalculation$mcBD$sp(self, calculated: typing.List[bool], calculatedItems: typing.List[float]) -> 'CViewColl'[typing.Any, typing.Any]: ...
    def fromPartialCalculation$mcBF$sp(self, calculated: typing.List[bool], calculatedItems: typing.List[float]) -> 'CViewColl'[typing.Any, typing.Any]: ...
    def fromPartialCalculation$mcBI$sp(self, calculated: typing.List[bool], calculatedItems: typing.List[int]) -> 'CViewColl'[typing.Any, typing.Any]: ...
    def fromPartialCalculation$mcBJ$sp(self, calculated: typing.List[bool], calculatedItems: typing.List[int]) -> 'CViewColl'[typing.Any, typing.Any]: ...
    def fromPartialCalculation$mcBS$sp(self, calculated: typing.List[bool], calculatedItems: typing.List[int]) -> 'CViewColl'[typing.Any, typing.Any]: ...
    def fromPartialCalculation$mcBV$sp(self, calculated: typing.List[bool], calculatedItems: typing.List[scala.runtime.BoxedUnit]) -> 'CViewColl'[typing.Any, scala.runtime.BoxedUnit]: ...
    def fromPartialCalculation$mcBZ$sp(self, calculated: typing.List[bool], calculatedItems: typing.List[bool]) -> 'CViewColl'[typing.Any, typing.Any]: ...
    def fromPartialCalculation$mcCB$sp(self, calculated: typing.List[bool], calculatedItems: typing.List[int]) -> 'CViewColl'[typing.Any, typing.Any]: ...
    def fromPartialCalculation$mcCC$sp(self, calculated: typing.List[bool], calculatedItems: typing.List[str]) -> 'CViewColl'[typing.Any, typing.Any]: ...
    def fromPartialCalculation$mcCD$sp(self, calculated: typing.List[bool], calculatedItems: typing.List[float]) -> 'CViewColl'[typing.Any, typing.Any]: ...
    def fromPartialCalculation$mcCF$sp(self, calculated: typing.List[bool], calculatedItems: typing.List[float]) -> 'CViewColl'[typing.Any, typing.Any]: ...
    def fromPartialCalculation$mcCI$sp(self, calculated: typing.List[bool], calculatedItems: typing.List[int]) -> 'CViewColl'[typing.Any, typing.Any]: ...
    def fromPartialCalculation$mcCJ$sp(self, calculated: typing.List[bool], calculatedItems: typing.List[int]) -> 'CViewColl'[typing.Any, typing.Any]: ...
    def fromPartialCalculation$mcCS$sp(self, calculated: typing.List[bool], calculatedItems: typing.List[int]) -> 'CViewColl'[typing.Any, typing.Any]: ...
    def fromPartialCalculation$mcCV$sp(self, calculated: typing.List[bool], calculatedItems: typing.List[scala.runtime.BoxedUnit]) -> 'CViewColl'[typing.Any, scala.runtime.BoxedUnit]: ...
    def fromPartialCalculation$mcCZ$sp(self, calculated: typing.List[bool], calculatedItems: typing.List[bool]) -> 'CViewColl'[typing.Any, typing.Any]: ...
    def fromPartialCalculation$mcDB$sp(self, calculated: typing.List[bool], calculatedItems: typing.List[int]) -> 'CViewColl'[typing.Any, typing.Any]: ...
    def fromPartialCalculation$mcDC$sp(self, calculated: typing.List[bool], calculatedItems: typing.List[str]) -> 'CViewColl'[typing.Any, typing.Any]: ...
    def fromPartialCalculation$mcDD$sp(self, calculated: typing.List[bool], calculatedItems: typing.List[float]) -> 'CViewColl'[typing.Any, typing.Any]: ...
    def fromPartialCalculation$mcDF$sp(self, calculated: typing.List[bool], calculatedItems: typing.List[float]) -> 'CViewColl'[typing.Any, typing.Any]: ...
    def fromPartialCalculation$mcDI$sp(self, calculated: typing.List[bool], calculatedItems: typing.List[int]) -> 'CViewColl'[typing.Any, typing.Any]: ...
    def fromPartialCalculation$mcDJ$sp(self, calculated: typing.List[bool], calculatedItems: typing.List[int]) -> 'CViewColl'[typing.Any, typing.Any]: ...
    def fromPartialCalculation$mcDS$sp(self, calculated: typing.List[bool], calculatedItems: typing.List[int]) -> 'CViewColl'[typing.Any, typing.Any]: ...
    def fromPartialCalculation$mcDV$sp(self, calculated: typing.List[bool], calculatedItems: typing.List[scala.runtime.BoxedUnit]) -> 'CViewColl'[typing.Any, scala.runtime.BoxedUnit]: ...
    def fromPartialCalculation$mcDZ$sp(self, calculated: typing.List[bool], calculatedItems: typing.List[bool]) -> 'CViewColl'[typing.Any, typing.Any]: ...
    def fromPartialCalculation$mcFB$sp(self, calculated: typing.List[bool], calculatedItems: typing.List[int]) -> 'CViewColl'[typing.Any, typing.Any]: ...
    def fromPartialCalculation$mcFC$sp(self, calculated: typing.List[bool], calculatedItems: typing.List[str]) -> 'CViewColl'[typing.Any, typing.Any]: ...
    def fromPartialCalculation$mcFD$sp(self, calculated: typing.List[bool], calculatedItems: typing.List[float]) -> 'CViewColl'[typing.Any, typing.Any]: ...
    def fromPartialCalculation$mcFF$sp(self, calculated: typing.List[bool], calculatedItems: typing.List[float]) -> 'CViewColl'[typing.Any, typing.Any]: ...
    def fromPartialCalculation$mcFI$sp(self, calculated: typing.List[bool], calculatedItems: typing.List[int]) -> 'CViewColl'[typing.Any, typing.Any]: ...
    def fromPartialCalculation$mcFJ$sp(self, calculated: typing.List[bool], calculatedItems: typing.List[int]) -> 'CViewColl'[typing.Any, typing.Any]: ...
    def fromPartialCalculation$mcFS$sp(self, calculated: typing.List[bool], calculatedItems: typing.List[int]) -> 'CViewColl'[typing.Any, typing.Any]: ...
    def fromPartialCalculation$mcFV$sp(self, calculated: typing.List[bool], calculatedItems: typing.List[scala.runtime.BoxedUnit]) -> 'CViewColl'[typing.Any, scala.runtime.BoxedUnit]: ...
    def fromPartialCalculation$mcFZ$sp(self, calculated: typing.List[bool], calculatedItems: typing.List[bool]) -> 'CViewColl'[typing.Any, typing.Any]: ...
    def fromPartialCalculation$mcIB$sp(self, calculated: typing.List[bool], calculatedItems: typing.List[int]) -> 'CViewColl'[typing.Any, typing.Any]: ...
    def fromPartialCalculation$mcIC$sp(self, calculated: typing.List[bool], calculatedItems: typing.List[str]) -> 'CViewColl'[typing.Any, typing.Any]: ...
    def fromPartialCalculation$mcID$sp(self, calculated: typing.List[bool], calculatedItems: typing.List[float]) -> 'CViewColl'[typing.Any, typing.Any]: ...
    def fromPartialCalculation$mcIF$sp(self, calculated: typing.List[bool], calculatedItems: typing.List[float]) -> 'CViewColl'[typing.Any, typing.Any]: ...
    def fromPartialCalculation$mcII$sp(self, calculated: typing.List[bool], calculatedItems: typing.List[int]) -> 'CViewColl'[typing.Any, typing.Any]: ...
    def fromPartialCalculation$mcIJ$sp(self, calculated: typing.List[bool], calculatedItems: typing.List[int]) -> 'CViewColl'[typing.Any, typing.Any]: ...
    def fromPartialCalculation$mcIS$sp(self, calculated: typing.List[bool], calculatedItems: typing.List[int]) -> 'CViewColl'[typing.Any, typing.Any]: ...
    def fromPartialCalculation$mcIV$sp(self, calculated: typing.List[bool], calculatedItems: typing.List[scala.runtime.BoxedUnit]) -> 'CViewColl'[typing.Any, scala.runtime.BoxedUnit]: ...
    def fromPartialCalculation$mcIZ$sp(self, calculated: typing.List[bool], calculatedItems: typing.List[bool]) -> 'CViewColl'[typing.Any, typing.Any]: ...
    def fromPartialCalculation$mcJB$sp(self, calculated: typing.List[bool], calculatedItems: typing.List[int]) -> 'CViewColl'[typing.Any, typing.Any]: ...
    def fromPartialCalculation$mcJC$sp(self, calculated: typing.List[bool], calculatedItems: typing.List[str]) -> 'CViewColl'[typing.Any, typing.Any]: ...
    def fromPartialCalculation$mcJD$sp(self, calculated: typing.List[bool], calculatedItems: typing.List[float]) -> 'CViewColl'[typing.Any, typing.Any]: ...
    def fromPartialCalculation$mcJF$sp(self, calculated: typing.List[bool], calculatedItems: typing.List[float]) -> 'CViewColl'[typing.Any, typing.Any]: ...
    def fromPartialCalculation$mcJI$sp(self, calculated: typing.List[bool], calculatedItems: typing.List[int]) -> 'CViewColl'[typing.Any, typing.Any]: ...
    def fromPartialCalculation$mcJJ$sp(self, calculated: typing.List[bool], calculatedItems: typing.List[int]) -> 'CViewColl'[typing.Any, typing.Any]: ...
    def fromPartialCalculation$mcJS$sp(self, calculated: typing.List[bool], calculatedItems: typing.List[int]) -> 'CViewColl'[typing.Any, typing.Any]: ...
    def fromPartialCalculation$mcJV$sp(self, calculated: typing.List[bool], calculatedItems: typing.List[scala.runtime.BoxedUnit]) -> 'CViewColl'[typing.Any, scala.runtime.BoxedUnit]: ...
    def fromPartialCalculation$mcJZ$sp(self, calculated: typing.List[bool], calculatedItems: typing.List[bool]) -> 'CViewColl'[typing.Any, typing.Any]: ...
    def fromPartialCalculation$mcSB$sp(self, calculated: typing.List[bool], calculatedItems: typing.List[int]) -> 'CViewColl'[typing.Any, typing.Any]: ...
    def fromPartialCalculation$mcSC$sp(self, calculated: typing.List[bool], calculatedItems: typing.List[str]) -> 'CViewColl'[typing.Any, typing.Any]: ...
    def fromPartialCalculation$mcSD$sp(self, calculated: typing.List[bool], calculatedItems: typing.List[float]) -> 'CViewColl'[typing.Any, typing.Any]: ...
    def fromPartialCalculation$mcSF$sp(self, calculated: typing.List[bool], calculatedItems: typing.List[float]) -> 'CViewColl'[typing.Any, typing.Any]: ...
    def fromPartialCalculation$mcSI$sp(self, calculated: typing.List[bool], calculatedItems: typing.List[int]) -> 'CViewColl'[typing.Any, typing.Any]: ...
    def fromPartialCalculation$mcSJ$sp(self, calculated: typing.List[bool], calculatedItems: typing.List[int]) -> 'CViewColl'[typing.Any, typing.Any]: ...
    def fromPartialCalculation$mcSS$sp(self, calculated: typing.List[bool], calculatedItems: typing.List[int]) -> 'CViewColl'[typing.Any, typing.Any]: ...
    def fromPartialCalculation$mcSV$sp(self, calculated: typing.List[bool], calculatedItems: typing.List[scala.runtime.BoxedUnit]) -> 'CViewColl'[typing.Any, scala.runtime.BoxedUnit]: ...
    def fromPartialCalculation$mcSZ$sp(self, calculated: typing.List[bool], calculatedItems: typing.List[bool]) -> 'CViewColl'[typing.Any, typing.Any]: ...
    def fromPartialCalculation$mcVB$sp(self, calculated: typing.List[bool], calculatedItems: typing.List[int]) -> 'CViewColl'[scala.runtime.BoxedUnit, typing.Any]: ...
    def fromPartialCalculation$mcVC$sp(self, calculated: typing.List[bool], calculatedItems: typing.List[str]) -> 'CViewColl'[scala.runtime.BoxedUnit, typing.Any]: ...
    def fromPartialCalculation$mcVD$sp(self, calculated: typing.List[bool], calculatedItems: typing.List[float]) -> 'CViewColl'[scala.runtime.BoxedUnit, typing.Any]: ...
    def fromPartialCalculation$mcVF$sp(self, calculated: typing.List[bool], calculatedItems: typing.List[float]) -> 'CViewColl'[scala.runtime.BoxedUnit, typing.Any]: ...
    def fromPartialCalculation$mcVI$sp(self, calculated: typing.List[bool], calculatedItems: typing.List[int]) -> 'CViewColl'[scala.runtime.BoxedUnit, typing.Any]: ...
    def fromPartialCalculation$mcVJ$sp(self, calculated: typing.List[bool], calculatedItems: typing.List[int]) -> 'CViewColl'[scala.runtime.BoxedUnit, typing.Any]: ...
    def fromPartialCalculation$mcVS$sp(self, calculated: typing.List[bool], calculatedItems: typing.List[int]) -> 'CViewColl'[scala.runtime.BoxedUnit, typing.Any]: ...
    def fromPartialCalculation$mcVV$sp(self, calculated: typing.List[bool], calculatedItems: typing.List[scala.runtime.BoxedUnit]) -> 'CViewColl'[scala.runtime.BoxedUnit, scala.runtime.BoxedUnit]: ...
    def fromPartialCalculation$mcVZ$sp(self, calculated: typing.List[bool], calculatedItems: typing.List[bool]) -> 'CViewColl'[scala.runtime.BoxedUnit, typing.Any]: ...
    def fromPartialCalculation$mcZB$sp(self, calculated: typing.List[bool], calculatedItems: typing.List[int]) -> 'CViewColl'[typing.Any, typing.Any]: ...
    def fromPartialCalculation$mcZC$sp(self, calculated: typing.List[bool], calculatedItems: typing.List[str]) -> 'CViewColl'[typing.Any, typing.Any]: ...
    def fromPartialCalculation$mcZD$sp(self, calculated: typing.List[bool], calculatedItems: typing.List[float]) -> 'CViewColl'[typing.Any, typing.Any]: ...
    def fromPartialCalculation$mcZF$sp(self, calculated: typing.List[bool], calculatedItems: typing.List[float]) -> 'CViewColl'[typing.Any, typing.Any]: ...
    def fromPartialCalculation$mcZI$sp(self, calculated: typing.List[bool], calculatedItems: typing.List[int]) -> 'CViewColl'[typing.Any, typing.Any]: ...
    def fromPartialCalculation$mcZJ$sp(self, calculated: typing.List[bool], calculatedItems: typing.List[int]) -> 'CViewColl'[typing.Any, typing.Any]: ...
    def fromPartialCalculation$mcZS$sp(self, calculated: typing.List[bool], calculatedItems: typing.List[int]) -> 'CViewColl'[typing.Any, typing.Any]: ...
    def fromPartialCalculation$mcZV$sp(self, calculated: typing.List[bool], calculatedItems: typing.List[scala.runtime.BoxedUnit]) -> 'CViewColl'[typing.Any, scala.runtime.BoxedUnit]: ...
    def fromPartialCalculation$mcZZ$sp(self, calculated: typing.List[bool], calculatedItems: typing.List[bool]) -> 'CViewColl'[typing.Any, typing.Any]: ...
    def getOrElse(self, index: int, default: _CViewColl__B) -> _CViewColl__B: ...
    def getOrElse$mcB$sp(self, index: int, default: int) -> int: ...
    def getOrElse$mcC$sp(self, index: int, default: str) -> str: ...
    def getOrElse$mcD$sp(self, index: int, default: float) -> float: ...
    def getOrElse$mcF$sp(self, index: int, default: float) -> float: ...
    def getOrElse$mcI$sp(self, index: int, default: int) -> int: ...
    def getOrElse$mcJ$sp(self, index: int, default: int) -> int: ...
    def getOrElse$mcS$sp(self, index: int, default: int) -> int: ...
    def getOrElse$mcV$sp(self, index: int, default: scala.runtime.BoxedUnit) -> None: ...
    def getOrElse$mcZ$sp(self, index: int, default: bool) -> bool: ...
    _groupBy__K = typing.TypeVar('_groupBy__K')  # <K>
    def groupBy(self, key: scala.Function1[_CViewColl__B, _groupBy__K], evidence$5: scalan.RType[_groupBy__K]) -> Coll[scala.Tuple2[_groupBy__K, Coll[_CViewColl__B]]]: ...
    _groupBy$mcB$sp__K = typing.TypeVar('_groupBy$mcB$sp__K')  # <K>
    def groupBy$mcB$sp(self, key: scala.Function1[typing.Any, _groupBy.mcB.sp__K], evidence$5: scalan.RType[_groupBy.mcB.sp__K]) -> Coll[scala.Tuple2[_groupBy.mcB.sp__K, Coll[typing.Any]]]: ...
    _groupBy$mcC$sp__K = typing.TypeVar('_groupBy$mcC$sp__K')  # <K>
    def groupBy$mcC$sp(self, key: scala.Function1[typing.Any, _groupBy.mcC.sp__K], evidence$5: scalan.RType[_groupBy.mcC.sp__K]) -> Coll[scala.Tuple2[_groupBy.mcC.sp__K, Coll[typing.Any]]]: ...
    _groupBy$mcD$sp__K = typing.TypeVar('_groupBy$mcD$sp__K')  # <K>
    def groupBy$mcD$sp(self, key: scala.Function1[typing.Any, _groupBy.mcD.sp__K], evidence$5: scalan.RType[_groupBy.mcD.sp__K]) -> Coll[scala.Tuple2[_groupBy.mcD.sp__K, Coll[typing.Any]]]: ...
    _groupBy$mcF$sp__K = typing.TypeVar('_groupBy$mcF$sp__K')  # <K>
    def groupBy$mcF$sp(self, key: scala.Function1[typing.Any, _groupBy.mcF.sp__K], evidence$5: scalan.RType[_groupBy.mcF.sp__K]) -> Coll[scala.Tuple2[_groupBy.mcF.sp__K, Coll[typing.Any]]]: ...
    _groupBy$mcI$sp__K = typing.TypeVar('_groupBy$mcI$sp__K')  # <K>
    def groupBy$mcI$sp(self, key: scala.Function1[typing.Any, _groupBy.mcI.sp__K], evidence$5: scalan.RType[_groupBy.mcI.sp__K]) -> Coll[scala.Tuple2[_groupBy.mcI.sp__K, Coll[typing.Any]]]: ...
    _groupBy$mcJ$sp__K = typing.TypeVar('_groupBy$mcJ$sp__K')  # <K>
    def groupBy$mcJ$sp(self, key: scala.Function1[typing.Any, _groupBy.mcJ.sp__K], evidence$5: scalan.RType[_groupBy.mcJ.sp__K]) -> Coll[scala.Tuple2[_groupBy.mcJ.sp__K, Coll[typing.Any]]]: ...
    _groupBy$mcS$sp__K = typing.TypeVar('_groupBy$mcS$sp__K')  # <K>
    def groupBy$mcS$sp(self, key: scala.Function1[typing.Any, _groupBy.mcS.sp__K], evidence$5: scalan.RType[_groupBy.mcS.sp__K]) -> Coll[scala.Tuple2[_groupBy.mcS.sp__K, Coll[typing.Any]]]: ...
    _groupBy$mcV$sp__K = typing.TypeVar('_groupBy$mcV$sp__K')  # <K>
    def groupBy$mcV$sp(self, key: scala.Function1[scala.runtime.BoxedUnit, _groupBy.mcV.sp__K], evidence$5: scalan.RType[_groupBy.mcV.sp__K]) -> Coll[scala.Tuple2[_groupBy.mcV.sp__K, Coll[scala.runtime.BoxedUnit]]]: ...
    _groupBy$mcZ$sp__K = typing.TypeVar('_groupBy$mcZ$sp__K')  # <K>
    def groupBy$mcZ$sp(self, key: scala.Function1[typing.Any, _groupBy.mcZ.sp__K], evidence$5: scalan.RType[_groupBy.mcZ.sp__K]) -> Coll[scala.Tuple2[_groupBy.mcZ.sp__K, Coll[typing.Any]]]: ...
    _groupByProjecting__K = typing.TypeVar('_groupByProjecting__K')  # <K>
    _groupByProjecting__V = typing.TypeVar('_groupByProjecting__V')  # <V>
    def groupByProjecting(self, key: scala.Function1[_CViewColl__B, _groupByProjecting__K], proj: scala.Function1[_CViewColl__B, _groupByProjecting__V], evidence$6: scalan.RType[_groupByProjecting__K], evidence$7: scalan.RType[_groupByProjecting__V]) -> Coll[scala.Tuple2[_groupByProjecting__K, Coll[_groupByProjecting__V]]]: ...
    _groupByProjecting$mcB$sp__K = typing.TypeVar('_groupByProjecting$mcB$sp__K')  # <K>
    _groupByProjecting$mcB$sp__V = typing.TypeVar('_groupByProjecting$mcB$sp__V')  # <V>
    def groupByProjecting$mcB$sp(self, key: scala.Function1[typing.Any, _groupByProjecting.mcB.sp__K], proj: scala.Function1[typing.Any, _groupByProjecting.mcB.sp__V], evidence$6: scalan.RType[_groupByProjecting.mcB.sp__K], evidence$7: scalan.RType[_groupByProjecting.mcB.sp__V]) -> Coll[scala.Tuple2[_groupByProjecting.mcB.sp__K, Coll[_groupByProjecting.mcB.sp__V]]]: ...
    _groupByProjecting$mcC$sp__K = typing.TypeVar('_groupByProjecting$mcC$sp__K')  # <K>
    _groupByProjecting$mcC$sp__V = typing.TypeVar('_groupByProjecting$mcC$sp__V')  # <V>
    def groupByProjecting$mcC$sp(self, key: scala.Function1[typing.Any, _groupByProjecting.mcC.sp__K], proj: scala.Function1[typing.Any, _groupByProjecting.mcC.sp__V], evidence$6: scalan.RType[_groupByProjecting.mcC.sp__K], evidence$7: scalan.RType[_groupByProjecting.mcC.sp__V]) -> Coll[scala.Tuple2[_groupByProjecting.mcC.sp__K, Coll[_groupByProjecting.mcC.sp__V]]]: ...
    _groupByProjecting$mcD$sp__K = typing.TypeVar('_groupByProjecting$mcD$sp__K')  # <K>
    _groupByProjecting$mcD$sp__V = typing.TypeVar('_groupByProjecting$mcD$sp__V')  # <V>
    def groupByProjecting$mcD$sp(self, key: scala.Function1[typing.Any, _groupByProjecting.mcD.sp__K], proj: scala.Function1[typing.Any, _groupByProjecting.mcD.sp__V], evidence$6: scalan.RType[_groupByProjecting.mcD.sp__K], evidence$7: scalan.RType[_groupByProjecting.mcD.sp__V]) -> Coll[scala.Tuple2[_groupByProjecting.mcD.sp__K, Coll[_groupByProjecting.mcD.sp__V]]]: ...
    _groupByProjecting$mcF$sp__K = typing.TypeVar('_groupByProjecting$mcF$sp__K')  # <K>
    _groupByProjecting$mcF$sp__V = typing.TypeVar('_groupByProjecting$mcF$sp__V')  # <V>
    def groupByProjecting$mcF$sp(self, key: scala.Function1[typing.Any, _groupByProjecting.mcF.sp__K], proj: scala.Function1[typing.Any, _groupByProjecting.mcF.sp__V], evidence$6: scalan.RType[_groupByProjecting.mcF.sp__K], evidence$7: scalan.RType[_groupByProjecting.mcF.sp__V]) -> Coll[scala.Tuple2[_groupByProjecting.mcF.sp__K, Coll[_groupByProjecting.mcF.sp__V]]]: ...
    _groupByProjecting$mcI$sp__K = typing.TypeVar('_groupByProjecting$mcI$sp__K')  # <K>
    _groupByProjecting$mcI$sp__V = typing.TypeVar('_groupByProjecting$mcI$sp__V')  # <V>
    def groupByProjecting$mcI$sp(self, key: scala.Function1[typing.Any, _groupByProjecting.mcI.sp__K], proj: scala.Function1[typing.Any, _groupByProjecting.mcI.sp__V], evidence$6: scalan.RType[_groupByProjecting.mcI.sp__K], evidence$7: scalan.RType[_groupByProjecting.mcI.sp__V]) -> Coll[scala.Tuple2[_groupByProjecting.mcI.sp__K, Coll[_groupByProjecting.mcI.sp__V]]]: ...
    _groupByProjecting$mcJ$sp__K = typing.TypeVar('_groupByProjecting$mcJ$sp__K')  # <K>
    _groupByProjecting$mcJ$sp__V = typing.TypeVar('_groupByProjecting$mcJ$sp__V')  # <V>
    def groupByProjecting$mcJ$sp(self, key: scala.Function1[typing.Any, _groupByProjecting.mcJ.sp__K], proj: scala.Function1[typing.Any, _groupByProjecting.mcJ.sp__V], evidence$6: scalan.RType[_groupByProjecting.mcJ.sp__K], evidence$7: scalan.RType[_groupByProjecting.mcJ.sp__V]) -> Coll[scala.Tuple2[_groupByProjecting.mcJ.sp__K, Coll[_groupByProjecting.mcJ.sp__V]]]: ...
    _groupByProjecting$mcS$sp__K = typing.TypeVar('_groupByProjecting$mcS$sp__K')  # <K>
    _groupByProjecting$mcS$sp__V = typing.TypeVar('_groupByProjecting$mcS$sp__V')  # <V>
    def groupByProjecting$mcS$sp(self, key: scala.Function1[typing.Any, _groupByProjecting.mcS.sp__K], proj: scala.Function1[typing.Any, _groupByProjecting.mcS.sp__V], evidence$6: scalan.RType[_groupByProjecting.mcS.sp__K], evidence$7: scalan.RType[_groupByProjecting.mcS.sp__V]) -> Coll[scala.Tuple2[_groupByProjecting.mcS.sp__K, Coll[_groupByProjecting.mcS.sp__V]]]: ...
    _groupByProjecting$mcV$sp__K = typing.TypeVar('_groupByProjecting$mcV$sp__K')  # <K>
    _groupByProjecting$mcV$sp__V = typing.TypeVar('_groupByProjecting$mcV$sp__V')  # <V>
    def groupByProjecting$mcV$sp(self, key: scala.Function1[scala.runtime.BoxedUnit, _groupByProjecting.mcV.sp__K], proj: scala.Function1[scala.runtime.BoxedUnit, _groupByProjecting.mcV.sp__V], evidence$6: scalan.RType[_groupByProjecting.mcV.sp__K], evidence$7: scalan.RType[_groupByProjecting.mcV.sp__V]) -> Coll[scala.Tuple2[_groupByProjecting.mcV.sp__K, Coll[_groupByProjecting.mcV.sp__V]]]: ...
    _groupByProjecting$mcZ$sp__K = typing.TypeVar('_groupByProjecting$mcZ$sp__K')  # <K>
    _groupByProjecting$mcZ$sp__V = typing.TypeVar('_groupByProjecting$mcZ$sp__V')  # <V>
    def groupByProjecting$mcZ$sp(self, key: scala.Function1[typing.Any, _groupByProjecting.mcZ.sp__K], proj: scala.Function1[typing.Any, _groupByProjecting.mcZ.sp__V], evidence$6: scalan.RType[_groupByProjecting.mcZ.sp__K], evidence$7: scalan.RType[_groupByProjecting.mcZ.sp__V]) -> Coll[scala.Tuple2[_groupByProjecting.mcZ.sp__K, Coll[_groupByProjecting.mcZ.sp__V]]]: ...
    def indexOf(self, elem: _CViewColl__B, from_: int) -> int: ...
    def indexOf$mcB$sp(self, elem: int, from_: int) -> int: ...
    def indexOf$mcC$sp(self, elem: str, from_: int) -> int: ...
    def indexOf$mcD$sp(self, elem: float, from_: int) -> int: ...
    def indexOf$mcF$sp(self, elem: float, from_: int) -> int: ...
    def indexOf$mcI$sp(self, elem: int, from_: int) -> int: ...
    def indexOf$mcJ$sp(self, elem: int, from_: int) -> int: ...
    def indexOf$mcS$sp(self, elem: int, from_: int) -> int: ...
    def indexOf$mcV$sp(self, elem: scala.runtime.BoxedUnit, from_: int) -> int: ...
    def indexOf$mcZ$sp(self, elem: bool, from_: int) -> int: ...
    def indexWhere(self, p: scala.Function1[_CViewColl__B, typing.Any], from_: int) -> int: ...
    def indexWhere$mcB$sp(self, p: scala.Function1[typing.Any, typing.Any], from_: int) -> int: ...
    def indexWhere$mcC$sp(self, p: scala.Function1[typing.Any, typing.Any], from_: int) -> int: ...
    def indexWhere$mcD$sp(self, p: scala.Function1[typing.Any, typing.Any], from_: int) -> int: ...
    def indexWhere$mcF$sp(self, p: scala.Function1[typing.Any, typing.Any], from_: int) -> int: ...
    def indexWhere$mcI$sp(self, p: scala.Function1[typing.Any, typing.Any], from_: int) -> int: ...
    def indexWhere$mcJ$sp(self, p: scala.Function1[typing.Any, typing.Any], from_: int) -> int: ...
    def indexWhere$mcS$sp(self, p: scala.Function1[typing.Any, typing.Any], from_: int) -> int: ...
    def indexWhere$mcV$sp(self, p: scala.Function1[scala.runtime.BoxedUnit, typing.Any], from_: int) -> int: ...
    def indexWhere$mcZ$sp(self, p: scala.Function1[typing.Any, typing.Any], from_: int) -> int: ...
    def indices(self) -> Coll[typing.Any]: ...
    def intersect(self, that: Coll[_CViewColl__B]) -> Coll[_CViewColl__B]: ...
    def intersect$mcB$sp(self, that: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def intersect$mcC$sp(self, that: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def intersect$mcD$sp(self, that: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def intersect$mcF$sp(self, that: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def intersect$mcI$sp(self, that: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def intersect$mcJ$sp(self, that: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def intersect$mcS$sp(self, that: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def intersect$mcV$sp(self, that: Coll[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def intersect$mcZ$sp(self, that: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def isDefinedAt(self, idx: int) -> bool: ...
    def isEmpty(self) -> bool: ...
    def isReplArray(self, len: int, value: _CViewColl__B) -> scala.runtime.Nothing.: ...
    def isReplArray$mcB$sp(self, len: int, value: int) -> scala.runtime.Nothing.: ...
    def isReplArray$mcC$sp(self, len: int, value: str) -> scala.runtime.Nothing.: ...
    def isReplArray$mcD$sp(self, len: int, value: float) -> scala.runtime.Nothing.: ...
    def isReplArray$mcF$sp(self, len: int, value: float) -> scala.runtime.Nothing.: ...
    def isReplArray$mcI$sp(self, len: int, value: int) -> scala.runtime.Nothing.: ...
    def isReplArray$mcJ$sp(self, len: int, value: int) -> scala.runtime.Nothing.: ...
    def isReplArray$mcS$sp(self, len: int, value: int) -> scala.runtime.Nothing.: ...
    def isReplArray$mcV$sp(self, len: int, value: scala.runtime.BoxedUnit) -> scala.runtime.Nothing.: ...
    def isReplArray$mcZ$sp(self, len: int, value: bool) -> scala.runtime.Nothing.: ...
    def isValidIndex(self, i: int) -> bool: ...
    def lastIndexWhere(self, p: scala.Function1[_CViewColl__B, typing.Any], end: int) -> int: ...
    def lastIndexWhere$mcB$sp(self, p: scala.Function1[typing.Any, typing.Any], end: int) -> int: ...
    def lastIndexWhere$mcC$sp(self, p: scala.Function1[typing.Any, typing.Any], end: int) -> int: ...
    def lastIndexWhere$mcD$sp(self, p: scala.Function1[typing.Any, typing.Any], end: int) -> int: ...
    def lastIndexWhere$mcF$sp(self, p: scala.Function1[typing.Any, typing.Any], end: int) -> int: ...
    def lastIndexWhere$mcI$sp(self, p: scala.Function1[typing.Any, typing.Any], end: int) -> int: ...
    def lastIndexWhere$mcJ$sp(self, p: scala.Function1[typing.Any, typing.Any], end: int) -> int: ...
    def lastIndexWhere$mcS$sp(self, p: scala.Function1[typing.Any, typing.Any], end: int) -> int: ...
    def lastIndexWhere$mcV$sp(self, p: scala.Function1[scala.runtime.BoxedUnit, typing.Any], end: int) -> int: ...
    def lastIndexWhere$mcZ$sp(self, p: scala.Function1[typing.Any, typing.Any], end: int) -> int: ...
    def length(self) -> int: ...
    _map__C = typing.TypeVar('_map__C')  # <C>
    def map(self, g: scala.Function1[_CViewColl__B, _map__C], evidence$1: scalan.RType[_map__C]) -> Coll[_map__C]: ...
    def map$mBc$sp(self, g: scala.Function1[_CViewColl__B, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mBcB$sp(self, g: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mBcC$sp(self, g: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mBcD$sp(self, g: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mBcF$sp(self, g: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mBcI$sp(self, g: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mBcJ$sp(self, g: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mBcS$sp(self, g: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mBcV$sp(self, g: scala.Function1[scala.runtime.BoxedUnit, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mBcZ$sp(self, g: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mCc$sp(self, g: scala.Function1[_CViewColl__B, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mCcB$sp(self, g: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mCcC$sp(self, g: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mCcD$sp(self, g: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mCcF$sp(self, g: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mCcI$sp(self, g: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mCcJ$sp(self, g: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mCcS$sp(self, g: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mCcV$sp(self, g: scala.Function1[scala.runtime.BoxedUnit, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mCcZ$sp(self, g: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mDc$sp(self, g: scala.Function1[_CViewColl__B, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mDcB$sp(self, g: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mDcC$sp(self, g: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mDcD$sp(self, g: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mDcF$sp(self, g: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mDcI$sp(self, g: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mDcJ$sp(self, g: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mDcS$sp(self, g: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mDcV$sp(self, g: scala.Function1[scala.runtime.BoxedUnit, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mDcZ$sp(self, g: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mFc$sp(self, g: scala.Function1[_CViewColl__B, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mFcB$sp(self, g: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mFcC$sp(self, g: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mFcD$sp(self, g: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mFcF$sp(self, g: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mFcI$sp(self, g: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mFcJ$sp(self, g: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mFcS$sp(self, g: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mFcV$sp(self, g: scala.Function1[scala.runtime.BoxedUnit, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mFcZ$sp(self, g: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mIc$sp(self, g: scala.Function1[_CViewColl__B, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mIcB$sp(self, g: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mIcC$sp(self, g: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mIcD$sp(self, g: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mIcF$sp(self, g: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mIcI$sp(self, g: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mIcJ$sp(self, g: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mIcS$sp(self, g: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mIcV$sp(self, g: scala.Function1[scala.runtime.BoxedUnit, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mIcZ$sp(self, g: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mJc$sp(self, g: scala.Function1[_CViewColl__B, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mJcB$sp(self, g: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mJcC$sp(self, g: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mJcD$sp(self, g: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mJcF$sp(self, g: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mJcI$sp(self, g: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mJcJ$sp(self, g: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mJcS$sp(self, g: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mJcV$sp(self, g: scala.Function1[scala.runtime.BoxedUnit, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mJcZ$sp(self, g: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mSc$sp(self, g: scala.Function1[_CViewColl__B, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mScB$sp(self, g: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mScC$sp(self, g: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mScD$sp(self, g: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mScF$sp(self, g: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mScI$sp(self, g: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mScJ$sp(self, g: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mScS$sp(self, g: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mScV$sp(self, g: scala.Function1[scala.runtime.BoxedUnit, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mScZ$sp(self, g: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mVc$sp(self, g: scala.Function1[_CViewColl__B, scala.runtime.BoxedUnit], evidence$1: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def map$mVcB$sp(self, g: scala.Function1[typing.Any, scala.runtime.BoxedUnit], evidence$1: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def map$mVcC$sp(self, g: scala.Function1[typing.Any, scala.runtime.BoxedUnit], evidence$1: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def map$mVcD$sp(self, g: scala.Function1[typing.Any, scala.runtime.BoxedUnit], evidence$1: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def map$mVcF$sp(self, g: scala.Function1[typing.Any, scala.runtime.BoxedUnit], evidence$1: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def map$mVcI$sp(self, g: scala.Function1[typing.Any, scala.runtime.BoxedUnit], evidence$1: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def map$mVcJ$sp(self, g: scala.Function1[typing.Any, scala.runtime.BoxedUnit], evidence$1: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def map$mVcS$sp(self, g: scala.Function1[typing.Any, scala.runtime.BoxedUnit], evidence$1: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def map$mVcV$sp(self, g: scala.Function1[scala.runtime.BoxedUnit, scala.runtime.BoxedUnit], evidence$1: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def map$mVcZ$sp(self, g: scala.Function1[typing.Any, scala.runtime.BoxedUnit], evidence$1: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def map$mZc$sp(self, g: scala.Function1[_CViewColl__B, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mZcB$sp(self, g: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mZcC$sp(self, g: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mZcD$sp(self, g: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mZcF$sp(self, g: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mZcI$sp(self, g: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mZcJ$sp(self, g: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mZcS$sp(self, g: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mZcV$sp(self, g: scala.Function1[scala.runtime.BoxedUnit, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mZcZ$sp(self, g: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    _map$mcB$sp__C = typing.TypeVar('_map$mcB$sp__C')  # <C>
    def map$mcB$sp(self, g: scala.Function1[typing.Any, _map.mcB.sp__C], evidence$1: scalan.RType[_map.mcB.sp__C]) -> Coll[_map.mcB.sp__C]: ...
    _map$mcC$sp__C = typing.TypeVar('_map$mcC$sp__C')  # <C>
    def map$mcC$sp(self, g: scala.Function1[typing.Any, _map.mcC.sp__C], evidence$1: scalan.RType[_map.mcC.sp__C]) -> Coll[_map.mcC.sp__C]: ...
    _map$mcD$sp__C = typing.TypeVar('_map$mcD$sp__C')  # <C>
    def map$mcD$sp(self, g: scala.Function1[typing.Any, _map.mcD.sp__C], evidence$1: scalan.RType[_map.mcD.sp__C]) -> Coll[_map.mcD.sp__C]: ...
    _map$mcF$sp__C = typing.TypeVar('_map$mcF$sp__C')  # <C>
    def map$mcF$sp(self, g: scala.Function1[typing.Any, _map.mcF.sp__C], evidence$1: scalan.RType[_map.mcF.sp__C]) -> Coll[_map.mcF.sp__C]: ...
    _map$mcI$sp__C = typing.TypeVar('_map$mcI$sp__C')  # <C>
    def map$mcI$sp(self, g: scala.Function1[typing.Any, _map.mcI.sp__C], evidence$1: scalan.RType[_map.mcI.sp__C]) -> Coll[_map.mcI.sp__C]: ...
    _map$mcJ$sp__C = typing.TypeVar('_map$mcJ$sp__C')  # <C>
    def map$mcJ$sp(self, g: scala.Function1[typing.Any, _map.mcJ.sp__C], evidence$1: scalan.RType[_map.mcJ.sp__C]) -> Coll[_map.mcJ.sp__C]: ...
    _map$mcS$sp__C = typing.TypeVar('_map$mcS$sp__C')  # <C>
    def map$mcS$sp(self, g: scala.Function1[typing.Any, _map.mcS.sp__C], evidence$1: scalan.RType[_map.mcS.sp__C]) -> Coll[_map.mcS.sp__C]: ...
    _map$mcV$sp__C = typing.TypeVar('_map$mcV$sp__C')  # <C>
    def map$mcV$sp(self, g: scala.Function1[scala.runtime.BoxedUnit, _map.mcV.sp__C], evidence$1: scalan.RType[_map.mcV.sp__C]) -> Coll[_map.mcV.sp__C]: ...
    _map$mcZ$sp__C = typing.TypeVar('_map$mcZ$sp__C')  # <C>
    def map$mcZ$sp(self, g: scala.Function1[typing.Any, _map.mcZ.sp__C], evidence$1: scalan.RType[_map.mcZ.sp__C]) -> Coll[_map.mcZ.sp__C]: ...
    _mapReduce__K = typing.TypeVar('_mapReduce__K')  # <K>
    _mapReduce__V = typing.TypeVar('_mapReduce__V')  # <V>
    def mapReduce(self, m: scala.Function1[_CViewColl__B, scala.Tuple2[_mapReduce__K, _mapReduce__V]], r: scala.Function1[scala.Tuple2[_mapReduce__V, _mapReduce__V], _mapReduce__V], evidence$3: scalan.RType[_mapReduce__K], evidence$4: scalan.RType[_mapReduce__V]) -> Coll[scala.Tuple2[_mapReduce__K, _mapReduce__V]]: ...
    _mapReduce$mcB$sp__K = typing.TypeVar('_mapReduce$mcB$sp__K')  # <K>
    _mapReduce$mcB$sp__V = typing.TypeVar('_mapReduce$mcB$sp__V')  # <V>
    def mapReduce$mcB$sp(self, m: scala.Function1[typing.Any, scala.Tuple2[_mapReduce.mcB.sp__K, _mapReduce.mcB.sp__V]], r: scala.Function1[scala.Tuple2[_mapReduce.mcB.sp__V, _mapReduce.mcB.sp__V], _mapReduce.mcB.sp__V], evidence$3: scalan.RType[_mapReduce.mcB.sp__K], evidence$4: scalan.RType[_mapReduce.mcB.sp__V]) -> Coll[scala.Tuple2[_mapReduce.mcB.sp__K, _mapReduce.mcB.sp__V]]: ...
    _mapReduce$mcC$sp__K = typing.TypeVar('_mapReduce$mcC$sp__K')  # <K>
    _mapReduce$mcC$sp__V = typing.TypeVar('_mapReduce$mcC$sp__V')  # <V>
    def mapReduce$mcC$sp(self, m: scala.Function1[typing.Any, scala.Tuple2[_mapReduce.mcC.sp__K, _mapReduce.mcC.sp__V]], r: scala.Function1[scala.Tuple2[_mapReduce.mcC.sp__V, _mapReduce.mcC.sp__V], _mapReduce.mcC.sp__V], evidence$3: scalan.RType[_mapReduce.mcC.sp__K], evidence$4: scalan.RType[_mapReduce.mcC.sp__V]) -> Coll[scala.Tuple2[_mapReduce.mcC.sp__K, _mapReduce.mcC.sp__V]]: ...
    _mapReduce$mcD$sp__K = typing.TypeVar('_mapReduce$mcD$sp__K')  # <K>
    _mapReduce$mcD$sp__V = typing.TypeVar('_mapReduce$mcD$sp__V')  # <V>
    def mapReduce$mcD$sp(self, m: scala.Function1[typing.Any, scala.Tuple2[_mapReduce.mcD.sp__K, _mapReduce.mcD.sp__V]], r: scala.Function1[scala.Tuple2[_mapReduce.mcD.sp__V, _mapReduce.mcD.sp__V], _mapReduce.mcD.sp__V], evidence$3: scalan.RType[_mapReduce.mcD.sp__K], evidence$4: scalan.RType[_mapReduce.mcD.sp__V]) -> Coll[scala.Tuple2[_mapReduce.mcD.sp__K, _mapReduce.mcD.sp__V]]: ...
    _mapReduce$mcF$sp__K = typing.TypeVar('_mapReduce$mcF$sp__K')  # <K>
    _mapReduce$mcF$sp__V = typing.TypeVar('_mapReduce$mcF$sp__V')  # <V>
    def mapReduce$mcF$sp(self, m: scala.Function1[typing.Any, scala.Tuple2[_mapReduce.mcF.sp__K, _mapReduce.mcF.sp__V]], r: scala.Function1[scala.Tuple2[_mapReduce.mcF.sp__V, _mapReduce.mcF.sp__V], _mapReduce.mcF.sp__V], evidence$3: scalan.RType[_mapReduce.mcF.sp__K], evidence$4: scalan.RType[_mapReduce.mcF.sp__V]) -> Coll[scala.Tuple2[_mapReduce.mcF.sp__K, _mapReduce.mcF.sp__V]]: ...
    _mapReduce$mcI$sp__K = typing.TypeVar('_mapReduce$mcI$sp__K')  # <K>
    _mapReduce$mcI$sp__V = typing.TypeVar('_mapReduce$mcI$sp__V')  # <V>
    def mapReduce$mcI$sp(self, m: scala.Function1[typing.Any, scala.Tuple2[_mapReduce.mcI.sp__K, _mapReduce.mcI.sp__V]], r: scala.Function1[scala.Tuple2[_mapReduce.mcI.sp__V, _mapReduce.mcI.sp__V], _mapReduce.mcI.sp__V], evidence$3: scalan.RType[_mapReduce.mcI.sp__K], evidence$4: scalan.RType[_mapReduce.mcI.sp__V]) -> Coll[scala.Tuple2[_mapReduce.mcI.sp__K, _mapReduce.mcI.sp__V]]: ...
    _mapReduce$mcJ$sp__K = typing.TypeVar('_mapReduce$mcJ$sp__K')  # <K>
    _mapReduce$mcJ$sp__V = typing.TypeVar('_mapReduce$mcJ$sp__V')  # <V>
    def mapReduce$mcJ$sp(self, m: scala.Function1[typing.Any, scala.Tuple2[_mapReduce.mcJ.sp__K, _mapReduce.mcJ.sp__V]], r: scala.Function1[scala.Tuple2[_mapReduce.mcJ.sp__V, _mapReduce.mcJ.sp__V], _mapReduce.mcJ.sp__V], evidence$3: scalan.RType[_mapReduce.mcJ.sp__K], evidence$4: scalan.RType[_mapReduce.mcJ.sp__V]) -> Coll[scala.Tuple2[_mapReduce.mcJ.sp__K, _mapReduce.mcJ.sp__V]]: ...
    _mapReduce$mcS$sp__K = typing.TypeVar('_mapReduce$mcS$sp__K')  # <K>
    _mapReduce$mcS$sp__V = typing.TypeVar('_mapReduce$mcS$sp__V')  # <V>
    def mapReduce$mcS$sp(self, m: scala.Function1[typing.Any, scala.Tuple2[_mapReduce.mcS.sp__K, _mapReduce.mcS.sp__V]], r: scala.Function1[scala.Tuple2[_mapReduce.mcS.sp__V, _mapReduce.mcS.sp__V], _mapReduce.mcS.sp__V], evidence$3: scalan.RType[_mapReduce.mcS.sp__K], evidence$4: scalan.RType[_mapReduce.mcS.sp__V]) -> Coll[scala.Tuple2[_mapReduce.mcS.sp__K, _mapReduce.mcS.sp__V]]: ...
    _mapReduce$mcV$sp__K = typing.TypeVar('_mapReduce$mcV$sp__K')  # <K>
    _mapReduce$mcV$sp__V = typing.TypeVar('_mapReduce$mcV$sp__V')  # <V>
    def mapReduce$mcV$sp(self, m: scala.Function1[scala.runtime.BoxedUnit, scala.Tuple2[_mapReduce.mcV.sp__K, _mapReduce.mcV.sp__V]], r: scala.Function1[scala.Tuple2[_mapReduce.mcV.sp__V, _mapReduce.mcV.sp__V], _mapReduce.mcV.sp__V], evidence$3: scalan.RType[_mapReduce.mcV.sp__K], evidence$4: scalan.RType[_mapReduce.mcV.sp__V]) -> Coll[scala.Tuple2[_mapReduce.mcV.sp__K, _mapReduce.mcV.sp__V]]: ...
    _mapReduce$mcZ$sp__K = typing.TypeVar('_mapReduce$mcZ$sp__K')  # <K>
    _mapReduce$mcZ$sp__V = typing.TypeVar('_mapReduce$mcZ$sp__V')  # <V>
    def mapReduce$mcZ$sp(self, m: scala.Function1[typing.Any, scala.Tuple2[_mapReduce.mcZ.sp__K, _mapReduce.mcZ.sp__V]], r: scala.Function1[scala.Tuple2[_mapReduce.mcZ.sp__V, _mapReduce.mcZ.sp__V], _mapReduce.mcZ.sp__V], evidence$3: scalan.RType[_mapReduce.mcZ.sp__K], evidence$4: scalan.RType[_mapReduce.mcZ.sp__V]) -> Coll[scala.Tuple2[_mapReduce.mcZ.sp__K, _mapReduce.mcZ.sp__V]]: ...
    def nonEmpty(self) -> bool: ...
    def partition(self, pred: scala.Function1[_CViewColl__B, typing.Any]) -> scala.Tuple2[Coll[_CViewColl__B], Coll[_CViewColl__B]]: ...
    def partition$mcB$sp(self, pred: scala.Function1[typing.Any, typing.Any]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def partition$mcC$sp(self, pred: scala.Function1[typing.Any, typing.Any]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def partition$mcD$sp(self, pred: scala.Function1[typing.Any, typing.Any]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def partition$mcF$sp(self, pred: scala.Function1[typing.Any, typing.Any]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def partition$mcI$sp(self, pred: scala.Function1[typing.Any, typing.Any]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def partition$mcJ$sp(self, pred: scala.Function1[typing.Any, typing.Any]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def partition$mcS$sp(self, pred: scala.Function1[typing.Any, typing.Any]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def partition$mcV$sp(self, pred: scala.Function1[scala.runtime.BoxedUnit, typing.Any]) -> scala.Tuple2[Coll[scala.runtime.BoxedUnit], Coll[scala.runtime.BoxedUnit]]: ...
    def partition$mcZ$sp(self, pred: scala.Function1[typing.Any, typing.Any]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def patch(self, from_: int, patch: Coll[_CViewColl__B], replaced: int) -> Coll[_CViewColl__B]: ...
    def patch$mcB$sp(self, from_: int, patch: Coll[typing.Any], replaced: int) -> Coll[typing.Any]: ...
    def patch$mcC$sp(self, from_: int, patch: Coll[typing.Any], replaced: int) -> Coll[typing.Any]: ...
    def patch$mcD$sp(self, from_: int, patch: Coll[typing.Any], replaced: int) -> Coll[typing.Any]: ...
    def patch$mcF$sp(self, from_: int, patch: Coll[typing.Any], replaced: int) -> Coll[typing.Any]: ...
    def patch$mcI$sp(self, from_: int, patch: Coll[typing.Any], replaced: int) -> Coll[typing.Any]: ...
    def patch$mcJ$sp(self, from_: int, patch: Coll[typing.Any], replaced: int) -> Coll[typing.Any]: ...
    def patch$mcS$sp(self, from_: int, patch: Coll[typing.Any], replaced: int) -> Coll[typing.Any]: ...
    def patch$mcV$sp(self, from_: int, patch: Coll[scala.runtime.BoxedUnit], replaced: int) -> Coll[scala.runtime.BoxedUnit]: ...
    def patch$mcZ$sp(self, from_: int, patch: Coll[typing.Any], replaced: int) -> Coll[typing.Any]: ...
    def reverse(self) -> Coll[_CViewColl__B]: ...
    def reverse$mcB$sp(self) -> Coll[typing.Any]: ...
    def reverse$mcC$sp(self) -> Coll[typing.Any]: ...
    def reverse$mcD$sp(self) -> Coll[typing.Any]: ...
    def reverse$mcF$sp(self) -> Coll[typing.Any]: ...
    def reverse$mcI$sp(self) -> Coll[typing.Any]: ...
    def reverse$mcJ$sp(self) -> Coll[typing.Any]: ...
    def reverse$mcS$sp(self) -> Coll[typing.Any]: ...
    def reverse$mcV$sp(self) -> Coll[scala.runtime.BoxedUnit]: ...
    def reverse$mcZ$sp(self) -> Coll[typing.Any]: ...
    def segmentLength(self, p: scala.Function1[_CViewColl__B, typing.Any], from_: int) -> int: ...
    def segmentLength$mcB$sp(self, p: scala.Function1[typing.Any, typing.Any], from_: int) -> int: ...
    def segmentLength$mcC$sp(self, p: scala.Function1[typing.Any, typing.Any], from_: int) -> int: ...
    def segmentLength$mcD$sp(self, p: scala.Function1[typing.Any, typing.Any], from_: int) -> int: ...
    def segmentLength$mcF$sp(self, p: scala.Function1[typing.Any, typing.Any], from_: int) -> int: ...
    def segmentLength$mcI$sp(self, p: scala.Function1[typing.Any, typing.Any], from_: int) -> int: ...
    def segmentLength$mcJ$sp(self, p: scala.Function1[typing.Any, typing.Any], from_: int) -> int: ...
    def segmentLength$mcS$sp(self, p: scala.Function1[typing.Any, typing.Any], from_: int) -> int: ...
    def segmentLength$mcV$sp(self, p: scala.Function1[scala.runtime.BoxedUnit, typing.Any], from_: int) -> int: ...
    def segmentLength$mcZ$sp(self, p: scala.Function1[typing.Any, typing.Any], from_: int) -> int: ...
    def size(self) -> int: ...
    def slice(self, from_: int, until: int) -> Coll[_CViewColl__B]: ...
    def slice$mcB$sp(self, from_: int, until: int) -> Coll[typing.Any]: ...
    def slice$mcC$sp(self, from_: int, until: int) -> Coll[typing.Any]: ...
    def slice$mcD$sp(self, from_: int, until: int) -> Coll[typing.Any]: ...
    def slice$mcF$sp(self, from_: int, until: int) -> Coll[typing.Any]: ...
    def slice$mcI$sp(self, from_: int, until: int) -> Coll[typing.Any]: ...
    def slice$mcJ$sp(self, from_: int, until: int) -> Coll[typing.Any]: ...
    def slice$mcS$sp(self, from_: int, until: int) -> Coll[typing.Any]: ...
    def slice$mcV$sp(self, from_: int, until: int) -> Coll[scala.runtime.BoxedUnit]: ...
    def slice$mcZ$sp(self, from_: int, until: int) -> Coll[typing.Any]: ...
    def source(self) -> Coll[_CViewColl__A]: ...
    def source$mcB$sp(self) -> Coll[typing.Any]: ...
    def source$mcC$sp(self) -> Coll[typing.Any]: ...
    def source$mcD$sp(self) -> Coll[typing.Any]: ...
    def source$mcF$sp(self) -> Coll[typing.Any]: ...
    def source$mcI$sp(self) -> Coll[typing.Any]: ...
    def source$mcJ$sp(self) -> Coll[typing.Any]: ...
    def source$mcS$sp(self) -> Coll[typing.Any]: ...
    def source$mcV$sp(self) -> Coll[scala.runtime.BoxedUnit]: ...
    def source$mcZ$sp(self) -> Coll[typing.Any]: ...
    def specInstance$(self) -> bool: ...
    def special$collection$CViewColl$$calculatedCount(self) -> int: ...
    def special$collection$CViewColl$$calculatedCount_$eq(self, x$1: int) -> None: ...
    def special$collection$CViewColl$$ensureItem(self, index: int) -> None: ...
    def special$collection$CViewColl$$ensureItemNoCalcCountChange(self, index: int) -> None: ...
    def special$collection$CViewColl$$isAllItemsCalculated(self) -> bool: ...
    def special$collection$CViewColl$$isCalculated(self) -> typing.List[bool]: ...
    def special$collection$CViewColl$$isCalculated_$eq(self, x$1: typing.List[bool]) -> None: ...
    def special$collection$CViewColl$$items(self) -> typing.Any: ...
    def special$collection$CViewColl$$items$mcB$sp(self) -> typing.List[int]: ...
    def special$collection$CViewColl$$items$mcB$sp_$eq(self, x$1: typing.List[int]) -> None: ...
    def special$collection$CViewColl$$items$mcC$sp(self) -> typing.List[str]: ...
    def special$collection$CViewColl$$items$mcC$sp_$eq(self, x$1: typing.List[str]) -> None: ...
    def special$collection$CViewColl$$items$mcD$sp(self) -> typing.List[float]: ...
    def special$collection$CViewColl$$items$mcD$sp_$eq(self, x$1: typing.List[float]) -> None: ...
    def special$collection$CViewColl$$items$mcF$sp(self) -> typing.List[float]: ...
    def special$collection$CViewColl$$items$mcF$sp_$eq(self, x$1: typing.List[float]) -> None: ...
    def special$collection$CViewColl$$items$mcI$sp(self) -> typing.List[int]: ...
    def special$collection$CViewColl$$items$mcI$sp_$eq(self, x$1: typing.List[int]) -> None: ...
    def special$collection$CViewColl$$items$mcJ$sp(self) -> typing.List[int]: ...
    def special$collection$CViewColl$$items$mcJ$sp_$eq(self, x$1: typing.List[int]) -> None: ...
    def special$collection$CViewColl$$items$mcS$sp(self) -> typing.List[int]: ...
    def special$collection$CViewColl$$items$mcS$sp_$eq(self, x$1: typing.List[int]) -> None: ...
    def special$collection$CViewColl$$items$mcV$sp(self) -> typing.List[scala.runtime.BoxedUnit]: ...
    def special$collection$CViewColl$$items$mcV$sp_$eq(self, x$1: typing.List[scala.runtime.BoxedUnit]) -> None: ...
    def special$collection$CViewColl$$items$mcZ$sp(self) -> typing.List[bool]: ...
    def special$collection$CViewColl$$items$mcZ$sp_$eq(self, x$1: typing.List[bool]) -> None: ...
    def special$collection$CViewColl$$items_$eq(self, x$1: typing.Any) -> None: ...
    def sum(self, m: Monoid[_CViewColl__B]) -> _CViewColl__B: ...
    def sum$mcB$sp(self, m: Monoid[typing.Any]) -> int: ...
    def sum$mcC$sp(self, m: Monoid[typing.Any]) -> str: ...
    def sum$mcD$sp(self, m: Monoid[typing.Any]) -> float: ...
    def sum$mcF$sp(self, m: Monoid[typing.Any]) -> float: ...
    def sum$mcI$sp(self, m: Monoid[typing.Any]) -> int: ...
    def sum$mcJ$sp(self, m: Monoid[typing.Any]) -> int: ...
    def sum$mcS$sp(self, m: Monoid[typing.Any]) -> int: ...
    def sum$mcV$sp(self, m: Monoid[scala.runtime.BoxedUnit]) -> None: ...
    def sum$mcZ$sp(self, m: Monoid[typing.Any]) -> bool: ...
    def tItem(self) -> scalan.RType[_CViewColl__B]: ...
    def take(self, n: int) -> Coll[_CViewColl__B]: ...
    def take$mcB$sp(self, n: int) -> Coll[typing.Any]: ...
    def take$mcC$sp(self, n: int) -> Coll[typing.Any]: ...
    def take$mcD$sp(self, n: int) -> Coll[typing.Any]: ...
    def take$mcF$sp(self, n: int) -> Coll[typing.Any]: ...
    def take$mcI$sp(self, n: int) -> Coll[typing.Any]: ...
    def take$mcJ$sp(self, n: int) -> Coll[typing.Any]: ...
    def take$mcS$sp(self, n: int) -> Coll[typing.Any]: ...
    def take$mcV$sp(self, n: int) -> Coll[scala.runtime.BoxedUnit]: ...
    def take$mcZ$sp(self, n: int) -> Coll[typing.Any]: ...
    def toArray(self) -> typing.Any: ...
    def toArray$mcB$sp(self) -> typing.List[int]: ...
    def toArray$mcC$sp(self) -> typing.List[str]: ...
    def toArray$mcD$sp(self) -> typing.List[float]: ...
    def toArray$mcF$sp(self) -> typing.List[float]: ...
    def toArray$mcI$sp(self) -> typing.List[int]: ...
    def toArray$mcJ$sp(self) -> typing.List[int]: ...
    def toArray$mcS$sp(self) -> typing.List[int]: ...
    def toArray$mcV$sp(self) -> typing.List[scala.runtime.BoxedUnit]: ...
    def toArray$mcZ$sp(self) -> typing.List[bool]: ...
    _toMap__T = typing.TypeVar('_toMap__T')  # <T>
    _toMap__U = typing.TypeVar('_toMap__U')  # <U>
    def toMap(self, ev: scala.Predef..less.colon.less[_CViewColl__B, scala.Tuple2[_toMap__T, _toMap__U]]) -> scala.collection.immutable.Map[_toMap__T, _toMap__U]: ...
    def toString(self) -> str: ...
    def unionSet(self, that: Coll[_CViewColl__B]) -> Coll[_CViewColl__B]: ...
    def unionSet$mcB$sp(self, that: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def unionSet$mcC$sp(self, that: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def unionSet$mcD$sp(self, that: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def unionSet$mcF$sp(self, that: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def unionSet$mcI$sp(self, that: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def unionSet$mcJ$sp(self, that: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def unionSet$mcS$sp(self, that: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def unionSet$mcV$sp(self, that: Coll[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def unionSet$mcZ$sp(self, that: Coll[typing.Any]) -> Coll[typing.Any]: ...
    _unionSetByKey__T = typing.TypeVar('_unionSetByKey__T')  # <T>
    _unionSetByKey__U = typing.TypeVar('_unionSetByKey__U')  # <U>
    def unionSetByKey(self, that: Coll[_CViewColl__B], ev: scala.Predef..less.colon.less[_CViewColl__B, scala.Tuple2[_unionSetByKey__T, _unionSetByKey__U]]) -> Coll[_CViewColl__B]: ...
    _unionSetByKey$mcB$sp__T = typing.TypeVar('_unionSetByKey$mcB$sp__T')  # <T>
    _unionSetByKey$mcB$sp__U = typing.TypeVar('_unionSetByKey$mcB$sp__U')  # <U>
    def unionSetByKey$mcB$sp(self, that: Coll[typing.Any], ev: scala.Predef..less.colon.less[typing.Any, scala.Tuple2[_unionSetByKey.mcB.sp__T, _unionSetByKey.mcB.sp__U]]) -> Coll[typing.Any]: ...
    _unionSetByKey$mcC$sp__T = typing.TypeVar('_unionSetByKey$mcC$sp__T')  # <T>
    _unionSetByKey$mcC$sp__U = typing.TypeVar('_unionSetByKey$mcC$sp__U')  # <U>
    def unionSetByKey$mcC$sp(self, that: Coll[typing.Any], ev: scala.Predef..less.colon.less[typing.Any, scala.Tuple2[_unionSetByKey.mcC.sp__T, _unionSetByKey.mcC.sp__U]]) -> Coll[typing.Any]: ...
    _unionSetByKey$mcD$sp__T = typing.TypeVar('_unionSetByKey$mcD$sp__T')  # <T>
    _unionSetByKey$mcD$sp__U = typing.TypeVar('_unionSetByKey$mcD$sp__U')  # <U>
    def unionSetByKey$mcD$sp(self, that: Coll[typing.Any], ev: scala.Predef..less.colon.less[typing.Any, scala.Tuple2[_unionSetByKey.mcD.sp__T, _unionSetByKey.mcD.sp__U]]) -> Coll[typing.Any]: ...
    _unionSetByKey$mcF$sp__T = typing.TypeVar('_unionSetByKey$mcF$sp__T')  # <T>
    _unionSetByKey$mcF$sp__U = typing.TypeVar('_unionSetByKey$mcF$sp__U')  # <U>
    def unionSetByKey$mcF$sp(self, that: Coll[typing.Any], ev: scala.Predef..less.colon.less[typing.Any, scala.Tuple2[_unionSetByKey.mcF.sp__T, _unionSetByKey.mcF.sp__U]]) -> Coll[typing.Any]: ...
    _unionSetByKey$mcI$sp__T = typing.TypeVar('_unionSetByKey$mcI$sp__T')  # <T>
    _unionSetByKey$mcI$sp__U = typing.TypeVar('_unionSetByKey$mcI$sp__U')  # <U>
    def unionSetByKey$mcI$sp(self, that: Coll[typing.Any], ev: scala.Predef..less.colon.less[typing.Any, scala.Tuple2[_unionSetByKey.mcI.sp__T, _unionSetByKey.mcI.sp__U]]) -> Coll[typing.Any]: ...
    _unionSetByKey$mcJ$sp__T = typing.TypeVar('_unionSetByKey$mcJ$sp__T')  # <T>
    _unionSetByKey$mcJ$sp__U = typing.TypeVar('_unionSetByKey$mcJ$sp__U')  # <U>
    def unionSetByKey$mcJ$sp(self, that: Coll[typing.Any], ev: scala.Predef..less.colon.less[typing.Any, scala.Tuple2[_unionSetByKey.mcJ.sp__T, _unionSetByKey.mcJ.sp__U]]) -> Coll[typing.Any]: ...
    _unionSetByKey$mcS$sp__T = typing.TypeVar('_unionSetByKey$mcS$sp__T')  # <T>
    _unionSetByKey$mcS$sp__U = typing.TypeVar('_unionSetByKey$mcS$sp__U')  # <U>
    def unionSetByKey$mcS$sp(self, that: Coll[typing.Any], ev: scala.Predef..less.colon.less[typing.Any, scala.Tuple2[_unionSetByKey.mcS.sp__T, _unionSetByKey.mcS.sp__U]]) -> Coll[typing.Any]: ...
    _unionSetByKey$mcV$sp__T = typing.TypeVar('_unionSetByKey$mcV$sp__T')  # <T>
    _unionSetByKey$mcV$sp__U = typing.TypeVar('_unionSetByKey$mcV$sp__U')  # <U>
    def unionSetByKey$mcV$sp(self, that: Coll[scala.runtime.BoxedUnit], ev: scala.Predef..less.colon.less[scala.runtime.BoxedUnit, scala.Tuple2[_unionSetByKey.mcV.sp__T, _unionSetByKey.mcV.sp__U]]) -> Coll[scala.runtime.BoxedUnit]: ...
    _unionSetByKey$mcZ$sp__T = typing.TypeVar('_unionSetByKey$mcZ$sp__T')  # <T>
    _unionSetByKey$mcZ$sp__U = typing.TypeVar('_unionSetByKey$mcZ$sp__U')  # <U>
    def unionSetByKey$mcZ$sp(self, that: Coll[typing.Any], ev: scala.Predef..less.colon.less[typing.Any, scala.Tuple2[_unionSetByKey.mcZ.sp__T, _unionSetByKey.mcZ.sp__U]]) -> Coll[typing.Any]: ...
    def updateMany(self, indexes: Coll[typing.Any], values: Coll[_CViewColl__B]) -> Coll[_CViewColl__B]: ...
    def updateMany$mcB$sp(self, indexes: Coll[typing.Any], values: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def updateMany$mcC$sp(self, indexes: Coll[typing.Any], values: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def updateMany$mcD$sp(self, indexes: Coll[typing.Any], values: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def updateMany$mcF$sp(self, indexes: Coll[typing.Any], values: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def updateMany$mcI$sp(self, indexes: Coll[typing.Any], values: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def updateMany$mcJ$sp(self, indexes: Coll[typing.Any], values: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def updateMany$mcS$sp(self, indexes: Coll[typing.Any], values: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def updateMany$mcV$sp(self, indexes: Coll[typing.Any], values: Coll[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def updateMany$mcZ$sp(self, indexes: Coll[typing.Any], values: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def updated(self, index: int, elem: _CViewColl__B) -> Coll[_CViewColl__B]: ...
    def updated$mcB$sp(self, index: int, elem: int) -> Coll[typing.Any]: ...
    def updated$mcC$sp(self, index: int, elem: str) -> Coll[typing.Any]: ...
    def updated$mcD$sp(self, index: int, elem: float) -> Coll[typing.Any]: ...
    def updated$mcF$sp(self, index: int, elem: float) -> Coll[typing.Any]: ...
    def updated$mcI$sp(self, index: int, elem: int) -> Coll[typing.Any]: ...
    def updated$mcJ$sp(self, index: int, elem: int) -> Coll[typing.Any]: ...
    def updated$mcS$sp(self, index: int, elem: int) -> Coll[typing.Any]: ...
    def updated$mcV$sp(self, index: int, elem: scala.runtime.BoxedUnit) -> Coll[scala.runtime.BoxedUnit]: ...
    def updated$mcZ$sp(self, index: int, elem: bool) -> Coll[typing.Any]: ...
    _zip__C = typing.TypeVar('_zip__C')  # <C>
    def zip(self, ys: Coll[_zip__C]) -> Coll[scala.Tuple2[_CViewColl__B, _zip__C]]: ...
    def zip$mBc$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[_CViewColl__B, typing.Any]]: ...
    def zip$mBcB$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mBcC$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mBcD$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mBcF$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mBcI$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mBcJ$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mBcS$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mBcV$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]: ...
    def zip$mBcZ$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mCc$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[_CViewColl__B, typing.Any]]: ...
    def zip$mCcB$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mCcC$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mCcD$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mCcF$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mCcI$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mCcJ$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mCcS$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mCcV$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]: ...
    def zip$mCcZ$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mDc$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[_CViewColl__B, typing.Any]]: ...
    def zip$mDcB$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mDcC$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mDcD$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mDcF$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mDcI$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mDcJ$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mDcS$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mDcV$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]: ...
    def zip$mDcZ$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mFc$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[_CViewColl__B, typing.Any]]: ...
    def zip$mFcB$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mFcC$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mFcD$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mFcF$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mFcI$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mFcJ$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mFcS$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mFcV$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]: ...
    def zip$mFcZ$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mIc$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[_CViewColl__B, typing.Any]]: ...
    def zip$mIcB$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mIcC$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mIcD$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mIcF$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mIcI$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mIcJ$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mIcS$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mIcV$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]: ...
    def zip$mIcZ$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mJc$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[_CViewColl__B, typing.Any]]: ...
    def zip$mJcB$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mJcC$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mJcD$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mJcF$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mJcI$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mJcJ$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mJcS$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mJcV$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]: ...
    def zip$mJcZ$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mSc$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[_CViewColl__B, typing.Any]]: ...
    def zip$mScB$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mScC$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mScD$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mScF$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mScI$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mScJ$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mScS$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mScV$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]: ...
    def zip$mScZ$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mVc$sp(self, ys: Coll[scala.runtime.BoxedUnit]) -> Coll[scala.Tuple2[_CViewColl__B, scala.runtime.BoxedUnit]]: ...
    def zip$mVcB$sp(self, ys: Coll[scala.runtime.BoxedUnit]) -> Coll[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]: ...
    def zip$mVcC$sp(self, ys: Coll[scala.runtime.BoxedUnit]) -> Coll[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]: ...
    def zip$mVcD$sp(self, ys: Coll[scala.runtime.BoxedUnit]) -> Coll[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]: ...
    def zip$mVcF$sp(self, ys: Coll[scala.runtime.BoxedUnit]) -> Coll[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]: ...
    def zip$mVcI$sp(self, ys: Coll[scala.runtime.BoxedUnit]) -> Coll[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]: ...
    def zip$mVcJ$sp(self, ys: Coll[scala.runtime.BoxedUnit]) -> Coll[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]: ...
    def zip$mVcS$sp(self, ys: Coll[scala.runtime.BoxedUnit]) -> Coll[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]: ...
    def zip$mVcV$sp(self, ys: Coll[scala.runtime.BoxedUnit]) -> Coll[scala.Tuple2[scala.runtime.BoxedUnit, scala.runtime.BoxedUnit]]: ...
    def zip$mVcZ$sp(self, ys: Coll[scala.runtime.BoxedUnit]) -> Coll[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]: ...
    def zip$mZc$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[_CViewColl__B, typing.Any]]: ...
    def zip$mZcB$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mZcC$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mZcD$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mZcF$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mZcI$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mZcJ$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mZcS$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mZcV$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]: ...
    def zip$mZcZ$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    _zip$mcB$sp__C = typing.TypeVar('_zip$mcB$sp__C')  # <C>
    def zip$mcB$sp(self, ys: Coll[_zip.mcB.sp__C]) -> Coll[scala.Tuple2[typing.Any, _zip.mcB.sp__C]]: ...
    _zip$mcC$sp__C = typing.TypeVar('_zip$mcC$sp__C')  # <C>
    def zip$mcC$sp(self, ys: Coll[_zip.mcC.sp__C]) -> Coll[scala.Tuple2[typing.Any, _zip.mcC.sp__C]]: ...
    _zip$mcD$sp__C = typing.TypeVar('_zip$mcD$sp__C')  # <C>
    def zip$mcD$sp(self, ys: Coll[_zip.mcD.sp__C]) -> Coll[scala.Tuple2[typing.Any, _zip.mcD.sp__C]]: ...
    _zip$mcF$sp__C = typing.TypeVar('_zip$mcF$sp__C')  # <C>
    def zip$mcF$sp(self, ys: Coll[_zip.mcF.sp__C]) -> Coll[scala.Tuple2[typing.Any, _zip.mcF.sp__C]]: ...
    _zip$mcI$sp__C = typing.TypeVar('_zip$mcI$sp__C')  # <C>
    def zip$mcI$sp(self, ys: Coll[_zip.mcI.sp__C]) -> Coll[scala.Tuple2[typing.Any, _zip.mcI.sp__C]]: ...
    _zip$mcJ$sp__C = typing.TypeVar('_zip$mcJ$sp__C')  # <C>
    def zip$mcJ$sp(self, ys: Coll[_zip.mcJ.sp__C]) -> Coll[scala.Tuple2[typing.Any, _zip.mcJ.sp__C]]: ...
    _zip$mcS$sp__C = typing.TypeVar('_zip$mcS$sp__C')  # <C>
    def zip$mcS$sp(self, ys: Coll[_zip.mcS.sp__C]) -> Coll[scala.Tuple2[typing.Any, _zip.mcS.sp__C]]: ...
    _zip$mcV$sp__C = typing.TypeVar('_zip$mcV$sp__C')  # <C>
    def zip$mcV$sp(self, ys: Coll[_zip.mcV.sp__C]) -> Coll[scala.Tuple2[scala.runtime.BoxedUnit, _zip.mcV.sp__C]]: ...
    _zip$mcZ$sp__C = typing.TypeVar('_zip$mcZ$sp__C')  # <C>
    def zip$mcZ$sp(self, ys: Coll[_zip.mcZ.sp__C]) -> Coll[scala.Tuple2[typing.Any, _zip.mcZ.sp__C]]: ...

_CollOverArray__A = typing.TypeVar('_CollOverArray__A')  # <A>
class CollOverArray(Coll[_CollOverArray__A], typing.Generic[_CollOverArray__A]):
    toArray: typing.Any = ...
    special$collection$CollOverArray$$tA: scalan.RType = ...
    def __init__(self, toArray: typing.Any, tA: scalan.RType[_CollOverArray__A]): ...
    def append(self, other: Coll[_CollOverArray__A]) -> Coll[_CollOverArray__A]: ...
    def append$mcB$sp(self, other: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def append$mcC$sp(self, other: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def append$mcD$sp(self, other: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def append$mcF$sp(self, other: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def append$mcI$sp(self, other: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def append$mcJ$sp(self, other: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def append$mcS$sp(self, other: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def append$mcV$sp(self, other: Coll[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def append$mcZ$sp(self, other: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def apply(self, i: int) -> _CollOverArray__A: ...
    def apply$mcB$sp(self, i: int) -> int: ...
    def apply$mcC$sp(self, i: int) -> str: ...
    def apply$mcD$sp(self, i: int) -> float: ...
    def apply$mcF$sp(self, i: int) -> float: ...
    def apply$mcI$sp(self, i: int) -> int: ...
    def apply$mcJ$sp(self, i: int) -> int: ...
    def apply$mcS$sp(self, i: int) -> int: ...
    def apply$mcV$sp(self, i: int) -> None: ...
    def apply$mcZ$sp(self, i: int) -> bool: ...
    def builder(self) -> CollBuilder: ...
    def diff(self, that: Coll[_CollOverArray__A]) -> Coll[_CollOverArray__A]: ...
    def diff$mcB$sp(self, that: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def diff$mcC$sp(self, that: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def diff$mcD$sp(self, that: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def diff$mcF$sp(self, that: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def diff$mcI$sp(self, that: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def diff$mcJ$sp(self, that: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def diff$mcS$sp(self, that: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def diff$mcV$sp(self, that: Coll[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def diff$mcZ$sp(self, that: Coll[typing.Any]) -> Coll[typing.Any]: ...
    _distinctByKey__T = typing.TypeVar('_distinctByKey__T')  # <T>
    _distinctByKey__U = typing.TypeVar('_distinctByKey__U')  # <U>
    def distinctByKey(self, ev: scala.Predef..less.colon.less[_CollOverArray__A, scala.Tuple2[_distinctByKey__T, _distinctByKey__U]]) -> Coll[_CollOverArray__A]: ...
    _distinctByKey$mcB$sp__T = typing.TypeVar('_distinctByKey$mcB$sp__T')  # <T>
    _distinctByKey$mcB$sp__U = typing.TypeVar('_distinctByKey$mcB$sp__U')  # <U>
    def distinctByKey$mcB$sp(self, ev: scala.Predef..less.colon.less[typing.Any, scala.Tuple2[_distinctByKey.mcB.sp__T, _distinctByKey.mcB.sp__U]]) -> Coll[typing.Any]: ...
    _distinctByKey$mcC$sp__T = typing.TypeVar('_distinctByKey$mcC$sp__T')  # <T>
    _distinctByKey$mcC$sp__U = typing.TypeVar('_distinctByKey$mcC$sp__U')  # <U>
    def distinctByKey$mcC$sp(self, ev: scala.Predef..less.colon.less[typing.Any, scala.Tuple2[_distinctByKey.mcC.sp__T, _distinctByKey.mcC.sp__U]]) -> Coll[typing.Any]: ...
    _distinctByKey$mcD$sp__T = typing.TypeVar('_distinctByKey$mcD$sp__T')  # <T>
    _distinctByKey$mcD$sp__U = typing.TypeVar('_distinctByKey$mcD$sp__U')  # <U>
    def distinctByKey$mcD$sp(self, ev: scala.Predef..less.colon.less[typing.Any, scala.Tuple2[_distinctByKey.mcD.sp__T, _distinctByKey.mcD.sp__U]]) -> Coll[typing.Any]: ...
    _distinctByKey$mcF$sp__T = typing.TypeVar('_distinctByKey$mcF$sp__T')  # <T>
    _distinctByKey$mcF$sp__U = typing.TypeVar('_distinctByKey$mcF$sp__U')  # <U>
    def distinctByKey$mcF$sp(self, ev: scala.Predef..less.colon.less[typing.Any, scala.Tuple2[_distinctByKey.mcF.sp__T, _distinctByKey.mcF.sp__U]]) -> Coll[typing.Any]: ...
    _distinctByKey$mcI$sp__T = typing.TypeVar('_distinctByKey$mcI$sp__T')  # <T>
    _distinctByKey$mcI$sp__U = typing.TypeVar('_distinctByKey$mcI$sp__U')  # <U>
    def distinctByKey$mcI$sp(self, ev: scala.Predef..less.colon.less[typing.Any, scala.Tuple2[_distinctByKey.mcI.sp__T, _distinctByKey.mcI.sp__U]]) -> Coll[typing.Any]: ...
    _distinctByKey$mcJ$sp__T = typing.TypeVar('_distinctByKey$mcJ$sp__T')  # <T>
    _distinctByKey$mcJ$sp__U = typing.TypeVar('_distinctByKey$mcJ$sp__U')  # <U>
    def distinctByKey$mcJ$sp(self, ev: scala.Predef..less.colon.less[typing.Any, scala.Tuple2[_distinctByKey.mcJ.sp__T, _distinctByKey.mcJ.sp__U]]) -> Coll[typing.Any]: ...
    _distinctByKey$mcS$sp__T = typing.TypeVar('_distinctByKey$mcS$sp__T')  # <T>
    _distinctByKey$mcS$sp__U = typing.TypeVar('_distinctByKey$mcS$sp__U')  # <U>
    def distinctByKey$mcS$sp(self, ev: scala.Predef..less.colon.less[typing.Any, scala.Tuple2[_distinctByKey.mcS.sp__T, _distinctByKey.mcS.sp__U]]) -> Coll[typing.Any]: ...
    _distinctByKey$mcV$sp__T = typing.TypeVar('_distinctByKey$mcV$sp__T')  # <T>
    _distinctByKey$mcV$sp__U = typing.TypeVar('_distinctByKey$mcV$sp__U')  # <U>
    def distinctByKey$mcV$sp(self, ev: scala.Predef..less.colon.less[scala.runtime.BoxedUnit, scala.Tuple2[_distinctByKey.mcV.sp__T, _distinctByKey.mcV.sp__U]]) -> Coll[scala.runtime.BoxedUnit]: ...
    _distinctByKey$mcZ$sp__T = typing.TypeVar('_distinctByKey$mcZ$sp__T')  # <T>
    _distinctByKey$mcZ$sp__U = typing.TypeVar('_distinctByKey$mcZ$sp__U')  # <U>
    def distinctByKey$mcZ$sp(self, ev: scala.Predef..less.colon.less[typing.Any, scala.Tuple2[_distinctByKey.mcZ.sp__T, _distinctByKey.mcZ.sp__U]]) -> Coll[typing.Any]: ...
    def equals(self, obj: typing.Any) -> bool: ...
    def exists(self, p: scala.Function1[_CollOverArray__A, typing.Any]) -> bool: ...
    def exists$mcB$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> bool: ...
    def exists$mcC$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> bool: ...
    def exists$mcD$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> bool: ...
    def exists$mcF$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> bool: ...
    def exists$mcI$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> bool: ...
    def exists$mcJ$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> bool: ...
    def exists$mcS$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> bool: ...
    def exists$mcV$sp(self, p: scala.Function1[scala.runtime.BoxedUnit, typing.Any]) -> bool: ...
    def exists$mcZ$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> bool: ...
    def filter(self, p: scala.Function1[_CollOverArray__A, typing.Any]) -> Coll[_CollOverArray__A]: ...
    def filter$mcB$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> Coll[typing.Any]: ...
    def filter$mcC$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> Coll[typing.Any]: ...
    def filter$mcD$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> Coll[typing.Any]: ...
    def filter$mcF$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> Coll[typing.Any]: ...
    def filter$mcI$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> Coll[typing.Any]: ...
    def filter$mcJ$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> Coll[typing.Any]: ...
    def filter$mcS$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> Coll[typing.Any]: ...
    def filter$mcV$sp(self, p: scala.Function1[scala.runtime.BoxedUnit, typing.Any]) -> Coll[scala.runtime.BoxedUnit]: ...
    def filter$mcZ$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> Coll[typing.Any]: ...
    def find(self, p: scala.Function1[_CollOverArray__A, typing.Any]) -> scala.Option[_CollOverArray__A]: ...
    def find$mcB$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> scala.Option[typing.Any]: ...
    def find$mcC$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> scala.Option[typing.Any]: ...
    def find$mcD$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> scala.Option[typing.Any]: ...
    def find$mcF$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> scala.Option[typing.Any]: ...
    def find$mcI$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> scala.Option[typing.Any]: ...
    def find$mcJ$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> scala.Option[typing.Any]: ...
    def find$mcS$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> scala.Option[typing.Any]: ...
    def find$mcV$sp(self, p: scala.Function1[scala.runtime.BoxedUnit, typing.Any]) -> scala.Option[scala.runtime.BoxedUnit]: ...
    def find$mcZ$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> scala.Option[typing.Any]: ...
    _flatMap__B = typing.TypeVar('_flatMap__B')  # <B>
    def flatMap(self, f: scala.Function1[_CollOverArray__A, Coll[_flatMap__B]], evidence$2: scalan.RType[_flatMap__B]) -> Coll[_flatMap__B]: ...
    _flatMap$mcB$sp__B = typing.TypeVar('_flatMap$mcB$sp__B')  # <B>
    def flatMap$mcB$sp(self, f: scala.Function1[typing.Any, Coll[_flatMap.mcB.sp__B]], evidence$2: scalan.RType[_flatMap.mcB.sp__B]) -> Coll[_flatMap.mcB.sp__B]: ...
    _flatMap$mcC$sp__B = typing.TypeVar('_flatMap$mcC$sp__B')  # <B>
    def flatMap$mcC$sp(self, f: scala.Function1[typing.Any, Coll[_flatMap.mcC.sp__B]], evidence$2: scalan.RType[_flatMap.mcC.sp__B]) -> Coll[_flatMap.mcC.sp__B]: ...
    _flatMap$mcD$sp__B = typing.TypeVar('_flatMap$mcD$sp__B')  # <B>
    def flatMap$mcD$sp(self, f: scala.Function1[typing.Any, Coll[_flatMap.mcD.sp__B]], evidence$2: scalan.RType[_flatMap.mcD.sp__B]) -> Coll[_flatMap.mcD.sp__B]: ...
    _flatMap$mcF$sp__B = typing.TypeVar('_flatMap$mcF$sp__B')  # <B>
    def flatMap$mcF$sp(self, f: scala.Function1[typing.Any, Coll[_flatMap.mcF.sp__B]], evidence$2: scalan.RType[_flatMap.mcF.sp__B]) -> Coll[_flatMap.mcF.sp__B]: ...
    _flatMap$mcI$sp__B = typing.TypeVar('_flatMap$mcI$sp__B')  # <B>
    def flatMap$mcI$sp(self, f: scala.Function1[typing.Any, Coll[_flatMap.mcI.sp__B]], evidence$2: scalan.RType[_flatMap.mcI.sp__B]) -> Coll[_flatMap.mcI.sp__B]: ...
    _flatMap$mcJ$sp__B = typing.TypeVar('_flatMap$mcJ$sp__B')  # <B>
    def flatMap$mcJ$sp(self, f: scala.Function1[typing.Any, Coll[_flatMap.mcJ.sp__B]], evidence$2: scalan.RType[_flatMap.mcJ.sp__B]) -> Coll[_flatMap.mcJ.sp__B]: ...
    _flatMap$mcS$sp__B = typing.TypeVar('_flatMap$mcS$sp__B')  # <B>
    def flatMap$mcS$sp(self, f: scala.Function1[typing.Any, Coll[_flatMap.mcS.sp__B]], evidence$2: scalan.RType[_flatMap.mcS.sp__B]) -> Coll[_flatMap.mcS.sp__B]: ...
    _flatMap$mcV$sp__B = typing.TypeVar('_flatMap$mcV$sp__B')  # <B>
    def flatMap$mcV$sp(self, f: scala.Function1[scala.runtime.BoxedUnit, Coll[_flatMap.mcV.sp__B]], evidence$2: scalan.RType[_flatMap.mcV.sp__B]) -> Coll[_flatMap.mcV.sp__B]: ...
    _flatMap$mcZ$sp__B = typing.TypeVar('_flatMap$mcZ$sp__B')  # <B>
    def flatMap$mcZ$sp(self, f: scala.Function1[typing.Any, Coll[_flatMap.mcZ.sp__B]], evidence$2: scalan.RType[_flatMap.mcZ.sp__B]) -> Coll[_flatMap.mcZ.sp__B]: ...
    _foldLeft__B = typing.TypeVar('_foldLeft__B')  # <B>
    def foldLeft(self, zero: _foldLeft__B, op: scala.Function1[scala.Tuple2[_foldLeft__B, _CollOverArray__A], _foldLeft__B]) -> _foldLeft__B: ...
    _foldLeft$mcB$sp__B = typing.TypeVar('_foldLeft$mcB$sp__B')  # <B>
    def foldLeft$mcB$sp(self, zero: _foldLeft.mcB.sp__B, op: scala.Function1[scala.Tuple2[_foldLeft.mcB.sp__B, typing.Any], _foldLeft.mcB.sp__B]) -> _foldLeft.mcB.sp__B: ...
    _foldLeft$mcC$sp__B = typing.TypeVar('_foldLeft$mcC$sp__B')  # <B>
    def foldLeft$mcC$sp(self, zero: _foldLeft.mcC.sp__B, op: scala.Function1[scala.Tuple2[_foldLeft.mcC.sp__B, typing.Any], _foldLeft.mcC.sp__B]) -> _foldLeft.mcC.sp__B: ...
    _foldLeft$mcD$sp__B = typing.TypeVar('_foldLeft$mcD$sp__B')  # <B>
    def foldLeft$mcD$sp(self, zero: _foldLeft.mcD.sp__B, op: scala.Function1[scala.Tuple2[_foldLeft.mcD.sp__B, typing.Any], _foldLeft.mcD.sp__B]) -> _foldLeft.mcD.sp__B: ...
    _foldLeft$mcF$sp__B = typing.TypeVar('_foldLeft$mcF$sp__B')  # <B>
    def foldLeft$mcF$sp(self, zero: _foldLeft.mcF.sp__B, op: scala.Function1[scala.Tuple2[_foldLeft.mcF.sp__B, typing.Any], _foldLeft.mcF.sp__B]) -> _foldLeft.mcF.sp__B: ...
    _foldLeft$mcI$sp__B = typing.TypeVar('_foldLeft$mcI$sp__B')  # <B>
    def foldLeft$mcI$sp(self, zero: _foldLeft.mcI.sp__B, op: scala.Function1[scala.Tuple2[_foldLeft.mcI.sp__B, typing.Any], _foldLeft.mcI.sp__B]) -> _foldLeft.mcI.sp__B: ...
    _foldLeft$mcJ$sp__B = typing.TypeVar('_foldLeft$mcJ$sp__B')  # <B>
    def foldLeft$mcJ$sp(self, zero: _foldLeft.mcJ.sp__B, op: scala.Function1[scala.Tuple2[_foldLeft.mcJ.sp__B, typing.Any], _foldLeft.mcJ.sp__B]) -> _foldLeft.mcJ.sp__B: ...
    _foldLeft$mcS$sp__B = typing.TypeVar('_foldLeft$mcS$sp__B')  # <B>
    def foldLeft$mcS$sp(self, zero: _foldLeft.mcS.sp__B, op: scala.Function1[scala.Tuple2[_foldLeft.mcS.sp__B, typing.Any], _foldLeft.mcS.sp__B]) -> _foldLeft.mcS.sp__B: ...
    _foldLeft$mcV$sp__B = typing.TypeVar('_foldLeft$mcV$sp__B')  # <B>
    def foldLeft$mcV$sp(self, zero: _foldLeft.mcV.sp__B, op: scala.Function1[scala.Tuple2[_foldLeft.mcV.sp__B, scala.runtime.BoxedUnit], _foldLeft.mcV.sp__B]) -> _foldLeft.mcV.sp__B: ...
    _foldLeft$mcZ$sp__B = typing.TypeVar('_foldLeft$mcZ$sp__B')  # <B>
    def foldLeft$mcZ$sp(self, zero: _foldLeft.mcZ.sp__B, op: scala.Function1[scala.Tuple2[_foldLeft.mcZ.sp__B, typing.Any], _foldLeft.mcZ.sp__B]) -> _foldLeft.mcZ.sp__B: ...
    def forall(self, p: scala.Function1[_CollOverArray__A, typing.Any]) -> bool: ...
    def forall$mcB$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> bool: ...
    def forall$mcC$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> bool: ...
    def forall$mcD$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> bool: ...
    def forall$mcF$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> bool: ...
    def forall$mcI$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> bool: ...
    def forall$mcJ$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> bool: ...
    def forall$mcS$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> bool: ...
    def forall$mcV$sp(self, p: scala.Function1[scala.runtime.BoxedUnit, typing.Any]) -> bool: ...
    def forall$mcZ$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> bool: ...
    def foreach(self, f: scala.Function1[_CollOverArray__A, scala.runtime.BoxedUnit]) -> None: ...
    def foreach$mcB$sp(self, f: scala.Function1[typing.Any, scala.runtime.BoxedUnit]) -> None: ...
    def foreach$mcC$sp(self, f: scala.Function1[typing.Any, scala.runtime.BoxedUnit]) -> None: ...
    def foreach$mcD$sp(self, f: scala.Function1[typing.Any, scala.runtime.BoxedUnit]) -> None: ...
    def foreach$mcF$sp(self, f: scala.Function1[typing.Any, scala.runtime.BoxedUnit]) -> None: ...
    def foreach$mcI$sp(self, f: scala.Function1[typing.Any, scala.runtime.BoxedUnit]) -> None: ...
    def foreach$mcJ$sp(self, f: scala.Function1[typing.Any, scala.runtime.BoxedUnit]) -> None: ...
    def foreach$mcS$sp(self, f: scala.Function1[typing.Any, scala.runtime.BoxedUnit]) -> None: ...
    def foreach$mcV$sp(self, f: scala.Function1[scala.runtime.BoxedUnit, scala.runtime.BoxedUnit]) -> None: ...
    def foreach$mcZ$sp(self, f: scala.Function1[typing.Any, scala.runtime.BoxedUnit]) -> None: ...
    def getOrElse(self, i: int, default: _CollOverArray__A) -> _CollOverArray__A: ...
    def getOrElse$mcB$sp(self, i: int, default: int) -> int: ...
    def getOrElse$mcC$sp(self, i: int, default: str) -> str: ...
    def getOrElse$mcD$sp(self, i: int, default: float) -> float: ...
    def getOrElse$mcF$sp(self, i: int, default: float) -> float: ...
    def getOrElse$mcI$sp(self, i: int, default: int) -> int: ...
    def getOrElse$mcJ$sp(self, i: int, default: int) -> int: ...
    def getOrElse$mcS$sp(self, i: int, default: int) -> int: ...
    def getOrElse$mcV$sp(self, i: int, default: scala.runtime.BoxedUnit) -> None: ...
    def getOrElse$mcZ$sp(self, i: int, default: bool) -> bool: ...
    _groupBy__K = typing.TypeVar('_groupBy__K')  # <K>
    def groupBy(self, key: scala.Function1[_CollOverArray__A, _groupBy__K], evidence$5: scalan.RType[_groupBy__K]) -> Coll[scala.Tuple2[_groupBy__K, Coll[_CollOverArray__A]]]: ...
    _groupBy$mcB$sp__K = typing.TypeVar('_groupBy$mcB$sp__K')  # <K>
    def groupBy$mcB$sp(self, key: scala.Function1[typing.Any, _groupBy.mcB.sp__K], evidence$5: scalan.RType[_groupBy.mcB.sp__K]) -> Coll[scala.Tuple2[_groupBy.mcB.sp__K, Coll[typing.Any]]]: ...
    _groupBy$mcC$sp__K = typing.TypeVar('_groupBy$mcC$sp__K')  # <K>
    def groupBy$mcC$sp(self, key: scala.Function1[typing.Any, _groupBy.mcC.sp__K], evidence$5: scalan.RType[_groupBy.mcC.sp__K]) -> Coll[scala.Tuple2[_groupBy.mcC.sp__K, Coll[typing.Any]]]: ...
    _groupBy$mcD$sp__K = typing.TypeVar('_groupBy$mcD$sp__K')  # <K>
    def groupBy$mcD$sp(self, key: scala.Function1[typing.Any, _groupBy.mcD.sp__K], evidence$5: scalan.RType[_groupBy.mcD.sp__K]) -> Coll[scala.Tuple2[_groupBy.mcD.sp__K, Coll[typing.Any]]]: ...
    _groupBy$mcF$sp__K = typing.TypeVar('_groupBy$mcF$sp__K')  # <K>
    def groupBy$mcF$sp(self, key: scala.Function1[typing.Any, _groupBy.mcF.sp__K], evidence$5: scalan.RType[_groupBy.mcF.sp__K]) -> Coll[scala.Tuple2[_groupBy.mcF.sp__K, Coll[typing.Any]]]: ...
    _groupBy$mcI$sp__K = typing.TypeVar('_groupBy$mcI$sp__K')  # <K>
    def groupBy$mcI$sp(self, key: scala.Function1[typing.Any, _groupBy.mcI.sp__K], evidence$5: scalan.RType[_groupBy.mcI.sp__K]) -> Coll[scala.Tuple2[_groupBy.mcI.sp__K, Coll[typing.Any]]]: ...
    _groupBy$mcJ$sp__K = typing.TypeVar('_groupBy$mcJ$sp__K')  # <K>
    def groupBy$mcJ$sp(self, key: scala.Function1[typing.Any, _groupBy.mcJ.sp__K], evidence$5: scalan.RType[_groupBy.mcJ.sp__K]) -> Coll[scala.Tuple2[_groupBy.mcJ.sp__K, Coll[typing.Any]]]: ...
    _groupBy$mcS$sp__K = typing.TypeVar('_groupBy$mcS$sp__K')  # <K>
    def groupBy$mcS$sp(self, key: scala.Function1[typing.Any, _groupBy.mcS.sp__K], evidence$5: scalan.RType[_groupBy.mcS.sp__K]) -> Coll[scala.Tuple2[_groupBy.mcS.sp__K, Coll[typing.Any]]]: ...
    _groupBy$mcV$sp__K = typing.TypeVar('_groupBy$mcV$sp__K')  # <K>
    def groupBy$mcV$sp(self, key: scala.Function1[scala.runtime.BoxedUnit, _groupBy.mcV.sp__K], evidence$5: scalan.RType[_groupBy.mcV.sp__K]) -> Coll[scala.Tuple2[_groupBy.mcV.sp__K, Coll[scala.runtime.BoxedUnit]]]: ...
    _groupBy$mcZ$sp__K = typing.TypeVar('_groupBy$mcZ$sp__K')  # <K>
    def groupBy$mcZ$sp(self, key: scala.Function1[typing.Any, _groupBy.mcZ.sp__K], evidence$5: scalan.RType[_groupBy.mcZ.sp__K]) -> Coll[scala.Tuple2[_groupBy.mcZ.sp__K, Coll[typing.Any]]]: ...
    _groupByProjecting__K = typing.TypeVar('_groupByProjecting__K')  # <K>
    _groupByProjecting__V = typing.TypeVar('_groupByProjecting__V')  # <V>
    def groupByProjecting(self, key: scala.Function1[_CollOverArray__A, _groupByProjecting__K], proj: scala.Function1[_CollOverArray__A, _groupByProjecting__V], evidence$6: scalan.RType[_groupByProjecting__K], evidence$7: scalan.RType[_groupByProjecting__V]) -> Coll[scala.Tuple2[_groupByProjecting__K, Coll[_groupByProjecting__V]]]: ...
    _groupByProjecting$mcB$sp__K = typing.TypeVar('_groupByProjecting$mcB$sp__K')  # <K>
    _groupByProjecting$mcB$sp__V = typing.TypeVar('_groupByProjecting$mcB$sp__V')  # <V>
    def groupByProjecting$mcB$sp(self, key: scala.Function1[typing.Any, _groupByProjecting.mcB.sp__K], proj: scala.Function1[typing.Any, _groupByProjecting.mcB.sp__V], evidence$6: scalan.RType[_groupByProjecting.mcB.sp__K], evidence$7: scalan.RType[_groupByProjecting.mcB.sp__V]) -> Coll[scala.Tuple2[_groupByProjecting.mcB.sp__K, Coll[_groupByProjecting.mcB.sp__V]]]: ...
    _groupByProjecting$mcC$sp__K = typing.TypeVar('_groupByProjecting$mcC$sp__K')  # <K>
    _groupByProjecting$mcC$sp__V = typing.TypeVar('_groupByProjecting$mcC$sp__V')  # <V>
    def groupByProjecting$mcC$sp(self, key: scala.Function1[typing.Any, _groupByProjecting.mcC.sp__K], proj: scala.Function1[typing.Any, _groupByProjecting.mcC.sp__V], evidence$6: scalan.RType[_groupByProjecting.mcC.sp__K], evidence$7: scalan.RType[_groupByProjecting.mcC.sp__V]) -> Coll[scala.Tuple2[_groupByProjecting.mcC.sp__K, Coll[_groupByProjecting.mcC.sp__V]]]: ...
    _groupByProjecting$mcD$sp__K = typing.TypeVar('_groupByProjecting$mcD$sp__K')  # <K>
    _groupByProjecting$mcD$sp__V = typing.TypeVar('_groupByProjecting$mcD$sp__V')  # <V>
    def groupByProjecting$mcD$sp(self, key: scala.Function1[typing.Any, _groupByProjecting.mcD.sp__K], proj: scala.Function1[typing.Any, _groupByProjecting.mcD.sp__V], evidence$6: scalan.RType[_groupByProjecting.mcD.sp__K], evidence$7: scalan.RType[_groupByProjecting.mcD.sp__V]) -> Coll[scala.Tuple2[_groupByProjecting.mcD.sp__K, Coll[_groupByProjecting.mcD.sp__V]]]: ...
    _groupByProjecting$mcF$sp__K = typing.TypeVar('_groupByProjecting$mcF$sp__K')  # <K>
    _groupByProjecting$mcF$sp__V = typing.TypeVar('_groupByProjecting$mcF$sp__V')  # <V>
    def groupByProjecting$mcF$sp(self, key: scala.Function1[typing.Any, _groupByProjecting.mcF.sp__K], proj: scala.Function1[typing.Any, _groupByProjecting.mcF.sp__V], evidence$6: scalan.RType[_groupByProjecting.mcF.sp__K], evidence$7: scalan.RType[_groupByProjecting.mcF.sp__V]) -> Coll[scala.Tuple2[_groupByProjecting.mcF.sp__K, Coll[_groupByProjecting.mcF.sp__V]]]: ...
    _groupByProjecting$mcI$sp__K = typing.TypeVar('_groupByProjecting$mcI$sp__K')  # <K>
    _groupByProjecting$mcI$sp__V = typing.TypeVar('_groupByProjecting$mcI$sp__V')  # <V>
    def groupByProjecting$mcI$sp(self, key: scala.Function1[typing.Any, _groupByProjecting.mcI.sp__K], proj: scala.Function1[typing.Any, _groupByProjecting.mcI.sp__V], evidence$6: scalan.RType[_groupByProjecting.mcI.sp__K], evidence$7: scalan.RType[_groupByProjecting.mcI.sp__V]) -> Coll[scala.Tuple2[_groupByProjecting.mcI.sp__K, Coll[_groupByProjecting.mcI.sp__V]]]: ...
    _groupByProjecting$mcJ$sp__K = typing.TypeVar('_groupByProjecting$mcJ$sp__K')  # <K>
    _groupByProjecting$mcJ$sp__V = typing.TypeVar('_groupByProjecting$mcJ$sp__V')  # <V>
    def groupByProjecting$mcJ$sp(self, key: scala.Function1[typing.Any, _groupByProjecting.mcJ.sp__K], proj: scala.Function1[typing.Any, _groupByProjecting.mcJ.sp__V], evidence$6: scalan.RType[_groupByProjecting.mcJ.sp__K], evidence$7: scalan.RType[_groupByProjecting.mcJ.sp__V]) -> Coll[scala.Tuple2[_groupByProjecting.mcJ.sp__K, Coll[_groupByProjecting.mcJ.sp__V]]]: ...
    _groupByProjecting$mcS$sp__K = typing.TypeVar('_groupByProjecting$mcS$sp__K')  # <K>
    _groupByProjecting$mcS$sp__V = typing.TypeVar('_groupByProjecting$mcS$sp__V')  # <V>
    def groupByProjecting$mcS$sp(self, key: scala.Function1[typing.Any, _groupByProjecting.mcS.sp__K], proj: scala.Function1[typing.Any, _groupByProjecting.mcS.sp__V], evidence$6: scalan.RType[_groupByProjecting.mcS.sp__K], evidence$7: scalan.RType[_groupByProjecting.mcS.sp__V]) -> Coll[scala.Tuple2[_groupByProjecting.mcS.sp__K, Coll[_groupByProjecting.mcS.sp__V]]]: ...
    _groupByProjecting$mcV$sp__K = typing.TypeVar('_groupByProjecting$mcV$sp__K')  # <K>
    _groupByProjecting$mcV$sp__V = typing.TypeVar('_groupByProjecting$mcV$sp__V')  # <V>
    def groupByProjecting$mcV$sp(self, key: scala.Function1[scala.runtime.BoxedUnit, _groupByProjecting.mcV.sp__K], proj: scala.Function1[scala.runtime.BoxedUnit, _groupByProjecting.mcV.sp__V], evidence$6: scalan.RType[_groupByProjecting.mcV.sp__K], evidence$7: scalan.RType[_groupByProjecting.mcV.sp__V]) -> Coll[scala.Tuple2[_groupByProjecting.mcV.sp__K, Coll[_groupByProjecting.mcV.sp__V]]]: ...
    _groupByProjecting$mcZ$sp__K = typing.TypeVar('_groupByProjecting$mcZ$sp__K')  # <K>
    _groupByProjecting$mcZ$sp__V = typing.TypeVar('_groupByProjecting$mcZ$sp__V')  # <V>
    def groupByProjecting$mcZ$sp(self, key: scala.Function1[typing.Any, _groupByProjecting.mcZ.sp__K], proj: scala.Function1[typing.Any, _groupByProjecting.mcZ.sp__V], evidence$6: scalan.RType[_groupByProjecting.mcZ.sp__K], evidence$7: scalan.RType[_groupByProjecting.mcZ.sp__V]) -> Coll[scala.Tuple2[_groupByProjecting.mcZ.sp__K, Coll[_groupByProjecting.mcZ.sp__V]]]: ...
    def hashCode(self) -> int: ...
    def indexOf(self, elem: _CollOverArray__A, from_: int) -> int: ...
    def indexOf$mcB$sp(self, elem: int, from_: int) -> int: ...
    def indexOf$mcC$sp(self, elem: str, from_: int) -> int: ...
    def indexOf$mcD$sp(self, elem: float, from_: int) -> int: ...
    def indexOf$mcF$sp(self, elem: float, from_: int) -> int: ...
    def indexOf$mcI$sp(self, elem: int, from_: int) -> int: ...
    def indexOf$mcJ$sp(self, elem: int, from_: int) -> int: ...
    def indexOf$mcS$sp(self, elem: int, from_: int) -> int: ...
    def indexOf$mcV$sp(self, elem: scala.runtime.BoxedUnit, from_: int) -> int: ...
    def indexOf$mcZ$sp(self, elem: bool, from_: int) -> int: ...
    def indexWhere(self, p: scala.Function1[_CollOverArray__A, typing.Any], from_: int) -> int: ...
    def indexWhere$mcB$sp(self, p: scala.Function1[typing.Any, typing.Any], from_: int) -> int: ...
    def indexWhere$mcC$sp(self, p: scala.Function1[typing.Any, typing.Any], from_: int) -> int: ...
    def indexWhere$mcD$sp(self, p: scala.Function1[typing.Any, typing.Any], from_: int) -> int: ...
    def indexWhere$mcF$sp(self, p: scala.Function1[typing.Any, typing.Any], from_: int) -> int: ...
    def indexWhere$mcI$sp(self, p: scala.Function1[typing.Any, typing.Any], from_: int) -> int: ...
    def indexWhere$mcJ$sp(self, p: scala.Function1[typing.Any, typing.Any], from_: int) -> int: ...
    def indexWhere$mcS$sp(self, p: scala.Function1[typing.Any, typing.Any], from_: int) -> int: ...
    def indexWhere$mcV$sp(self, p: scala.Function1[scala.runtime.BoxedUnit, typing.Any], from_: int) -> int: ...
    def indexWhere$mcZ$sp(self, p: scala.Function1[typing.Any, typing.Any], from_: int) -> int: ...
    def indices(self) -> Coll[typing.Any]: ...
    def intersect(self, that: Coll[_CollOverArray__A]) -> Coll[_CollOverArray__A]: ...
    def intersect$mcB$sp(self, that: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def intersect$mcC$sp(self, that: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def intersect$mcD$sp(self, that: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def intersect$mcF$sp(self, that: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def intersect$mcI$sp(self, that: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def intersect$mcJ$sp(self, that: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def intersect$mcS$sp(self, that: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def intersect$mcV$sp(self, that: Coll[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def intersect$mcZ$sp(self, that: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def isAllDeepEquals(self, value: typing.Any) -> bool: ...
    def isAllPrimValue(self, value: _CollOverArray__A) -> bool: ...
    def isAllPrimValue$mcB$sp(self, value: int) -> bool: ...
    def isAllPrimValue$mcC$sp(self, value: str) -> bool: ...
    def isAllPrimValue$mcD$sp(self, value: float) -> bool: ...
    def isAllPrimValue$mcF$sp(self, value: float) -> bool: ...
    def isAllPrimValue$mcI$sp(self, value: int) -> bool: ...
    def isAllPrimValue$mcJ$sp(self, value: int) -> bool: ...
    def isAllPrimValue$mcS$sp(self, value: int) -> bool: ...
    def isAllPrimValue$mcV$sp(self, value: scala.runtime.BoxedUnit) -> bool: ...
    def isAllPrimValue$mcZ$sp(self, value: bool) -> bool: ...
    def isDefinedAt(self, idx: int) -> bool: ...
    def isEmpty(self) -> bool: ...
    def isReplArray(self, len: int, value: _CollOverArray__A) -> bool: ...
    def isReplArray$mcB$sp(self, len: int, value: int) -> bool: ...
    def isReplArray$mcC$sp(self, len: int, value: str) -> bool: ...
    def isReplArray$mcD$sp(self, len: int, value: float) -> bool: ...
    def isReplArray$mcF$sp(self, len: int, value: float) -> bool: ...
    def isReplArray$mcI$sp(self, len: int, value: int) -> bool: ...
    def isReplArray$mcJ$sp(self, len: int, value: int) -> bool: ...
    def isReplArray$mcS$sp(self, len: int, value: int) -> bool: ...
    def isReplArray$mcV$sp(self, len: int, value: scala.runtime.BoxedUnit) -> bool: ...
    def isReplArray$mcZ$sp(self, len: int, value: bool) -> bool: ...
    def isValidIndex(self, i: int) -> bool: ...
    def lastIndexWhere(self, p: scala.Function1[_CollOverArray__A, typing.Any], end: int) -> int: ...
    def lastIndexWhere$mcB$sp(self, p: scala.Function1[typing.Any, typing.Any], end: int) -> int: ...
    def lastIndexWhere$mcC$sp(self, p: scala.Function1[typing.Any, typing.Any], end: int) -> int: ...
    def lastIndexWhere$mcD$sp(self, p: scala.Function1[typing.Any, typing.Any], end: int) -> int: ...
    def lastIndexWhere$mcF$sp(self, p: scala.Function1[typing.Any, typing.Any], end: int) -> int: ...
    def lastIndexWhere$mcI$sp(self, p: scala.Function1[typing.Any, typing.Any], end: int) -> int: ...
    def lastIndexWhere$mcJ$sp(self, p: scala.Function1[typing.Any, typing.Any], end: int) -> int: ...
    def lastIndexWhere$mcS$sp(self, p: scala.Function1[typing.Any, typing.Any], end: int) -> int: ...
    def lastIndexWhere$mcV$sp(self, p: scala.Function1[scala.runtime.BoxedUnit, typing.Any], end: int) -> int: ...
    def lastIndexWhere$mcZ$sp(self, p: scala.Function1[typing.Any, typing.Any], end: int) -> int: ...
    def length(self) -> int: ...
    _map__B = typing.TypeVar('_map__B')  # <B>
    def map(self, f: scala.Function1[_CollOverArray__A, _map__B], evidence$1: scalan.RType[_map__B]) -> Coll[_map__B]: ...
    def map$mBc$sp(self, f: scala.Function1[_CollOverArray__A, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mBcB$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mBcC$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mBcD$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mBcF$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mBcI$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mBcJ$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mBcS$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mBcV$sp(self, f: scala.Function1[scala.runtime.BoxedUnit, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mBcZ$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mCc$sp(self, f: scala.Function1[_CollOverArray__A, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mCcB$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mCcC$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mCcD$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mCcF$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mCcI$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mCcJ$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mCcS$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mCcV$sp(self, f: scala.Function1[scala.runtime.BoxedUnit, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mCcZ$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mDc$sp(self, f: scala.Function1[_CollOverArray__A, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mDcB$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mDcC$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mDcD$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mDcF$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mDcI$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mDcJ$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mDcS$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mDcV$sp(self, f: scala.Function1[scala.runtime.BoxedUnit, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mDcZ$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mFc$sp(self, f: scala.Function1[_CollOverArray__A, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mFcB$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mFcC$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mFcD$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mFcF$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mFcI$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mFcJ$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mFcS$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mFcV$sp(self, f: scala.Function1[scala.runtime.BoxedUnit, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mFcZ$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mIc$sp(self, f: scala.Function1[_CollOverArray__A, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mIcB$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mIcC$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mIcD$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mIcF$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mIcI$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mIcJ$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mIcS$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mIcV$sp(self, f: scala.Function1[scala.runtime.BoxedUnit, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mIcZ$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mJc$sp(self, f: scala.Function1[_CollOverArray__A, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mJcB$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mJcC$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mJcD$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mJcF$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mJcI$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mJcJ$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mJcS$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mJcV$sp(self, f: scala.Function1[scala.runtime.BoxedUnit, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mJcZ$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mSc$sp(self, f: scala.Function1[_CollOverArray__A, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mScB$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mScC$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mScD$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mScF$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mScI$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mScJ$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mScS$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mScV$sp(self, f: scala.Function1[scala.runtime.BoxedUnit, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mScZ$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mVc$sp(self, f: scala.Function1[_CollOverArray__A, scala.runtime.BoxedUnit], evidence$1: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def map$mVcB$sp(self, f: scala.Function1[typing.Any, scala.runtime.BoxedUnit], evidence$1: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def map$mVcC$sp(self, f: scala.Function1[typing.Any, scala.runtime.BoxedUnit], evidence$1: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def map$mVcD$sp(self, f: scala.Function1[typing.Any, scala.runtime.BoxedUnit], evidence$1: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def map$mVcF$sp(self, f: scala.Function1[typing.Any, scala.runtime.BoxedUnit], evidence$1: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def map$mVcI$sp(self, f: scala.Function1[typing.Any, scala.runtime.BoxedUnit], evidence$1: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def map$mVcJ$sp(self, f: scala.Function1[typing.Any, scala.runtime.BoxedUnit], evidence$1: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def map$mVcS$sp(self, f: scala.Function1[typing.Any, scala.runtime.BoxedUnit], evidence$1: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def map$mVcV$sp(self, f: scala.Function1[scala.runtime.BoxedUnit, scala.runtime.BoxedUnit], evidence$1: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def map$mVcZ$sp(self, f: scala.Function1[typing.Any, scala.runtime.BoxedUnit], evidence$1: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def map$mZc$sp(self, f: scala.Function1[_CollOverArray__A, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mZcB$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mZcC$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mZcD$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mZcF$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mZcI$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mZcJ$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mZcS$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mZcV$sp(self, f: scala.Function1[scala.runtime.BoxedUnit, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mZcZ$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    _map$mcB$sp__B = typing.TypeVar('_map$mcB$sp__B')  # <B>
    def map$mcB$sp(self, f: scala.Function1[typing.Any, _map.mcB.sp__B], evidence$1: scalan.RType[_map.mcB.sp__B]) -> Coll[_map.mcB.sp__B]: ...
    _map$mcC$sp__B = typing.TypeVar('_map$mcC$sp__B')  # <B>
    def map$mcC$sp(self, f: scala.Function1[typing.Any, _map.mcC.sp__B], evidence$1: scalan.RType[_map.mcC.sp__B]) -> Coll[_map.mcC.sp__B]: ...
    _map$mcD$sp__B = typing.TypeVar('_map$mcD$sp__B')  # <B>
    def map$mcD$sp(self, f: scala.Function1[typing.Any, _map.mcD.sp__B], evidence$1: scalan.RType[_map.mcD.sp__B]) -> Coll[_map.mcD.sp__B]: ...
    _map$mcF$sp__B = typing.TypeVar('_map$mcF$sp__B')  # <B>
    def map$mcF$sp(self, f: scala.Function1[typing.Any, _map.mcF.sp__B], evidence$1: scalan.RType[_map.mcF.sp__B]) -> Coll[_map.mcF.sp__B]: ...
    _map$mcI$sp__B = typing.TypeVar('_map$mcI$sp__B')  # <B>
    def map$mcI$sp(self, f: scala.Function1[typing.Any, _map.mcI.sp__B], evidence$1: scalan.RType[_map.mcI.sp__B]) -> Coll[_map.mcI.sp__B]: ...
    _map$mcJ$sp__B = typing.TypeVar('_map$mcJ$sp__B')  # <B>
    def map$mcJ$sp(self, f: scala.Function1[typing.Any, _map.mcJ.sp__B], evidence$1: scalan.RType[_map.mcJ.sp__B]) -> Coll[_map.mcJ.sp__B]: ...
    _map$mcS$sp__B = typing.TypeVar('_map$mcS$sp__B')  # <B>
    def map$mcS$sp(self, f: scala.Function1[typing.Any, _map.mcS.sp__B], evidence$1: scalan.RType[_map.mcS.sp__B]) -> Coll[_map.mcS.sp__B]: ...
    _map$mcV$sp__B = typing.TypeVar('_map$mcV$sp__B')  # <B>
    def map$mcV$sp(self, f: scala.Function1[scala.runtime.BoxedUnit, _map.mcV.sp__B], evidence$1: scalan.RType[_map.mcV.sp__B]) -> Coll[_map.mcV.sp__B]: ...
    _map$mcZ$sp__B = typing.TypeVar('_map$mcZ$sp__B')  # <B>
    def map$mcZ$sp(self, f: scala.Function1[typing.Any, _map.mcZ.sp__B], evidence$1: scalan.RType[_map.mcZ.sp__B]) -> Coll[_map.mcZ.sp__B]: ...
    _mapReduce__K = typing.TypeVar('_mapReduce__K')  # <K>
    _mapReduce__V = typing.TypeVar('_mapReduce__V')  # <V>
    def mapReduce(self, m: scala.Function1[_CollOverArray__A, scala.Tuple2[_mapReduce__K, _mapReduce__V]], r: scala.Function1[scala.Tuple2[_mapReduce__V, _mapReduce__V], _mapReduce__V], evidence$3: scalan.RType[_mapReduce__K], evidence$4: scalan.RType[_mapReduce__V]) -> Coll[scala.Tuple2[_mapReduce__K, _mapReduce__V]]: ...
    _mapReduce$mcB$sp__K = typing.TypeVar('_mapReduce$mcB$sp__K')  # <K>
    _mapReduce$mcB$sp__V = typing.TypeVar('_mapReduce$mcB$sp__V')  # <V>
    def mapReduce$mcB$sp(self, m: scala.Function1[typing.Any, scala.Tuple2[_mapReduce.mcB.sp__K, _mapReduce.mcB.sp__V]], r: scala.Function1[scala.Tuple2[_mapReduce.mcB.sp__V, _mapReduce.mcB.sp__V], _mapReduce.mcB.sp__V], evidence$3: scalan.RType[_mapReduce.mcB.sp__K], evidence$4: scalan.RType[_mapReduce.mcB.sp__V]) -> Coll[scala.Tuple2[_mapReduce.mcB.sp__K, _mapReduce.mcB.sp__V]]: ...
    _mapReduce$mcC$sp__K = typing.TypeVar('_mapReduce$mcC$sp__K')  # <K>
    _mapReduce$mcC$sp__V = typing.TypeVar('_mapReduce$mcC$sp__V')  # <V>
    def mapReduce$mcC$sp(self, m: scala.Function1[typing.Any, scala.Tuple2[_mapReduce.mcC.sp__K, _mapReduce.mcC.sp__V]], r: scala.Function1[scala.Tuple2[_mapReduce.mcC.sp__V, _mapReduce.mcC.sp__V], _mapReduce.mcC.sp__V], evidence$3: scalan.RType[_mapReduce.mcC.sp__K], evidence$4: scalan.RType[_mapReduce.mcC.sp__V]) -> Coll[scala.Tuple2[_mapReduce.mcC.sp__K, _mapReduce.mcC.sp__V]]: ...
    _mapReduce$mcD$sp__K = typing.TypeVar('_mapReduce$mcD$sp__K')  # <K>
    _mapReduce$mcD$sp__V = typing.TypeVar('_mapReduce$mcD$sp__V')  # <V>
    def mapReduce$mcD$sp(self, m: scala.Function1[typing.Any, scala.Tuple2[_mapReduce.mcD.sp__K, _mapReduce.mcD.sp__V]], r: scala.Function1[scala.Tuple2[_mapReduce.mcD.sp__V, _mapReduce.mcD.sp__V], _mapReduce.mcD.sp__V], evidence$3: scalan.RType[_mapReduce.mcD.sp__K], evidence$4: scalan.RType[_mapReduce.mcD.sp__V]) -> Coll[scala.Tuple2[_mapReduce.mcD.sp__K, _mapReduce.mcD.sp__V]]: ...
    _mapReduce$mcF$sp__K = typing.TypeVar('_mapReduce$mcF$sp__K')  # <K>
    _mapReduce$mcF$sp__V = typing.TypeVar('_mapReduce$mcF$sp__V')  # <V>
    def mapReduce$mcF$sp(self, m: scala.Function1[typing.Any, scala.Tuple2[_mapReduce.mcF.sp__K, _mapReduce.mcF.sp__V]], r: scala.Function1[scala.Tuple2[_mapReduce.mcF.sp__V, _mapReduce.mcF.sp__V], _mapReduce.mcF.sp__V], evidence$3: scalan.RType[_mapReduce.mcF.sp__K], evidence$4: scalan.RType[_mapReduce.mcF.sp__V]) -> Coll[scala.Tuple2[_mapReduce.mcF.sp__K, _mapReduce.mcF.sp__V]]: ...
    _mapReduce$mcI$sp__K = typing.TypeVar('_mapReduce$mcI$sp__K')  # <K>
    _mapReduce$mcI$sp__V = typing.TypeVar('_mapReduce$mcI$sp__V')  # <V>
    def mapReduce$mcI$sp(self, m: scala.Function1[typing.Any, scala.Tuple2[_mapReduce.mcI.sp__K, _mapReduce.mcI.sp__V]], r: scala.Function1[scala.Tuple2[_mapReduce.mcI.sp__V, _mapReduce.mcI.sp__V], _mapReduce.mcI.sp__V], evidence$3: scalan.RType[_mapReduce.mcI.sp__K], evidence$4: scalan.RType[_mapReduce.mcI.sp__V]) -> Coll[scala.Tuple2[_mapReduce.mcI.sp__K, _mapReduce.mcI.sp__V]]: ...
    _mapReduce$mcJ$sp__K = typing.TypeVar('_mapReduce$mcJ$sp__K')  # <K>
    _mapReduce$mcJ$sp__V = typing.TypeVar('_mapReduce$mcJ$sp__V')  # <V>
    def mapReduce$mcJ$sp(self, m: scala.Function1[typing.Any, scala.Tuple2[_mapReduce.mcJ.sp__K, _mapReduce.mcJ.sp__V]], r: scala.Function1[scala.Tuple2[_mapReduce.mcJ.sp__V, _mapReduce.mcJ.sp__V], _mapReduce.mcJ.sp__V], evidence$3: scalan.RType[_mapReduce.mcJ.sp__K], evidence$4: scalan.RType[_mapReduce.mcJ.sp__V]) -> Coll[scala.Tuple2[_mapReduce.mcJ.sp__K, _mapReduce.mcJ.sp__V]]: ...
    _mapReduce$mcS$sp__K = typing.TypeVar('_mapReduce$mcS$sp__K')  # <K>
    _mapReduce$mcS$sp__V = typing.TypeVar('_mapReduce$mcS$sp__V')  # <V>
    def mapReduce$mcS$sp(self, m: scala.Function1[typing.Any, scala.Tuple2[_mapReduce.mcS.sp__K, _mapReduce.mcS.sp__V]], r: scala.Function1[scala.Tuple2[_mapReduce.mcS.sp__V, _mapReduce.mcS.sp__V], _mapReduce.mcS.sp__V], evidence$3: scalan.RType[_mapReduce.mcS.sp__K], evidence$4: scalan.RType[_mapReduce.mcS.sp__V]) -> Coll[scala.Tuple2[_mapReduce.mcS.sp__K, _mapReduce.mcS.sp__V]]: ...
    _mapReduce$mcV$sp__K = typing.TypeVar('_mapReduce$mcV$sp__K')  # <K>
    _mapReduce$mcV$sp__V = typing.TypeVar('_mapReduce$mcV$sp__V')  # <V>
    def mapReduce$mcV$sp(self, m: scala.Function1[scala.runtime.BoxedUnit, scala.Tuple2[_mapReduce.mcV.sp__K, _mapReduce.mcV.sp__V]], r: scala.Function1[scala.Tuple2[_mapReduce.mcV.sp__V, _mapReduce.mcV.sp__V], _mapReduce.mcV.sp__V], evidence$3: scalan.RType[_mapReduce.mcV.sp__K], evidence$4: scalan.RType[_mapReduce.mcV.sp__V]) -> Coll[scala.Tuple2[_mapReduce.mcV.sp__K, _mapReduce.mcV.sp__V]]: ...
    _mapReduce$mcZ$sp__K = typing.TypeVar('_mapReduce$mcZ$sp__K')  # <K>
    _mapReduce$mcZ$sp__V = typing.TypeVar('_mapReduce$mcZ$sp__V')  # <V>
    def mapReduce$mcZ$sp(self, m: scala.Function1[typing.Any, scala.Tuple2[_mapReduce.mcZ.sp__K, _mapReduce.mcZ.sp__V]], r: scala.Function1[scala.Tuple2[_mapReduce.mcZ.sp__V, _mapReduce.mcZ.sp__V], _mapReduce.mcZ.sp__V], evidence$3: scalan.RType[_mapReduce.mcZ.sp__K], evidence$4: scalan.RType[_mapReduce.mcZ.sp__V]) -> Coll[scala.Tuple2[_mapReduce.mcZ.sp__K, _mapReduce.mcZ.sp__V]]: ...
    def nonEmpty(self) -> bool: ...
    def partition(self, pred: scala.Function1[_CollOverArray__A, typing.Any]) -> scala.Tuple2[Coll[_CollOverArray__A], Coll[_CollOverArray__A]]: ...
    def partition$mcB$sp(self, pred: scala.Function1[typing.Any, typing.Any]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def partition$mcC$sp(self, pred: scala.Function1[typing.Any, typing.Any]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def partition$mcD$sp(self, pred: scala.Function1[typing.Any, typing.Any]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def partition$mcF$sp(self, pred: scala.Function1[typing.Any, typing.Any]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def partition$mcI$sp(self, pred: scala.Function1[typing.Any, typing.Any]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def partition$mcJ$sp(self, pred: scala.Function1[typing.Any, typing.Any]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def partition$mcS$sp(self, pred: scala.Function1[typing.Any, typing.Any]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def partition$mcV$sp(self, pred: scala.Function1[scala.runtime.BoxedUnit, typing.Any]) -> scala.Tuple2[Coll[scala.runtime.BoxedUnit], Coll[scala.runtime.BoxedUnit]]: ...
    def partition$mcZ$sp(self, pred: scala.Function1[typing.Any, typing.Any]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def patch(self, from_: int, patch: Coll[_CollOverArray__A], replaced: int) -> Coll[_CollOverArray__A]: ...
    def patch$mcB$sp(self, from_: int, patch: Coll[typing.Any], replaced: int) -> Coll[typing.Any]: ...
    def patch$mcC$sp(self, from_: int, patch: Coll[typing.Any], replaced: int) -> Coll[typing.Any]: ...
    def patch$mcD$sp(self, from_: int, patch: Coll[typing.Any], replaced: int) -> Coll[typing.Any]: ...
    def patch$mcF$sp(self, from_: int, patch: Coll[typing.Any], replaced: int) -> Coll[typing.Any]: ...
    def patch$mcI$sp(self, from_: int, patch: Coll[typing.Any], replaced: int) -> Coll[typing.Any]: ...
    def patch$mcJ$sp(self, from_: int, patch: Coll[typing.Any], replaced: int) -> Coll[typing.Any]: ...
    def patch$mcS$sp(self, from_: int, patch: Coll[typing.Any], replaced: int) -> Coll[typing.Any]: ...
    def patch$mcV$sp(self, from_: int, patch: Coll[scala.runtime.BoxedUnit], replaced: int) -> Coll[scala.runtime.BoxedUnit]: ...
    def patch$mcZ$sp(self, from_: int, patch: Coll[typing.Any], replaced: int) -> Coll[typing.Any]: ...
    def reverse(self) -> Coll[_CollOverArray__A]: ...
    def reverse$mcB$sp(self) -> Coll[typing.Any]: ...
    def reverse$mcC$sp(self) -> Coll[typing.Any]: ...
    def reverse$mcD$sp(self) -> Coll[typing.Any]: ...
    def reverse$mcF$sp(self) -> Coll[typing.Any]: ...
    def reverse$mcI$sp(self) -> Coll[typing.Any]: ...
    def reverse$mcJ$sp(self) -> Coll[typing.Any]: ...
    def reverse$mcS$sp(self) -> Coll[typing.Any]: ...
    def reverse$mcV$sp(self) -> Coll[scala.runtime.BoxedUnit]: ...
    def reverse$mcZ$sp(self) -> Coll[typing.Any]: ...
    def segmentLength(self, p: scala.Function1[_CollOverArray__A, typing.Any], from_: int) -> int: ...
    def segmentLength$mcB$sp(self, p: scala.Function1[typing.Any, typing.Any], from_: int) -> int: ...
    def segmentLength$mcC$sp(self, p: scala.Function1[typing.Any, typing.Any], from_: int) -> int: ...
    def segmentLength$mcD$sp(self, p: scala.Function1[typing.Any, typing.Any], from_: int) -> int: ...
    def segmentLength$mcF$sp(self, p: scala.Function1[typing.Any, typing.Any], from_: int) -> int: ...
    def segmentLength$mcI$sp(self, p: scala.Function1[typing.Any, typing.Any], from_: int) -> int: ...
    def segmentLength$mcJ$sp(self, p: scala.Function1[typing.Any, typing.Any], from_: int) -> int: ...
    def segmentLength$mcS$sp(self, p: scala.Function1[typing.Any, typing.Any], from_: int) -> int: ...
    def segmentLength$mcV$sp(self, p: scala.Function1[scala.runtime.BoxedUnit, typing.Any], from_: int) -> int: ...
    def segmentLength$mcZ$sp(self, p: scala.Function1[typing.Any, typing.Any], from_: int) -> int: ...
    def size(self) -> int: ...
    def slice(self, from_: int, until: int) -> Coll[_CollOverArray__A]: ...
    def slice$mcB$sp(self, from_: int, until: int) -> Coll[typing.Any]: ...
    def slice$mcC$sp(self, from_: int, until: int) -> Coll[typing.Any]: ...
    def slice$mcD$sp(self, from_: int, until: int) -> Coll[typing.Any]: ...
    def slice$mcF$sp(self, from_: int, until: int) -> Coll[typing.Any]: ...
    def slice$mcI$sp(self, from_: int, until: int) -> Coll[typing.Any]: ...
    def slice$mcJ$sp(self, from_: int, until: int) -> Coll[typing.Any]: ...
    def slice$mcS$sp(self, from_: int, until: int) -> Coll[typing.Any]: ...
    def slice$mcV$sp(self, from_: int, until: int) -> Coll[scala.runtime.BoxedUnit]: ...
    def slice$mcZ$sp(self, from_: int, until: int) -> Coll[typing.Any]: ...
    def specInstance$(self) -> bool: ...
    def sum(self, m: Monoid[_CollOverArray__A]) -> _CollOverArray__A: ...
    def sum$mcB$sp(self, m: Monoid[typing.Any]) -> int: ...
    def sum$mcC$sp(self, m: Monoid[typing.Any]) -> str: ...
    def sum$mcD$sp(self, m: Monoid[typing.Any]) -> float: ...
    def sum$mcF$sp(self, m: Monoid[typing.Any]) -> float: ...
    def sum$mcI$sp(self, m: Monoid[typing.Any]) -> int: ...
    def sum$mcJ$sp(self, m: Monoid[typing.Any]) -> int: ...
    def sum$mcS$sp(self, m: Monoid[typing.Any]) -> int: ...
    def sum$mcV$sp(self, m: Monoid[scala.runtime.BoxedUnit]) -> None: ...
    def sum$mcZ$sp(self, m: Monoid[typing.Any]) -> bool: ...
    def tItem(self) -> scalan.RType[_CollOverArray__A]: ...
    def take(self, n: int) -> Coll[_CollOverArray__A]: ...
    def take$mcB$sp(self, n: int) -> Coll[typing.Any]: ...
    def take$mcC$sp(self, n: int) -> Coll[typing.Any]: ...
    def take$mcD$sp(self, n: int) -> Coll[typing.Any]: ...
    def take$mcF$sp(self, n: int) -> Coll[typing.Any]: ...
    def take$mcI$sp(self, n: int) -> Coll[typing.Any]: ...
    def take$mcJ$sp(self, n: int) -> Coll[typing.Any]: ...
    def take$mcS$sp(self, n: int) -> Coll[typing.Any]: ...
    def take$mcV$sp(self, n: int) -> Coll[scala.runtime.BoxedUnit]: ...
    def take$mcZ$sp(self, n: int) -> Coll[typing.Any]: ...
    def toArray(self) -> typing.Any: ...
    def toArray$mcB$sp(self) -> typing.List[int]: ...
    def toArray$mcC$sp(self) -> typing.List[str]: ...
    def toArray$mcD$sp(self) -> typing.List[float]: ...
    def toArray$mcF$sp(self) -> typing.List[float]: ...
    def toArray$mcI$sp(self) -> typing.List[int]: ...
    def toArray$mcJ$sp(self) -> typing.List[int]: ...
    def toArray$mcS$sp(self) -> typing.List[int]: ...
    def toArray$mcV$sp(self) -> typing.List[scala.runtime.BoxedUnit]: ...
    def toArray$mcZ$sp(self) -> typing.List[bool]: ...
    _toMap__T = typing.TypeVar('_toMap__T')  # <T>
    _toMap__U = typing.TypeVar('_toMap__U')  # <U>
    def toMap(self, ev: scala.Predef..less.colon.less[_CollOverArray__A, scala.Tuple2[_toMap__T, _toMap__U]]) -> scala.collection.immutable.Map[_toMap__T, _toMap__U]: ...
    def toString(self) -> str: ...
    def unionSet(self, that: Coll[_CollOverArray__A]) -> Coll[_CollOverArray__A]: ...
    def unionSet$mcB$sp(self, that: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def unionSet$mcC$sp(self, that: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def unionSet$mcD$sp(self, that: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def unionSet$mcF$sp(self, that: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def unionSet$mcI$sp(self, that: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def unionSet$mcJ$sp(self, that: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def unionSet$mcS$sp(self, that: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def unionSet$mcV$sp(self, that: Coll[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def unionSet$mcZ$sp(self, that: Coll[typing.Any]) -> Coll[typing.Any]: ...
    _unionSetByKey__T = typing.TypeVar('_unionSetByKey__T')  # <T>
    _unionSetByKey__U = typing.TypeVar('_unionSetByKey__U')  # <U>
    def unionSetByKey(self, that: Coll[_CollOverArray__A], ev: scala.Predef..less.colon.less[_CollOverArray__A, scala.Tuple2[_unionSetByKey__T, _unionSetByKey__U]]) -> Coll[_CollOverArray__A]: ...
    _unionSetByKey$mcB$sp__T = typing.TypeVar('_unionSetByKey$mcB$sp__T')  # <T>
    _unionSetByKey$mcB$sp__U = typing.TypeVar('_unionSetByKey$mcB$sp__U')  # <U>
    def unionSetByKey$mcB$sp(self, that: Coll[typing.Any], ev: scala.Predef..less.colon.less[typing.Any, scala.Tuple2[_unionSetByKey.mcB.sp__T, _unionSetByKey.mcB.sp__U]]) -> Coll[typing.Any]: ...
    _unionSetByKey$mcC$sp__T = typing.TypeVar('_unionSetByKey$mcC$sp__T')  # <T>
    _unionSetByKey$mcC$sp__U = typing.TypeVar('_unionSetByKey$mcC$sp__U')  # <U>
    def unionSetByKey$mcC$sp(self, that: Coll[typing.Any], ev: scala.Predef..less.colon.less[typing.Any, scala.Tuple2[_unionSetByKey.mcC.sp__T, _unionSetByKey.mcC.sp__U]]) -> Coll[typing.Any]: ...
    _unionSetByKey$mcD$sp__T = typing.TypeVar('_unionSetByKey$mcD$sp__T')  # <T>
    _unionSetByKey$mcD$sp__U = typing.TypeVar('_unionSetByKey$mcD$sp__U')  # <U>
    def unionSetByKey$mcD$sp(self, that: Coll[typing.Any], ev: scala.Predef..less.colon.less[typing.Any, scala.Tuple2[_unionSetByKey.mcD.sp__T, _unionSetByKey.mcD.sp__U]]) -> Coll[typing.Any]: ...
    _unionSetByKey$mcF$sp__T = typing.TypeVar('_unionSetByKey$mcF$sp__T')  # <T>
    _unionSetByKey$mcF$sp__U = typing.TypeVar('_unionSetByKey$mcF$sp__U')  # <U>
    def unionSetByKey$mcF$sp(self, that: Coll[typing.Any], ev: scala.Predef..less.colon.less[typing.Any, scala.Tuple2[_unionSetByKey.mcF.sp__T, _unionSetByKey.mcF.sp__U]]) -> Coll[typing.Any]: ...
    _unionSetByKey$mcI$sp__T = typing.TypeVar('_unionSetByKey$mcI$sp__T')  # <T>
    _unionSetByKey$mcI$sp__U = typing.TypeVar('_unionSetByKey$mcI$sp__U')  # <U>
    def unionSetByKey$mcI$sp(self, that: Coll[typing.Any], ev: scala.Predef..less.colon.less[typing.Any, scala.Tuple2[_unionSetByKey.mcI.sp__T, _unionSetByKey.mcI.sp__U]]) -> Coll[typing.Any]: ...
    _unionSetByKey$mcJ$sp__T = typing.TypeVar('_unionSetByKey$mcJ$sp__T')  # <T>
    _unionSetByKey$mcJ$sp__U = typing.TypeVar('_unionSetByKey$mcJ$sp__U')  # <U>
    def unionSetByKey$mcJ$sp(self, that: Coll[typing.Any], ev: scala.Predef..less.colon.less[typing.Any, scala.Tuple2[_unionSetByKey.mcJ.sp__T, _unionSetByKey.mcJ.sp__U]]) -> Coll[typing.Any]: ...
    _unionSetByKey$mcS$sp__T = typing.TypeVar('_unionSetByKey$mcS$sp__T')  # <T>
    _unionSetByKey$mcS$sp__U = typing.TypeVar('_unionSetByKey$mcS$sp__U')  # <U>
    def unionSetByKey$mcS$sp(self, that: Coll[typing.Any], ev: scala.Predef..less.colon.less[typing.Any, scala.Tuple2[_unionSetByKey.mcS.sp__T, _unionSetByKey.mcS.sp__U]]) -> Coll[typing.Any]: ...
    _unionSetByKey$mcV$sp__T = typing.TypeVar('_unionSetByKey$mcV$sp__T')  # <T>
    _unionSetByKey$mcV$sp__U = typing.TypeVar('_unionSetByKey$mcV$sp__U')  # <U>
    def unionSetByKey$mcV$sp(self, that: Coll[scala.runtime.BoxedUnit], ev: scala.Predef..less.colon.less[scala.runtime.BoxedUnit, scala.Tuple2[_unionSetByKey.mcV.sp__T, _unionSetByKey.mcV.sp__U]]) -> Coll[scala.runtime.BoxedUnit]: ...
    _unionSetByKey$mcZ$sp__T = typing.TypeVar('_unionSetByKey$mcZ$sp__T')  # <T>
    _unionSetByKey$mcZ$sp__U = typing.TypeVar('_unionSetByKey$mcZ$sp__U')  # <U>
    def unionSetByKey$mcZ$sp(self, that: Coll[typing.Any], ev: scala.Predef..less.colon.less[typing.Any, scala.Tuple2[_unionSetByKey.mcZ.sp__T, _unionSetByKey.mcZ.sp__U]]) -> Coll[typing.Any]: ...
    def updateMany(self, indexes: Coll[typing.Any], values: Coll[_CollOverArray__A]) -> Coll[_CollOverArray__A]: ...
    def updateMany$mcB$sp(self, indexes: Coll[typing.Any], values: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def updateMany$mcC$sp(self, indexes: Coll[typing.Any], values: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def updateMany$mcD$sp(self, indexes: Coll[typing.Any], values: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def updateMany$mcF$sp(self, indexes: Coll[typing.Any], values: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def updateMany$mcI$sp(self, indexes: Coll[typing.Any], values: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def updateMany$mcJ$sp(self, indexes: Coll[typing.Any], values: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def updateMany$mcS$sp(self, indexes: Coll[typing.Any], values: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def updateMany$mcV$sp(self, indexes: Coll[typing.Any], values: Coll[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def updateMany$mcZ$sp(self, indexes: Coll[typing.Any], values: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def updated(self, index: int, elem: _CollOverArray__A) -> Coll[_CollOverArray__A]: ...
    def updated$mcB$sp(self, index: int, elem: int) -> Coll[typing.Any]: ...
    def updated$mcC$sp(self, index: int, elem: str) -> Coll[typing.Any]: ...
    def updated$mcD$sp(self, index: int, elem: float) -> Coll[typing.Any]: ...
    def updated$mcF$sp(self, index: int, elem: float) -> Coll[typing.Any]: ...
    def updated$mcI$sp(self, index: int, elem: int) -> Coll[typing.Any]: ...
    def updated$mcJ$sp(self, index: int, elem: int) -> Coll[typing.Any]: ...
    def updated$mcS$sp(self, index: int, elem: int) -> Coll[typing.Any]: ...
    def updated$mcV$sp(self, index: int, elem: scala.runtime.BoxedUnit) -> Coll[scala.runtime.BoxedUnit]: ...
    def updated$mcZ$sp(self, index: int, elem: bool) -> Coll[typing.Any]: ...
    _zip__B = typing.TypeVar('_zip__B')  # <B>
    def zip(self, ys: Coll[_zip__B]) -> 'PairColl'[_CollOverArray__A, _zip__B]: ...
    def zip$mBc$sp(self, ys: Coll[typing.Any]) -> 'PairColl'[_CollOverArray__A, typing.Any]: ...
    def zip$mBcB$sp(self, ys: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def zip$mBcC$sp(self, ys: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def zip$mBcD$sp(self, ys: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def zip$mBcF$sp(self, ys: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def zip$mBcI$sp(self, ys: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def zip$mBcJ$sp(self, ys: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def zip$mBcS$sp(self, ys: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def zip$mBcV$sp(self, ys: Coll[typing.Any]) -> 'PairColl'[scala.runtime.BoxedUnit, typing.Any]: ...
    def zip$mBcZ$sp(self, ys: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def zip$mCc$sp(self, ys: Coll[typing.Any]) -> 'PairColl'[_CollOverArray__A, typing.Any]: ...
    def zip$mCcB$sp(self, ys: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def zip$mCcC$sp(self, ys: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def zip$mCcD$sp(self, ys: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def zip$mCcF$sp(self, ys: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def zip$mCcI$sp(self, ys: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def zip$mCcJ$sp(self, ys: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def zip$mCcS$sp(self, ys: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def zip$mCcV$sp(self, ys: Coll[typing.Any]) -> 'PairColl'[scala.runtime.BoxedUnit, typing.Any]: ...
    def zip$mCcZ$sp(self, ys: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def zip$mDc$sp(self, ys: Coll[typing.Any]) -> 'PairColl'[_CollOverArray__A, typing.Any]: ...
    def zip$mDcB$sp(self, ys: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def zip$mDcC$sp(self, ys: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def zip$mDcD$sp(self, ys: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def zip$mDcF$sp(self, ys: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def zip$mDcI$sp(self, ys: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def zip$mDcJ$sp(self, ys: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def zip$mDcS$sp(self, ys: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def zip$mDcV$sp(self, ys: Coll[typing.Any]) -> 'PairColl'[scala.runtime.BoxedUnit, typing.Any]: ...
    def zip$mDcZ$sp(self, ys: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def zip$mFc$sp(self, ys: Coll[typing.Any]) -> 'PairColl'[_CollOverArray__A, typing.Any]: ...
    def zip$mFcB$sp(self, ys: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def zip$mFcC$sp(self, ys: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def zip$mFcD$sp(self, ys: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def zip$mFcF$sp(self, ys: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def zip$mFcI$sp(self, ys: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def zip$mFcJ$sp(self, ys: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def zip$mFcS$sp(self, ys: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def zip$mFcV$sp(self, ys: Coll[typing.Any]) -> 'PairColl'[scala.runtime.BoxedUnit, typing.Any]: ...
    def zip$mFcZ$sp(self, ys: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def zip$mIc$sp(self, ys: Coll[typing.Any]) -> 'PairColl'[_CollOverArray__A, typing.Any]: ...
    def zip$mIcB$sp(self, ys: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def zip$mIcC$sp(self, ys: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def zip$mIcD$sp(self, ys: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def zip$mIcF$sp(self, ys: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def zip$mIcI$sp(self, ys: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def zip$mIcJ$sp(self, ys: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def zip$mIcS$sp(self, ys: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def zip$mIcV$sp(self, ys: Coll[typing.Any]) -> 'PairColl'[scala.runtime.BoxedUnit, typing.Any]: ...
    def zip$mIcZ$sp(self, ys: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def zip$mJc$sp(self, ys: Coll[typing.Any]) -> 'PairColl'[_CollOverArray__A, typing.Any]: ...
    def zip$mJcB$sp(self, ys: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def zip$mJcC$sp(self, ys: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def zip$mJcD$sp(self, ys: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def zip$mJcF$sp(self, ys: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def zip$mJcI$sp(self, ys: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def zip$mJcJ$sp(self, ys: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def zip$mJcS$sp(self, ys: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def zip$mJcV$sp(self, ys: Coll[typing.Any]) -> 'PairColl'[scala.runtime.BoxedUnit, typing.Any]: ...
    def zip$mJcZ$sp(self, ys: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def zip$mSc$sp(self, ys: Coll[typing.Any]) -> 'PairColl'[_CollOverArray__A, typing.Any]: ...
    def zip$mScB$sp(self, ys: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def zip$mScC$sp(self, ys: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def zip$mScD$sp(self, ys: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def zip$mScF$sp(self, ys: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def zip$mScI$sp(self, ys: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def zip$mScJ$sp(self, ys: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def zip$mScS$sp(self, ys: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def zip$mScV$sp(self, ys: Coll[typing.Any]) -> 'PairColl'[scala.runtime.BoxedUnit, typing.Any]: ...
    def zip$mScZ$sp(self, ys: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def zip$mVc$sp(self, ys: Coll[scala.runtime.BoxedUnit]) -> 'PairColl'[_CollOverArray__A, scala.runtime.BoxedUnit]: ...
    def zip$mVcB$sp(self, ys: Coll[scala.runtime.BoxedUnit]) -> 'PairColl'[typing.Any, scala.runtime.BoxedUnit]: ...
    def zip$mVcC$sp(self, ys: Coll[scala.runtime.BoxedUnit]) -> 'PairColl'[typing.Any, scala.runtime.BoxedUnit]: ...
    def zip$mVcD$sp(self, ys: Coll[scala.runtime.BoxedUnit]) -> 'PairColl'[typing.Any, scala.runtime.BoxedUnit]: ...
    def zip$mVcF$sp(self, ys: Coll[scala.runtime.BoxedUnit]) -> 'PairColl'[typing.Any, scala.runtime.BoxedUnit]: ...
    def zip$mVcI$sp(self, ys: Coll[scala.runtime.BoxedUnit]) -> 'PairColl'[typing.Any, scala.runtime.BoxedUnit]: ...
    def zip$mVcJ$sp(self, ys: Coll[scala.runtime.BoxedUnit]) -> 'PairColl'[typing.Any, scala.runtime.BoxedUnit]: ...
    def zip$mVcS$sp(self, ys: Coll[scala.runtime.BoxedUnit]) -> 'PairColl'[typing.Any, scala.runtime.BoxedUnit]: ...
    def zip$mVcV$sp(self, ys: Coll[scala.runtime.BoxedUnit]) -> 'PairColl'[scala.runtime.BoxedUnit, scala.runtime.BoxedUnit]: ...
    def zip$mVcZ$sp(self, ys: Coll[scala.runtime.BoxedUnit]) -> 'PairColl'[typing.Any, scala.runtime.BoxedUnit]: ...
    def zip$mZc$sp(self, ys: Coll[typing.Any]) -> 'PairColl'[_CollOverArray__A, typing.Any]: ...
    def zip$mZcB$sp(self, ys: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def zip$mZcC$sp(self, ys: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def zip$mZcD$sp(self, ys: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def zip$mZcF$sp(self, ys: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def zip$mZcI$sp(self, ys: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def zip$mZcJ$sp(self, ys: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def zip$mZcS$sp(self, ys: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def zip$mZcV$sp(self, ys: Coll[typing.Any]) -> 'PairColl'[scala.runtime.BoxedUnit, typing.Any]: ...
    def zip$mZcZ$sp(self, ys: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    _zip$mcB$sp__B = typing.TypeVar('_zip$mcB$sp__B')  # <B>
    def zip$mcB$sp(self, ys: Coll[_zip.mcB.sp__B]) -> 'PairColl'[typing.Any, _zip.mcB.sp__B]: ...
    _zip$mcC$sp__B = typing.TypeVar('_zip$mcC$sp__B')  # <B>
    def zip$mcC$sp(self, ys: Coll[_zip.mcC.sp__B]) -> 'PairColl'[typing.Any, _zip.mcC.sp__B]: ...
    _zip$mcD$sp__B = typing.TypeVar('_zip$mcD$sp__B')  # <B>
    def zip$mcD$sp(self, ys: Coll[_zip.mcD.sp__B]) -> 'PairColl'[typing.Any, _zip.mcD.sp__B]: ...
    _zip$mcF$sp__B = typing.TypeVar('_zip$mcF$sp__B')  # <B>
    def zip$mcF$sp(self, ys: Coll[_zip.mcF.sp__B]) -> 'PairColl'[typing.Any, _zip.mcF.sp__B]: ...
    _zip$mcI$sp__B = typing.TypeVar('_zip$mcI$sp__B')  # <B>
    def zip$mcI$sp(self, ys: Coll[_zip.mcI.sp__B]) -> 'PairColl'[typing.Any, _zip.mcI.sp__B]: ...
    _zip$mcJ$sp__B = typing.TypeVar('_zip$mcJ$sp__B')  # <B>
    def zip$mcJ$sp(self, ys: Coll[_zip.mcJ.sp__B]) -> 'PairColl'[typing.Any, _zip.mcJ.sp__B]: ...
    _zip$mcS$sp__B = typing.TypeVar('_zip$mcS$sp__B')  # <B>
    def zip$mcS$sp(self, ys: Coll[_zip.mcS.sp__B]) -> 'PairColl'[typing.Any, _zip.mcS.sp__B]: ...
    _zip$mcV$sp__B = typing.TypeVar('_zip$mcV$sp__B')  # <B>
    def zip$mcV$sp(self, ys: Coll[_zip.mcV.sp__B]) -> 'PairColl'[scala.runtime.BoxedUnit, _zip.mcV.sp__B]: ...
    _zip$mcZ$sp__B = typing.TypeVar('_zip$mcZ$sp__B')  # <B>
    def zip$mcZ$sp(self, ys: Coll[_zip.mcZ.sp__B]) -> 'PairColl'[typing.Any, _zip.mcZ.sp__B]: ...

class CollOverArrayBuilder(CollBuilder):
    def __init__(self): ...
    def Monoids(self) -> MonoidBuilder: ...
    _emptyColl__T = typing.TypeVar('_emptyColl__T')  # <T>
    def emptyColl(self, cT: scalan.RType[_emptyColl__T]) -> Coll[_emptyColl__T]: ...
    _flattenColl__A = typing.TypeVar('_flattenColl__A')  # <A>
    def flattenColl(self, coll: Coll[Coll[_flattenColl__A]], evidence$13: scalan.RType[_flattenColl__A]) -> Coll[_flattenColl__A]: ...
    _fromArray__T = typing.TypeVar('_fromArray__T')  # <T>
    def fromArray(self, arr: typing.Any, evidence$7: scalan.RType[_fromArray__T]) -> Coll[_fromArray__T]: ...
    def fromArray$mBc$sp(self, arr: typing.List[int], evidence$7: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def fromArray$mCc$sp(self, arr: typing.List[str], evidence$7: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def fromArray$mDc$sp(self, arr: typing.List[float], evidence$7: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def fromArray$mFc$sp(self, arr: typing.List[float], evidence$7: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def fromArray$mIc$sp(self, arr: typing.List[int], evidence$7: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def fromArray$mJc$sp(self, arr: typing.List[int], evidence$7: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def fromArray$mSc$sp(self, arr: typing.List[int], evidence$7: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def fromArray$mVc$sp(self, arr: typing.List[scala.runtime.BoxedUnit], evidence$7: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def fromArray$mZc$sp(self, arr: typing.List[bool], evidence$7: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    _fromItems__T = typing.TypeVar('_fromItems__T')  # <T>
    def fromItems(self, items: scala.collection.Seq[_fromItems__T], cT: scalan.RType[_fromItems__T]) -> Coll[_fromItems__T]: ...
    _fromMap__K = typing.TypeVar('_fromMap__K')  # <K>
    _fromMap__V = typing.TypeVar('_fromMap__V')  # <V>
    def fromMap(self, m: scala.collection.immutable.Map[_fromMap__K, _fromMap__V], evidence$5: scalan.RType[_fromMap__K], evidence$6: scalan.RType[_fromMap__V]) -> Coll[scala.Tuple2[_fromMap__K, _fromMap__V]]: ...
    _makePartialView__A = typing.TypeVar('_makePartialView__A')  # <A>
    _makePartialView__B = typing.TypeVar('_makePartialView__B')  # <B>
    def makePartialView(self, source: Coll[_makePartialView__A], f: scala.Function1[_makePartialView__A, _makePartialView__B], calculated: typing.List[bool], calculatedItems: typing.Any, evidence$10: scalan.RType[_makePartialView__B]) -> Coll[_makePartialView__B]: ...
    def makePartialView$mBBc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], calculated: typing.List[bool], calculatedItems: typing.List[int], evidence$10: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makePartialView$mBCc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], calculated: typing.List[bool], calculatedItems: typing.List[str], evidence$10: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makePartialView$mBDc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], calculated: typing.List[bool], calculatedItems: typing.List[float], evidence$10: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makePartialView$mBFc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], calculated: typing.List[bool], calculatedItems: typing.List[float], evidence$10: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makePartialView$mBIc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], calculated: typing.List[bool], calculatedItems: typing.List[int], evidence$10: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makePartialView$mBJc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], calculated: typing.List[bool], calculatedItems: typing.List[int], evidence$10: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makePartialView$mBSc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], calculated: typing.List[bool], calculatedItems: typing.List[int], evidence$10: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makePartialView$mBVc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, scala.runtime.BoxedUnit], calculated: typing.List[bool], calculatedItems: typing.List[scala.runtime.BoxedUnit], evidence$10: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def makePartialView$mBZc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], calculated: typing.List[bool], calculatedItems: typing.List[bool], evidence$10: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makePartialView$mCBc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], calculated: typing.List[bool], calculatedItems: typing.List[int], evidence$10: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makePartialView$mCCc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], calculated: typing.List[bool], calculatedItems: typing.List[str], evidence$10: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makePartialView$mCDc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], calculated: typing.List[bool], calculatedItems: typing.List[float], evidence$10: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makePartialView$mCFc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], calculated: typing.List[bool], calculatedItems: typing.List[float], evidence$10: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makePartialView$mCIc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], calculated: typing.List[bool], calculatedItems: typing.List[int], evidence$10: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makePartialView$mCJc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], calculated: typing.List[bool], calculatedItems: typing.List[int], evidence$10: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makePartialView$mCSc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], calculated: typing.List[bool], calculatedItems: typing.List[int], evidence$10: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makePartialView$mCVc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, scala.runtime.BoxedUnit], calculated: typing.List[bool], calculatedItems: typing.List[scala.runtime.BoxedUnit], evidence$10: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def makePartialView$mCZc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], calculated: typing.List[bool], calculatedItems: typing.List[bool], evidence$10: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makePartialView$mDBc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], calculated: typing.List[bool], calculatedItems: typing.List[int], evidence$10: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makePartialView$mDCc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], calculated: typing.List[bool], calculatedItems: typing.List[str], evidence$10: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makePartialView$mDDc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], calculated: typing.List[bool], calculatedItems: typing.List[float], evidence$10: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makePartialView$mDFc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], calculated: typing.List[bool], calculatedItems: typing.List[float], evidence$10: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makePartialView$mDIc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], calculated: typing.List[bool], calculatedItems: typing.List[int], evidence$10: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makePartialView$mDJc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], calculated: typing.List[bool], calculatedItems: typing.List[int], evidence$10: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makePartialView$mDSc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], calculated: typing.List[bool], calculatedItems: typing.List[int], evidence$10: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makePartialView$mDVc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, scala.runtime.BoxedUnit], calculated: typing.List[bool], calculatedItems: typing.List[scala.runtime.BoxedUnit], evidence$10: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def makePartialView$mDZc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], calculated: typing.List[bool], calculatedItems: typing.List[bool], evidence$10: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makePartialView$mFBc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], calculated: typing.List[bool], calculatedItems: typing.List[int], evidence$10: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makePartialView$mFCc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], calculated: typing.List[bool], calculatedItems: typing.List[str], evidence$10: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makePartialView$mFDc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], calculated: typing.List[bool], calculatedItems: typing.List[float], evidence$10: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makePartialView$mFFc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], calculated: typing.List[bool], calculatedItems: typing.List[float], evidence$10: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makePartialView$mFIc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], calculated: typing.List[bool], calculatedItems: typing.List[int], evidence$10: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makePartialView$mFJc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], calculated: typing.List[bool], calculatedItems: typing.List[int], evidence$10: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makePartialView$mFSc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], calculated: typing.List[bool], calculatedItems: typing.List[int], evidence$10: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makePartialView$mFVc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, scala.runtime.BoxedUnit], calculated: typing.List[bool], calculatedItems: typing.List[scala.runtime.BoxedUnit], evidence$10: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def makePartialView$mFZc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], calculated: typing.List[bool], calculatedItems: typing.List[bool], evidence$10: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makePartialView$mIBc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], calculated: typing.List[bool], calculatedItems: typing.List[int], evidence$10: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makePartialView$mICc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], calculated: typing.List[bool], calculatedItems: typing.List[str], evidence$10: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makePartialView$mIDc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], calculated: typing.List[bool], calculatedItems: typing.List[float], evidence$10: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makePartialView$mIFc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], calculated: typing.List[bool], calculatedItems: typing.List[float], evidence$10: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makePartialView$mIIc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], calculated: typing.List[bool], calculatedItems: typing.List[int], evidence$10: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makePartialView$mIJc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], calculated: typing.List[bool], calculatedItems: typing.List[int], evidence$10: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makePartialView$mISc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], calculated: typing.List[bool], calculatedItems: typing.List[int], evidence$10: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makePartialView$mIVc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, scala.runtime.BoxedUnit], calculated: typing.List[bool], calculatedItems: typing.List[scala.runtime.BoxedUnit], evidence$10: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def makePartialView$mIZc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], calculated: typing.List[bool], calculatedItems: typing.List[bool], evidence$10: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makePartialView$mJBc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], calculated: typing.List[bool], calculatedItems: typing.List[int], evidence$10: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makePartialView$mJCc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], calculated: typing.List[bool], calculatedItems: typing.List[str], evidence$10: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makePartialView$mJDc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], calculated: typing.List[bool], calculatedItems: typing.List[float], evidence$10: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makePartialView$mJFc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], calculated: typing.List[bool], calculatedItems: typing.List[float], evidence$10: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makePartialView$mJIc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], calculated: typing.List[bool], calculatedItems: typing.List[int], evidence$10: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makePartialView$mJJc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], calculated: typing.List[bool], calculatedItems: typing.List[int], evidence$10: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makePartialView$mJSc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], calculated: typing.List[bool], calculatedItems: typing.List[int], evidence$10: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makePartialView$mJVc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, scala.runtime.BoxedUnit], calculated: typing.List[bool], calculatedItems: typing.List[scala.runtime.BoxedUnit], evidence$10: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def makePartialView$mJZc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], calculated: typing.List[bool], calculatedItems: typing.List[bool], evidence$10: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makePartialView$mSBc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], calculated: typing.List[bool], calculatedItems: typing.List[int], evidence$10: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makePartialView$mSCc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], calculated: typing.List[bool], calculatedItems: typing.List[str], evidence$10: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makePartialView$mSDc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], calculated: typing.List[bool], calculatedItems: typing.List[float], evidence$10: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makePartialView$mSFc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], calculated: typing.List[bool], calculatedItems: typing.List[float], evidence$10: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makePartialView$mSIc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], calculated: typing.List[bool], calculatedItems: typing.List[int], evidence$10: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makePartialView$mSJc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], calculated: typing.List[bool], calculatedItems: typing.List[int], evidence$10: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makePartialView$mSSc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], calculated: typing.List[bool], calculatedItems: typing.List[int], evidence$10: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makePartialView$mSVc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, scala.runtime.BoxedUnit], calculated: typing.List[bool], calculatedItems: typing.List[scala.runtime.BoxedUnit], evidence$10: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def makePartialView$mSZc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], calculated: typing.List[bool], calculatedItems: typing.List[bool], evidence$10: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makePartialView$mVBc$sp(self, source: Coll[scala.runtime.BoxedUnit], f: scala.Function1[scala.runtime.BoxedUnit, typing.Any], calculated: typing.List[bool], calculatedItems: typing.List[int], evidence$10: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makePartialView$mVCc$sp(self, source: Coll[scala.runtime.BoxedUnit], f: scala.Function1[scala.runtime.BoxedUnit, typing.Any], calculated: typing.List[bool], calculatedItems: typing.List[str], evidence$10: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makePartialView$mVDc$sp(self, source: Coll[scala.runtime.BoxedUnit], f: scala.Function1[scala.runtime.BoxedUnit, typing.Any], calculated: typing.List[bool], calculatedItems: typing.List[float], evidence$10: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makePartialView$mVFc$sp(self, source: Coll[scala.runtime.BoxedUnit], f: scala.Function1[scala.runtime.BoxedUnit, typing.Any], calculated: typing.List[bool], calculatedItems: typing.List[float], evidence$10: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makePartialView$mVIc$sp(self, source: Coll[scala.runtime.BoxedUnit], f: scala.Function1[scala.runtime.BoxedUnit, typing.Any], calculated: typing.List[bool], calculatedItems: typing.List[int], evidence$10: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makePartialView$mVJc$sp(self, source: Coll[scala.runtime.BoxedUnit], f: scala.Function1[scala.runtime.BoxedUnit, typing.Any], calculated: typing.List[bool], calculatedItems: typing.List[int], evidence$10: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makePartialView$mVSc$sp(self, source: Coll[scala.runtime.BoxedUnit], f: scala.Function1[scala.runtime.BoxedUnit, typing.Any], calculated: typing.List[bool], calculatedItems: typing.List[int], evidence$10: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makePartialView$mVVc$sp(self, source: Coll[scala.runtime.BoxedUnit], f: scala.Function1[scala.runtime.BoxedUnit, scala.runtime.BoxedUnit], calculated: typing.List[bool], calculatedItems: typing.List[scala.runtime.BoxedUnit], evidence$10: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def makePartialView$mVZc$sp(self, source: Coll[scala.runtime.BoxedUnit], f: scala.Function1[scala.runtime.BoxedUnit, typing.Any], calculated: typing.List[bool], calculatedItems: typing.List[bool], evidence$10: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makePartialView$mZBc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], calculated: typing.List[bool], calculatedItems: typing.List[int], evidence$10: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makePartialView$mZCc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], calculated: typing.List[bool], calculatedItems: typing.List[str], evidence$10: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makePartialView$mZDc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], calculated: typing.List[bool], calculatedItems: typing.List[float], evidence$10: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makePartialView$mZFc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], calculated: typing.List[bool], calculatedItems: typing.List[float], evidence$10: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makePartialView$mZIc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], calculated: typing.List[bool], calculatedItems: typing.List[int], evidence$10: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makePartialView$mZJc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], calculated: typing.List[bool], calculatedItems: typing.List[int], evidence$10: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makePartialView$mZSc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], calculated: typing.List[bool], calculatedItems: typing.List[int], evidence$10: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makePartialView$mZVc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, scala.runtime.BoxedUnit], calculated: typing.List[bool], calculatedItems: typing.List[scala.runtime.BoxedUnit], evidence$10: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def makePartialView$mZZc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], calculated: typing.List[bool], calculatedItems: typing.List[bool], evidence$10: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    _makeView__A = typing.TypeVar('_makeView__A')  # <A>
    _makeView__B = typing.TypeVar('_makeView__B')  # <B>
    def makeView(self, source: Coll[_makeView__A], f: scala.Function1[_makeView__A, _makeView__B], evidence$9: scalan.RType[_makeView__B]) -> Coll[_makeView__B]: ...
    def makeView$mBBc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], evidence$9: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makeView$mBCc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], evidence$9: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makeView$mBDc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], evidence$9: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makeView$mBFc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], evidence$9: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makeView$mBIc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], evidence$9: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makeView$mBJc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], evidence$9: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makeView$mBSc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], evidence$9: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makeView$mBVc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, scala.runtime.BoxedUnit], evidence$9: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def makeView$mBZc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], evidence$9: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makeView$mCBc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], evidence$9: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makeView$mCCc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], evidence$9: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makeView$mCDc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], evidence$9: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makeView$mCFc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], evidence$9: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makeView$mCIc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], evidence$9: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makeView$mCJc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], evidence$9: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makeView$mCSc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], evidence$9: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makeView$mCVc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, scala.runtime.BoxedUnit], evidence$9: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def makeView$mCZc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], evidence$9: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makeView$mDBc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], evidence$9: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makeView$mDCc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], evidence$9: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makeView$mDDc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], evidence$9: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makeView$mDFc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], evidence$9: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makeView$mDIc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], evidence$9: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makeView$mDJc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], evidence$9: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makeView$mDSc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], evidence$9: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makeView$mDVc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, scala.runtime.BoxedUnit], evidence$9: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def makeView$mDZc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], evidence$9: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makeView$mFBc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], evidence$9: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makeView$mFCc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], evidence$9: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makeView$mFDc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], evidence$9: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makeView$mFFc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], evidence$9: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makeView$mFIc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], evidence$9: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makeView$mFJc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], evidence$9: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makeView$mFSc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], evidence$9: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makeView$mFVc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, scala.runtime.BoxedUnit], evidence$9: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def makeView$mFZc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], evidence$9: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makeView$mIBc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], evidence$9: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makeView$mICc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], evidence$9: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makeView$mIDc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], evidence$9: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makeView$mIFc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], evidence$9: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makeView$mIIc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], evidence$9: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makeView$mIJc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], evidence$9: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makeView$mISc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], evidence$9: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makeView$mIVc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, scala.runtime.BoxedUnit], evidence$9: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def makeView$mIZc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], evidence$9: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makeView$mJBc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], evidence$9: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makeView$mJCc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], evidence$9: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makeView$mJDc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], evidence$9: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makeView$mJFc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], evidence$9: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makeView$mJIc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], evidence$9: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makeView$mJJc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], evidence$9: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makeView$mJSc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], evidence$9: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makeView$mJVc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, scala.runtime.BoxedUnit], evidence$9: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def makeView$mJZc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], evidence$9: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makeView$mSBc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], evidence$9: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makeView$mSCc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], evidence$9: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makeView$mSDc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], evidence$9: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makeView$mSFc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], evidence$9: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makeView$mSIc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], evidence$9: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makeView$mSJc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], evidence$9: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makeView$mSSc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], evidence$9: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makeView$mSVc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, scala.runtime.BoxedUnit], evidence$9: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def makeView$mSZc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], evidence$9: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makeView$mVBc$sp(self, source: Coll[scala.runtime.BoxedUnit], f: scala.Function1[scala.runtime.BoxedUnit, typing.Any], evidence$9: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makeView$mVCc$sp(self, source: Coll[scala.runtime.BoxedUnit], f: scala.Function1[scala.runtime.BoxedUnit, typing.Any], evidence$9: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makeView$mVDc$sp(self, source: Coll[scala.runtime.BoxedUnit], f: scala.Function1[scala.runtime.BoxedUnit, typing.Any], evidence$9: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makeView$mVFc$sp(self, source: Coll[scala.runtime.BoxedUnit], f: scala.Function1[scala.runtime.BoxedUnit, typing.Any], evidence$9: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makeView$mVIc$sp(self, source: Coll[scala.runtime.BoxedUnit], f: scala.Function1[scala.runtime.BoxedUnit, typing.Any], evidence$9: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makeView$mVJc$sp(self, source: Coll[scala.runtime.BoxedUnit], f: scala.Function1[scala.runtime.BoxedUnit, typing.Any], evidence$9: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makeView$mVSc$sp(self, source: Coll[scala.runtime.BoxedUnit], f: scala.Function1[scala.runtime.BoxedUnit, typing.Any], evidence$9: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makeView$mVVc$sp(self, source: Coll[scala.runtime.BoxedUnit], f: scala.Function1[scala.runtime.BoxedUnit, scala.runtime.BoxedUnit], evidence$9: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def makeView$mVZc$sp(self, source: Coll[scala.runtime.BoxedUnit], f: scala.Function1[scala.runtime.BoxedUnit, typing.Any], evidence$9: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makeView$mZBc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], evidence$9: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makeView$mZCc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], evidence$9: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makeView$mZDc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], evidence$9: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makeView$mZFc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], evidence$9: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makeView$mZIc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], evidence$9: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makeView$mZJc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], evidence$9: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makeView$mZSc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], evidence$9: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def makeView$mZVc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, scala.runtime.BoxedUnit], evidence$9: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def makeView$mZZc$sp(self, source: Coll[typing.Any], f: scala.Function1[typing.Any, typing.Any], evidence$9: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    _outerJoin__K = typing.TypeVar('_outerJoin__K')  # <K>
    _outerJoin__L = typing.TypeVar('_outerJoin__L')  # <L>
    _outerJoin__R = typing.TypeVar('_outerJoin__R')  # <R>
    _outerJoin__O = typing.TypeVar('_outerJoin__O')  # <O>
    def outerJoin(self, left: Coll[scala.Tuple2[_outerJoin__K, _outerJoin__L]], right: Coll[scala.Tuple2[_outerJoin__K, _outerJoin__R]], l: scala.Function1[scala.Tuple2[_outerJoin__K, _outerJoin__L], _outerJoin__O], r: scala.Function1[scala.Tuple2[_outerJoin__K, _outerJoin__R], _outerJoin__O], inner: scala.Function1[scala.Tuple2[_outerJoin__K, scala.Tuple2[_outerJoin__L, _outerJoin__R]], _outerJoin__O], evidence$11: scalan.RType[_outerJoin__K], evidence$12: scalan.RType[_outerJoin__O]) -> Coll[scala.Tuple2[_outerJoin__K, _outerJoin__O]]: ...
    _pairColl__A = typing.TypeVar('_pairColl__A')  # <A>
    _pairColl__B = typing.TypeVar('_pairColl__B')  # <B>
    def pairColl(self, as_: Coll[_pairColl__A], bs: Coll[_pairColl__B]) -> 'PairColl'[_pairColl__A, _pairColl__B]: ...
    def pairColl$mBBc$sp(self, as_: Coll[typing.Any], bs: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def pairColl$mBCc$sp(self, as_: Coll[typing.Any], bs: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def pairColl$mBDc$sp(self, as_: Coll[typing.Any], bs: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def pairColl$mBFc$sp(self, as_: Coll[typing.Any], bs: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def pairColl$mBIc$sp(self, as_: Coll[typing.Any], bs: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def pairColl$mBJc$sp(self, as_: Coll[typing.Any], bs: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def pairColl$mBSc$sp(self, as_: Coll[typing.Any], bs: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def pairColl$mBVc$sp(self, as_: Coll[typing.Any], bs: Coll[scala.runtime.BoxedUnit]) -> 'PairColl'[typing.Any, scala.runtime.BoxedUnit]: ...
    def pairColl$mBZc$sp(self, as_: Coll[typing.Any], bs: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def pairColl$mCBc$sp(self, as_: Coll[typing.Any], bs: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def pairColl$mCCc$sp(self, as_: Coll[typing.Any], bs: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def pairColl$mCDc$sp(self, as_: Coll[typing.Any], bs: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def pairColl$mCFc$sp(self, as_: Coll[typing.Any], bs: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def pairColl$mCIc$sp(self, as_: Coll[typing.Any], bs: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def pairColl$mCJc$sp(self, as_: Coll[typing.Any], bs: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def pairColl$mCSc$sp(self, as_: Coll[typing.Any], bs: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def pairColl$mCVc$sp(self, as_: Coll[typing.Any], bs: Coll[scala.runtime.BoxedUnit]) -> 'PairColl'[typing.Any, scala.runtime.BoxedUnit]: ...
    def pairColl$mCZc$sp(self, as_: Coll[typing.Any], bs: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def pairColl$mDBc$sp(self, as_: Coll[typing.Any], bs: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def pairColl$mDCc$sp(self, as_: Coll[typing.Any], bs: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def pairColl$mDDc$sp(self, as_: Coll[typing.Any], bs: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def pairColl$mDFc$sp(self, as_: Coll[typing.Any], bs: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def pairColl$mDIc$sp(self, as_: Coll[typing.Any], bs: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def pairColl$mDJc$sp(self, as_: Coll[typing.Any], bs: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def pairColl$mDSc$sp(self, as_: Coll[typing.Any], bs: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def pairColl$mDVc$sp(self, as_: Coll[typing.Any], bs: Coll[scala.runtime.BoxedUnit]) -> 'PairColl'[typing.Any, scala.runtime.BoxedUnit]: ...
    def pairColl$mDZc$sp(self, as_: Coll[typing.Any], bs: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def pairColl$mFBc$sp(self, as_: Coll[typing.Any], bs: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def pairColl$mFCc$sp(self, as_: Coll[typing.Any], bs: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def pairColl$mFDc$sp(self, as_: Coll[typing.Any], bs: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def pairColl$mFFc$sp(self, as_: Coll[typing.Any], bs: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def pairColl$mFIc$sp(self, as_: Coll[typing.Any], bs: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def pairColl$mFJc$sp(self, as_: Coll[typing.Any], bs: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def pairColl$mFSc$sp(self, as_: Coll[typing.Any], bs: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def pairColl$mFVc$sp(self, as_: Coll[typing.Any], bs: Coll[scala.runtime.BoxedUnit]) -> 'PairColl'[typing.Any, scala.runtime.BoxedUnit]: ...
    def pairColl$mFZc$sp(self, as_: Coll[typing.Any], bs: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def pairColl$mIBc$sp(self, as_: Coll[typing.Any], bs: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def pairColl$mICc$sp(self, as_: Coll[typing.Any], bs: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def pairColl$mIDc$sp(self, as_: Coll[typing.Any], bs: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def pairColl$mIFc$sp(self, as_: Coll[typing.Any], bs: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def pairColl$mIIc$sp(self, as_: Coll[typing.Any], bs: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def pairColl$mIJc$sp(self, as_: Coll[typing.Any], bs: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def pairColl$mISc$sp(self, as_: Coll[typing.Any], bs: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def pairColl$mIVc$sp(self, as_: Coll[typing.Any], bs: Coll[scala.runtime.BoxedUnit]) -> 'PairColl'[typing.Any, scala.runtime.BoxedUnit]: ...
    def pairColl$mIZc$sp(self, as_: Coll[typing.Any], bs: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def pairColl$mJBc$sp(self, as_: Coll[typing.Any], bs: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def pairColl$mJCc$sp(self, as_: Coll[typing.Any], bs: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def pairColl$mJDc$sp(self, as_: Coll[typing.Any], bs: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def pairColl$mJFc$sp(self, as_: Coll[typing.Any], bs: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def pairColl$mJIc$sp(self, as_: Coll[typing.Any], bs: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def pairColl$mJJc$sp(self, as_: Coll[typing.Any], bs: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def pairColl$mJSc$sp(self, as_: Coll[typing.Any], bs: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def pairColl$mJVc$sp(self, as_: Coll[typing.Any], bs: Coll[scala.runtime.BoxedUnit]) -> 'PairColl'[typing.Any, scala.runtime.BoxedUnit]: ...
    def pairColl$mJZc$sp(self, as_: Coll[typing.Any], bs: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def pairColl$mSBc$sp(self, as_: Coll[typing.Any], bs: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def pairColl$mSCc$sp(self, as_: Coll[typing.Any], bs: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def pairColl$mSDc$sp(self, as_: Coll[typing.Any], bs: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def pairColl$mSFc$sp(self, as_: Coll[typing.Any], bs: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def pairColl$mSIc$sp(self, as_: Coll[typing.Any], bs: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def pairColl$mSJc$sp(self, as_: Coll[typing.Any], bs: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def pairColl$mSSc$sp(self, as_: Coll[typing.Any], bs: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def pairColl$mSVc$sp(self, as_: Coll[typing.Any], bs: Coll[scala.runtime.BoxedUnit]) -> 'PairColl'[typing.Any, scala.runtime.BoxedUnit]: ...
    def pairColl$mSZc$sp(self, as_: Coll[typing.Any], bs: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def pairColl$mVBc$sp(self, as_: Coll[scala.runtime.BoxedUnit], bs: Coll[typing.Any]) -> 'PairColl'[scala.runtime.BoxedUnit, typing.Any]: ...
    def pairColl$mVCc$sp(self, as_: Coll[scala.runtime.BoxedUnit], bs: Coll[typing.Any]) -> 'PairColl'[scala.runtime.BoxedUnit, typing.Any]: ...
    def pairColl$mVDc$sp(self, as_: Coll[scala.runtime.BoxedUnit], bs: Coll[typing.Any]) -> 'PairColl'[scala.runtime.BoxedUnit, typing.Any]: ...
    def pairColl$mVFc$sp(self, as_: Coll[scala.runtime.BoxedUnit], bs: Coll[typing.Any]) -> 'PairColl'[scala.runtime.BoxedUnit, typing.Any]: ...
    def pairColl$mVIc$sp(self, as_: Coll[scala.runtime.BoxedUnit], bs: Coll[typing.Any]) -> 'PairColl'[scala.runtime.BoxedUnit, typing.Any]: ...
    def pairColl$mVJc$sp(self, as_: Coll[scala.runtime.BoxedUnit], bs: Coll[typing.Any]) -> 'PairColl'[scala.runtime.BoxedUnit, typing.Any]: ...
    def pairColl$mVSc$sp(self, as_: Coll[scala.runtime.BoxedUnit], bs: Coll[typing.Any]) -> 'PairColl'[scala.runtime.BoxedUnit, typing.Any]: ...
    def pairColl$mVVc$sp(self, as_: Coll[scala.runtime.BoxedUnit], bs: Coll[scala.runtime.BoxedUnit]) -> 'PairColl'[scala.runtime.BoxedUnit, scala.runtime.BoxedUnit]: ...
    def pairColl$mVZc$sp(self, as_: Coll[scala.runtime.BoxedUnit], bs: Coll[typing.Any]) -> 'PairColl'[scala.runtime.BoxedUnit, typing.Any]: ...
    def pairColl$mZBc$sp(self, as_: Coll[typing.Any], bs: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def pairColl$mZCc$sp(self, as_: Coll[typing.Any], bs: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def pairColl$mZDc$sp(self, as_: Coll[typing.Any], bs: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def pairColl$mZFc$sp(self, as_: Coll[typing.Any], bs: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def pairColl$mZIc$sp(self, as_: Coll[typing.Any], bs: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def pairColl$mZJc$sp(self, as_: Coll[typing.Any], bs: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def pairColl$mZSc$sp(self, as_: Coll[typing.Any], bs: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    def pairColl$mZVc$sp(self, as_: Coll[typing.Any], bs: Coll[scala.runtime.BoxedUnit]) -> 'PairColl'[typing.Any, scala.runtime.BoxedUnit]: ...
    def pairColl$mZZc$sp(self, as_: Coll[typing.Any], bs: Coll[typing.Any]) -> 'PairColl'[typing.Any, typing.Any]: ...
    _pairCollFromArrays__A = typing.TypeVar('_pairCollFromArrays__A')  # <A>
    _pairCollFromArrays__B = typing.TypeVar('_pairCollFromArrays__B')  # <B>
    def pairCollFromArrays(self, as_: typing.Any, bs: typing.Any, evidence$10: scalan.RType[_pairCollFromArrays__A], evidence$11: scalan.RType[_pairCollFromArrays__B]) -> 'PairColl'[_pairCollFromArrays__A, _pairCollFromArrays__B]: ...
    _replicate__T = typing.TypeVar('_replicate__T')  # <T>
    def replicate(self, n: int, v: _replicate__T, evidence$8: scalan.RType[_replicate__T]) -> Coll[_replicate__T]: ...
    def replicate$mBc$sp(self, n: int, v: int, evidence$8: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def replicate$mCc$sp(self, n: int, v: str, evidence$8: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def replicate$mDc$sp(self, n: int, v: float, evidence$8: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def replicate$mFc$sp(self, n: int, v: float, evidence$8: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def replicate$mIc$sp(self, n: int, v: int, evidence$8: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def replicate$mJc$sp(self, n: int, v: int, evidence$8: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def replicate$mSc$sp(self, n: int, v: int, evidence$8: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def replicate$mVc$sp(self, n: int, v: scala.runtime.BoxedUnit, evidence$8: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def replicate$mZc$sp(self, n: int, v: bool, evidence$8: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    _special$collection$CollOverArrayBuilder$$fromBoxedPairs__A = typing.TypeVar('_special$collection$CollOverArrayBuilder$$fromBoxedPairs__A')  # <A>
    _special$collection$CollOverArrayBuilder$$fromBoxedPairs__B = typing.TypeVar('_special$collection$CollOverArrayBuilder$$fromBoxedPairs__B')  # <B>
    def special$collection$CollOverArrayBuilder$$fromBoxedPairs(self, seq: scala.collection.Seq[scala.Tuple2[_special.collection.CollOverArrayBuilder..fromBoxedPairs__A, _special.collection.CollOverArrayBuilder..fromBoxedPairs__B]], tA: scalan.RType[_special.collection.CollOverArrayBuilder..fromBoxedPairs__A], tB: scalan.RType[_special.collection.CollOverArrayBuilder..fromBoxedPairs__B]) -> 'PairColl'[_special.collection.CollOverArrayBuilder..fromBoxedPairs__A, _special.collection.CollOverArrayBuilder..fromBoxedPairs__B]: ...
    _unzip__A = typing.TypeVar('_unzip__A')  # <A>
    _unzip__B = typing.TypeVar('_unzip__B')  # <B>
    def unzip(self, xs: Coll[scala.Tuple2[_unzip__A, _unzip__B]]) -> scala.Tuple2[Coll[_unzip__A], Coll[_unzip__B]]: ...
    def unzip$mBBc$sp(self, xs: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def unzip$mBCc$sp(self, xs: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def unzip$mBDc$sp(self, xs: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def unzip$mBFc$sp(self, xs: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def unzip$mBIc$sp(self, xs: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def unzip$mBJc$sp(self, xs: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def unzip$mBSc$sp(self, xs: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def unzip$mBVc$sp(self, xs: Coll[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]) -> scala.Tuple2[Coll[typing.Any], Coll[scala.runtime.BoxedUnit]]: ...
    def unzip$mBZc$sp(self, xs: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def unzip$mCBc$sp(self, xs: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def unzip$mCCc$sp(self, xs: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def unzip$mCDc$sp(self, xs: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def unzip$mCFc$sp(self, xs: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def unzip$mCIc$sp(self, xs: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def unzip$mCJc$sp(self, xs: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def unzip$mCSc$sp(self, xs: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def unzip$mCVc$sp(self, xs: Coll[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]) -> scala.Tuple2[Coll[typing.Any], Coll[scala.runtime.BoxedUnit]]: ...
    def unzip$mCZc$sp(self, xs: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def unzip$mDBc$sp(self, xs: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def unzip$mDCc$sp(self, xs: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def unzip$mDDc$sp(self, xs: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def unzip$mDFc$sp(self, xs: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def unzip$mDIc$sp(self, xs: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def unzip$mDJc$sp(self, xs: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def unzip$mDSc$sp(self, xs: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def unzip$mDVc$sp(self, xs: Coll[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]) -> scala.Tuple2[Coll[typing.Any], Coll[scala.runtime.BoxedUnit]]: ...
    def unzip$mDZc$sp(self, xs: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def unzip$mFBc$sp(self, xs: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def unzip$mFCc$sp(self, xs: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def unzip$mFDc$sp(self, xs: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def unzip$mFFc$sp(self, xs: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def unzip$mFIc$sp(self, xs: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def unzip$mFJc$sp(self, xs: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def unzip$mFSc$sp(self, xs: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def unzip$mFVc$sp(self, xs: Coll[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]) -> scala.Tuple2[Coll[typing.Any], Coll[scala.runtime.BoxedUnit]]: ...
    def unzip$mFZc$sp(self, xs: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def unzip$mIBc$sp(self, xs: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def unzip$mICc$sp(self, xs: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def unzip$mIDc$sp(self, xs: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def unzip$mIFc$sp(self, xs: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def unzip$mIIc$sp(self, xs: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def unzip$mIJc$sp(self, xs: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def unzip$mISc$sp(self, xs: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def unzip$mIVc$sp(self, xs: Coll[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]) -> scala.Tuple2[Coll[typing.Any], Coll[scala.runtime.BoxedUnit]]: ...
    def unzip$mIZc$sp(self, xs: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def unzip$mJBc$sp(self, xs: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def unzip$mJCc$sp(self, xs: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def unzip$mJDc$sp(self, xs: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def unzip$mJFc$sp(self, xs: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def unzip$mJIc$sp(self, xs: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def unzip$mJJc$sp(self, xs: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def unzip$mJSc$sp(self, xs: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def unzip$mJVc$sp(self, xs: Coll[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]) -> scala.Tuple2[Coll[typing.Any], Coll[scala.runtime.BoxedUnit]]: ...
    def unzip$mJZc$sp(self, xs: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def unzip$mSBc$sp(self, xs: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def unzip$mSCc$sp(self, xs: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def unzip$mSDc$sp(self, xs: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def unzip$mSFc$sp(self, xs: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def unzip$mSIc$sp(self, xs: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def unzip$mSJc$sp(self, xs: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def unzip$mSSc$sp(self, xs: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def unzip$mSVc$sp(self, xs: Coll[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]) -> scala.Tuple2[Coll[typing.Any], Coll[scala.runtime.BoxedUnit]]: ...
    def unzip$mSZc$sp(self, xs: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def unzip$mVBc$sp(self, xs: Coll[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]) -> scala.Tuple2[Coll[scala.runtime.BoxedUnit], Coll[typing.Any]]: ...
    def unzip$mVCc$sp(self, xs: Coll[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]) -> scala.Tuple2[Coll[scala.runtime.BoxedUnit], Coll[typing.Any]]: ...
    def unzip$mVDc$sp(self, xs: Coll[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]) -> scala.Tuple2[Coll[scala.runtime.BoxedUnit], Coll[typing.Any]]: ...
    def unzip$mVFc$sp(self, xs: Coll[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]) -> scala.Tuple2[Coll[scala.runtime.BoxedUnit], Coll[typing.Any]]: ...
    def unzip$mVIc$sp(self, xs: Coll[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]) -> scala.Tuple2[Coll[scala.runtime.BoxedUnit], Coll[typing.Any]]: ...
    def unzip$mVJc$sp(self, xs: Coll[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]) -> scala.Tuple2[Coll[scala.runtime.BoxedUnit], Coll[typing.Any]]: ...
    def unzip$mVSc$sp(self, xs: Coll[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]) -> scala.Tuple2[Coll[scala.runtime.BoxedUnit], Coll[typing.Any]]: ...
    def unzip$mVVc$sp(self, xs: Coll[scala.Tuple2[scala.runtime.BoxedUnit, scala.runtime.BoxedUnit]]) -> scala.Tuple2[Coll[scala.runtime.BoxedUnit], Coll[scala.runtime.BoxedUnit]]: ...
    def unzip$mVZc$sp(self, xs: Coll[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]) -> scala.Tuple2[Coll[scala.runtime.BoxedUnit], Coll[typing.Any]]: ...
    def unzip$mZBc$sp(self, xs: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def unzip$mZCc$sp(self, xs: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def unzip$mZDc$sp(self, xs: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def unzip$mZFc$sp(self, xs: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def unzip$mZIc$sp(self, xs: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def unzip$mZJc$sp(self, xs: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def unzip$mZSc$sp(self, xs: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def unzip$mZVc$sp(self, xs: Coll[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]) -> scala.Tuple2[Coll[typing.Any], Coll[scala.runtime.BoxedUnit]]: ...
    def unzip$mZZc$sp(self, xs: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def xor(self, left: Coll[typing.Any], right: Coll[typing.Any]) -> Coll[typing.Any]: ...

_CostedColl__Item = typing.TypeVar('_CostedColl__Item')  # <Item>
class CostedColl(Costed[Coll[_CostedColl__Item]], typing.Generic[_CostedColl__Item]):
    def costs(self) -> Coll[typing.Any]: ...
    def filterCosted(self, f: scala.Function1[Costed[_CostedColl__Item], Costed[typing.Any]]) -> 'CostedColl'[_CostedColl__Item]: ...
    _foldCosted__B = typing.TypeVar('_foldCosted__B')  # <B>
    def foldCosted(self, zero: Costed[_foldCosted__B], op: scala.Function1[Costed[scala.Tuple2[_foldCosted__B, _CostedColl__Item]], Costed[_foldCosted__B]]) -> Costed[_foldCosted__B]: ...
    _mapCosted__Res = typing.TypeVar('_mapCosted__Res')  # <Res>
    def mapCosted(self, f: scala.Function1[Costed[_CostedColl__Item], Costed[_mapCosted__Res]]) -> 'CostedColl'[_mapCosted__Res]: ...
    def sizes(self) -> Coll[Size[_CostedColl__Item]]: ...
    def values(self) -> Coll[_CostedColl__Item]: ...
    def valuesCost(self) -> int: ...

_CostedFunc__Env = typing.TypeVar('_CostedFunc__Env')  # <Env>
_CostedFunc__Arg = typing.TypeVar('_CostedFunc__Arg')  # <Arg>
_CostedFunc__Res = typing.TypeVar('_CostedFunc__Res')  # <Res>
class CostedFunc(Costed[scala.Function1[_CostedFunc__Arg, _CostedFunc__Res]], typing.Generic[_CostedFunc__Env, _CostedFunc__Arg, _CostedFunc__Res]):
    def cost(self) -> int: ...
    def envCosted(self) -> Costed[_CostedFunc__Env]: ...
    def func(self) -> scala.Function1[Costed[_CostedFunc__Arg], Costed[_CostedFunc__Res]]: ...
    def sliceCalc(self) -> scala.Function1[_CostedFunc__Arg, _CostedFunc__Res]: ...
    def sliceCost(self) -> scala.Function1[scala.Tuple2[typing.Any, Size[_CostedFunc__Arg]], typing.Any]: ...
    def sliceCostEx(self) -> scala.Function1[scala.Tuple2[_CostedFunc__Arg, scala.Tuple2[typing.Any, Size[_CostedFunc__Arg]]], typing.Any]: ...
    def sliceSize(self) -> scala.Function1[Size[_CostedFunc__Arg], Size[_CostedFunc__Res]]: ...

_CostedOption__T = typing.TypeVar('_CostedOption__T')  # <T>
class CostedOption(Costed[scala.Option[_CostedOption__T]], typing.Generic[_CostedOption__T]):
    def accumulatedCost(self) -> int: ...
    def costOpt(self) -> scala.Option[typing.Any]: ...
    def sizeOpt(self) -> scala.Option[Size[_CostedOption__T]]: ...

_CostedPair__L = typing.TypeVar('_CostedPair__L')  # <L>
_CostedPair__R = typing.TypeVar('_CostedPair__R')  # <R>
class CostedPair(Costed[scala.Tuple2[_CostedPair__L, _CostedPair__R]], typing.Generic[_CostedPair__L, _CostedPair__R]):
    def accCost(self) -> int: ...
    def l(self) -> Costed[_CostedPair__L]: ...
    def r(self) -> Costed[_CostedPair__R]: ...

_CostedPrim__Val = typing.TypeVar('_CostedPrim__Val')  # <Val>
class CostedPrim(Costed[_CostedPrim__Val], typing.Generic[_CostedPrim__Val]):
    def cost(self) -> int: ...
    def size(self) -> Size[_CostedPrim__Val]: ...
    def value(self) -> _CostedPrim__Val: ...

class MonoidBuilderInst(MonoidBuilder):
    def __init__(self): ...
    def intMaxMonoid(self) -> 'IntMaxMonoid': ...
    def intMinMonoid(self) -> 'IntMinMonoid': ...
    def intPlusMonoid(self) -> 'IntPlusMonoid': ...
    def longMaxMonoid(self) -> 'LongMaxMonoid': ...
    def longMinMonoid(self) -> 'LongMinMonoid': ...
    def longPlusMonoid(self) -> 'LongPlusMonoid': ...
    _pairMonoid__A = typing.TypeVar('_pairMonoid__A')  # <A>
    _pairMonoid__B = typing.TypeVar('_pairMonoid__B')  # <B>
    def pairMonoid(self, m1: Monoid[_pairMonoid__A], m2: Monoid[_pairMonoid__B]) -> Monoid[scala.Tuple2[_pairMonoid__A, _pairMonoid__B]]: ...
    def pairMonoid$mIIc$sp(self, m1: Monoid[typing.Any], m2: Monoid[typing.Any]) -> Monoid[scala.Tuple2[typing.Any, typing.Any]]: ...
    def pairMonoid$mIJc$sp(self, m1: Monoid[typing.Any], m2: Monoid[typing.Any]) -> Monoid[scala.Tuple2[typing.Any, typing.Any]]: ...
    def pairMonoid$mJIc$sp(self, m1: Monoid[typing.Any], m2: Monoid[typing.Any]) -> Monoid[scala.Tuple2[typing.Any, typing.Any]]: ...
    def pairMonoid$mJJc$sp(self, m1: Monoid[typing.Any], m2: Monoid[typing.Any]) -> Monoid[scala.Tuple2[typing.Any, typing.Any]]: ...

class MonoidInstances:
    @staticmethod
    def $init$($this: 'MonoidInstances') -> None: ...
    class IntPlusMonoid(scalan.Base.Node, Monoids.Monoid[typing.Any]):
        def __init__(self, $outer: scalan.Library, zero: scalan.Base.Ref[typing.Any]): ...
        def mirror(self, t: scalan.Base.Transformer) -> scalan.Base.Ref[Monoids.Monoid[typing.Any]]: ...
        def plus(self, x: scalan.Base.Ref[typing.Any], y: scalan.Base.Ref[typing.Any]) -> scalan.Base.Ref[typing.Any]: ...
        def power(self, x: scalan.Base.Ref[typing.Any], n: scalan.Base.Ref[typing.Any]) -> scalan.Base.Ref[typing.Any]: ...
        def scalan$Base$Def$$_self(self) -> scalan.Base.Ref[Monoids.Monoid[typing.Any]]: ...
        def scalan$Base$Def$$_self_$eq(self, x$1: scalan.Base.Ref[Monoids.Monoid[typing.Any]]) -> None: ...
        def self(self) -> scalan.Base.Ref[Monoids.Monoid[typing.Any]]: ...
        def transform(self, t: scalan.Base.Transformer) -> scalan.Base.Def[Monoids.Monoid[typing.Any]]: ...
        def zero(self) -> scalan.Base.Ref[typing.Any]: ...
    class IntPlusMonoidCompanion: ...
    class LongPlusMonoid(scalan.Base.Node, Monoids.Monoid[typing.Any]):
        def __init__(self, $outer: scalan.Library, zero: scalan.Base.Ref[typing.Any]): ...
        def mirror(self, t: scalan.Base.Transformer) -> scalan.Base.Ref[Monoids.Monoid[typing.Any]]: ...
        def plus(self, x: scalan.Base.Ref[typing.Any], y: scalan.Base.Ref[typing.Any]) -> scalan.Base.Ref[typing.Any]: ...
        def power(self, x: scalan.Base.Ref[typing.Any], n: scalan.Base.Ref[typing.Any]) -> scalan.Base.Ref[typing.Any]: ...
        def scalan$Base$Def$$_self(self) -> scalan.Base.Ref[Monoids.Monoid[typing.Any]]: ...
        def scalan$Base$Def$$_self_$eq(self, x$1: scalan.Base.Ref[Monoids.Monoid[typing.Any]]) -> None: ...
        def self(self) -> scalan.Base.Ref[Monoids.Monoid[typing.Any]]: ...
        def transform(self, t: scalan.Base.Transformer) -> scalan.Base.Def[Monoids.Monoid[typing.Any]]: ...
        def zero(self) -> scalan.Base.Ref[typing.Any]: ...
    class LongPlusMonoidCompanion: ...
    class MonoidBuilderInst(scalan.Base.Node, Monoids.MonoidBuilder):
        def __init__(self, $outer: scalan.Library): ...
        def intPlusMonoid(self) -> scalan.Base.Ref['MonoidInstances.IntPlusMonoid']: ...
        def intPlusMonoid$u0020(self) -> scalan.Base.Ref['MonoidInstances.IntPlusMonoid']: ...
        def longPlusMonoid(self) -> scalan.Base.Ref['MonoidInstances.LongPlusMonoid']: ...
        def longPlusMonoid$u0020(self) -> scalan.Base.Ref['MonoidInstances.LongPlusMonoid']: ...
        def mirror(self, t: scalan.Base.Transformer) -> scalan.Base.Ref[Monoids.MonoidBuilder]: ...
        def scalan$Base$Def$$_self(self) -> scalan.Base.Ref[Monoids.MonoidBuilder]: ...
        def scalan$Base$Def$$_self_$eq(self, x$1: scalan.Base.Ref[Monoids.MonoidBuilder]) -> None: ...
        def self(self) -> scalan.Base.Ref[Monoids.MonoidBuilder]: ...
        def transform(self, t: scalan.Base.Transformer) -> scalan.Base.Def[Monoids.MonoidBuilder]: ...
    class MonoidBuilderInstCompanion: ...

_PairColl__L = typing.TypeVar('_PairColl__L')  # <L>
_PairColl__R = typing.TypeVar('_PairColl__R')  # <R>
class PairColl(Coll[scala.Tuple2[_PairColl__L, _PairColl__R]], typing.Generic[_PairColl__L, _PairColl__R]):
    def ls(self) -> Coll[_PairColl__L]: ...
    def ls$mcB$sp(self) -> Coll[typing.Any]: ...
    def ls$mcC$sp(self) -> Coll[typing.Any]: ...
    def ls$mcD$sp(self) -> Coll[typing.Any]: ...
    def ls$mcF$sp(self) -> Coll[typing.Any]: ...
    def ls$mcI$sp(self) -> Coll[typing.Any]: ...
    def ls$mcJ$sp(self) -> Coll[typing.Any]: ...
    def ls$mcS$sp(self) -> Coll[typing.Any]: ...
    def ls$mcV$sp(self) -> Coll[scala.runtime.BoxedUnit]: ...
    def ls$mcZ$sp(self) -> Coll[typing.Any]: ...
    _mapFirst__T1 = typing.TypeVar('_mapFirst__T1')  # <T1>
    def mapFirst(self, f: scala.Function1[_PairColl__L, _mapFirst__T1], evidence$8: scalan.RType[_mapFirst__T1]) -> Coll[scala.Tuple2[_mapFirst__T1, _PairColl__R]]: ...
    _mapFirst$mcBB$sp__T1 = typing.TypeVar('_mapFirst$mcBB$sp__T1')  # <T1>
    def mapFirst$mcBB$sp(self, f: scala.Function1[typing.Any, _mapFirst.mcBB.sp__T1], evidence$8: scalan.RType[_mapFirst.mcBB.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcBB.sp__T1, typing.Any]]: ...
    _mapFirst$mcBC$sp__T1 = typing.TypeVar('_mapFirst$mcBC$sp__T1')  # <T1>
    def mapFirst$mcBC$sp(self, f: scala.Function1[typing.Any, _mapFirst.mcBC.sp__T1], evidence$8: scalan.RType[_mapFirst.mcBC.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcBC.sp__T1, typing.Any]]: ...
    _mapFirst$mcBD$sp__T1 = typing.TypeVar('_mapFirst$mcBD$sp__T1')  # <T1>
    def mapFirst$mcBD$sp(self, f: scala.Function1[typing.Any, _mapFirst.mcBD.sp__T1], evidence$8: scalan.RType[_mapFirst.mcBD.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcBD.sp__T1, typing.Any]]: ...
    _mapFirst$mcBF$sp__T1 = typing.TypeVar('_mapFirst$mcBF$sp__T1')  # <T1>
    def mapFirst$mcBF$sp(self, f: scala.Function1[typing.Any, _mapFirst.mcBF.sp__T1], evidence$8: scalan.RType[_mapFirst.mcBF.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcBF.sp__T1, typing.Any]]: ...
    _mapFirst$mcBI$sp__T1 = typing.TypeVar('_mapFirst$mcBI$sp__T1')  # <T1>
    def mapFirst$mcBI$sp(self, f: scala.Function1[typing.Any, _mapFirst.mcBI.sp__T1], evidence$8: scalan.RType[_mapFirst.mcBI.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcBI.sp__T1, typing.Any]]: ...
    _mapFirst$mcBJ$sp__T1 = typing.TypeVar('_mapFirst$mcBJ$sp__T1')  # <T1>
    def mapFirst$mcBJ$sp(self, f: scala.Function1[typing.Any, _mapFirst.mcBJ.sp__T1], evidence$8: scalan.RType[_mapFirst.mcBJ.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcBJ.sp__T1, typing.Any]]: ...
    _mapFirst$mcBS$sp__T1 = typing.TypeVar('_mapFirst$mcBS$sp__T1')  # <T1>
    def mapFirst$mcBS$sp(self, f: scala.Function1[typing.Any, _mapFirst.mcBS.sp__T1], evidence$8: scalan.RType[_mapFirst.mcBS.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcBS.sp__T1, typing.Any]]: ...
    _mapFirst$mcBV$sp__T1 = typing.TypeVar('_mapFirst$mcBV$sp__T1')  # <T1>
    def mapFirst$mcBV$sp(self, f: scala.Function1[typing.Any, _mapFirst.mcBV.sp__T1], evidence$8: scalan.RType[_mapFirst.mcBV.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcBV.sp__T1, scala.runtime.BoxedUnit]]: ...
    _mapFirst$mcBZ$sp__T1 = typing.TypeVar('_mapFirst$mcBZ$sp__T1')  # <T1>
    def mapFirst$mcBZ$sp(self, f: scala.Function1[typing.Any, _mapFirst.mcBZ.sp__T1], evidence$8: scalan.RType[_mapFirst.mcBZ.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcBZ.sp__T1, typing.Any]]: ...
    _mapFirst$mcCB$sp__T1 = typing.TypeVar('_mapFirst$mcCB$sp__T1')  # <T1>
    def mapFirst$mcCB$sp(self, f: scala.Function1[typing.Any, _mapFirst.mcCB.sp__T1], evidence$8: scalan.RType[_mapFirst.mcCB.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcCB.sp__T1, typing.Any]]: ...
    _mapFirst$mcCC$sp__T1 = typing.TypeVar('_mapFirst$mcCC$sp__T1')  # <T1>
    def mapFirst$mcCC$sp(self, f: scala.Function1[typing.Any, _mapFirst.mcCC.sp__T1], evidence$8: scalan.RType[_mapFirst.mcCC.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcCC.sp__T1, typing.Any]]: ...
    _mapFirst$mcCD$sp__T1 = typing.TypeVar('_mapFirst$mcCD$sp__T1')  # <T1>
    def mapFirst$mcCD$sp(self, f: scala.Function1[typing.Any, _mapFirst.mcCD.sp__T1], evidence$8: scalan.RType[_mapFirst.mcCD.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcCD.sp__T1, typing.Any]]: ...
    _mapFirst$mcCF$sp__T1 = typing.TypeVar('_mapFirst$mcCF$sp__T1')  # <T1>
    def mapFirst$mcCF$sp(self, f: scala.Function1[typing.Any, _mapFirst.mcCF.sp__T1], evidence$8: scalan.RType[_mapFirst.mcCF.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcCF.sp__T1, typing.Any]]: ...
    _mapFirst$mcCI$sp__T1 = typing.TypeVar('_mapFirst$mcCI$sp__T1')  # <T1>
    def mapFirst$mcCI$sp(self, f: scala.Function1[typing.Any, _mapFirst.mcCI.sp__T1], evidence$8: scalan.RType[_mapFirst.mcCI.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcCI.sp__T1, typing.Any]]: ...
    _mapFirst$mcCJ$sp__T1 = typing.TypeVar('_mapFirst$mcCJ$sp__T1')  # <T1>
    def mapFirst$mcCJ$sp(self, f: scala.Function1[typing.Any, _mapFirst.mcCJ.sp__T1], evidence$8: scalan.RType[_mapFirst.mcCJ.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcCJ.sp__T1, typing.Any]]: ...
    _mapFirst$mcCS$sp__T1 = typing.TypeVar('_mapFirst$mcCS$sp__T1')  # <T1>
    def mapFirst$mcCS$sp(self, f: scala.Function1[typing.Any, _mapFirst.mcCS.sp__T1], evidence$8: scalan.RType[_mapFirst.mcCS.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcCS.sp__T1, typing.Any]]: ...
    _mapFirst$mcCV$sp__T1 = typing.TypeVar('_mapFirst$mcCV$sp__T1')  # <T1>
    def mapFirst$mcCV$sp(self, f: scala.Function1[typing.Any, _mapFirst.mcCV.sp__T1], evidence$8: scalan.RType[_mapFirst.mcCV.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcCV.sp__T1, scala.runtime.BoxedUnit]]: ...
    _mapFirst$mcCZ$sp__T1 = typing.TypeVar('_mapFirst$mcCZ$sp__T1')  # <T1>
    def mapFirst$mcCZ$sp(self, f: scala.Function1[typing.Any, _mapFirst.mcCZ.sp__T1], evidence$8: scalan.RType[_mapFirst.mcCZ.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcCZ.sp__T1, typing.Any]]: ...
    _mapFirst$mcDB$sp__T1 = typing.TypeVar('_mapFirst$mcDB$sp__T1')  # <T1>
    def mapFirst$mcDB$sp(self, f: scala.Function1[typing.Any, _mapFirst.mcDB.sp__T1], evidence$8: scalan.RType[_mapFirst.mcDB.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcDB.sp__T1, typing.Any]]: ...
    _mapFirst$mcDC$sp__T1 = typing.TypeVar('_mapFirst$mcDC$sp__T1')  # <T1>
    def mapFirst$mcDC$sp(self, f: scala.Function1[typing.Any, _mapFirst.mcDC.sp__T1], evidence$8: scalan.RType[_mapFirst.mcDC.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcDC.sp__T1, typing.Any]]: ...
    _mapFirst$mcDD$sp__T1 = typing.TypeVar('_mapFirst$mcDD$sp__T1')  # <T1>
    def mapFirst$mcDD$sp(self, f: scala.Function1[typing.Any, _mapFirst.mcDD.sp__T1], evidence$8: scalan.RType[_mapFirst.mcDD.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcDD.sp__T1, typing.Any]]: ...
    _mapFirst$mcDF$sp__T1 = typing.TypeVar('_mapFirst$mcDF$sp__T1')  # <T1>
    def mapFirst$mcDF$sp(self, f: scala.Function1[typing.Any, _mapFirst.mcDF.sp__T1], evidence$8: scalan.RType[_mapFirst.mcDF.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcDF.sp__T1, typing.Any]]: ...
    _mapFirst$mcDI$sp__T1 = typing.TypeVar('_mapFirst$mcDI$sp__T1')  # <T1>
    def mapFirst$mcDI$sp(self, f: scala.Function1[typing.Any, _mapFirst.mcDI.sp__T1], evidence$8: scalan.RType[_mapFirst.mcDI.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcDI.sp__T1, typing.Any]]: ...
    _mapFirst$mcDJ$sp__T1 = typing.TypeVar('_mapFirst$mcDJ$sp__T1')  # <T1>
    def mapFirst$mcDJ$sp(self, f: scala.Function1[typing.Any, _mapFirst.mcDJ.sp__T1], evidence$8: scalan.RType[_mapFirst.mcDJ.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcDJ.sp__T1, typing.Any]]: ...
    _mapFirst$mcDS$sp__T1 = typing.TypeVar('_mapFirst$mcDS$sp__T1')  # <T1>
    def mapFirst$mcDS$sp(self, f: scala.Function1[typing.Any, _mapFirst.mcDS.sp__T1], evidence$8: scalan.RType[_mapFirst.mcDS.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcDS.sp__T1, typing.Any]]: ...
    _mapFirst$mcDV$sp__T1 = typing.TypeVar('_mapFirst$mcDV$sp__T1')  # <T1>
    def mapFirst$mcDV$sp(self, f: scala.Function1[typing.Any, _mapFirst.mcDV.sp__T1], evidence$8: scalan.RType[_mapFirst.mcDV.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcDV.sp__T1, scala.runtime.BoxedUnit]]: ...
    _mapFirst$mcDZ$sp__T1 = typing.TypeVar('_mapFirst$mcDZ$sp__T1')  # <T1>
    def mapFirst$mcDZ$sp(self, f: scala.Function1[typing.Any, _mapFirst.mcDZ.sp__T1], evidence$8: scalan.RType[_mapFirst.mcDZ.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcDZ.sp__T1, typing.Any]]: ...
    _mapFirst$mcFB$sp__T1 = typing.TypeVar('_mapFirst$mcFB$sp__T1')  # <T1>
    def mapFirst$mcFB$sp(self, f: scala.Function1[typing.Any, _mapFirst.mcFB.sp__T1], evidence$8: scalan.RType[_mapFirst.mcFB.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcFB.sp__T1, typing.Any]]: ...
    _mapFirst$mcFC$sp__T1 = typing.TypeVar('_mapFirst$mcFC$sp__T1')  # <T1>
    def mapFirst$mcFC$sp(self, f: scala.Function1[typing.Any, _mapFirst.mcFC.sp__T1], evidence$8: scalan.RType[_mapFirst.mcFC.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcFC.sp__T1, typing.Any]]: ...
    _mapFirst$mcFD$sp__T1 = typing.TypeVar('_mapFirst$mcFD$sp__T1')  # <T1>
    def mapFirst$mcFD$sp(self, f: scala.Function1[typing.Any, _mapFirst.mcFD.sp__T1], evidence$8: scalan.RType[_mapFirst.mcFD.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcFD.sp__T1, typing.Any]]: ...
    _mapFirst$mcFF$sp__T1 = typing.TypeVar('_mapFirst$mcFF$sp__T1')  # <T1>
    def mapFirst$mcFF$sp(self, f: scala.Function1[typing.Any, _mapFirst.mcFF.sp__T1], evidence$8: scalan.RType[_mapFirst.mcFF.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcFF.sp__T1, typing.Any]]: ...
    _mapFirst$mcFI$sp__T1 = typing.TypeVar('_mapFirst$mcFI$sp__T1')  # <T1>
    def mapFirst$mcFI$sp(self, f: scala.Function1[typing.Any, _mapFirst.mcFI.sp__T1], evidence$8: scalan.RType[_mapFirst.mcFI.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcFI.sp__T1, typing.Any]]: ...
    _mapFirst$mcFJ$sp__T1 = typing.TypeVar('_mapFirst$mcFJ$sp__T1')  # <T1>
    def mapFirst$mcFJ$sp(self, f: scala.Function1[typing.Any, _mapFirst.mcFJ.sp__T1], evidence$8: scalan.RType[_mapFirst.mcFJ.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcFJ.sp__T1, typing.Any]]: ...
    _mapFirst$mcFS$sp__T1 = typing.TypeVar('_mapFirst$mcFS$sp__T1')  # <T1>
    def mapFirst$mcFS$sp(self, f: scala.Function1[typing.Any, _mapFirst.mcFS.sp__T1], evidence$8: scalan.RType[_mapFirst.mcFS.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcFS.sp__T1, typing.Any]]: ...
    _mapFirst$mcFV$sp__T1 = typing.TypeVar('_mapFirst$mcFV$sp__T1')  # <T1>
    def mapFirst$mcFV$sp(self, f: scala.Function1[typing.Any, _mapFirst.mcFV.sp__T1], evidence$8: scalan.RType[_mapFirst.mcFV.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcFV.sp__T1, scala.runtime.BoxedUnit]]: ...
    _mapFirst$mcFZ$sp__T1 = typing.TypeVar('_mapFirst$mcFZ$sp__T1')  # <T1>
    def mapFirst$mcFZ$sp(self, f: scala.Function1[typing.Any, _mapFirst.mcFZ.sp__T1], evidence$8: scalan.RType[_mapFirst.mcFZ.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcFZ.sp__T1, typing.Any]]: ...
    _mapFirst$mcIB$sp__T1 = typing.TypeVar('_mapFirst$mcIB$sp__T1')  # <T1>
    def mapFirst$mcIB$sp(self, f: scala.Function1[typing.Any, _mapFirst.mcIB.sp__T1], evidence$8: scalan.RType[_mapFirst.mcIB.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcIB.sp__T1, typing.Any]]: ...
    _mapFirst$mcIC$sp__T1 = typing.TypeVar('_mapFirst$mcIC$sp__T1')  # <T1>
    def mapFirst$mcIC$sp(self, f: scala.Function1[typing.Any, _mapFirst.mcIC.sp__T1], evidence$8: scalan.RType[_mapFirst.mcIC.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcIC.sp__T1, typing.Any]]: ...
    _mapFirst$mcID$sp__T1 = typing.TypeVar('_mapFirst$mcID$sp__T1')  # <T1>
    def mapFirst$mcID$sp(self, f: scala.Function1[typing.Any, _mapFirst.mcID.sp__T1], evidence$8: scalan.RType[_mapFirst.mcID.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcID.sp__T1, typing.Any]]: ...
    _mapFirst$mcIF$sp__T1 = typing.TypeVar('_mapFirst$mcIF$sp__T1')  # <T1>
    def mapFirst$mcIF$sp(self, f: scala.Function1[typing.Any, _mapFirst.mcIF.sp__T1], evidence$8: scalan.RType[_mapFirst.mcIF.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcIF.sp__T1, typing.Any]]: ...
    _mapFirst$mcII$sp__T1 = typing.TypeVar('_mapFirst$mcII$sp__T1')  # <T1>
    def mapFirst$mcII$sp(self, f: scala.Function1[typing.Any, _mapFirst.mcII.sp__T1], evidence$8: scalan.RType[_mapFirst.mcII.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcII.sp__T1, typing.Any]]: ...
    _mapFirst$mcIJ$sp__T1 = typing.TypeVar('_mapFirst$mcIJ$sp__T1')  # <T1>
    def mapFirst$mcIJ$sp(self, f: scala.Function1[typing.Any, _mapFirst.mcIJ.sp__T1], evidence$8: scalan.RType[_mapFirst.mcIJ.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcIJ.sp__T1, typing.Any]]: ...
    _mapFirst$mcIS$sp__T1 = typing.TypeVar('_mapFirst$mcIS$sp__T1')  # <T1>
    def mapFirst$mcIS$sp(self, f: scala.Function1[typing.Any, _mapFirst.mcIS.sp__T1], evidence$8: scalan.RType[_mapFirst.mcIS.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcIS.sp__T1, typing.Any]]: ...
    _mapFirst$mcIV$sp__T1 = typing.TypeVar('_mapFirst$mcIV$sp__T1')  # <T1>
    def mapFirst$mcIV$sp(self, f: scala.Function1[typing.Any, _mapFirst.mcIV.sp__T1], evidence$8: scalan.RType[_mapFirst.mcIV.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcIV.sp__T1, scala.runtime.BoxedUnit]]: ...
    _mapFirst$mcIZ$sp__T1 = typing.TypeVar('_mapFirst$mcIZ$sp__T1')  # <T1>
    def mapFirst$mcIZ$sp(self, f: scala.Function1[typing.Any, _mapFirst.mcIZ.sp__T1], evidence$8: scalan.RType[_mapFirst.mcIZ.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcIZ.sp__T1, typing.Any]]: ...
    _mapFirst$mcJB$sp__T1 = typing.TypeVar('_mapFirst$mcJB$sp__T1')  # <T1>
    def mapFirst$mcJB$sp(self, f: scala.Function1[typing.Any, _mapFirst.mcJB.sp__T1], evidence$8: scalan.RType[_mapFirst.mcJB.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcJB.sp__T1, typing.Any]]: ...
    _mapFirst$mcJC$sp__T1 = typing.TypeVar('_mapFirst$mcJC$sp__T1')  # <T1>
    def mapFirst$mcJC$sp(self, f: scala.Function1[typing.Any, _mapFirst.mcJC.sp__T1], evidence$8: scalan.RType[_mapFirst.mcJC.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcJC.sp__T1, typing.Any]]: ...
    _mapFirst$mcJD$sp__T1 = typing.TypeVar('_mapFirst$mcJD$sp__T1')  # <T1>
    def mapFirst$mcJD$sp(self, f: scala.Function1[typing.Any, _mapFirst.mcJD.sp__T1], evidence$8: scalan.RType[_mapFirst.mcJD.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcJD.sp__T1, typing.Any]]: ...
    _mapFirst$mcJF$sp__T1 = typing.TypeVar('_mapFirst$mcJF$sp__T1')  # <T1>
    def mapFirst$mcJF$sp(self, f: scala.Function1[typing.Any, _mapFirst.mcJF.sp__T1], evidence$8: scalan.RType[_mapFirst.mcJF.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcJF.sp__T1, typing.Any]]: ...
    _mapFirst$mcJI$sp__T1 = typing.TypeVar('_mapFirst$mcJI$sp__T1')  # <T1>
    def mapFirst$mcJI$sp(self, f: scala.Function1[typing.Any, _mapFirst.mcJI.sp__T1], evidence$8: scalan.RType[_mapFirst.mcJI.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcJI.sp__T1, typing.Any]]: ...
    _mapFirst$mcJJ$sp__T1 = typing.TypeVar('_mapFirst$mcJJ$sp__T1')  # <T1>
    def mapFirst$mcJJ$sp(self, f: scala.Function1[typing.Any, _mapFirst.mcJJ.sp__T1], evidence$8: scalan.RType[_mapFirst.mcJJ.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcJJ.sp__T1, typing.Any]]: ...
    _mapFirst$mcJS$sp__T1 = typing.TypeVar('_mapFirst$mcJS$sp__T1')  # <T1>
    def mapFirst$mcJS$sp(self, f: scala.Function1[typing.Any, _mapFirst.mcJS.sp__T1], evidence$8: scalan.RType[_mapFirst.mcJS.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcJS.sp__T1, typing.Any]]: ...
    _mapFirst$mcJV$sp__T1 = typing.TypeVar('_mapFirst$mcJV$sp__T1')  # <T1>
    def mapFirst$mcJV$sp(self, f: scala.Function1[typing.Any, _mapFirst.mcJV.sp__T1], evidence$8: scalan.RType[_mapFirst.mcJV.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcJV.sp__T1, scala.runtime.BoxedUnit]]: ...
    _mapFirst$mcJZ$sp__T1 = typing.TypeVar('_mapFirst$mcJZ$sp__T1')  # <T1>
    def mapFirst$mcJZ$sp(self, f: scala.Function1[typing.Any, _mapFirst.mcJZ.sp__T1], evidence$8: scalan.RType[_mapFirst.mcJZ.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcJZ.sp__T1, typing.Any]]: ...
    _mapFirst$mcSB$sp__T1 = typing.TypeVar('_mapFirst$mcSB$sp__T1')  # <T1>
    def mapFirst$mcSB$sp(self, f: scala.Function1[typing.Any, _mapFirst.mcSB.sp__T1], evidence$8: scalan.RType[_mapFirst.mcSB.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcSB.sp__T1, typing.Any]]: ...
    _mapFirst$mcSC$sp__T1 = typing.TypeVar('_mapFirst$mcSC$sp__T1')  # <T1>
    def mapFirst$mcSC$sp(self, f: scala.Function1[typing.Any, _mapFirst.mcSC.sp__T1], evidence$8: scalan.RType[_mapFirst.mcSC.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcSC.sp__T1, typing.Any]]: ...
    _mapFirst$mcSD$sp__T1 = typing.TypeVar('_mapFirst$mcSD$sp__T1')  # <T1>
    def mapFirst$mcSD$sp(self, f: scala.Function1[typing.Any, _mapFirst.mcSD.sp__T1], evidence$8: scalan.RType[_mapFirst.mcSD.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcSD.sp__T1, typing.Any]]: ...
    _mapFirst$mcSF$sp__T1 = typing.TypeVar('_mapFirst$mcSF$sp__T1')  # <T1>
    def mapFirst$mcSF$sp(self, f: scala.Function1[typing.Any, _mapFirst.mcSF.sp__T1], evidence$8: scalan.RType[_mapFirst.mcSF.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcSF.sp__T1, typing.Any]]: ...
    _mapFirst$mcSI$sp__T1 = typing.TypeVar('_mapFirst$mcSI$sp__T1')  # <T1>
    def mapFirst$mcSI$sp(self, f: scala.Function1[typing.Any, _mapFirst.mcSI.sp__T1], evidence$8: scalan.RType[_mapFirst.mcSI.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcSI.sp__T1, typing.Any]]: ...
    _mapFirst$mcSJ$sp__T1 = typing.TypeVar('_mapFirst$mcSJ$sp__T1')  # <T1>
    def mapFirst$mcSJ$sp(self, f: scala.Function1[typing.Any, _mapFirst.mcSJ.sp__T1], evidence$8: scalan.RType[_mapFirst.mcSJ.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcSJ.sp__T1, typing.Any]]: ...
    _mapFirst$mcSS$sp__T1 = typing.TypeVar('_mapFirst$mcSS$sp__T1')  # <T1>
    def mapFirst$mcSS$sp(self, f: scala.Function1[typing.Any, _mapFirst.mcSS.sp__T1], evidence$8: scalan.RType[_mapFirst.mcSS.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcSS.sp__T1, typing.Any]]: ...
    _mapFirst$mcSV$sp__T1 = typing.TypeVar('_mapFirst$mcSV$sp__T1')  # <T1>
    def mapFirst$mcSV$sp(self, f: scala.Function1[typing.Any, _mapFirst.mcSV.sp__T1], evidence$8: scalan.RType[_mapFirst.mcSV.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcSV.sp__T1, scala.runtime.BoxedUnit]]: ...
    _mapFirst$mcSZ$sp__T1 = typing.TypeVar('_mapFirst$mcSZ$sp__T1')  # <T1>
    def mapFirst$mcSZ$sp(self, f: scala.Function1[typing.Any, _mapFirst.mcSZ.sp__T1], evidence$8: scalan.RType[_mapFirst.mcSZ.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcSZ.sp__T1, typing.Any]]: ...
    _mapFirst$mcVB$sp__T1 = typing.TypeVar('_mapFirst$mcVB$sp__T1')  # <T1>
    def mapFirst$mcVB$sp(self, f: scala.Function1[scala.runtime.BoxedUnit, _mapFirst.mcVB.sp__T1], evidence$8: scalan.RType[_mapFirst.mcVB.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcVB.sp__T1, typing.Any]]: ...
    _mapFirst$mcVC$sp__T1 = typing.TypeVar('_mapFirst$mcVC$sp__T1')  # <T1>
    def mapFirst$mcVC$sp(self, f: scala.Function1[scala.runtime.BoxedUnit, _mapFirst.mcVC.sp__T1], evidence$8: scalan.RType[_mapFirst.mcVC.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcVC.sp__T1, typing.Any]]: ...
    _mapFirst$mcVD$sp__T1 = typing.TypeVar('_mapFirst$mcVD$sp__T1')  # <T1>
    def mapFirst$mcVD$sp(self, f: scala.Function1[scala.runtime.BoxedUnit, _mapFirst.mcVD.sp__T1], evidence$8: scalan.RType[_mapFirst.mcVD.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcVD.sp__T1, typing.Any]]: ...
    _mapFirst$mcVF$sp__T1 = typing.TypeVar('_mapFirst$mcVF$sp__T1')  # <T1>
    def mapFirst$mcVF$sp(self, f: scala.Function1[scala.runtime.BoxedUnit, _mapFirst.mcVF.sp__T1], evidence$8: scalan.RType[_mapFirst.mcVF.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcVF.sp__T1, typing.Any]]: ...
    _mapFirst$mcVI$sp__T1 = typing.TypeVar('_mapFirst$mcVI$sp__T1')  # <T1>
    def mapFirst$mcVI$sp(self, f: scala.Function1[scala.runtime.BoxedUnit, _mapFirst.mcVI.sp__T1], evidence$8: scalan.RType[_mapFirst.mcVI.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcVI.sp__T1, typing.Any]]: ...
    _mapFirst$mcVJ$sp__T1 = typing.TypeVar('_mapFirst$mcVJ$sp__T1')  # <T1>
    def mapFirst$mcVJ$sp(self, f: scala.Function1[scala.runtime.BoxedUnit, _mapFirst.mcVJ.sp__T1], evidence$8: scalan.RType[_mapFirst.mcVJ.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcVJ.sp__T1, typing.Any]]: ...
    _mapFirst$mcVS$sp__T1 = typing.TypeVar('_mapFirst$mcVS$sp__T1')  # <T1>
    def mapFirst$mcVS$sp(self, f: scala.Function1[scala.runtime.BoxedUnit, _mapFirst.mcVS.sp__T1], evidence$8: scalan.RType[_mapFirst.mcVS.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcVS.sp__T1, typing.Any]]: ...
    _mapFirst$mcVV$sp__T1 = typing.TypeVar('_mapFirst$mcVV$sp__T1')  # <T1>
    def mapFirst$mcVV$sp(self, f: scala.Function1[scala.runtime.BoxedUnit, _mapFirst.mcVV.sp__T1], evidence$8: scalan.RType[_mapFirst.mcVV.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcVV.sp__T1, scala.runtime.BoxedUnit]]: ...
    _mapFirst$mcVZ$sp__T1 = typing.TypeVar('_mapFirst$mcVZ$sp__T1')  # <T1>
    def mapFirst$mcVZ$sp(self, f: scala.Function1[scala.runtime.BoxedUnit, _mapFirst.mcVZ.sp__T1], evidence$8: scalan.RType[_mapFirst.mcVZ.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcVZ.sp__T1, typing.Any]]: ...
    _mapFirst$mcZB$sp__T1 = typing.TypeVar('_mapFirst$mcZB$sp__T1')  # <T1>
    def mapFirst$mcZB$sp(self, f: scala.Function1[typing.Any, _mapFirst.mcZB.sp__T1], evidence$8: scalan.RType[_mapFirst.mcZB.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcZB.sp__T1, typing.Any]]: ...
    _mapFirst$mcZC$sp__T1 = typing.TypeVar('_mapFirst$mcZC$sp__T1')  # <T1>
    def mapFirst$mcZC$sp(self, f: scala.Function1[typing.Any, _mapFirst.mcZC.sp__T1], evidence$8: scalan.RType[_mapFirst.mcZC.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcZC.sp__T1, typing.Any]]: ...
    _mapFirst$mcZD$sp__T1 = typing.TypeVar('_mapFirst$mcZD$sp__T1')  # <T1>
    def mapFirst$mcZD$sp(self, f: scala.Function1[typing.Any, _mapFirst.mcZD.sp__T1], evidence$8: scalan.RType[_mapFirst.mcZD.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcZD.sp__T1, typing.Any]]: ...
    _mapFirst$mcZF$sp__T1 = typing.TypeVar('_mapFirst$mcZF$sp__T1')  # <T1>
    def mapFirst$mcZF$sp(self, f: scala.Function1[typing.Any, _mapFirst.mcZF.sp__T1], evidence$8: scalan.RType[_mapFirst.mcZF.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcZF.sp__T1, typing.Any]]: ...
    _mapFirst$mcZI$sp__T1 = typing.TypeVar('_mapFirst$mcZI$sp__T1')  # <T1>
    def mapFirst$mcZI$sp(self, f: scala.Function1[typing.Any, _mapFirst.mcZI.sp__T1], evidence$8: scalan.RType[_mapFirst.mcZI.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcZI.sp__T1, typing.Any]]: ...
    _mapFirst$mcZJ$sp__T1 = typing.TypeVar('_mapFirst$mcZJ$sp__T1')  # <T1>
    def mapFirst$mcZJ$sp(self, f: scala.Function1[typing.Any, _mapFirst.mcZJ.sp__T1], evidence$8: scalan.RType[_mapFirst.mcZJ.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcZJ.sp__T1, typing.Any]]: ...
    _mapFirst$mcZS$sp__T1 = typing.TypeVar('_mapFirst$mcZS$sp__T1')  # <T1>
    def mapFirst$mcZS$sp(self, f: scala.Function1[typing.Any, _mapFirst.mcZS.sp__T1], evidence$8: scalan.RType[_mapFirst.mcZS.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcZS.sp__T1, typing.Any]]: ...
    _mapFirst$mcZV$sp__T1 = typing.TypeVar('_mapFirst$mcZV$sp__T1')  # <T1>
    def mapFirst$mcZV$sp(self, f: scala.Function1[typing.Any, _mapFirst.mcZV.sp__T1], evidence$8: scalan.RType[_mapFirst.mcZV.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcZV.sp__T1, scala.runtime.BoxedUnit]]: ...
    _mapFirst$mcZZ$sp__T1 = typing.TypeVar('_mapFirst$mcZZ$sp__T1')  # <T1>
    def mapFirst$mcZZ$sp(self, f: scala.Function1[typing.Any, _mapFirst.mcZZ.sp__T1], evidence$8: scalan.RType[_mapFirst.mcZZ.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcZZ.sp__T1, typing.Any]]: ...
    _mapSecond__T1 = typing.TypeVar('_mapSecond__T1')  # <T1>
    def mapSecond(self, f: scala.Function1[_PairColl__R, _mapSecond__T1], evidence$9: scalan.RType[_mapSecond__T1]) -> Coll[scala.Tuple2[_PairColl__L, _mapSecond__T1]]: ...
    _mapSecond$mcBB$sp__T1 = typing.TypeVar('_mapSecond$mcBB$sp__T1')  # <T1>
    def mapSecond$mcBB$sp(self, f: scala.Function1[typing.Any, _mapSecond.mcBB.sp__T1], evidence$9: scalan.RType[_mapSecond.mcBB.sp__T1]) -> Coll[scala.Tuple2[typing.Any, _mapSecond.mcBB.sp__T1]]: ...
    _mapSecond$mcBC$sp__T1 = typing.TypeVar('_mapSecond$mcBC$sp__T1')  # <T1>
    def mapSecond$mcBC$sp(self, f: scala.Function1[typing.Any, _mapSecond.mcBC.sp__T1], evidence$9: scalan.RType[_mapSecond.mcBC.sp__T1]) -> Coll[scala.Tuple2[typing.Any, _mapSecond.mcBC.sp__T1]]: ...
    _mapSecond$mcBD$sp__T1 = typing.TypeVar('_mapSecond$mcBD$sp__T1')  # <T1>
    def mapSecond$mcBD$sp(self, f: scala.Function1[typing.Any, _mapSecond.mcBD.sp__T1], evidence$9: scalan.RType[_mapSecond.mcBD.sp__T1]) -> Coll[scala.Tuple2[typing.Any, _mapSecond.mcBD.sp__T1]]: ...
    _mapSecond$mcBF$sp__T1 = typing.TypeVar('_mapSecond$mcBF$sp__T1')  # <T1>
    def mapSecond$mcBF$sp(self, f: scala.Function1[typing.Any, _mapSecond.mcBF.sp__T1], evidence$9: scalan.RType[_mapSecond.mcBF.sp__T1]) -> Coll[scala.Tuple2[typing.Any, _mapSecond.mcBF.sp__T1]]: ...
    _mapSecond$mcBI$sp__T1 = typing.TypeVar('_mapSecond$mcBI$sp__T1')  # <T1>
    def mapSecond$mcBI$sp(self, f: scala.Function1[typing.Any, _mapSecond.mcBI.sp__T1], evidence$9: scalan.RType[_mapSecond.mcBI.sp__T1]) -> Coll[scala.Tuple2[typing.Any, _mapSecond.mcBI.sp__T1]]: ...
    _mapSecond$mcBJ$sp__T1 = typing.TypeVar('_mapSecond$mcBJ$sp__T1')  # <T1>
    def mapSecond$mcBJ$sp(self, f: scala.Function1[typing.Any, _mapSecond.mcBJ.sp__T1], evidence$9: scalan.RType[_mapSecond.mcBJ.sp__T1]) -> Coll[scala.Tuple2[typing.Any, _mapSecond.mcBJ.sp__T1]]: ...
    _mapSecond$mcBS$sp__T1 = typing.TypeVar('_mapSecond$mcBS$sp__T1')  # <T1>
    def mapSecond$mcBS$sp(self, f: scala.Function1[typing.Any, _mapSecond.mcBS.sp__T1], evidence$9: scalan.RType[_mapSecond.mcBS.sp__T1]) -> Coll[scala.Tuple2[typing.Any, _mapSecond.mcBS.sp__T1]]: ...
    _mapSecond$mcBV$sp__T1 = typing.TypeVar('_mapSecond$mcBV$sp__T1')  # <T1>
    def mapSecond$mcBV$sp(self, f: scala.Function1[scala.runtime.BoxedUnit, _mapSecond.mcBV.sp__T1], evidence$9: scalan.RType[_mapSecond.mcBV.sp__T1]) -> Coll[scala.Tuple2[typing.Any, _mapSecond.mcBV.sp__T1]]: ...
    _mapSecond$mcBZ$sp__T1 = typing.TypeVar('_mapSecond$mcBZ$sp__T1')  # <T1>
    def mapSecond$mcBZ$sp(self, f: scala.Function1[typing.Any, _mapSecond.mcBZ.sp__T1], evidence$9: scalan.RType[_mapSecond.mcBZ.sp__T1]) -> Coll[scala.Tuple2[typing.Any, _mapSecond.mcBZ.sp__T1]]: ...
    _mapSecond$mcCB$sp__T1 = typing.TypeVar('_mapSecond$mcCB$sp__T1')  # <T1>
    def mapSecond$mcCB$sp(self, f: scala.Function1[typing.Any, _mapSecond.mcCB.sp__T1], evidence$9: scalan.RType[_mapSecond.mcCB.sp__T1]) -> Coll[scala.Tuple2[typing.Any, _mapSecond.mcCB.sp__T1]]: ...
    _mapSecond$mcCC$sp__T1 = typing.TypeVar('_mapSecond$mcCC$sp__T1')  # <T1>
    def mapSecond$mcCC$sp(self, f: scala.Function1[typing.Any, _mapSecond.mcCC.sp__T1], evidence$9: scalan.RType[_mapSecond.mcCC.sp__T1]) -> Coll[scala.Tuple2[typing.Any, _mapSecond.mcCC.sp__T1]]: ...
    _mapSecond$mcCD$sp__T1 = typing.TypeVar('_mapSecond$mcCD$sp__T1')  # <T1>
    def mapSecond$mcCD$sp(self, f: scala.Function1[typing.Any, _mapSecond.mcCD.sp__T1], evidence$9: scalan.RType[_mapSecond.mcCD.sp__T1]) -> Coll[scala.Tuple2[typing.Any, _mapSecond.mcCD.sp__T1]]: ...
    _mapSecond$mcCF$sp__T1 = typing.TypeVar('_mapSecond$mcCF$sp__T1')  # <T1>
    def mapSecond$mcCF$sp(self, f: scala.Function1[typing.Any, _mapSecond.mcCF.sp__T1], evidence$9: scalan.RType[_mapSecond.mcCF.sp__T1]) -> Coll[scala.Tuple2[typing.Any, _mapSecond.mcCF.sp__T1]]: ...
    _mapSecond$mcCI$sp__T1 = typing.TypeVar('_mapSecond$mcCI$sp__T1')  # <T1>
    def mapSecond$mcCI$sp(self, f: scala.Function1[typing.Any, _mapSecond.mcCI.sp__T1], evidence$9: scalan.RType[_mapSecond.mcCI.sp__T1]) -> Coll[scala.Tuple2[typing.Any, _mapSecond.mcCI.sp__T1]]: ...
    _mapSecond$mcCJ$sp__T1 = typing.TypeVar('_mapSecond$mcCJ$sp__T1')  # <T1>
    def mapSecond$mcCJ$sp(self, f: scala.Function1[typing.Any, _mapSecond.mcCJ.sp__T1], evidence$9: scalan.RType[_mapSecond.mcCJ.sp__T1]) -> Coll[scala.Tuple2[typing.Any, _mapSecond.mcCJ.sp__T1]]: ...
    _mapSecond$mcCS$sp__T1 = typing.TypeVar('_mapSecond$mcCS$sp__T1')  # <T1>
    def mapSecond$mcCS$sp(self, f: scala.Function1[typing.Any, _mapSecond.mcCS.sp__T1], evidence$9: scalan.RType[_mapSecond.mcCS.sp__T1]) -> Coll[scala.Tuple2[typing.Any, _mapSecond.mcCS.sp__T1]]: ...
    _mapSecond$mcCV$sp__T1 = typing.TypeVar('_mapSecond$mcCV$sp__T1')  # <T1>
    def mapSecond$mcCV$sp(self, f: scala.Function1[scala.runtime.BoxedUnit, _mapSecond.mcCV.sp__T1], evidence$9: scalan.RType[_mapSecond.mcCV.sp__T1]) -> Coll[scala.Tuple2[typing.Any, _mapSecond.mcCV.sp__T1]]: ...
    _mapSecond$mcCZ$sp__T1 = typing.TypeVar('_mapSecond$mcCZ$sp__T1')  # <T1>
    def mapSecond$mcCZ$sp(self, f: scala.Function1[typing.Any, _mapSecond.mcCZ.sp__T1], evidence$9: scalan.RType[_mapSecond.mcCZ.sp__T1]) -> Coll[scala.Tuple2[typing.Any, _mapSecond.mcCZ.sp__T1]]: ...
    _mapSecond$mcDB$sp__T1 = typing.TypeVar('_mapSecond$mcDB$sp__T1')  # <T1>
    def mapSecond$mcDB$sp(self, f: scala.Function1[typing.Any, _mapSecond.mcDB.sp__T1], evidence$9: scalan.RType[_mapSecond.mcDB.sp__T1]) -> Coll[scala.Tuple2[typing.Any, _mapSecond.mcDB.sp__T1]]: ...
    _mapSecond$mcDC$sp__T1 = typing.TypeVar('_mapSecond$mcDC$sp__T1')  # <T1>
    def mapSecond$mcDC$sp(self, f: scala.Function1[typing.Any, _mapSecond.mcDC.sp__T1], evidence$9: scalan.RType[_mapSecond.mcDC.sp__T1]) -> Coll[scala.Tuple2[typing.Any, _mapSecond.mcDC.sp__T1]]: ...
    _mapSecond$mcDD$sp__T1 = typing.TypeVar('_mapSecond$mcDD$sp__T1')  # <T1>
    def mapSecond$mcDD$sp(self, f: scala.Function1[typing.Any, _mapSecond.mcDD.sp__T1], evidence$9: scalan.RType[_mapSecond.mcDD.sp__T1]) -> Coll[scala.Tuple2[typing.Any, _mapSecond.mcDD.sp__T1]]: ...
    _mapSecond$mcDF$sp__T1 = typing.TypeVar('_mapSecond$mcDF$sp__T1')  # <T1>
    def mapSecond$mcDF$sp(self, f: scala.Function1[typing.Any, _mapSecond.mcDF.sp__T1], evidence$9: scalan.RType[_mapSecond.mcDF.sp__T1]) -> Coll[scala.Tuple2[typing.Any, _mapSecond.mcDF.sp__T1]]: ...
    _mapSecond$mcDI$sp__T1 = typing.TypeVar('_mapSecond$mcDI$sp__T1')  # <T1>
    def mapSecond$mcDI$sp(self, f: scala.Function1[typing.Any, _mapSecond.mcDI.sp__T1], evidence$9: scalan.RType[_mapSecond.mcDI.sp__T1]) -> Coll[scala.Tuple2[typing.Any, _mapSecond.mcDI.sp__T1]]: ...
    _mapSecond$mcDJ$sp__T1 = typing.TypeVar('_mapSecond$mcDJ$sp__T1')  # <T1>
    def mapSecond$mcDJ$sp(self, f: scala.Function1[typing.Any, _mapSecond.mcDJ.sp__T1], evidence$9: scalan.RType[_mapSecond.mcDJ.sp__T1]) -> Coll[scala.Tuple2[typing.Any, _mapSecond.mcDJ.sp__T1]]: ...
    _mapSecond$mcDS$sp__T1 = typing.TypeVar('_mapSecond$mcDS$sp__T1')  # <T1>
    def mapSecond$mcDS$sp(self, f: scala.Function1[typing.Any, _mapSecond.mcDS.sp__T1], evidence$9: scalan.RType[_mapSecond.mcDS.sp__T1]) -> Coll[scala.Tuple2[typing.Any, _mapSecond.mcDS.sp__T1]]: ...
    _mapSecond$mcDV$sp__T1 = typing.TypeVar('_mapSecond$mcDV$sp__T1')  # <T1>
    def mapSecond$mcDV$sp(self, f: scala.Function1[scala.runtime.BoxedUnit, _mapSecond.mcDV.sp__T1], evidence$9: scalan.RType[_mapSecond.mcDV.sp__T1]) -> Coll[scala.Tuple2[typing.Any, _mapSecond.mcDV.sp__T1]]: ...
    _mapSecond$mcDZ$sp__T1 = typing.TypeVar('_mapSecond$mcDZ$sp__T1')  # <T1>
    def mapSecond$mcDZ$sp(self, f: scala.Function1[typing.Any, _mapSecond.mcDZ.sp__T1], evidence$9: scalan.RType[_mapSecond.mcDZ.sp__T1]) -> Coll[scala.Tuple2[typing.Any, _mapSecond.mcDZ.sp__T1]]: ...
    _mapSecond$mcFB$sp__T1 = typing.TypeVar('_mapSecond$mcFB$sp__T1')  # <T1>
    def mapSecond$mcFB$sp(self, f: scala.Function1[typing.Any, _mapSecond.mcFB.sp__T1], evidence$9: scalan.RType[_mapSecond.mcFB.sp__T1]) -> Coll[scala.Tuple2[typing.Any, _mapSecond.mcFB.sp__T1]]: ...
    _mapSecond$mcFC$sp__T1 = typing.TypeVar('_mapSecond$mcFC$sp__T1')  # <T1>
    def mapSecond$mcFC$sp(self, f: scala.Function1[typing.Any, _mapSecond.mcFC.sp__T1], evidence$9: scalan.RType[_mapSecond.mcFC.sp__T1]) -> Coll[scala.Tuple2[typing.Any, _mapSecond.mcFC.sp__T1]]: ...
    _mapSecond$mcFD$sp__T1 = typing.TypeVar('_mapSecond$mcFD$sp__T1')  # <T1>
    def mapSecond$mcFD$sp(self, f: scala.Function1[typing.Any, _mapSecond.mcFD.sp__T1], evidence$9: scalan.RType[_mapSecond.mcFD.sp__T1]) -> Coll[scala.Tuple2[typing.Any, _mapSecond.mcFD.sp__T1]]: ...
    _mapSecond$mcFF$sp__T1 = typing.TypeVar('_mapSecond$mcFF$sp__T1')  # <T1>
    def mapSecond$mcFF$sp(self, f: scala.Function1[typing.Any, _mapSecond.mcFF.sp__T1], evidence$9: scalan.RType[_mapSecond.mcFF.sp__T1]) -> Coll[scala.Tuple2[typing.Any, _mapSecond.mcFF.sp__T1]]: ...
    _mapSecond$mcFI$sp__T1 = typing.TypeVar('_mapSecond$mcFI$sp__T1')  # <T1>
    def mapSecond$mcFI$sp(self, f: scala.Function1[typing.Any, _mapSecond.mcFI.sp__T1], evidence$9: scalan.RType[_mapSecond.mcFI.sp__T1]) -> Coll[scala.Tuple2[typing.Any, _mapSecond.mcFI.sp__T1]]: ...
    _mapSecond$mcFJ$sp__T1 = typing.TypeVar('_mapSecond$mcFJ$sp__T1')  # <T1>
    def mapSecond$mcFJ$sp(self, f: scala.Function1[typing.Any, _mapSecond.mcFJ.sp__T1], evidence$9: scalan.RType[_mapSecond.mcFJ.sp__T1]) -> Coll[scala.Tuple2[typing.Any, _mapSecond.mcFJ.sp__T1]]: ...
    _mapSecond$mcFS$sp__T1 = typing.TypeVar('_mapSecond$mcFS$sp__T1')  # <T1>
    def mapSecond$mcFS$sp(self, f: scala.Function1[typing.Any, _mapSecond.mcFS.sp__T1], evidence$9: scalan.RType[_mapSecond.mcFS.sp__T1]) -> Coll[scala.Tuple2[typing.Any, _mapSecond.mcFS.sp__T1]]: ...
    _mapSecond$mcFV$sp__T1 = typing.TypeVar('_mapSecond$mcFV$sp__T1')  # <T1>
    def mapSecond$mcFV$sp(self, f: scala.Function1[scala.runtime.BoxedUnit, _mapSecond.mcFV.sp__T1], evidence$9: scalan.RType[_mapSecond.mcFV.sp__T1]) -> Coll[scala.Tuple2[typing.Any, _mapSecond.mcFV.sp__T1]]: ...
    _mapSecond$mcFZ$sp__T1 = typing.TypeVar('_mapSecond$mcFZ$sp__T1')  # <T1>
    def mapSecond$mcFZ$sp(self, f: scala.Function1[typing.Any, _mapSecond.mcFZ.sp__T1], evidence$9: scalan.RType[_mapSecond.mcFZ.sp__T1]) -> Coll[scala.Tuple2[typing.Any, _mapSecond.mcFZ.sp__T1]]: ...
    _mapSecond$mcIB$sp__T1 = typing.TypeVar('_mapSecond$mcIB$sp__T1')  # <T1>
    def mapSecond$mcIB$sp(self, f: scala.Function1[typing.Any, _mapSecond.mcIB.sp__T1], evidence$9: scalan.RType[_mapSecond.mcIB.sp__T1]) -> Coll[scala.Tuple2[typing.Any, _mapSecond.mcIB.sp__T1]]: ...
    _mapSecond$mcIC$sp__T1 = typing.TypeVar('_mapSecond$mcIC$sp__T1')  # <T1>
    def mapSecond$mcIC$sp(self, f: scala.Function1[typing.Any, _mapSecond.mcIC.sp__T1], evidence$9: scalan.RType[_mapSecond.mcIC.sp__T1]) -> Coll[scala.Tuple2[typing.Any, _mapSecond.mcIC.sp__T1]]: ...
    _mapSecond$mcID$sp__T1 = typing.TypeVar('_mapSecond$mcID$sp__T1')  # <T1>
    def mapSecond$mcID$sp(self, f: scala.Function1[typing.Any, _mapSecond.mcID.sp__T1], evidence$9: scalan.RType[_mapSecond.mcID.sp__T1]) -> Coll[scala.Tuple2[typing.Any, _mapSecond.mcID.sp__T1]]: ...
    _mapSecond$mcIF$sp__T1 = typing.TypeVar('_mapSecond$mcIF$sp__T1')  # <T1>
    def mapSecond$mcIF$sp(self, f: scala.Function1[typing.Any, _mapSecond.mcIF.sp__T1], evidence$9: scalan.RType[_mapSecond.mcIF.sp__T1]) -> Coll[scala.Tuple2[typing.Any, _mapSecond.mcIF.sp__T1]]: ...
    _mapSecond$mcII$sp__T1 = typing.TypeVar('_mapSecond$mcII$sp__T1')  # <T1>
    def mapSecond$mcII$sp(self, f: scala.Function1[typing.Any, _mapSecond.mcII.sp__T1], evidence$9: scalan.RType[_mapSecond.mcII.sp__T1]) -> Coll[scala.Tuple2[typing.Any, _mapSecond.mcII.sp__T1]]: ...
    _mapSecond$mcIJ$sp__T1 = typing.TypeVar('_mapSecond$mcIJ$sp__T1')  # <T1>
    def mapSecond$mcIJ$sp(self, f: scala.Function1[typing.Any, _mapSecond.mcIJ.sp__T1], evidence$9: scalan.RType[_mapSecond.mcIJ.sp__T1]) -> Coll[scala.Tuple2[typing.Any, _mapSecond.mcIJ.sp__T1]]: ...
    _mapSecond$mcIS$sp__T1 = typing.TypeVar('_mapSecond$mcIS$sp__T1')  # <T1>
    def mapSecond$mcIS$sp(self, f: scala.Function1[typing.Any, _mapSecond.mcIS.sp__T1], evidence$9: scalan.RType[_mapSecond.mcIS.sp__T1]) -> Coll[scala.Tuple2[typing.Any, _mapSecond.mcIS.sp__T1]]: ...
    _mapSecond$mcIV$sp__T1 = typing.TypeVar('_mapSecond$mcIV$sp__T1')  # <T1>
    def mapSecond$mcIV$sp(self, f: scala.Function1[scala.runtime.BoxedUnit, _mapSecond.mcIV.sp__T1], evidence$9: scalan.RType[_mapSecond.mcIV.sp__T1]) -> Coll[scala.Tuple2[typing.Any, _mapSecond.mcIV.sp__T1]]: ...
    _mapSecond$mcIZ$sp__T1 = typing.TypeVar('_mapSecond$mcIZ$sp__T1')  # <T1>
    def mapSecond$mcIZ$sp(self, f: scala.Function1[typing.Any, _mapSecond.mcIZ.sp__T1], evidence$9: scalan.RType[_mapSecond.mcIZ.sp__T1]) -> Coll[scala.Tuple2[typing.Any, _mapSecond.mcIZ.sp__T1]]: ...
    _mapSecond$mcJB$sp__T1 = typing.TypeVar('_mapSecond$mcJB$sp__T1')  # <T1>
    def mapSecond$mcJB$sp(self, f: scala.Function1[typing.Any, _mapSecond.mcJB.sp__T1], evidence$9: scalan.RType[_mapSecond.mcJB.sp__T1]) -> Coll[scala.Tuple2[typing.Any, _mapSecond.mcJB.sp__T1]]: ...
    _mapSecond$mcJC$sp__T1 = typing.TypeVar('_mapSecond$mcJC$sp__T1')  # <T1>
    def mapSecond$mcJC$sp(self, f: scala.Function1[typing.Any, _mapSecond.mcJC.sp__T1], evidence$9: scalan.RType[_mapSecond.mcJC.sp__T1]) -> Coll[scala.Tuple2[typing.Any, _mapSecond.mcJC.sp__T1]]: ...
    _mapSecond$mcJD$sp__T1 = typing.TypeVar('_mapSecond$mcJD$sp__T1')  # <T1>
    def mapSecond$mcJD$sp(self, f: scala.Function1[typing.Any, _mapSecond.mcJD.sp__T1], evidence$9: scalan.RType[_mapSecond.mcJD.sp__T1]) -> Coll[scala.Tuple2[typing.Any, _mapSecond.mcJD.sp__T1]]: ...
    _mapSecond$mcJF$sp__T1 = typing.TypeVar('_mapSecond$mcJF$sp__T1')  # <T1>
    def mapSecond$mcJF$sp(self, f: scala.Function1[typing.Any, _mapSecond.mcJF.sp__T1], evidence$9: scalan.RType[_mapSecond.mcJF.sp__T1]) -> Coll[scala.Tuple2[typing.Any, _mapSecond.mcJF.sp__T1]]: ...
    _mapSecond$mcJI$sp__T1 = typing.TypeVar('_mapSecond$mcJI$sp__T1')  # <T1>
    def mapSecond$mcJI$sp(self, f: scala.Function1[typing.Any, _mapSecond.mcJI.sp__T1], evidence$9: scalan.RType[_mapSecond.mcJI.sp__T1]) -> Coll[scala.Tuple2[typing.Any, _mapSecond.mcJI.sp__T1]]: ...
    _mapSecond$mcJJ$sp__T1 = typing.TypeVar('_mapSecond$mcJJ$sp__T1')  # <T1>
    def mapSecond$mcJJ$sp(self, f: scala.Function1[typing.Any, _mapSecond.mcJJ.sp__T1], evidence$9: scalan.RType[_mapSecond.mcJJ.sp__T1]) -> Coll[scala.Tuple2[typing.Any, _mapSecond.mcJJ.sp__T1]]: ...
    _mapSecond$mcJS$sp__T1 = typing.TypeVar('_mapSecond$mcJS$sp__T1')  # <T1>
    def mapSecond$mcJS$sp(self, f: scala.Function1[typing.Any, _mapSecond.mcJS.sp__T1], evidence$9: scalan.RType[_mapSecond.mcJS.sp__T1]) -> Coll[scala.Tuple2[typing.Any, _mapSecond.mcJS.sp__T1]]: ...
    _mapSecond$mcJV$sp__T1 = typing.TypeVar('_mapSecond$mcJV$sp__T1')  # <T1>
    def mapSecond$mcJV$sp(self, f: scala.Function1[scala.runtime.BoxedUnit, _mapSecond.mcJV.sp__T1], evidence$9: scalan.RType[_mapSecond.mcJV.sp__T1]) -> Coll[scala.Tuple2[typing.Any, _mapSecond.mcJV.sp__T1]]: ...
    _mapSecond$mcJZ$sp__T1 = typing.TypeVar('_mapSecond$mcJZ$sp__T1')  # <T1>
    def mapSecond$mcJZ$sp(self, f: scala.Function1[typing.Any, _mapSecond.mcJZ.sp__T1], evidence$9: scalan.RType[_mapSecond.mcJZ.sp__T1]) -> Coll[scala.Tuple2[typing.Any, _mapSecond.mcJZ.sp__T1]]: ...
    _mapSecond$mcSB$sp__T1 = typing.TypeVar('_mapSecond$mcSB$sp__T1')  # <T1>
    def mapSecond$mcSB$sp(self, f: scala.Function1[typing.Any, _mapSecond.mcSB.sp__T1], evidence$9: scalan.RType[_mapSecond.mcSB.sp__T1]) -> Coll[scala.Tuple2[typing.Any, _mapSecond.mcSB.sp__T1]]: ...
    _mapSecond$mcSC$sp__T1 = typing.TypeVar('_mapSecond$mcSC$sp__T1')  # <T1>
    def mapSecond$mcSC$sp(self, f: scala.Function1[typing.Any, _mapSecond.mcSC.sp__T1], evidence$9: scalan.RType[_mapSecond.mcSC.sp__T1]) -> Coll[scala.Tuple2[typing.Any, _mapSecond.mcSC.sp__T1]]: ...
    _mapSecond$mcSD$sp__T1 = typing.TypeVar('_mapSecond$mcSD$sp__T1')  # <T1>
    def mapSecond$mcSD$sp(self, f: scala.Function1[typing.Any, _mapSecond.mcSD.sp__T1], evidence$9: scalan.RType[_mapSecond.mcSD.sp__T1]) -> Coll[scala.Tuple2[typing.Any, _mapSecond.mcSD.sp__T1]]: ...
    _mapSecond$mcSF$sp__T1 = typing.TypeVar('_mapSecond$mcSF$sp__T1')  # <T1>
    def mapSecond$mcSF$sp(self, f: scala.Function1[typing.Any, _mapSecond.mcSF.sp__T1], evidence$9: scalan.RType[_mapSecond.mcSF.sp__T1]) -> Coll[scala.Tuple2[typing.Any, _mapSecond.mcSF.sp__T1]]: ...
    _mapSecond$mcSI$sp__T1 = typing.TypeVar('_mapSecond$mcSI$sp__T1')  # <T1>
    def mapSecond$mcSI$sp(self, f: scala.Function1[typing.Any, _mapSecond.mcSI.sp__T1], evidence$9: scalan.RType[_mapSecond.mcSI.sp__T1]) -> Coll[scala.Tuple2[typing.Any, _mapSecond.mcSI.sp__T1]]: ...
    _mapSecond$mcSJ$sp__T1 = typing.TypeVar('_mapSecond$mcSJ$sp__T1')  # <T1>
    def mapSecond$mcSJ$sp(self, f: scala.Function1[typing.Any, _mapSecond.mcSJ.sp__T1], evidence$9: scalan.RType[_mapSecond.mcSJ.sp__T1]) -> Coll[scala.Tuple2[typing.Any, _mapSecond.mcSJ.sp__T1]]: ...
    _mapSecond$mcSS$sp__T1 = typing.TypeVar('_mapSecond$mcSS$sp__T1')  # <T1>
    def mapSecond$mcSS$sp(self, f: scala.Function1[typing.Any, _mapSecond.mcSS.sp__T1], evidence$9: scalan.RType[_mapSecond.mcSS.sp__T1]) -> Coll[scala.Tuple2[typing.Any, _mapSecond.mcSS.sp__T1]]: ...
    _mapSecond$mcSV$sp__T1 = typing.TypeVar('_mapSecond$mcSV$sp__T1')  # <T1>
    def mapSecond$mcSV$sp(self, f: scala.Function1[scala.runtime.BoxedUnit, _mapSecond.mcSV.sp__T1], evidence$9: scalan.RType[_mapSecond.mcSV.sp__T1]) -> Coll[scala.Tuple2[typing.Any, _mapSecond.mcSV.sp__T1]]: ...
    _mapSecond$mcSZ$sp__T1 = typing.TypeVar('_mapSecond$mcSZ$sp__T1')  # <T1>
    def mapSecond$mcSZ$sp(self, f: scala.Function1[typing.Any, _mapSecond.mcSZ.sp__T1], evidence$9: scalan.RType[_mapSecond.mcSZ.sp__T1]) -> Coll[scala.Tuple2[typing.Any, _mapSecond.mcSZ.sp__T1]]: ...
    _mapSecond$mcVB$sp__T1 = typing.TypeVar('_mapSecond$mcVB$sp__T1')  # <T1>
    def mapSecond$mcVB$sp(self, f: scala.Function1[typing.Any, _mapSecond.mcVB.sp__T1], evidence$9: scalan.RType[_mapSecond.mcVB.sp__T1]) -> Coll[scala.Tuple2[scala.runtime.BoxedUnit, _mapSecond.mcVB.sp__T1]]: ...
    _mapSecond$mcVC$sp__T1 = typing.TypeVar('_mapSecond$mcVC$sp__T1')  # <T1>
    def mapSecond$mcVC$sp(self, f: scala.Function1[typing.Any, _mapSecond.mcVC.sp__T1], evidence$9: scalan.RType[_mapSecond.mcVC.sp__T1]) -> Coll[scala.Tuple2[scala.runtime.BoxedUnit, _mapSecond.mcVC.sp__T1]]: ...
    _mapSecond$mcVD$sp__T1 = typing.TypeVar('_mapSecond$mcVD$sp__T1')  # <T1>
    def mapSecond$mcVD$sp(self, f: scala.Function1[typing.Any, _mapSecond.mcVD.sp__T1], evidence$9: scalan.RType[_mapSecond.mcVD.sp__T1]) -> Coll[scala.Tuple2[scala.runtime.BoxedUnit, _mapSecond.mcVD.sp__T1]]: ...
    _mapSecond$mcVF$sp__T1 = typing.TypeVar('_mapSecond$mcVF$sp__T1')  # <T1>
    def mapSecond$mcVF$sp(self, f: scala.Function1[typing.Any, _mapSecond.mcVF.sp__T1], evidence$9: scalan.RType[_mapSecond.mcVF.sp__T1]) -> Coll[scala.Tuple2[scala.runtime.BoxedUnit, _mapSecond.mcVF.sp__T1]]: ...
    _mapSecond$mcVI$sp__T1 = typing.TypeVar('_mapSecond$mcVI$sp__T1')  # <T1>
    def mapSecond$mcVI$sp(self, f: scala.Function1[typing.Any, _mapSecond.mcVI.sp__T1], evidence$9: scalan.RType[_mapSecond.mcVI.sp__T1]) -> Coll[scala.Tuple2[scala.runtime.BoxedUnit, _mapSecond.mcVI.sp__T1]]: ...
    _mapSecond$mcVJ$sp__T1 = typing.TypeVar('_mapSecond$mcVJ$sp__T1')  # <T1>
    def mapSecond$mcVJ$sp(self, f: scala.Function1[typing.Any, _mapSecond.mcVJ.sp__T1], evidence$9: scalan.RType[_mapSecond.mcVJ.sp__T1]) -> Coll[scala.Tuple2[scala.runtime.BoxedUnit, _mapSecond.mcVJ.sp__T1]]: ...
    _mapSecond$mcVS$sp__T1 = typing.TypeVar('_mapSecond$mcVS$sp__T1')  # <T1>
    def mapSecond$mcVS$sp(self, f: scala.Function1[typing.Any, _mapSecond.mcVS.sp__T1], evidence$9: scalan.RType[_mapSecond.mcVS.sp__T1]) -> Coll[scala.Tuple2[scala.runtime.BoxedUnit, _mapSecond.mcVS.sp__T1]]: ...
    _mapSecond$mcVV$sp__T1 = typing.TypeVar('_mapSecond$mcVV$sp__T1')  # <T1>
    def mapSecond$mcVV$sp(self, f: scala.Function1[scala.runtime.BoxedUnit, _mapSecond.mcVV.sp__T1], evidence$9: scalan.RType[_mapSecond.mcVV.sp__T1]) -> Coll[scala.Tuple2[scala.runtime.BoxedUnit, _mapSecond.mcVV.sp__T1]]: ...
    _mapSecond$mcVZ$sp__T1 = typing.TypeVar('_mapSecond$mcVZ$sp__T1')  # <T1>
    def mapSecond$mcVZ$sp(self, f: scala.Function1[typing.Any, _mapSecond.mcVZ.sp__T1], evidence$9: scalan.RType[_mapSecond.mcVZ.sp__T1]) -> Coll[scala.Tuple2[scala.runtime.BoxedUnit, _mapSecond.mcVZ.sp__T1]]: ...
    _mapSecond$mcZB$sp__T1 = typing.TypeVar('_mapSecond$mcZB$sp__T1')  # <T1>
    def mapSecond$mcZB$sp(self, f: scala.Function1[typing.Any, _mapSecond.mcZB.sp__T1], evidence$9: scalan.RType[_mapSecond.mcZB.sp__T1]) -> Coll[scala.Tuple2[typing.Any, _mapSecond.mcZB.sp__T1]]: ...
    _mapSecond$mcZC$sp__T1 = typing.TypeVar('_mapSecond$mcZC$sp__T1')  # <T1>
    def mapSecond$mcZC$sp(self, f: scala.Function1[typing.Any, _mapSecond.mcZC.sp__T1], evidence$9: scalan.RType[_mapSecond.mcZC.sp__T1]) -> Coll[scala.Tuple2[typing.Any, _mapSecond.mcZC.sp__T1]]: ...
    _mapSecond$mcZD$sp__T1 = typing.TypeVar('_mapSecond$mcZD$sp__T1')  # <T1>
    def mapSecond$mcZD$sp(self, f: scala.Function1[typing.Any, _mapSecond.mcZD.sp__T1], evidence$9: scalan.RType[_mapSecond.mcZD.sp__T1]) -> Coll[scala.Tuple2[typing.Any, _mapSecond.mcZD.sp__T1]]: ...
    _mapSecond$mcZF$sp__T1 = typing.TypeVar('_mapSecond$mcZF$sp__T1')  # <T1>
    def mapSecond$mcZF$sp(self, f: scala.Function1[typing.Any, _mapSecond.mcZF.sp__T1], evidence$9: scalan.RType[_mapSecond.mcZF.sp__T1]) -> Coll[scala.Tuple2[typing.Any, _mapSecond.mcZF.sp__T1]]: ...
    _mapSecond$mcZI$sp__T1 = typing.TypeVar('_mapSecond$mcZI$sp__T1')  # <T1>
    def mapSecond$mcZI$sp(self, f: scala.Function1[typing.Any, _mapSecond.mcZI.sp__T1], evidence$9: scalan.RType[_mapSecond.mcZI.sp__T1]) -> Coll[scala.Tuple2[typing.Any, _mapSecond.mcZI.sp__T1]]: ...
    _mapSecond$mcZJ$sp__T1 = typing.TypeVar('_mapSecond$mcZJ$sp__T1')  # <T1>
    def mapSecond$mcZJ$sp(self, f: scala.Function1[typing.Any, _mapSecond.mcZJ.sp__T1], evidence$9: scalan.RType[_mapSecond.mcZJ.sp__T1]) -> Coll[scala.Tuple2[typing.Any, _mapSecond.mcZJ.sp__T1]]: ...
    _mapSecond$mcZS$sp__T1 = typing.TypeVar('_mapSecond$mcZS$sp__T1')  # <T1>
    def mapSecond$mcZS$sp(self, f: scala.Function1[typing.Any, _mapSecond.mcZS.sp__T1], evidence$9: scalan.RType[_mapSecond.mcZS.sp__T1]) -> Coll[scala.Tuple2[typing.Any, _mapSecond.mcZS.sp__T1]]: ...
    _mapSecond$mcZV$sp__T1 = typing.TypeVar('_mapSecond$mcZV$sp__T1')  # <T1>
    def mapSecond$mcZV$sp(self, f: scala.Function1[scala.runtime.BoxedUnit, _mapSecond.mcZV.sp__T1], evidence$9: scalan.RType[_mapSecond.mcZV.sp__T1]) -> Coll[scala.Tuple2[typing.Any, _mapSecond.mcZV.sp__T1]]: ...
    _mapSecond$mcZZ$sp__T1 = typing.TypeVar('_mapSecond$mcZZ$sp__T1')  # <T1>
    def mapSecond$mcZZ$sp(self, f: scala.Function1[typing.Any, _mapSecond.mcZZ.sp__T1], evidence$9: scalan.RType[_mapSecond.mcZZ.sp__T1]) -> Coll[scala.Tuple2[typing.Any, _mapSecond.mcZZ.sp__T1]]: ...
    def rs(self) -> Coll[_PairColl__R]: ...
    def rs$mcB$sp(self) -> Coll[typing.Any]: ...
    def rs$mcC$sp(self) -> Coll[typing.Any]: ...
    def rs$mcD$sp(self) -> Coll[typing.Any]: ...
    def rs$mcF$sp(self) -> Coll[typing.Any]: ...
    def rs$mcI$sp(self) -> Coll[typing.Any]: ...
    def rs$mcJ$sp(self) -> Coll[typing.Any]: ...
    def rs$mcS$sp(self) -> Coll[typing.Any]: ...
    def rs$mcV$sp(self) -> Coll[scala.runtime.BoxedUnit]: ...
    def rs$mcZ$sp(self) -> Coll[typing.Any]: ...
    def toString(self) -> str: ...

_PairMonoid__A = typing.TypeVar('_PairMonoid__A')  # <A>
_PairMonoid__B = typing.TypeVar('_PairMonoid__B')  # <B>
class PairMonoid(Monoid[scala.Tuple2[_PairMonoid__A, _PairMonoid__B]], typing.Generic[_PairMonoid__A, _PairMonoid__B]):
    m1: Monoid = ...
    m2: Monoid = ...
    def __init__(self, m1: Monoid[_PairMonoid__A], m2: Monoid[_PairMonoid__B]): ...
    def m1(self) -> Monoid[_PairMonoid__A]: ...
    def m1$mcI$sp(self) -> Monoid[typing.Any]: ...
    def m1$mcJ$sp(self) -> Monoid[typing.Any]: ...
    def plus(self, x: scala.Tuple2[_PairMonoid__A, _PairMonoid__B], y: scala.Tuple2[_PairMonoid__A, _PairMonoid__B]) -> scala.Tuple2[_PairMonoid__A, _PairMonoid__B]: ...
    def plus$mcI$sp(self, x: int, y: int) -> int: ...
    def plus$mcII$sp(self, x: scala.Tuple2[typing.Any, typing.Any], y: scala.Tuple2[typing.Any, typing.Any]) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def plus$mcIJ$sp(self, x: scala.Tuple2[typing.Any, typing.Any], y: scala.Tuple2[typing.Any, typing.Any]) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def plus$mcJ$sp(self, x: int, y: int) -> int: ...
    def plus$mcJI$sp(self, x: scala.Tuple2[typing.Any, typing.Any], y: scala.Tuple2[typing.Any, typing.Any]) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def plus$mcJJ$sp(self, x: scala.Tuple2[typing.Any, typing.Any], y: scala.Tuple2[typing.Any, typing.Any]) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def power(self, x: scala.Tuple2[_PairMonoid__A, _PairMonoid__B], n: int) -> scala.Tuple2[_PairMonoid__A, _PairMonoid__B]: ...
    def power$mcI$sp(self, x: int, n: int) -> int: ...
    def power$mcII$sp(self, x: scala.Tuple2[typing.Any, typing.Any], n: int) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def power$mcIJ$sp(self, x: scala.Tuple2[typing.Any, typing.Any], n: int) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def power$mcJ$sp(self, x: int, n: int) -> int: ...
    def power$mcJI$sp(self, x: scala.Tuple2[typing.Any, typing.Any], n: int) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def power$mcJJ$sp(self, x: scala.Tuple2[typing.Any, typing.Any], n: int) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def specInstance$(self) -> bool: ...
    def zero(self) -> scala.Tuple2[_PairMonoid__A, _PairMonoid__B]: ...
    def zero$mcI$sp(self) -> int: ...
    def zero$mcII$sp(self) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def zero$mcIJ$sp(self) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def zero$mcJ$sp(self) -> int: ...
    def zero$mcJI$sp(self) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def zero$mcJJ$sp(self) -> scala.Tuple2[typing.Any, typing.Any]: ...

_ReplColl__A = typing.TypeVar('_ReplColl__A')  # <A>
class ReplColl(Coll[_ReplColl__A], typing.Generic[_ReplColl__A]):
    def append(self, other: Coll[_ReplColl__A]) -> Coll[_ReplColl__A]: ...
    def append$mcB$sp(self, other: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def append$mcC$sp(self, other: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def append$mcD$sp(self, other: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def append$mcF$sp(self, other: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def append$mcI$sp(self, other: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def append$mcJ$sp(self, other: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def append$mcS$sp(self, other: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def append$mcV$sp(self, other: Coll[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def append$mcZ$sp(self, other: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def length(self) -> int: ...
    def toString(self) -> str: ...
    def value(self) -> _ReplColl__A: ...
    def value$mcB$sp(self) -> int: ...
    def value$mcC$sp(self) -> str: ...
    def value$mcD$sp(self) -> float: ...
    def value$mcF$sp(self) -> float: ...
    def value$mcI$sp(self) -> int: ...
    def value$mcJ$sp(self) -> int: ...
    def value$mcS$sp(self) -> int: ...
    def value$mcV$sp(self) -> None: ...
    def value$mcZ$sp(self) -> bool: ...

_SizeColl__Item = typing.TypeVar('_SizeColl__Item')  # <Item>
class SizeColl(Size[Coll[_SizeColl__Item]], typing.Generic[_SizeColl__Item]):
    def sizes(self) -> Coll[Size[_SizeColl__Item]]: ...

_SizeFunc__Env = typing.TypeVar('_SizeFunc__Env')  # <Env>
_SizeFunc__Arg = typing.TypeVar('_SizeFunc__Arg')  # <Arg>
_SizeFunc__Res = typing.TypeVar('_SizeFunc__Res')  # <Res>
class SizeFunc(Size[scala.Function1[_SizeFunc__Arg, _SizeFunc__Res]], typing.Generic[_SizeFunc__Env, _SizeFunc__Arg, _SizeFunc__Res]):
    def sizeEnv(self) -> Size[_SizeFunc__Env]: ...

_SizeOption__T = typing.TypeVar('_SizeOption__T')  # <T>
class SizeOption(Size[scala.Option[_SizeOption__T]], typing.Generic[_SizeOption__T]):
    def sizeOpt(self) -> scala.Option[Size[_SizeOption__T]]: ...

_SizePair__L = typing.TypeVar('_SizePair__L')  # <L>
_SizePair__R = typing.TypeVar('_SizePair__R')  # <R>
class SizePair(Size[scala.Tuple2[_SizePair__L, _SizePair__R]], typing.Generic[_SizePair__L, _SizePair__R]):
    def l(self) -> Size[_SizePair__L]: ...
    def r(self) -> Size[_SizePair__R]: ...

_SizePrim__Val = typing.TypeVar('_SizePrim__Val')  # <Val>
class SizePrim(Size[_SizePrim__Val], typing.Generic[_SizePrim__Val]):
    def dataSize(self) -> int: ...
    def tVal(self) -> scalan.RType[_SizePrim__Val]: ...

_CCostedColl__Item = typing.TypeVar('_CCostedColl__Item')  # <Item>
class CCostedColl(CostedColl[_CCostedColl__Item], typing.Generic[_CCostedColl__Item]):
    def __init__(self, values: Coll[_CCostedColl__Item], costs: Coll[typing.Any], sizes: Coll[Size[_CCostedColl__Item]], valuesCost: int): ...
    def builder(self) -> CostedBuilder: ...
    def cost(self) -> int: ...
    def costs(self) -> Coll[typing.Any]: ...
    def filterCosted(self, f: scala.Function1[Costed[_CCostedColl__Item], Costed[typing.Any]]) -> CostedColl[_CCostedColl__Item]: ...
    _foldCosted__B = typing.TypeVar('_foldCosted__B')  # <B>
    def foldCosted(self, zero: Costed[_foldCosted__B], op: scala.Function1[Costed[scala.Tuple2[_foldCosted__B, _CCostedColl__Item]], Costed[_foldCosted__B]]) -> Costed[_foldCosted__B]: ...
    _mapCosted__Res = typing.TypeVar('_mapCosted__Res')  # <Res>
    def mapCosted(self, f: scala.Function1[Costed[_CCostedColl__Item], Costed[_mapCosted__Res]]) -> CostedColl[_mapCosted__Res]: ...
    def size(self) -> Size[Coll[_CCostedColl__Item]]: ...
    def sizes(self) -> Coll[Size[_CCostedColl__Item]]: ...
    def value(self) -> Coll[_CCostedColl__Item]: ...
    def values(self) -> Coll[_CCostedColl__Item]: ...
    def valuesCost(self) -> int: ...

_CCostedFunc__Env = typing.TypeVar('_CCostedFunc__Env')  # <Env>
_CCostedFunc__Arg = typing.TypeVar('_CCostedFunc__Arg')  # <Arg>
_CCostedFunc__Res = typing.TypeVar('_CCostedFunc__Res')  # <Res>
class CCostedFunc(CostedFunc[_CCostedFunc__Env, _CCostedFunc__Arg, _CCostedFunc__Res], typing.Generic[_CCostedFunc__Env, _CCostedFunc__Arg, _CCostedFunc__Res]):
    def __init__(self, envCosted: Costed[_CCostedFunc__Env], func: scala.Function1[Costed[_CCostedFunc__Arg], Costed[_CCostedFunc__Res]], cost: int, size: Size[scala.Function1[_CCostedFunc__Arg, _CCostedFunc__Res]]): ...
    def builder(self) -> CostedBuilder: ...
    def cost(self) -> int: ...
    def envCosted(self) -> Costed[_CCostedFunc__Env]: ...
    def func(self) -> scala.Function1[Costed[_CCostedFunc__Arg], Costed[_CCostedFunc__Res]]: ...
    def size(self) -> Size[scala.Function1[_CCostedFunc__Arg, _CCostedFunc__Res]]: ...
    def sliceCalc(self) -> scala.Function1[_CCostedFunc__Arg, _CCostedFunc__Res]: ...
    def sliceCost(self) -> scala.Function1[scala.Tuple2[typing.Any, Size[_CCostedFunc__Arg]], typing.Any]: ...
    def sliceCostEx(self) -> scala.Function1[scala.Tuple2[_CCostedFunc__Arg, scala.Tuple2[typing.Any, Size[_CCostedFunc__Arg]]], typing.Any]: ...
    def sliceSize(self) -> scala.Function1[Size[_CCostedFunc__Arg], Size[_CCostedFunc__Res]]: ...
    def value(self) -> scala.Function1[_CCostedFunc__Arg, _CCostedFunc__Res]: ...

_CCostedOption__T = typing.TypeVar('_CCostedOption__T')  # <T>
class CCostedOption(CostedOption[_CCostedOption__T], typing.Generic[_CCostedOption__T]):
    def __init__(self, value: scala.Option[_CCostedOption__T], costOpt: scala.Option[typing.Any], sizeOpt: scala.Option[Size[_CCostedOption__T]], accumulatedCost: int): ...
    def accumulatedCost(self) -> int: ...
    def builder(self) -> CostedBuilder: ...
    def cost(self) -> int: ...
    def costOpt(self) -> scala.Option[typing.Any]: ...
    def size(self) -> Size[scala.Option[_CCostedOption__T]]: ...
    def sizeOpt(self) -> scala.Option[Size[_CCostedOption__T]]: ...
    def value(self) -> scala.Option[_CCostedOption__T]: ...

_CCostedPair__L = typing.TypeVar('_CCostedPair__L')  # <L>
_CCostedPair__R = typing.TypeVar('_CCostedPair__R')  # <R>
class CCostedPair(CostedPair[_CCostedPair__L, _CCostedPair__R], typing.Generic[_CCostedPair__L, _CCostedPair__R]):
    def __init__(self, l: Costed[_CCostedPair__L], r: Costed[_CCostedPair__R], accCost: int): ...
    def accCost(self) -> int: ...
    def builder(self) -> CostedBuilder: ...
    def cost(self) -> int: ...
    def l(self) -> Costed[_CCostedPair__L]: ...
    def r(self) -> Costed[_CCostedPair__R]: ...
    def size(self) -> Size[scala.Tuple2[_CCostedPair__L, _CCostedPair__R]]: ...
    def value(self) -> scala.Tuple2[_CCostedPair__L, _CCostedPair__R]: ...

_CCostedPrim__Val = typing.TypeVar('_CCostedPrim__Val')  # <Val>
class CCostedPrim(CostedPrim[_CCostedPrim__Val], typing.Generic[_CCostedPrim__Val]):
    def __init__(self, value: _CCostedPrim__Val, cost: int, size: Size[_CCostedPrim__Val]): ...
    def builder(self) -> CostedBuilder: ...
    def cost(self) -> int: ...
    def size(self) -> Size[_CCostedPrim__Val]: ...
    def value(self) -> _CCostedPrim__Val: ...

_CReplColl__A = typing.TypeVar('_CReplColl__A')  # <A>
class CReplColl(ReplColl[_CReplColl__A], typing.Generic[_CReplColl__A]):
    _toArray: typing.Any = ...
    value: typing.Any = ...
    special$collection$CReplColl$$tA: scalan.RType = ...
    special$collection$CReplColl$$bitmap$0: bool = ...
    def __init__(self, value: _CReplColl__A, length: int, tA: scalan.RType[_CReplColl__A]): ...
    def _toArray(self) -> typing.Any: ...
    def _toArray$lzycompute(self) -> typing.Any: ...
    def _toArray$lzycompute$mcB$sp(self) -> typing.List[int]: ...
    def _toArray$lzycompute$mcC$sp(self) -> typing.List[str]: ...
    def _toArray$lzycompute$mcD$sp(self) -> typing.List[float]: ...
    def _toArray$lzycompute$mcF$sp(self) -> typing.List[float]: ...
    def _toArray$lzycompute$mcI$sp(self) -> typing.List[int]: ...
    def _toArray$lzycompute$mcJ$sp(self) -> typing.List[int]: ...
    def _toArray$lzycompute$mcS$sp(self) -> typing.List[int]: ...
    def _toArray$lzycompute$mcV$sp(self) -> typing.List[scala.runtime.BoxedUnit]: ...
    def _toArray$lzycompute$mcZ$sp(self) -> typing.List[bool]: ...
    def _toArray$mcB$sp(self) -> typing.List[int]: ...
    def _toArray$mcC$sp(self) -> typing.List[str]: ...
    def _toArray$mcD$sp(self) -> typing.List[float]: ...
    def _toArray$mcF$sp(self) -> typing.List[float]: ...
    def _toArray$mcI$sp(self) -> typing.List[int]: ...
    def _toArray$mcJ$sp(self) -> typing.List[int]: ...
    def _toArray$mcS$sp(self) -> typing.List[int]: ...
    def _toArray$mcV$sp(self) -> typing.List[scala.runtime.BoxedUnit]: ...
    def _toArray$mcZ$sp(self) -> typing.List[bool]: ...
    def append(self, other: Coll[_CReplColl__A]) -> Coll[_CReplColl__A]: ...
    def append$mcB$sp(self, other: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def append$mcC$sp(self, other: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def append$mcD$sp(self, other: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def append$mcF$sp(self, other: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def append$mcI$sp(self, other: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def append$mcJ$sp(self, other: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def append$mcS$sp(self, other: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def append$mcV$sp(self, other: Coll[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def append$mcZ$sp(self, other: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def apply(self, i: int) -> _CReplColl__A: ...
    def apply$mcB$sp(self, i: int) -> int: ...
    def apply$mcC$sp(self, i: int) -> str: ...
    def apply$mcD$sp(self, i: int) -> float: ...
    def apply$mcF$sp(self, i: int) -> float: ...
    def apply$mcI$sp(self, i: int) -> int: ...
    def apply$mcJ$sp(self, i: int) -> int: ...
    def apply$mcS$sp(self, i: int) -> int: ...
    def apply$mcV$sp(self, i: int) -> None: ...
    def apply$mcZ$sp(self, i: int) -> bool: ...
    def builder(self) -> CollBuilder: ...
    def diff(self, that: Coll[_CReplColl__A]) -> Coll[_CReplColl__A]: ...
    def diff$mcB$sp(self, that: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def diff$mcC$sp(self, that: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def diff$mcD$sp(self, that: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def diff$mcF$sp(self, that: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def diff$mcI$sp(self, that: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def diff$mcJ$sp(self, that: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def diff$mcS$sp(self, that: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def diff$mcV$sp(self, that: Coll[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def diff$mcZ$sp(self, that: Coll[typing.Any]) -> Coll[typing.Any]: ...
    _distinctByKey__T = typing.TypeVar('_distinctByKey__T')  # <T>
    _distinctByKey__U = typing.TypeVar('_distinctByKey__U')  # <U>
    def distinctByKey(self, ev: scala.Predef..less.colon.less[_CReplColl__A, scala.Tuple2[_distinctByKey__T, _distinctByKey__U]]) -> Coll[_CReplColl__A]: ...
    _distinctByKey$mcB$sp__T = typing.TypeVar('_distinctByKey$mcB$sp__T')  # <T>
    _distinctByKey$mcB$sp__U = typing.TypeVar('_distinctByKey$mcB$sp__U')  # <U>
    def distinctByKey$mcB$sp(self, ev: scala.Predef..less.colon.less[typing.Any, scala.Tuple2[_distinctByKey.mcB.sp__T, _distinctByKey.mcB.sp__U]]) -> Coll[typing.Any]: ...
    _distinctByKey$mcC$sp__T = typing.TypeVar('_distinctByKey$mcC$sp__T')  # <T>
    _distinctByKey$mcC$sp__U = typing.TypeVar('_distinctByKey$mcC$sp__U')  # <U>
    def distinctByKey$mcC$sp(self, ev: scala.Predef..less.colon.less[typing.Any, scala.Tuple2[_distinctByKey.mcC.sp__T, _distinctByKey.mcC.sp__U]]) -> Coll[typing.Any]: ...
    _distinctByKey$mcD$sp__T = typing.TypeVar('_distinctByKey$mcD$sp__T')  # <T>
    _distinctByKey$mcD$sp__U = typing.TypeVar('_distinctByKey$mcD$sp__U')  # <U>
    def distinctByKey$mcD$sp(self, ev: scala.Predef..less.colon.less[typing.Any, scala.Tuple2[_distinctByKey.mcD.sp__T, _distinctByKey.mcD.sp__U]]) -> Coll[typing.Any]: ...
    _distinctByKey$mcF$sp__T = typing.TypeVar('_distinctByKey$mcF$sp__T')  # <T>
    _distinctByKey$mcF$sp__U = typing.TypeVar('_distinctByKey$mcF$sp__U')  # <U>
    def distinctByKey$mcF$sp(self, ev: scala.Predef..less.colon.less[typing.Any, scala.Tuple2[_distinctByKey.mcF.sp__T, _distinctByKey.mcF.sp__U]]) -> Coll[typing.Any]: ...
    _distinctByKey$mcI$sp__T = typing.TypeVar('_distinctByKey$mcI$sp__T')  # <T>
    _distinctByKey$mcI$sp__U = typing.TypeVar('_distinctByKey$mcI$sp__U')  # <U>
    def distinctByKey$mcI$sp(self, ev: scala.Predef..less.colon.less[typing.Any, scala.Tuple2[_distinctByKey.mcI.sp__T, _distinctByKey.mcI.sp__U]]) -> Coll[typing.Any]: ...
    _distinctByKey$mcJ$sp__T = typing.TypeVar('_distinctByKey$mcJ$sp__T')  # <T>
    _distinctByKey$mcJ$sp__U = typing.TypeVar('_distinctByKey$mcJ$sp__U')  # <U>
    def distinctByKey$mcJ$sp(self, ev: scala.Predef..less.colon.less[typing.Any, scala.Tuple2[_distinctByKey.mcJ.sp__T, _distinctByKey.mcJ.sp__U]]) -> Coll[typing.Any]: ...
    _distinctByKey$mcS$sp__T = typing.TypeVar('_distinctByKey$mcS$sp__T')  # <T>
    _distinctByKey$mcS$sp__U = typing.TypeVar('_distinctByKey$mcS$sp__U')  # <U>
    def distinctByKey$mcS$sp(self, ev: scala.Predef..less.colon.less[typing.Any, scala.Tuple2[_distinctByKey.mcS.sp__T, _distinctByKey.mcS.sp__U]]) -> Coll[typing.Any]: ...
    _distinctByKey$mcV$sp__T = typing.TypeVar('_distinctByKey$mcV$sp__T')  # <T>
    _distinctByKey$mcV$sp__U = typing.TypeVar('_distinctByKey$mcV$sp__U')  # <U>
    def distinctByKey$mcV$sp(self, ev: scala.Predef..less.colon.less[scala.runtime.BoxedUnit, scala.Tuple2[_distinctByKey.mcV.sp__T, _distinctByKey.mcV.sp__U]]) -> Coll[scala.runtime.BoxedUnit]: ...
    _distinctByKey$mcZ$sp__T = typing.TypeVar('_distinctByKey$mcZ$sp__T')  # <T>
    _distinctByKey$mcZ$sp__U = typing.TypeVar('_distinctByKey$mcZ$sp__U')  # <U>
    def distinctByKey$mcZ$sp(self, ev: scala.Predef..less.colon.less[typing.Any, scala.Tuple2[_distinctByKey.mcZ.sp__T, _distinctByKey.mcZ.sp__U]]) -> Coll[typing.Any]: ...
    def equals(self, obj: typing.Any) -> bool: ...
    def exists(self, p: scala.Function1[_CReplColl__A, typing.Any]) -> bool: ...
    def exists$mcB$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> bool: ...
    def exists$mcC$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> bool: ...
    def exists$mcD$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> bool: ...
    def exists$mcF$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> bool: ...
    def exists$mcI$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> bool: ...
    def exists$mcJ$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> bool: ...
    def exists$mcS$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> bool: ...
    def exists$mcV$sp(self, p: scala.Function1[scala.runtime.BoxedUnit, typing.Any]) -> bool: ...
    def exists$mcZ$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> bool: ...
    def filter(self, p: scala.Function1[_CReplColl__A, typing.Any]) -> Coll[_CReplColl__A]: ...
    def filter$mcB$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> Coll[typing.Any]: ...
    def filter$mcC$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> Coll[typing.Any]: ...
    def filter$mcD$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> Coll[typing.Any]: ...
    def filter$mcF$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> Coll[typing.Any]: ...
    def filter$mcI$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> Coll[typing.Any]: ...
    def filter$mcJ$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> Coll[typing.Any]: ...
    def filter$mcS$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> Coll[typing.Any]: ...
    def filter$mcV$sp(self, p: scala.Function1[scala.runtime.BoxedUnit, typing.Any]) -> Coll[scala.runtime.BoxedUnit]: ...
    def filter$mcZ$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> Coll[typing.Any]: ...
    def find(self, p: scala.Function1[_CReplColl__A, typing.Any]) -> scala.Option[_CReplColl__A]: ...
    def find$mcB$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> scala.Option[typing.Any]: ...
    def find$mcC$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> scala.Option[typing.Any]: ...
    def find$mcD$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> scala.Option[typing.Any]: ...
    def find$mcF$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> scala.Option[typing.Any]: ...
    def find$mcI$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> scala.Option[typing.Any]: ...
    def find$mcJ$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> scala.Option[typing.Any]: ...
    def find$mcS$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> scala.Option[typing.Any]: ...
    def find$mcV$sp(self, p: scala.Function1[scala.runtime.BoxedUnit, typing.Any]) -> scala.Option[scala.runtime.BoxedUnit]: ...
    def find$mcZ$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> scala.Option[typing.Any]: ...
    _flatMap__B = typing.TypeVar('_flatMap__B')  # <B>
    def flatMap(self, f: scala.Function1[_CReplColl__A, Coll[_flatMap__B]], evidence$21: scalan.RType[_flatMap__B]) -> Coll[_flatMap__B]: ...
    _flatMap$mcB$sp__B = typing.TypeVar('_flatMap$mcB$sp__B')  # <B>
    def flatMap$mcB$sp(self, f: scala.Function1[typing.Any, Coll[_flatMap.mcB.sp__B]], evidence$21: scalan.RType[_flatMap.mcB.sp__B]) -> Coll[_flatMap.mcB.sp__B]: ...
    _flatMap$mcC$sp__B = typing.TypeVar('_flatMap$mcC$sp__B')  # <B>
    def flatMap$mcC$sp(self, f: scala.Function1[typing.Any, Coll[_flatMap.mcC.sp__B]], evidence$21: scalan.RType[_flatMap.mcC.sp__B]) -> Coll[_flatMap.mcC.sp__B]: ...
    _flatMap$mcD$sp__B = typing.TypeVar('_flatMap$mcD$sp__B')  # <B>
    def flatMap$mcD$sp(self, f: scala.Function1[typing.Any, Coll[_flatMap.mcD.sp__B]], evidence$21: scalan.RType[_flatMap.mcD.sp__B]) -> Coll[_flatMap.mcD.sp__B]: ...
    _flatMap$mcF$sp__B = typing.TypeVar('_flatMap$mcF$sp__B')  # <B>
    def flatMap$mcF$sp(self, f: scala.Function1[typing.Any, Coll[_flatMap.mcF.sp__B]], evidence$21: scalan.RType[_flatMap.mcF.sp__B]) -> Coll[_flatMap.mcF.sp__B]: ...
    _flatMap$mcI$sp__B = typing.TypeVar('_flatMap$mcI$sp__B')  # <B>
    def flatMap$mcI$sp(self, f: scala.Function1[typing.Any, Coll[_flatMap.mcI.sp__B]], evidence$21: scalan.RType[_flatMap.mcI.sp__B]) -> Coll[_flatMap.mcI.sp__B]: ...
    _flatMap$mcJ$sp__B = typing.TypeVar('_flatMap$mcJ$sp__B')  # <B>
    def flatMap$mcJ$sp(self, f: scala.Function1[typing.Any, Coll[_flatMap.mcJ.sp__B]], evidence$21: scalan.RType[_flatMap.mcJ.sp__B]) -> Coll[_flatMap.mcJ.sp__B]: ...
    _flatMap$mcS$sp__B = typing.TypeVar('_flatMap$mcS$sp__B')  # <B>
    def flatMap$mcS$sp(self, f: scala.Function1[typing.Any, Coll[_flatMap.mcS.sp__B]], evidence$21: scalan.RType[_flatMap.mcS.sp__B]) -> Coll[_flatMap.mcS.sp__B]: ...
    _flatMap$mcV$sp__B = typing.TypeVar('_flatMap$mcV$sp__B')  # <B>
    def flatMap$mcV$sp(self, f: scala.Function1[scala.runtime.BoxedUnit, Coll[_flatMap.mcV.sp__B]], evidence$21: scalan.RType[_flatMap.mcV.sp__B]) -> Coll[_flatMap.mcV.sp__B]: ...
    _flatMap$mcZ$sp__B = typing.TypeVar('_flatMap$mcZ$sp__B')  # <B>
    def flatMap$mcZ$sp(self, f: scala.Function1[typing.Any, Coll[_flatMap.mcZ.sp__B]], evidence$21: scalan.RType[_flatMap.mcZ.sp__B]) -> Coll[_flatMap.mcZ.sp__B]: ...
    _foldLeft__B = typing.TypeVar('_foldLeft__B')  # <B>
    def foldLeft(self, zero: _foldLeft__B, op: scala.Function1[scala.Tuple2[_foldLeft__B, _CReplColl__A], _foldLeft__B]) -> _foldLeft__B: ...
    _foldLeft$mcB$sp__B = typing.TypeVar('_foldLeft$mcB$sp__B')  # <B>
    def foldLeft$mcB$sp(self, zero: _foldLeft.mcB.sp__B, op: scala.Function1[scala.Tuple2[_foldLeft.mcB.sp__B, typing.Any], _foldLeft.mcB.sp__B]) -> _foldLeft.mcB.sp__B: ...
    _foldLeft$mcC$sp__B = typing.TypeVar('_foldLeft$mcC$sp__B')  # <B>
    def foldLeft$mcC$sp(self, zero: _foldLeft.mcC.sp__B, op: scala.Function1[scala.Tuple2[_foldLeft.mcC.sp__B, typing.Any], _foldLeft.mcC.sp__B]) -> _foldLeft.mcC.sp__B: ...
    _foldLeft$mcD$sp__B = typing.TypeVar('_foldLeft$mcD$sp__B')  # <B>
    def foldLeft$mcD$sp(self, zero: _foldLeft.mcD.sp__B, op: scala.Function1[scala.Tuple2[_foldLeft.mcD.sp__B, typing.Any], _foldLeft.mcD.sp__B]) -> _foldLeft.mcD.sp__B: ...
    _foldLeft$mcF$sp__B = typing.TypeVar('_foldLeft$mcF$sp__B')  # <B>
    def foldLeft$mcF$sp(self, zero: _foldLeft.mcF.sp__B, op: scala.Function1[scala.Tuple2[_foldLeft.mcF.sp__B, typing.Any], _foldLeft.mcF.sp__B]) -> _foldLeft.mcF.sp__B: ...
    _foldLeft$mcI$sp__B = typing.TypeVar('_foldLeft$mcI$sp__B')  # <B>
    def foldLeft$mcI$sp(self, zero: _foldLeft.mcI.sp__B, op: scala.Function1[scala.Tuple2[_foldLeft.mcI.sp__B, typing.Any], _foldLeft.mcI.sp__B]) -> _foldLeft.mcI.sp__B: ...
    _foldLeft$mcJ$sp__B = typing.TypeVar('_foldLeft$mcJ$sp__B')  # <B>
    def foldLeft$mcJ$sp(self, zero: _foldLeft.mcJ.sp__B, op: scala.Function1[scala.Tuple2[_foldLeft.mcJ.sp__B, typing.Any], _foldLeft.mcJ.sp__B]) -> _foldLeft.mcJ.sp__B: ...
    _foldLeft$mcS$sp__B = typing.TypeVar('_foldLeft$mcS$sp__B')  # <B>
    def foldLeft$mcS$sp(self, zero: _foldLeft.mcS.sp__B, op: scala.Function1[scala.Tuple2[_foldLeft.mcS.sp__B, typing.Any], _foldLeft.mcS.sp__B]) -> _foldLeft.mcS.sp__B: ...
    _foldLeft$mcV$sp__B = typing.TypeVar('_foldLeft$mcV$sp__B')  # <B>
    def foldLeft$mcV$sp(self, zero: _foldLeft.mcV.sp__B, op: scala.Function1[scala.Tuple2[_foldLeft.mcV.sp__B, scala.runtime.BoxedUnit], _foldLeft.mcV.sp__B]) -> _foldLeft.mcV.sp__B: ...
    _foldLeft$mcZ$sp__B = typing.TypeVar('_foldLeft$mcZ$sp__B')  # <B>
    def foldLeft$mcZ$sp(self, zero: _foldLeft.mcZ.sp__B, op: scala.Function1[scala.Tuple2[_foldLeft.mcZ.sp__B, typing.Any], _foldLeft.mcZ.sp__B]) -> _foldLeft.mcZ.sp__B: ...
    def forall(self, p: scala.Function1[_CReplColl__A, typing.Any]) -> bool: ...
    def forall$mcB$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> bool: ...
    def forall$mcC$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> bool: ...
    def forall$mcD$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> bool: ...
    def forall$mcF$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> bool: ...
    def forall$mcI$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> bool: ...
    def forall$mcJ$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> bool: ...
    def forall$mcS$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> bool: ...
    def forall$mcV$sp(self, p: scala.Function1[scala.runtime.BoxedUnit, typing.Any]) -> bool: ...
    def forall$mcZ$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> bool: ...
    def foreach(self, f: scala.Function1[_CReplColl__A, scala.runtime.BoxedUnit]) -> None: ...
    def foreach$mcB$sp(self, f: scala.Function1[typing.Any, scala.runtime.BoxedUnit]) -> None: ...
    def foreach$mcC$sp(self, f: scala.Function1[typing.Any, scala.runtime.BoxedUnit]) -> None: ...
    def foreach$mcD$sp(self, f: scala.Function1[typing.Any, scala.runtime.BoxedUnit]) -> None: ...
    def foreach$mcF$sp(self, f: scala.Function1[typing.Any, scala.runtime.BoxedUnit]) -> None: ...
    def foreach$mcI$sp(self, f: scala.Function1[typing.Any, scala.runtime.BoxedUnit]) -> None: ...
    def foreach$mcJ$sp(self, f: scala.Function1[typing.Any, scala.runtime.BoxedUnit]) -> None: ...
    def foreach$mcS$sp(self, f: scala.Function1[typing.Any, scala.runtime.BoxedUnit]) -> None: ...
    def foreach$mcV$sp(self, f: scala.Function1[scala.runtime.BoxedUnit, scala.runtime.BoxedUnit]) -> None: ...
    def foreach$mcZ$sp(self, f: scala.Function1[typing.Any, scala.runtime.BoxedUnit]) -> None: ...
    def getOrElse(self, i: int, default: _CReplColl__A) -> _CReplColl__A: ...
    def getOrElse$mcB$sp(self, i: int, default: int) -> int: ...
    def getOrElse$mcC$sp(self, i: int, default: str) -> str: ...
    def getOrElse$mcD$sp(self, i: int, default: float) -> float: ...
    def getOrElse$mcF$sp(self, i: int, default: float) -> float: ...
    def getOrElse$mcI$sp(self, i: int, default: int) -> int: ...
    def getOrElse$mcJ$sp(self, i: int, default: int) -> int: ...
    def getOrElse$mcS$sp(self, i: int, default: int) -> int: ...
    def getOrElse$mcV$sp(self, i: int, default: scala.runtime.BoxedUnit) -> None: ...
    def getOrElse$mcZ$sp(self, i: int, default: bool) -> bool: ...
    _groupBy__K = typing.TypeVar('_groupBy__K')  # <K>
    def groupBy(self, key: scala.Function1[_CReplColl__A, _groupBy__K], evidence$5: scalan.RType[_groupBy__K]) -> Coll[scala.Tuple2[_groupBy__K, Coll[_CReplColl__A]]]: ...
    _groupBy$mcB$sp__K = typing.TypeVar('_groupBy$mcB$sp__K')  # <K>
    def groupBy$mcB$sp(self, key: scala.Function1[typing.Any, _groupBy.mcB.sp__K], evidence$5: scalan.RType[_groupBy.mcB.sp__K]) -> Coll[scala.Tuple2[_groupBy.mcB.sp__K, Coll[typing.Any]]]: ...
    _groupBy$mcC$sp__K = typing.TypeVar('_groupBy$mcC$sp__K')  # <K>
    def groupBy$mcC$sp(self, key: scala.Function1[typing.Any, _groupBy.mcC.sp__K], evidence$5: scalan.RType[_groupBy.mcC.sp__K]) -> Coll[scala.Tuple2[_groupBy.mcC.sp__K, Coll[typing.Any]]]: ...
    _groupBy$mcD$sp__K = typing.TypeVar('_groupBy$mcD$sp__K')  # <K>
    def groupBy$mcD$sp(self, key: scala.Function1[typing.Any, _groupBy.mcD.sp__K], evidence$5: scalan.RType[_groupBy.mcD.sp__K]) -> Coll[scala.Tuple2[_groupBy.mcD.sp__K, Coll[typing.Any]]]: ...
    _groupBy$mcF$sp__K = typing.TypeVar('_groupBy$mcF$sp__K')  # <K>
    def groupBy$mcF$sp(self, key: scala.Function1[typing.Any, _groupBy.mcF.sp__K], evidence$5: scalan.RType[_groupBy.mcF.sp__K]) -> Coll[scala.Tuple2[_groupBy.mcF.sp__K, Coll[typing.Any]]]: ...
    _groupBy$mcI$sp__K = typing.TypeVar('_groupBy$mcI$sp__K')  # <K>
    def groupBy$mcI$sp(self, key: scala.Function1[typing.Any, _groupBy.mcI.sp__K], evidence$5: scalan.RType[_groupBy.mcI.sp__K]) -> Coll[scala.Tuple2[_groupBy.mcI.sp__K, Coll[typing.Any]]]: ...
    _groupBy$mcJ$sp__K = typing.TypeVar('_groupBy$mcJ$sp__K')  # <K>
    def groupBy$mcJ$sp(self, key: scala.Function1[typing.Any, _groupBy.mcJ.sp__K], evidence$5: scalan.RType[_groupBy.mcJ.sp__K]) -> Coll[scala.Tuple2[_groupBy.mcJ.sp__K, Coll[typing.Any]]]: ...
    _groupBy$mcS$sp__K = typing.TypeVar('_groupBy$mcS$sp__K')  # <K>
    def groupBy$mcS$sp(self, key: scala.Function1[typing.Any, _groupBy.mcS.sp__K], evidence$5: scalan.RType[_groupBy.mcS.sp__K]) -> Coll[scala.Tuple2[_groupBy.mcS.sp__K, Coll[typing.Any]]]: ...
    _groupBy$mcV$sp__K = typing.TypeVar('_groupBy$mcV$sp__K')  # <K>
    def groupBy$mcV$sp(self, key: scala.Function1[scala.runtime.BoxedUnit, _groupBy.mcV.sp__K], evidence$5: scalan.RType[_groupBy.mcV.sp__K]) -> Coll[scala.Tuple2[_groupBy.mcV.sp__K, Coll[scala.runtime.BoxedUnit]]]: ...
    _groupBy$mcZ$sp__K = typing.TypeVar('_groupBy$mcZ$sp__K')  # <K>
    def groupBy$mcZ$sp(self, key: scala.Function1[typing.Any, _groupBy.mcZ.sp__K], evidence$5: scalan.RType[_groupBy.mcZ.sp__K]) -> Coll[scala.Tuple2[_groupBy.mcZ.sp__K, Coll[typing.Any]]]: ...
    _groupByProjecting__K = typing.TypeVar('_groupByProjecting__K')  # <K>
    _groupByProjecting__V = typing.TypeVar('_groupByProjecting__V')  # <V>
    def groupByProjecting(self, key: scala.Function1[_CReplColl__A, _groupByProjecting__K], proj: scala.Function1[_CReplColl__A, _groupByProjecting__V], evidence$6: scalan.RType[_groupByProjecting__K], evidence$7: scalan.RType[_groupByProjecting__V]) -> Coll[scala.Tuple2[_groupByProjecting__K, Coll[_groupByProjecting__V]]]: ...
    _groupByProjecting$mcB$sp__K = typing.TypeVar('_groupByProjecting$mcB$sp__K')  # <K>
    _groupByProjecting$mcB$sp__V = typing.TypeVar('_groupByProjecting$mcB$sp__V')  # <V>
    def groupByProjecting$mcB$sp(self, key: scala.Function1[typing.Any, _groupByProjecting.mcB.sp__K], proj: scala.Function1[typing.Any, _groupByProjecting.mcB.sp__V], evidence$6: scalan.RType[_groupByProjecting.mcB.sp__K], evidence$7: scalan.RType[_groupByProjecting.mcB.sp__V]) -> Coll[scala.Tuple2[_groupByProjecting.mcB.sp__K, Coll[_groupByProjecting.mcB.sp__V]]]: ...
    _groupByProjecting$mcC$sp__K = typing.TypeVar('_groupByProjecting$mcC$sp__K')  # <K>
    _groupByProjecting$mcC$sp__V = typing.TypeVar('_groupByProjecting$mcC$sp__V')  # <V>
    def groupByProjecting$mcC$sp(self, key: scala.Function1[typing.Any, _groupByProjecting.mcC.sp__K], proj: scala.Function1[typing.Any, _groupByProjecting.mcC.sp__V], evidence$6: scalan.RType[_groupByProjecting.mcC.sp__K], evidence$7: scalan.RType[_groupByProjecting.mcC.sp__V]) -> Coll[scala.Tuple2[_groupByProjecting.mcC.sp__K, Coll[_groupByProjecting.mcC.sp__V]]]: ...
    _groupByProjecting$mcD$sp__K = typing.TypeVar('_groupByProjecting$mcD$sp__K')  # <K>
    _groupByProjecting$mcD$sp__V = typing.TypeVar('_groupByProjecting$mcD$sp__V')  # <V>
    def groupByProjecting$mcD$sp(self, key: scala.Function1[typing.Any, _groupByProjecting.mcD.sp__K], proj: scala.Function1[typing.Any, _groupByProjecting.mcD.sp__V], evidence$6: scalan.RType[_groupByProjecting.mcD.sp__K], evidence$7: scalan.RType[_groupByProjecting.mcD.sp__V]) -> Coll[scala.Tuple2[_groupByProjecting.mcD.sp__K, Coll[_groupByProjecting.mcD.sp__V]]]: ...
    _groupByProjecting$mcF$sp__K = typing.TypeVar('_groupByProjecting$mcF$sp__K')  # <K>
    _groupByProjecting$mcF$sp__V = typing.TypeVar('_groupByProjecting$mcF$sp__V')  # <V>
    def groupByProjecting$mcF$sp(self, key: scala.Function1[typing.Any, _groupByProjecting.mcF.sp__K], proj: scala.Function1[typing.Any, _groupByProjecting.mcF.sp__V], evidence$6: scalan.RType[_groupByProjecting.mcF.sp__K], evidence$7: scalan.RType[_groupByProjecting.mcF.sp__V]) -> Coll[scala.Tuple2[_groupByProjecting.mcF.sp__K, Coll[_groupByProjecting.mcF.sp__V]]]: ...
    _groupByProjecting$mcI$sp__K = typing.TypeVar('_groupByProjecting$mcI$sp__K')  # <K>
    _groupByProjecting$mcI$sp__V = typing.TypeVar('_groupByProjecting$mcI$sp__V')  # <V>
    def groupByProjecting$mcI$sp(self, key: scala.Function1[typing.Any, _groupByProjecting.mcI.sp__K], proj: scala.Function1[typing.Any, _groupByProjecting.mcI.sp__V], evidence$6: scalan.RType[_groupByProjecting.mcI.sp__K], evidence$7: scalan.RType[_groupByProjecting.mcI.sp__V]) -> Coll[scala.Tuple2[_groupByProjecting.mcI.sp__K, Coll[_groupByProjecting.mcI.sp__V]]]: ...
    _groupByProjecting$mcJ$sp__K = typing.TypeVar('_groupByProjecting$mcJ$sp__K')  # <K>
    _groupByProjecting$mcJ$sp__V = typing.TypeVar('_groupByProjecting$mcJ$sp__V')  # <V>
    def groupByProjecting$mcJ$sp(self, key: scala.Function1[typing.Any, _groupByProjecting.mcJ.sp__K], proj: scala.Function1[typing.Any, _groupByProjecting.mcJ.sp__V], evidence$6: scalan.RType[_groupByProjecting.mcJ.sp__K], evidence$7: scalan.RType[_groupByProjecting.mcJ.sp__V]) -> Coll[scala.Tuple2[_groupByProjecting.mcJ.sp__K, Coll[_groupByProjecting.mcJ.sp__V]]]: ...
    _groupByProjecting$mcS$sp__K = typing.TypeVar('_groupByProjecting$mcS$sp__K')  # <K>
    _groupByProjecting$mcS$sp__V = typing.TypeVar('_groupByProjecting$mcS$sp__V')  # <V>
    def groupByProjecting$mcS$sp(self, key: scala.Function1[typing.Any, _groupByProjecting.mcS.sp__K], proj: scala.Function1[typing.Any, _groupByProjecting.mcS.sp__V], evidence$6: scalan.RType[_groupByProjecting.mcS.sp__K], evidence$7: scalan.RType[_groupByProjecting.mcS.sp__V]) -> Coll[scala.Tuple2[_groupByProjecting.mcS.sp__K, Coll[_groupByProjecting.mcS.sp__V]]]: ...
    _groupByProjecting$mcV$sp__K = typing.TypeVar('_groupByProjecting$mcV$sp__K')  # <K>
    _groupByProjecting$mcV$sp__V = typing.TypeVar('_groupByProjecting$mcV$sp__V')  # <V>
    def groupByProjecting$mcV$sp(self, key: scala.Function1[scala.runtime.BoxedUnit, _groupByProjecting.mcV.sp__K], proj: scala.Function1[scala.runtime.BoxedUnit, _groupByProjecting.mcV.sp__V], evidence$6: scalan.RType[_groupByProjecting.mcV.sp__K], evidence$7: scalan.RType[_groupByProjecting.mcV.sp__V]) -> Coll[scala.Tuple2[_groupByProjecting.mcV.sp__K, Coll[_groupByProjecting.mcV.sp__V]]]: ...
    _groupByProjecting$mcZ$sp__K = typing.TypeVar('_groupByProjecting$mcZ$sp__K')  # <K>
    _groupByProjecting$mcZ$sp__V = typing.TypeVar('_groupByProjecting$mcZ$sp__V')  # <V>
    def groupByProjecting$mcZ$sp(self, key: scala.Function1[typing.Any, _groupByProjecting.mcZ.sp__K], proj: scala.Function1[typing.Any, _groupByProjecting.mcZ.sp__V], evidence$6: scalan.RType[_groupByProjecting.mcZ.sp__K], evidence$7: scalan.RType[_groupByProjecting.mcZ.sp__V]) -> Coll[scala.Tuple2[_groupByProjecting.mcZ.sp__K, Coll[_groupByProjecting.mcZ.sp__V]]]: ...
    def hashCode(self) -> int: ...
    def indexOf(self, elem: _CReplColl__A, from_: int) -> int: ...
    def indexOf$mcB$sp(self, elem: int, from_: int) -> int: ...
    def indexOf$mcC$sp(self, elem: str, from_: int) -> int: ...
    def indexOf$mcD$sp(self, elem: float, from_: int) -> int: ...
    def indexOf$mcF$sp(self, elem: float, from_: int) -> int: ...
    def indexOf$mcI$sp(self, elem: int, from_: int) -> int: ...
    def indexOf$mcJ$sp(self, elem: int, from_: int) -> int: ...
    def indexOf$mcS$sp(self, elem: int, from_: int) -> int: ...
    def indexOf$mcV$sp(self, elem: scala.runtime.BoxedUnit, from_: int) -> int: ...
    def indexOf$mcZ$sp(self, elem: bool, from_: int) -> int: ...
    def indexWhere(self, p: scala.Function1[_CReplColl__A, typing.Any], from_: int) -> int: ...
    def indexWhere$mcB$sp(self, p: scala.Function1[typing.Any, typing.Any], from_: int) -> int: ...
    def indexWhere$mcC$sp(self, p: scala.Function1[typing.Any, typing.Any], from_: int) -> int: ...
    def indexWhere$mcD$sp(self, p: scala.Function1[typing.Any, typing.Any], from_: int) -> int: ...
    def indexWhere$mcF$sp(self, p: scala.Function1[typing.Any, typing.Any], from_: int) -> int: ...
    def indexWhere$mcI$sp(self, p: scala.Function1[typing.Any, typing.Any], from_: int) -> int: ...
    def indexWhere$mcJ$sp(self, p: scala.Function1[typing.Any, typing.Any], from_: int) -> int: ...
    def indexWhere$mcS$sp(self, p: scala.Function1[typing.Any, typing.Any], from_: int) -> int: ...
    def indexWhere$mcV$sp(self, p: scala.Function1[scala.runtime.BoxedUnit, typing.Any], from_: int) -> int: ...
    def indexWhere$mcZ$sp(self, p: scala.Function1[typing.Any, typing.Any], from_: int) -> int: ...
    def indices(self) -> Coll[typing.Any]: ...
    def intersect(self, that: Coll[_CReplColl__A]) -> Coll[_CReplColl__A]: ...
    def intersect$mcB$sp(self, that: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def intersect$mcC$sp(self, that: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def intersect$mcD$sp(self, that: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def intersect$mcF$sp(self, that: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def intersect$mcI$sp(self, that: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def intersect$mcJ$sp(self, that: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def intersect$mcS$sp(self, that: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def intersect$mcV$sp(self, that: Coll[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def intersect$mcZ$sp(self, that: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def isDefinedAt(self, idx: int) -> bool: ...
    def isEmpty(self) -> bool: ...
    def isReplArray(self, len: int, value: _CReplColl__A) -> bool: ...
    def isReplArray$mcB$sp(self, len: int, value: int) -> bool: ...
    def isReplArray$mcC$sp(self, len: int, value: str) -> bool: ...
    def isReplArray$mcD$sp(self, len: int, value: float) -> bool: ...
    def isReplArray$mcF$sp(self, len: int, value: float) -> bool: ...
    def isReplArray$mcI$sp(self, len: int, value: int) -> bool: ...
    def isReplArray$mcJ$sp(self, len: int, value: int) -> bool: ...
    def isReplArray$mcS$sp(self, len: int, value: int) -> bool: ...
    def isReplArray$mcV$sp(self, len: int, value: scala.runtime.BoxedUnit) -> bool: ...
    def isReplArray$mcZ$sp(self, len: int, value: bool) -> bool: ...
    def isValidIndex(self, i: int) -> bool: ...
    def lastIndexWhere(self, p: scala.Function1[_CReplColl__A, typing.Any], end: int) -> int: ...
    def lastIndexWhere$mcB$sp(self, p: scala.Function1[typing.Any, typing.Any], end: int) -> int: ...
    def lastIndexWhere$mcC$sp(self, p: scala.Function1[typing.Any, typing.Any], end: int) -> int: ...
    def lastIndexWhere$mcD$sp(self, p: scala.Function1[typing.Any, typing.Any], end: int) -> int: ...
    def lastIndexWhere$mcF$sp(self, p: scala.Function1[typing.Any, typing.Any], end: int) -> int: ...
    def lastIndexWhere$mcI$sp(self, p: scala.Function1[typing.Any, typing.Any], end: int) -> int: ...
    def lastIndexWhere$mcJ$sp(self, p: scala.Function1[typing.Any, typing.Any], end: int) -> int: ...
    def lastIndexWhere$mcS$sp(self, p: scala.Function1[typing.Any, typing.Any], end: int) -> int: ...
    def lastIndexWhere$mcV$sp(self, p: scala.Function1[scala.runtime.BoxedUnit, typing.Any], end: int) -> int: ...
    def lastIndexWhere$mcZ$sp(self, p: scala.Function1[typing.Any, typing.Any], end: int) -> int: ...
    def length(self) -> int: ...
    _map__B = typing.TypeVar('_map__B')  # <B>
    def map(self, f: scala.Function1[_CReplColl__A, _map__B], evidence$20: scalan.RType[_map__B]) -> Coll[_map__B]: ...
    def map$mBc$sp(self, f: scala.Function1[_CReplColl__A, typing.Any], evidence$20: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mBcB$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$20: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mBcC$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$20: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mBcD$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$20: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mBcF$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$20: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mBcI$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$20: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mBcJ$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$20: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mBcS$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$20: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mBcV$sp(self, f: scala.Function1[scala.runtime.BoxedUnit, typing.Any], evidence$20: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mBcZ$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$20: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mCc$sp(self, f: scala.Function1[_CReplColl__A, typing.Any], evidence$20: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mCcB$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$20: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mCcC$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$20: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mCcD$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$20: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mCcF$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$20: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mCcI$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$20: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mCcJ$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$20: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mCcS$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$20: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mCcV$sp(self, f: scala.Function1[scala.runtime.BoxedUnit, typing.Any], evidence$20: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mCcZ$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$20: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mDc$sp(self, f: scala.Function1[_CReplColl__A, typing.Any], evidence$20: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mDcB$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$20: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mDcC$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$20: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mDcD$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$20: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mDcF$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$20: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mDcI$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$20: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mDcJ$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$20: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mDcS$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$20: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mDcV$sp(self, f: scala.Function1[scala.runtime.BoxedUnit, typing.Any], evidence$20: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mDcZ$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$20: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mFc$sp(self, f: scala.Function1[_CReplColl__A, typing.Any], evidence$20: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mFcB$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$20: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mFcC$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$20: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mFcD$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$20: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mFcF$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$20: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mFcI$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$20: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mFcJ$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$20: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mFcS$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$20: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mFcV$sp(self, f: scala.Function1[scala.runtime.BoxedUnit, typing.Any], evidence$20: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mFcZ$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$20: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mIc$sp(self, f: scala.Function1[_CReplColl__A, typing.Any], evidence$20: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mIcB$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$20: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mIcC$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$20: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mIcD$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$20: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mIcF$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$20: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mIcI$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$20: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mIcJ$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$20: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mIcS$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$20: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mIcV$sp(self, f: scala.Function1[scala.runtime.BoxedUnit, typing.Any], evidence$20: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mIcZ$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$20: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mJc$sp(self, f: scala.Function1[_CReplColl__A, typing.Any], evidence$20: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mJcB$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$20: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mJcC$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$20: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mJcD$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$20: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mJcF$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$20: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mJcI$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$20: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mJcJ$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$20: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mJcS$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$20: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mJcV$sp(self, f: scala.Function1[scala.runtime.BoxedUnit, typing.Any], evidence$20: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mJcZ$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$20: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mSc$sp(self, f: scala.Function1[_CReplColl__A, typing.Any], evidence$20: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mScB$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$20: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mScC$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$20: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mScD$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$20: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mScF$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$20: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mScI$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$20: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mScJ$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$20: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mScS$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$20: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mScV$sp(self, f: scala.Function1[scala.runtime.BoxedUnit, typing.Any], evidence$20: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mScZ$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$20: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mVc$sp(self, f: scala.Function1[_CReplColl__A, scala.runtime.BoxedUnit], evidence$20: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def map$mVcB$sp(self, f: scala.Function1[typing.Any, scala.runtime.BoxedUnit], evidence$20: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def map$mVcC$sp(self, f: scala.Function1[typing.Any, scala.runtime.BoxedUnit], evidence$20: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def map$mVcD$sp(self, f: scala.Function1[typing.Any, scala.runtime.BoxedUnit], evidence$20: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def map$mVcF$sp(self, f: scala.Function1[typing.Any, scala.runtime.BoxedUnit], evidence$20: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def map$mVcI$sp(self, f: scala.Function1[typing.Any, scala.runtime.BoxedUnit], evidence$20: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def map$mVcJ$sp(self, f: scala.Function1[typing.Any, scala.runtime.BoxedUnit], evidence$20: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def map$mVcS$sp(self, f: scala.Function1[typing.Any, scala.runtime.BoxedUnit], evidence$20: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def map$mVcV$sp(self, f: scala.Function1[scala.runtime.BoxedUnit, scala.runtime.BoxedUnit], evidence$20: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def map$mVcZ$sp(self, f: scala.Function1[typing.Any, scala.runtime.BoxedUnit], evidence$20: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def map$mZc$sp(self, f: scala.Function1[_CReplColl__A, typing.Any], evidence$20: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mZcB$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$20: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mZcC$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$20: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mZcD$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$20: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mZcF$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$20: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mZcI$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$20: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mZcJ$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$20: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mZcS$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$20: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mZcV$sp(self, f: scala.Function1[scala.runtime.BoxedUnit, typing.Any], evidence$20: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mZcZ$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$20: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    _map$mcB$sp__B = typing.TypeVar('_map$mcB$sp__B')  # <B>
    def map$mcB$sp(self, f: scala.Function1[typing.Any, _map.mcB.sp__B], evidence$20: scalan.RType[_map.mcB.sp__B]) -> Coll[_map.mcB.sp__B]: ...
    _map$mcC$sp__B = typing.TypeVar('_map$mcC$sp__B')  # <B>
    def map$mcC$sp(self, f: scala.Function1[typing.Any, _map.mcC.sp__B], evidence$20: scalan.RType[_map.mcC.sp__B]) -> Coll[_map.mcC.sp__B]: ...
    _map$mcD$sp__B = typing.TypeVar('_map$mcD$sp__B')  # <B>
    def map$mcD$sp(self, f: scala.Function1[typing.Any, _map.mcD.sp__B], evidence$20: scalan.RType[_map.mcD.sp__B]) -> Coll[_map.mcD.sp__B]: ...
    _map$mcF$sp__B = typing.TypeVar('_map$mcF$sp__B')  # <B>
    def map$mcF$sp(self, f: scala.Function1[typing.Any, _map.mcF.sp__B], evidence$20: scalan.RType[_map.mcF.sp__B]) -> Coll[_map.mcF.sp__B]: ...
    _map$mcI$sp__B = typing.TypeVar('_map$mcI$sp__B')  # <B>
    def map$mcI$sp(self, f: scala.Function1[typing.Any, _map.mcI.sp__B], evidence$20: scalan.RType[_map.mcI.sp__B]) -> Coll[_map.mcI.sp__B]: ...
    _map$mcJ$sp__B = typing.TypeVar('_map$mcJ$sp__B')  # <B>
    def map$mcJ$sp(self, f: scala.Function1[typing.Any, _map.mcJ.sp__B], evidence$20: scalan.RType[_map.mcJ.sp__B]) -> Coll[_map.mcJ.sp__B]: ...
    _map$mcS$sp__B = typing.TypeVar('_map$mcS$sp__B')  # <B>
    def map$mcS$sp(self, f: scala.Function1[typing.Any, _map.mcS.sp__B], evidence$20: scalan.RType[_map.mcS.sp__B]) -> Coll[_map.mcS.sp__B]: ...
    _map$mcV$sp__B = typing.TypeVar('_map$mcV$sp__B')  # <B>
    def map$mcV$sp(self, f: scala.Function1[scala.runtime.BoxedUnit, _map.mcV.sp__B], evidence$20: scalan.RType[_map.mcV.sp__B]) -> Coll[_map.mcV.sp__B]: ...
    _map$mcZ$sp__B = typing.TypeVar('_map$mcZ$sp__B')  # <B>
    def map$mcZ$sp(self, f: scala.Function1[typing.Any, _map.mcZ.sp__B], evidence$20: scalan.RType[_map.mcZ.sp__B]) -> Coll[_map.mcZ.sp__B]: ...
    _mapReduce__K = typing.TypeVar('_mapReduce__K')  # <K>
    _mapReduce__V = typing.TypeVar('_mapReduce__V')  # <V>
    def mapReduce(self, m: scala.Function1[_CReplColl__A, scala.Tuple2[_mapReduce__K, _mapReduce__V]], r: scala.Function1[scala.Tuple2[_mapReduce__V, _mapReduce__V], _mapReduce__V], evidence$22: scalan.RType[_mapReduce__K], evidence$23: scalan.RType[_mapReduce__V]) -> Coll[scala.Tuple2[_mapReduce__K, _mapReduce__V]]: ...
    _mapReduce$mcB$sp__K = typing.TypeVar('_mapReduce$mcB$sp__K')  # <K>
    _mapReduce$mcB$sp__V = typing.TypeVar('_mapReduce$mcB$sp__V')  # <V>
    def mapReduce$mcB$sp(self, m: scala.Function1[typing.Any, scala.Tuple2[_mapReduce.mcB.sp__K, _mapReduce.mcB.sp__V]], r: scala.Function1[scala.Tuple2[_mapReduce.mcB.sp__V, _mapReduce.mcB.sp__V], _mapReduce.mcB.sp__V], evidence$22: scalan.RType[_mapReduce.mcB.sp__K], evidence$23: scalan.RType[_mapReduce.mcB.sp__V]) -> Coll[scala.Tuple2[_mapReduce.mcB.sp__K, _mapReduce.mcB.sp__V]]: ...
    _mapReduce$mcC$sp__K = typing.TypeVar('_mapReduce$mcC$sp__K')  # <K>
    _mapReduce$mcC$sp__V = typing.TypeVar('_mapReduce$mcC$sp__V')  # <V>
    def mapReduce$mcC$sp(self, m: scala.Function1[typing.Any, scala.Tuple2[_mapReduce.mcC.sp__K, _mapReduce.mcC.sp__V]], r: scala.Function1[scala.Tuple2[_mapReduce.mcC.sp__V, _mapReduce.mcC.sp__V], _mapReduce.mcC.sp__V], evidence$22: scalan.RType[_mapReduce.mcC.sp__K], evidence$23: scalan.RType[_mapReduce.mcC.sp__V]) -> Coll[scala.Tuple2[_mapReduce.mcC.sp__K, _mapReduce.mcC.sp__V]]: ...
    _mapReduce$mcD$sp__K = typing.TypeVar('_mapReduce$mcD$sp__K')  # <K>
    _mapReduce$mcD$sp__V = typing.TypeVar('_mapReduce$mcD$sp__V')  # <V>
    def mapReduce$mcD$sp(self, m: scala.Function1[typing.Any, scala.Tuple2[_mapReduce.mcD.sp__K, _mapReduce.mcD.sp__V]], r: scala.Function1[scala.Tuple2[_mapReduce.mcD.sp__V, _mapReduce.mcD.sp__V], _mapReduce.mcD.sp__V], evidence$22: scalan.RType[_mapReduce.mcD.sp__K], evidence$23: scalan.RType[_mapReduce.mcD.sp__V]) -> Coll[scala.Tuple2[_mapReduce.mcD.sp__K, _mapReduce.mcD.sp__V]]: ...
    _mapReduce$mcF$sp__K = typing.TypeVar('_mapReduce$mcF$sp__K')  # <K>
    _mapReduce$mcF$sp__V = typing.TypeVar('_mapReduce$mcF$sp__V')  # <V>
    def mapReduce$mcF$sp(self, m: scala.Function1[typing.Any, scala.Tuple2[_mapReduce.mcF.sp__K, _mapReduce.mcF.sp__V]], r: scala.Function1[scala.Tuple2[_mapReduce.mcF.sp__V, _mapReduce.mcF.sp__V], _mapReduce.mcF.sp__V], evidence$22: scalan.RType[_mapReduce.mcF.sp__K], evidence$23: scalan.RType[_mapReduce.mcF.sp__V]) -> Coll[scala.Tuple2[_mapReduce.mcF.sp__K, _mapReduce.mcF.sp__V]]: ...
    _mapReduce$mcI$sp__K = typing.TypeVar('_mapReduce$mcI$sp__K')  # <K>
    _mapReduce$mcI$sp__V = typing.TypeVar('_mapReduce$mcI$sp__V')  # <V>
    def mapReduce$mcI$sp(self, m: scala.Function1[typing.Any, scala.Tuple2[_mapReduce.mcI.sp__K, _mapReduce.mcI.sp__V]], r: scala.Function1[scala.Tuple2[_mapReduce.mcI.sp__V, _mapReduce.mcI.sp__V], _mapReduce.mcI.sp__V], evidence$22: scalan.RType[_mapReduce.mcI.sp__K], evidence$23: scalan.RType[_mapReduce.mcI.sp__V]) -> Coll[scala.Tuple2[_mapReduce.mcI.sp__K, _mapReduce.mcI.sp__V]]: ...
    _mapReduce$mcJ$sp__K = typing.TypeVar('_mapReduce$mcJ$sp__K')  # <K>
    _mapReduce$mcJ$sp__V = typing.TypeVar('_mapReduce$mcJ$sp__V')  # <V>
    def mapReduce$mcJ$sp(self, m: scala.Function1[typing.Any, scala.Tuple2[_mapReduce.mcJ.sp__K, _mapReduce.mcJ.sp__V]], r: scala.Function1[scala.Tuple2[_mapReduce.mcJ.sp__V, _mapReduce.mcJ.sp__V], _mapReduce.mcJ.sp__V], evidence$22: scalan.RType[_mapReduce.mcJ.sp__K], evidence$23: scalan.RType[_mapReduce.mcJ.sp__V]) -> Coll[scala.Tuple2[_mapReduce.mcJ.sp__K, _mapReduce.mcJ.sp__V]]: ...
    _mapReduce$mcS$sp__K = typing.TypeVar('_mapReduce$mcS$sp__K')  # <K>
    _mapReduce$mcS$sp__V = typing.TypeVar('_mapReduce$mcS$sp__V')  # <V>
    def mapReduce$mcS$sp(self, m: scala.Function1[typing.Any, scala.Tuple2[_mapReduce.mcS.sp__K, _mapReduce.mcS.sp__V]], r: scala.Function1[scala.Tuple2[_mapReduce.mcS.sp__V, _mapReduce.mcS.sp__V], _mapReduce.mcS.sp__V], evidence$22: scalan.RType[_mapReduce.mcS.sp__K], evidence$23: scalan.RType[_mapReduce.mcS.sp__V]) -> Coll[scala.Tuple2[_mapReduce.mcS.sp__K, _mapReduce.mcS.sp__V]]: ...
    _mapReduce$mcV$sp__K = typing.TypeVar('_mapReduce$mcV$sp__K')  # <K>
    _mapReduce$mcV$sp__V = typing.TypeVar('_mapReduce$mcV$sp__V')  # <V>
    def mapReduce$mcV$sp(self, m: scala.Function1[scala.runtime.BoxedUnit, scala.Tuple2[_mapReduce.mcV.sp__K, _mapReduce.mcV.sp__V]], r: scala.Function1[scala.Tuple2[_mapReduce.mcV.sp__V, _mapReduce.mcV.sp__V], _mapReduce.mcV.sp__V], evidence$22: scalan.RType[_mapReduce.mcV.sp__K], evidence$23: scalan.RType[_mapReduce.mcV.sp__V]) -> Coll[scala.Tuple2[_mapReduce.mcV.sp__K, _mapReduce.mcV.sp__V]]: ...
    _mapReduce$mcZ$sp__K = typing.TypeVar('_mapReduce$mcZ$sp__K')  # <K>
    _mapReduce$mcZ$sp__V = typing.TypeVar('_mapReduce$mcZ$sp__V')  # <V>
    def mapReduce$mcZ$sp(self, m: scala.Function1[typing.Any, scala.Tuple2[_mapReduce.mcZ.sp__K, _mapReduce.mcZ.sp__V]], r: scala.Function1[scala.Tuple2[_mapReduce.mcZ.sp__V, _mapReduce.mcZ.sp__V], _mapReduce.mcZ.sp__V], evidence$22: scalan.RType[_mapReduce.mcZ.sp__K], evidence$23: scalan.RType[_mapReduce.mcZ.sp__V]) -> Coll[scala.Tuple2[_mapReduce.mcZ.sp__K, _mapReduce.mcZ.sp__V]]: ...
    def nonEmpty(self) -> bool: ...
    def partition(self, pred: scala.Function1[_CReplColl__A, typing.Any]) -> scala.Tuple2[Coll[_CReplColl__A], Coll[_CReplColl__A]]: ...
    def partition$mcB$sp(self, pred: scala.Function1[typing.Any, typing.Any]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def partition$mcC$sp(self, pred: scala.Function1[typing.Any, typing.Any]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def partition$mcD$sp(self, pred: scala.Function1[typing.Any, typing.Any]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def partition$mcF$sp(self, pred: scala.Function1[typing.Any, typing.Any]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def partition$mcI$sp(self, pred: scala.Function1[typing.Any, typing.Any]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def partition$mcJ$sp(self, pred: scala.Function1[typing.Any, typing.Any]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def partition$mcS$sp(self, pred: scala.Function1[typing.Any, typing.Any]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def partition$mcV$sp(self, pred: scala.Function1[scala.runtime.BoxedUnit, typing.Any]) -> scala.Tuple2[Coll[scala.runtime.BoxedUnit], Coll[scala.runtime.BoxedUnit]]: ...
    def partition$mcZ$sp(self, pred: scala.Function1[typing.Any, typing.Any]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def patch(self, from_: int, patch: Coll[_CReplColl__A], replaced: int) -> Coll[_CReplColl__A]: ...
    def patch$mcB$sp(self, from_: int, patch: Coll[typing.Any], replaced: int) -> Coll[typing.Any]: ...
    def patch$mcC$sp(self, from_: int, patch: Coll[typing.Any], replaced: int) -> Coll[typing.Any]: ...
    def patch$mcD$sp(self, from_: int, patch: Coll[typing.Any], replaced: int) -> Coll[typing.Any]: ...
    def patch$mcF$sp(self, from_: int, patch: Coll[typing.Any], replaced: int) -> Coll[typing.Any]: ...
    def patch$mcI$sp(self, from_: int, patch: Coll[typing.Any], replaced: int) -> Coll[typing.Any]: ...
    def patch$mcJ$sp(self, from_: int, patch: Coll[typing.Any], replaced: int) -> Coll[typing.Any]: ...
    def patch$mcS$sp(self, from_: int, patch: Coll[typing.Any], replaced: int) -> Coll[typing.Any]: ...
    def patch$mcV$sp(self, from_: int, patch: Coll[scala.runtime.BoxedUnit], replaced: int) -> Coll[scala.runtime.BoxedUnit]: ...
    def patch$mcZ$sp(self, from_: int, patch: Coll[typing.Any], replaced: int) -> Coll[typing.Any]: ...
    def reverse(self) -> Coll[_CReplColl__A]: ...
    def reverse$mcB$sp(self) -> Coll[typing.Any]: ...
    def reverse$mcC$sp(self) -> Coll[typing.Any]: ...
    def reverse$mcD$sp(self) -> Coll[typing.Any]: ...
    def reverse$mcF$sp(self) -> Coll[typing.Any]: ...
    def reverse$mcI$sp(self) -> Coll[typing.Any]: ...
    def reverse$mcJ$sp(self) -> Coll[typing.Any]: ...
    def reverse$mcS$sp(self) -> Coll[typing.Any]: ...
    def reverse$mcV$sp(self) -> Coll[scala.runtime.BoxedUnit]: ...
    def reverse$mcZ$sp(self) -> Coll[typing.Any]: ...
    def segmentLength(self, p: scala.Function1[_CReplColl__A, typing.Any], from_: int) -> int: ...
    def segmentLength$mcB$sp(self, p: scala.Function1[typing.Any, typing.Any], from_: int) -> int: ...
    def segmentLength$mcC$sp(self, p: scala.Function1[typing.Any, typing.Any], from_: int) -> int: ...
    def segmentLength$mcD$sp(self, p: scala.Function1[typing.Any, typing.Any], from_: int) -> int: ...
    def segmentLength$mcF$sp(self, p: scala.Function1[typing.Any, typing.Any], from_: int) -> int: ...
    def segmentLength$mcI$sp(self, p: scala.Function1[typing.Any, typing.Any], from_: int) -> int: ...
    def segmentLength$mcJ$sp(self, p: scala.Function1[typing.Any, typing.Any], from_: int) -> int: ...
    def segmentLength$mcS$sp(self, p: scala.Function1[typing.Any, typing.Any], from_: int) -> int: ...
    def segmentLength$mcV$sp(self, p: scala.Function1[scala.runtime.BoxedUnit, typing.Any], from_: int) -> int: ...
    def segmentLength$mcZ$sp(self, p: scala.Function1[typing.Any, typing.Any], from_: int) -> int: ...
    def size(self) -> int: ...
    def slice(self, from_: int, until: int) -> Coll[_CReplColl__A]: ...
    def slice$mcB$sp(self, from_: int, until: int) -> Coll[typing.Any]: ...
    def slice$mcC$sp(self, from_: int, until: int) -> Coll[typing.Any]: ...
    def slice$mcD$sp(self, from_: int, until: int) -> Coll[typing.Any]: ...
    def slice$mcF$sp(self, from_: int, until: int) -> Coll[typing.Any]: ...
    def slice$mcI$sp(self, from_: int, until: int) -> Coll[typing.Any]: ...
    def slice$mcJ$sp(self, from_: int, until: int) -> Coll[typing.Any]: ...
    def slice$mcS$sp(self, from_: int, until: int) -> Coll[typing.Any]: ...
    def slice$mcV$sp(self, from_: int, until: int) -> Coll[scala.runtime.BoxedUnit]: ...
    def slice$mcZ$sp(self, from_: int, until: int) -> Coll[typing.Any]: ...
    def specInstance$(self) -> bool: ...
    def sum(self, m: Monoid[_CReplColl__A]) -> _CReplColl__A: ...
    def sum$mcB$sp(self, m: Monoid[typing.Any]) -> int: ...
    def sum$mcC$sp(self, m: Monoid[typing.Any]) -> str: ...
    def sum$mcD$sp(self, m: Monoid[typing.Any]) -> float: ...
    def sum$mcF$sp(self, m: Monoid[typing.Any]) -> float: ...
    def sum$mcI$sp(self, m: Monoid[typing.Any]) -> int: ...
    def sum$mcJ$sp(self, m: Monoid[typing.Any]) -> int: ...
    def sum$mcS$sp(self, m: Monoid[typing.Any]) -> int: ...
    def sum$mcV$sp(self, m: Monoid[scala.runtime.BoxedUnit]) -> None: ...
    def sum$mcZ$sp(self, m: Monoid[typing.Any]) -> bool: ...
    def tItem(self) -> scalan.RType[_CReplColl__A]: ...
    def take(self, n: int) -> Coll[_CReplColl__A]: ...
    def take$mcB$sp(self, n: int) -> Coll[typing.Any]: ...
    def take$mcC$sp(self, n: int) -> Coll[typing.Any]: ...
    def take$mcD$sp(self, n: int) -> Coll[typing.Any]: ...
    def take$mcF$sp(self, n: int) -> Coll[typing.Any]: ...
    def take$mcI$sp(self, n: int) -> Coll[typing.Any]: ...
    def take$mcJ$sp(self, n: int) -> Coll[typing.Any]: ...
    def take$mcS$sp(self, n: int) -> Coll[typing.Any]: ...
    def take$mcV$sp(self, n: int) -> Coll[scala.runtime.BoxedUnit]: ...
    def take$mcZ$sp(self, n: int) -> Coll[typing.Any]: ...
    def toArray(self) -> typing.Any: ...
    def toArray$mcB$sp(self) -> typing.List[int]: ...
    def toArray$mcC$sp(self) -> typing.List[str]: ...
    def toArray$mcD$sp(self) -> typing.List[float]: ...
    def toArray$mcF$sp(self) -> typing.List[float]: ...
    def toArray$mcI$sp(self) -> typing.List[int]: ...
    def toArray$mcJ$sp(self) -> typing.List[int]: ...
    def toArray$mcS$sp(self) -> typing.List[int]: ...
    def toArray$mcV$sp(self) -> typing.List[scala.runtime.BoxedUnit]: ...
    def toArray$mcZ$sp(self) -> typing.List[bool]: ...
    _toMap__T = typing.TypeVar('_toMap__T')  # <T>
    _toMap__U = typing.TypeVar('_toMap__U')  # <U>
    def toMap(self, ev: scala.Predef..less.colon.less[_CReplColl__A, scala.Tuple2[_toMap__T, _toMap__U]]) -> scala.collection.immutable.Map[_toMap__T, _toMap__U]: ...
    def toString(self) -> str: ...
    def unionSet(self, that: Coll[_CReplColl__A]) -> Coll[_CReplColl__A]: ...
    def unionSet$mcB$sp(self, that: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def unionSet$mcC$sp(self, that: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def unionSet$mcD$sp(self, that: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def unionSet$mcF$sp(self, that: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def unionSet$mcI$sp(self, that: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def unionSet$mcJ$sp(self, that: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def unionSet$mcS$sp(self, that: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def unionSet$mcV$sp(self, that: Coll[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def unionSet$mcZ$sp(self, that: Coll[typing.Any]) -> Coll[typing.Any]: ...
    _unionSetByKey__T = typing.TypeVar('_unionSetByKey__T')  # <T>
    _unionSetByKey__U = typing.TypeVar('_unionSetByKey__U')  # <U>
    def unionSetByKey(self, that: Coll[_CReplColl__A], ev: scala.Predef..less.colon.less[_CReplColl__A, scala.Tuple2[_unionSetByKey__T, _unionSetByKey__U]]) -> Coll[_CReplColl__A]: ...
    _unionSetByKey$mcB$sp__T = typing.TypeVar('_unionSetByKey$mcB$sp__T')  # <T>
    _unionSetByKey$mcB$sp__U = typing.TypeVar('_unionSetByKey$mcB$sp__U')  # <U>
    def unionSetByKey$mcB$sp(self, that: Coll[typing.Any], ev: scala.Predef..less.colon.less[typing.Any, scala.Tuple2[_unionSetByKey.mcB.sp__T, _unionSetByKey.mcB.sp__U]]) -> Coll[typing.Any]: ...
    _unionSetByKey$mcC$sp__T = typing.TypeVar('_unionSetByKey$mcC$sp__T')  # <T>
    _unionSetByKey$mcC$sp__U = typing.TypeVar('_unionSetByKey$mcC$sp__U')  # <U>
    def unionSetByKey$mcC$sp(self, that: Coll[typing.Any], ev: scala.Predef..less.colon.less[typing.Any, scala.Tuple2[_unionSetByKey.mcC.sp__T, _unionSetByKey.mcC.sp__U]]) -> Coll[typing.Any]: ...
    _unionSetByKey$mcD$sp__T = typing.TypeVar('_unionSetByKey$mcD$sp__T')  # <T>
    _unionSetByKey$mcD$sp__U = typing.TypeVar('_unionSetByKey$mcD$sp__U')  # <U>
    def unionSetByKey$mcD$sp(self, that: Coll[typing.Any], ev: scala.Predef..less.colon.less[typing.Any, scala.Tuple2[_unionSetByKey.mcD.sp__T, _unionSetByKey.mcD.sp__U]]) -> Coll[typing.Any]: ...
    _unionSetByKey$mcF$sp__T = typing.TypeVar('_unionSetByKey$mcF$sp__T')  # <T>
    _unionSetByKey$mcF$sp__U = typing.TypeVar('_unionSetByKey$mcF$sp__U')  # <U>
    def unionSetByKey$mcF$sp(self, that: Coll[typing.Any], ev: scala.Predef..less.colon.less[typing.Any, scala.Tuple2[_unionSetByKey.mcF.sp__T, _unionSetByKey.mcF.sp__U]]) -> Coll[typing.Any]: ...
    _unionSetByKey$mcI$sp__T = typing.TypeVar('_unionSetByKey$mcI$sp__T')  # <T>
    _unionSetByKey$mcI$sp__U = typing.TypeVar('_unionSetByKey$mcI$sp__U')  # <U>
    def unionSetByKey$mcI$sp(self, that: Coll[typing.Any], ev: scala.Predef..less.colon.less[typing.Any, scala.Tuple2[_unionSetByKey.mcI.sp__T, _unionSetByKey.mcI.sp__U]]) -> Coll[typing.Any]: ...
    _unionSetByKey$mcJ$sp__T = typing.TypeVar('_unionSetByKey$mcJ$sp__T')  # <T>
    _unionSetByKey$mcJ$sp__U = typing.TypeVar('_unionSetByKey$mcJ$sp__U')  # <U>
    def unionSetByKey$mcJ$sp(self, that: Coll[typing.Any], ev: scala.Predef..less.colon.less[typing.Any, scala.Tuple2[_unionSetByKey.mcJ.sp__T, _unionSetByKey.mcJ.sp__U]]) -> Coll[typing.Any]: ...
    _unionSetByKey$mcS$sp__T = typing.TypeVar('_unionSetByKey$mcS$sp__T')  # <T>
    _unionSetByKey$mcS$sp__U = typing.TypeVar('_unionSetByKey$mcS$sp__U')  # <U>
    def unionSetByKey$mcS$sp(self, that: Coll[typing.Any], ev: scala.Predef..less.colon.less[typing.Any, scala.Tuple2[_unionSetByKey.mcS.sp__T, _unionSetByKey.mcS.sp__U]]) -> Coll[typing.Any]: ...
    _unionSetByKey$mcV$sp__T = typing.TypeVar('_unionSetByKey$mcV$sp__T')  # <T>
    _unionSetByKey$mcV$sp__U = typing.TypeVar('_unionSetByKey$mcV$sp__U')  # <U>
    def unionSetByKey$mcV$sp(self, that: Coll[scala.runtime.BoxedUnit], ev: scala.Predef..less.colon.less[scala.runtime.BoxedUnit, scala.Tuple2[_unionSetByKey.mcV.sp__T, _unionSetByKey.mcV.sp__U]]) -> Coll[scala.runtime.BoxedUnit]: ...
    _unionSetByKey$mcZ$sp__T = typing.TypeVar('_unionSetByKey$mcZ$sp__T')  # <T>
    _unionSetByKey$mcZ$sp__U = typing.TypeVar('_unionSetByKey$mcZ$sp__U')  # <U>
    def unionSetByKey$mcZ$sp(self, that: Coll[typing.Any], ev: scala.Predef..less.colon.less[typing.Any, scala.Tuple2[_unionSetByKey.mcZ.sp__T, _unionSetByKey.mcZ.sp__U]]) -> Coll[typing.Any]: ...
    def updateMany(self, indexes: Coll[typing.Any], values: Coll[_CReplColl__A]) -> Coll[_CReplColl__A]: ...
    def updateMany$mcB$sp(self, indexes: Coll[typing.Any], values: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def updateMany$mcC$sp(self, indexes: Coll[typing.Any], values: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def updateMany$mcD$sp(self, indexes: Coll[typing.Any], values: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def updateMany$mcF$sp(self, indexes: Coll[typing.Any], values: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def updateMany$mcI$sp(self, indexes: Coll[typing.Any], values: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def updateMany$mcJ$sp(self, indexes: Coll[typing.Any], values: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def updateMany$mcS$sp(self, indexes: Coll[typing.Any], values: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def updateMany$mcV$sp(self, indexes: Coll[typing.Any], values: Coll[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def updateMany$mcZ$sp(self, indexes: Coll[typing.Any], values: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def updated(self, index: int, elem: _CReplColl__A) -> Coll[_CReplColl__A]: ...
    def updated$mcB$sp(self, index: int, elem: int) -> Coll[typing.Any]: ...
    def updated$mcC$sp(self, index: int, elem: str) -> Coll[typing.Any]: ...
    def updated$mcD$sp(self, index: int, elem: float) -> Coll[typing.Any]: ...
    def updated$mcF$sp(self, index: int, elem: float) -> Coll[typing.Any]: ...
    def updated$mcI$sp(self, index: int, elem: int) -> Coll[typing.Any]: ...
    def updated$mcJ$sp(self, index: int, elem: int) -> Coll[typing.Any]: ...
    def updated$mcS$sp(self, index: int, elem: int) -> Coll[typing.Any]: ...
    def updated$mcV$sp(self, index: int, elem: scala.runtime.BoxedUnit) -> Coll[scala.runtime.BoxedUnit]: ...
    def updated$mcZ$sp(self, index: int, elem: bool) -> Coll[typing.Any]: ...
    def value(self) -> _CReplColl__A: ...
    def value$mcB$sp(self) -> int: ...
    def value$mcC$sp(self) -> str: ...
    def value$mcD$sp(self) -> float: ...
    def value$mcF$sp(self) -> float: ...
    def value$mcI$sp(self) -> int: ...
    def value$mcJ$sp(self) -> int: ...
    def value$mcS$sp(self) -> int: ...
    def value$mcV$sp(self) -> None: ...
    def value$mcZ$sp(self) -> bool: ...
    _zip__B = typing.TypeVar('_zip__B')  # <B>
    def zip(self, ys: Coll[_zip__B]) -> PairColl[_CReplColl__A, _zip__B]: ...
    def zip$mBc$sp(self, ys: Coll[typing.Any]) -> PairColl[_CReplColl__A, typing.Any]: ...
    def zip$mBcB$sp(self, ys: Coll[typing.Any]) -> PairColl[typing.Any, typing.Any]: ...
    def zip$mBcC$sp(self, ys: Coll[typing.Any]) -> PairColl[typing.Any, typing.Any]: ...
    def zip$mBcD$sp(self, ys: Coll[typing.Any]) -> PairColl[typing.Any, typing.Any]: ...
    def zip$mBcF$sp(self, ys: Coll[typing.Any]) -> PairColl[typing.Any, typing.Any]: ...
    def zip$mBcI$sp(self, ys: Coll[typing.Any]) -> PairColl[typing.Any, typing.Any]: ...
    def zip$mBcJ$sp(self, ys: Coll[typing.Any]) -> PairColl[typing.Any, typing.Any]: ...
    def zip$mBcS$sp(self, ys: Coll[typing.Any]) -> PairColl[typing.Any, typing.Any]: ...
    def zip$mBcV$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.runtime.BoxedUnit, typing.Any]: ...
    def zip$mBcZ$sp(self, ys: Coll[typing.Any]) -> PairColl[typing.Any, typing.Any]: ...
    def zip$mCc$sp(self, ys: Coll[typing.Any]) -> PairColl[_CReplColl__A, typing.Any]: ...
    def zip$mCcB$sp(self, ys: Coll[typing.Any]) -> PairColl[typing.Any, typing.Any]: ...
    def zip$mCcC$sp(self, ys: Coll[typing.Any]) -> PairColl[typing.Any, typing.Any]: ...
    def zip$mCcD$sp(self, ys: Coll[typing.Any]) -> PairColl[typing.Any, typing.Any]: ...
    def zip$mCcF$sp(self, ys: Coll[typing.Any]) -> PairColl[typing.Any, typing.Any]: ...
    def zip$mCcI$sp(self, ys: Coll[typing.Any]) -> PairColl[typing.Any, typing.Any]: ...
    def zip$mCcJ$sp(self, ys: Coll[typing.Any]) -> PairColl[typing.Any, typing.Any]: ...
    def zip$mCcS$sp(self, ys: Coll[typing.Any]) -> PairColl[typing.Any, typing.Any]: ...
    def zip$mCcV$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.runtime.BoxedUnit, typing.Any]: ...
    def zip$mCcZ$sp(self, ys: Coll[typing.Any]) -> PairColl[typing.Any, typing.Any]: ...
    def zip$mDc$sp(self, ys: Coll[typing.Any]) -> PairColl[_CReplColl__A, typing.Any]: ...
    def zip$mDcB$sp(self, ys: Coll[typing.Any]) -> PairColl[typing.Any, typing.Any]: ...
    def zip$mDcC$sp(self, ys: Coll[typing.Any]) -> PairColl[typing.Any, typing.Any]: ...
    def zip$mDcD$sp(self, ys: Coll[typing.Any]) -> PairColl[typing.Any, typing.Any]: ...
    def zip$mDcF$sp(self, ys: Coll[typing.Any]) -> PairColl[typing.Any, typing.Any]: ...
    def zip$mDcI$sp(self, ys: Coll[typing.Any]) -> PairColl[typing.Any, typing.Any]: ...
    def zip$mDcJ$sp(self, ys: Coll[typing.Any]) -> PairColl[typing.Any, typing.Any]: ...
    def zip$mDcS$sp(self, ys: Coll[typing.Any]) -> PairColl[typing.Any, typing.Any]: ...
    def zip$mDcV$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.runtime.BoxedUnit, typing.Any]: ...
    def zip$mDcZ$sp(self, ys: Coll[typing.Any]) -> PairColl[typing.Any, typing.Any]: ...
    def zip$mFc$sp(self, ys: Coll[typing.Any]) -> PairColl[_CReplColl__A, typing.Any]: ...
    def zip$mFcB$sp(self, ys: Coll[typing.Any]) -> PairColl[typing.Any, typing.Any]: ...
    def zip$mFcC$sp(self, ys: Coll[typing.Any]) -> PairColl[typing.Any, typing.Any]: ...
    def zip$mFcD$sp(self, ys: Coll[typing.Any]) -> PairColl[typing.Any, typing.Any]: ...
    def zip$mFcF$sp(self, ys: Coll[typing.Any]) -> PairColl[typing.Any, typing.Any]: ...
    def zip$mFcI$sp(self, ys: Coll[typing.Any]) -> PairColl[typing.Any, typing.Any]: ...
    def zip$mFcJ$sp(self, ys: Coll[typing.Any]) -> PairColl[typing.Any, typing.Any]: ...
    def zip$mFcS$sp(self, ys: Coll[typing.Any]) -> PairColl[typing.Any, typing.Any]: ...
    def zip$mFcV$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.runtime.BoxedUnit, typing.Any]: ...
    def zip$mFcZ$sp(self, ys: Coll[typing.Any]) -> PairColl[typing.Any, typing.Any]: ...
    def zip$mIc$sp(self, ys: Coll[typing.Any]) -> PairColl[_CReplColl__A, typing.Any]: ...
    def zip$mIcB$sp(self, ys: Coll[typing.Any]) -> PairColl[typing.Any, typing.Any]: ...
    def zip$mIcC$sp(self, ys: Coll[typing.Any]) -> PairColl[typing.Any, typing.Any]: ...
    def zip$mIcD$sp(self, ys: Coll[typing.Any]) -> PairColl[typing.Any, typing.Any]: ...
    def zip$mIcF$sp(self, ys: Coll[typing.Any]) -> PairColl[typing.Any, typing.Any]: ...
    def zip$mIcI$sp(self, ys: Coll[typing.Any]) -> PairColl[typing.Any, typing.Any]: ...
    def zip$mIcJ$sp(self, ys: Coll[typing.Any]) -> PairColl[typing.Any, typing.Any]: ...
    def zip$mIcS$sp(self, ys: Coll[typing.Any]) -> PairColl[typing.Any, typing.Any]: ...
    def zip$mIcV$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.runtime.BoxedUnit, typing.Any]: ...
    def zip$mIcZ$sp(self, ys: Coll[typing.Any]) -> PairColl[typing.Any, typing.Any]: ...
    def zip$mJc$sp(self, ys: Coll[typing.Any]) -> PairColl[_CReplColl__A, typing.Any]: ...
    def zip$mJcB$sp(self, ys: Coll[typing.Any]) -> PairColl[typing.Any, typing.Any]: ...
    def zip$mJcC$sp(self, ys: Coll[typing.Any]) -> PairColl[typing.Any, typing.Any]: ...
    def zip$mJcD$sp(self, ys: Coll[typing.Any]) -> PairColl[typing.Any, typing.Any]: ...
    def zip$mJcF$sp(self, ys: Coll[typing.Any]) -> PairColl[typing.Any, typing.Any]: ...
    def zip$mJcI$sp(self, ys: Coll[typing.Any]) -> PairColl[typing.Any, typing.Any]: ...
    def zip$mJcJ$sp(self, ys: Coll[typing.Any]) -> PairColl[typing.Any, typing.Any]: ...
    def zip$mJcS$sp(self, ys: Coll[typing.Any]) -> PairColl[typing.Any, typing.Any]: ...
    def zip$mJcV$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.runtime.BoxedUnit, typing.Any]: ...
    def zip$mJcZ$sp(self, ys: Coll[typing.Any]) -> PairColl[typing.Any, typing.Any]: ...
    def zip$mSc$sp(self, ys: Coll[typing.Any]) -> PairColl[_CReplColl__A, typing.Any]: ...
    def zip$mScB$sp(self, ys: Coll[typing.Any]) -> PairColl[typing.Any, typing.Any]: ...
    def zip$mScC$sp(self, ys: Coll[typing.Any]) -> PairColl[typing.Any, typing.Any]: ...
    def zip$mScD$sp(self, ys: Coll[typing.Any]) -> PairColl[typing.Any, typing.Any]: ...
    def zip$mScF$sp(self, ys: Coll[typing.Any]) -> PairColl[typing.Any, typing.Any]: ...
    def zip$mScI$sp(self, ys: Coll[typing.Any]) -> PairColl[typing.Any, typing.Any]: ...
    def zip$mScJ$sp(self, ys: Coll[typing.Any]) -> PairColl[typing.Any, typing.Any]: ...
    def zip$mScS$sp(self, ys: Coll[typing.Any]) -> PairColl[typing.Any, typing.Any]: ...
    def zip$mScV$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.runtime.BoxedUnit, typing.Any]: ...
    def zip$mScZ$sp(self, ys: Coll[typing.Any]) -> PairColl[typing.Any, typing.Any]: ...
    def zip$mVc$sp(self, ys: Coll[scala.runtime.BoxedUnit]) -> PairColl[_CReplColl__A, scala.runtime.BoxedUnit]: ...
    def zip$mVcB$sp(self, ys: Coll[scala.runtime.BoxedUnit]) -> PairColl[typing.Any, scala.runtime.BoxedUnit]: ...
    def zip$mVcC$sp(self, ys: Coll[scala.runtime.BoxedUnit]) -> PairColl[typing.Any, scala.runtime.BoxedUnit]: ...
    def zip$mVcD$sp(self, ys: Coll[scala.runtime.BoxedUnit]) -> PairColl[typing.Any, scala.runtime.BoxedUnit]: ...
    def zip$mVcF$sp(self, ys: Coll[scala.runtime.BoxedUnit]) -> PairColl[typing.Any, scala.runtime.BoxedUnit]: ...
    def zip$mVcI$sp(self, ys: Coll[scala.runtime.BoxedUnit]) -> PairColl[typing.Any, scala.runtime.BoxedUnit]: ...
    def zip$mVcJ$sp(self, ys: Coll[scala.runtime.BoxedUnit]) -> PairColl[typing.Any, scala.runtime.BoxedUnit]: ...
    def zip$mVcS$sp(self, ys: Coll[scala.runtime.BoxedUnit]) -> PairColl[typing.Any, scala.runtime.BoxedUnit]: ...
    def zip$mVcV$sp(self, ys: Coll[scala.runtime.BoxedUnit]) -> PairColl[scala.runtime.BoxedUnit, scala.runtime.BoxedUnit]: ...
    def zip$mVcZ$sp(self, ys: Coll[scala.runtime.BoxedUnit]) -> PairColl[typing.Any, scala.runtime.BoxedUnit]: ...
    def zip$mZc$sp(self, ys: Coll[typing.Any]) -> PairColl[_CReplColl__A, typing.Any]: ...
    def zip$mZcB$sp(self, ys: Coll[typing.Any]) -> PairColl[typing.Any, typing.Any]: ...
    def zip$mZcC$sp(self, ys: Coll[typing.Any]) -> PairColl[typing.Any, typing.Any]: ...
    def zip$mZcD$sp(self, ys: Coll[typing.Any]) -> PairColl[typing.Any, typing.Any]: ...
    def zip$mZcF$sp(self, ys: Coll[typing.Any]) -> PairColl[typing.Any, typing.Any]: ...
    def zip$mZcI$sp(self, ys: Coll[typing.Any]) -> PairColl[typing.Any, typing.Any]: ...
    def zip$mZcJ$sp(self, ys: Coll[typing.Any]) -> PairColl[typing.Any, typing.Any]: ...
    def zip$mZcS$sp(self, ys: Coll[typing.Any]) -> PairColl[typing.Any, typing.Any]: ...
    def zip$mZcV$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.runtime.BoxedUnit, typing.Any]: ...
    def zip$mZcZ$sp(self, ys: Coll[typing.Any]) -> PairColl[typing.Any, typing.Any]: ...
    _zip$mcB$sp__B = typing.TypeVar('_zip$mcB$sp__B')  # <B>
    def zip$mcB$sp(self, ys: Coll[_zip.mcB.sp__B]) -> PairColl[typing.Any, _zip.mcB.sp__B]: ...
    _zip$mcC$sp__B = typing.TypeVar('_zip$mcC$sp__B')  # <B>
    def zip$mcC$sp(self, ys: Coll[_zip.mcC.sp__B]) -> PairColl[typing.Any, _zip.mcC.sp__B]: ...
    _zip$mcD$sp__B = typing.TypeVar('_zip$mcD$sp__B')  # <B>
    def zip$mcD$sp(self, ys: Coll[_zip.mcD.sp__B]) -> PairColl[typing.Any, _zip.mcD.sp__B]: ...
    _zip$mcF$sp__B = typing.TypeVar('_zip$mcF$sp__B')  # <B>
    def zip$mcF$sp(self, ys: Coll[_zip.mcF.sp__B]) -> PairColl[typing.Any, _zip.mcF.sp__B]: ...
    _zip$mcI$sp__B = typing.TypeVar('_zip$mcI$sp__B')  # <B>
    def zip$mcI$sp(self, ys: Coll[_zip.mcI.sp__B]) -> PairColl[typing.Any, _zip.mcI.sp__B]: ...
    _zip$mcJ$sp__B = typing.TypeVar('_zip$mcJ$sp__B')  # <B>
    def zip$mcJ$sp(self, ys: Coll[_zip.mcJ.sp__B]) -> PairColl[typing.Any, _zip.mcJ.sp__B]: ...
    _zip$mcS$sp__B = typing.TypeVar('_zip$mcS$sp__B')  # <B>
    def zip$mcS$sp(self, ys: Coll[_zip.mcS.sp__B]) -> PairColl[typing.Any, _zip.mcS.sp__B]: ...
    _zip$mcV$sp__B = typing.TypeVar('_zip$mcV$sp__B')  # <B>
    def zip$mcV$sp(self, ys: Coll[_zip.mcV.sp__B]) -> PairColl[scala.runtime.BoxedUnit, _zip.mcV.sp__B]: ...
    _zip$mcZ$sp__B = typing.TypeVar('_zip$mcZ$sp__B')  # <B>
    def zip$mcZ$sp(self, ys: Coll[_zip.mcZ.sp__B]) -> PairColl[typing.Any, _zip.mcZ.sp__B]: ...

_CSizeColl__Item = typing.TypeVar('_CSizeColl__Item')  # <Item>
class CSizeColl(SizeColl[_CSizeColl__Item], typing.Generic[_CSizeColl__Item]):
    def __init__(self, sizes: Coll[Size[_CSizeColl__Item]]): ...
    def builder(self) -> CostedBuilder: ...
    def dataSize(self) -> int: ...
    def sizes(self) -> Coll[Size[_CSizeColl__Item]]: ...

_CSizeFunc__Env = typing.TypeVar('_CSizeFunc__Env')  # <Env>
_CSizeFunc__Arg = typing.TypeVar('_CSizeFunc__Arg')  # <Arg>
_CSizeFunc__Res = typing.TypeVar('_CSizeFunc__Res')  # <Res>
class CSizeFunc(SizeFunc[_CSizeFunc__Env, _CSizeFunc__Arg, _CSizeFunc__Res], typing.Generic[_CSizeFunc__Env, _CSizeFunc__Arg, _CSizeFunc__Res]):
    def __init__(self, sizeEnv: Size[_CSizeFunc__Env], sizeFunc: int, tArg: scalan.RType[_CSizeFunc__Arg], tRes: scalan.RType[_CSizeFunc__Res]): ...
    def dataSize(self) -> int: ...
    def sizeEnv(self) -> Size[_CSizeFunc__Env]: ...
    def sizeFunc(self) -> int: ...
    def tArg(self) -> scalan.RType[_CSizeFunc__Arg]: ...
    def tRes(self) -> scalan.RType[_CSizeFunc__Res]: ...

_CSizeOption__Item = typing.TypeVar('_CSizeOption__Item')  # <Item>
class CSizeOption(SizeOption[_CSizeOption__Item], typing.Generic[_CSizeOption__Item]):
    def __init__(self, sizeOpt: scala.Option[Size[_CSizeOption__Item]]): ...
    def dataSize(self) -> int: ...
    def sizeOpt(self) -> scala.Option[Size[_CSizeOption__Item]]: ...

_CSizePair__L = typing.TypeVar('_CSizePair__L')  # <L>
_CSizePair__R = typing.TypeVar('_CSizePair__R')  # <R>
class CSizePair(SizePair[_CSizePair__L, _CSizePair__R], typing.Generic[_CSizePair__L, _CSizePair__R]):
    def __init__(self, l: Size[_CSizePair__L], r: Size[_CSizePair__R]): ...
    def dataSize(self) -> int: ...
    def l(self) -> Size[_CSizePair__L]: ...
    def r(self) -> Size[_CSizePair__R]: ...

_CSizePrim__Val = typing.TypeVar('_CSizePrim__Val')  # <Val>
class CSizePrim(SizePrim[_CSizePrim__Val], typing.Generic[_CSizePrim__Val]):
    def __init__(self, dataSize: int, tVal: scalan.RType[_CSizePrim__Val]): ...
    def dataSize(self) -> int: ...
    def tVal(self) -> scalan.RType[_CSizePrim__Val]: ...

_PairOfCols__L = typing.TypeVar('_PairOfCols__L')  # <L>
_PairOfCols__R = typing.TypeVar('_PairOfCols__R')  # <R>
class PairOfCols(PairColl[_PairOfCols__L, _PairOfCols__R], typing.Generic[_PairOfCols__L, _PairOfCols__R]):
    ls: Coll = ...
    rs: Coll = ...
    def __init__(self, ls: Coll[_PairOfCols__L], rs: Coll[_PairOfCols__R]): ...
    def append(self, other: Coll[scala.Tuple2[_PairOfCols__L, _PairOfCols__R]]) -> Coll[scala.Tuple2[_PairOfCols__L, _PairOfCols__R]]: ...
    def append$mcB$sp(self, other: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def append$mcBB$sp(self, other: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def append$mcBC$sp(self, other: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def append$mcBD$sp(self, other: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def append$mcBF$sp(self, other: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def append$mcBI$sp(self, other: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def append$mcBJ$sp(self, other: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def append$mcBS$sp(self, other: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def append$mcBV$sp(self, other: Coll[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]) -> Coll[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]: ...
    def append$mcBZ$sp(self, other: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def append$mcC$sp(self, other: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def append$mcCB$sp(self, other: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def append$mcCC$sp(self, other: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def append$mcCD$sp(self, other: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def append$mcCF$sp(self, other: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def append$mcCI$sp(self, other: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def append$mcCJ$sp(self, other: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def append$mcCS$sp(self, other: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def append$mcCV$sp(self, other: Coll[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]) -> Coll[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]: ...
    def append$mcCZ$sp(self, other: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def append$mcD$sp(self, other: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def append$mcDB$sp(self, other: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def append$mcDC$sp(self, other: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def append$mcDD$sp(self, other: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def append$mcDF$sp(self, other: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def append$mcDI$sp(self, other: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def append$mcDJ$sp(self, other: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def append$mcDS$sp(self, other: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def append$mcDV$sp(self, other: Coll[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]) -> Coll[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]: ...
    def append$mcDZ$sp(self, other: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def append$mcF$sp(self, other: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def append$mcFB$sp(self, other: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def append$mcFC$sp(self, other: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def append$mcFD$sp(self, other: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def append$mcFF$sp(self, other: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def append$mcFI$sp(self, other: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def append$mcFJ$sp(self, other: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def append$mcFS$sp(self, other: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def append$mcFV$sp(self, other: Coll[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]) -> Coll[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]: ...
    def append$mcFZ$sp(self, other: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def append$mcI$sp(self, other: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def append$mcIB$sp(self, other: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def append$mcIC$sp(self, other: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def append$mcID$sp(self, other: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def append$mcIF$sp(self, other: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def append$mcII$sp(self, other: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def append$mcIJ$sp(self, other: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def append$mcIS$sp(self, other: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def append$mcIV$sp(self, other: Coll[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]) -> Coll[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]: ...
    def append$mcIZ$sp(self, other: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def append$mcJ$sp(self, other: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def append$mcJB$sp(self, other: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def append$mcJC$sp(self, other: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def append$mcJD$sp(self, other: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def append$mcJF$sp(self, other: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def append$mcJI$sp(self, other: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def append$mcJJ$sp(self, other: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def append$mcJS$sp(self, other: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def append$mcJV$sp(self, other: Coll[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]) -> Coll[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]: ...
    def append$mcJZ$sp(self, other: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def append$mcS$sp(self, other: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def append$mcSB$sp(self, other: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def append$mcSC$sp(self, other: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def append$mcSD$sp(self, other: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def append$mcSF$sp(self, other: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def append$mcSI$sp(self, other: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def append$mcSJ$sp(self, other: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def append$mcSS$sp(self, other: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def append$mcSV$sp(self, other: Coll[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]) -> Coll[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]: ...
    def append$mcSZ$sp(self, other: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def append$mcV$sp(self, other: Coll[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def append$mcVB$sp(self, other: Coll[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]) -> Coll[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]: ...
    def append$mcVC$sp(self, other: Coll[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]) -> Coll[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]: ...
    def append$mcVD$sp(self, other: Coll[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]) -> Coll[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]: ...
    def append$mcVF$sp(self, other: Coll[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]) -> Coll[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]: ...
    def append$mcVI$sp(self, other: Coll[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]) -> Coll[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]: ...
    def append$mcVJ$sp(self, other: Coll[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]) -> Coll[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]: ...
    def append$mcVS$sp(self, other: Coll[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]) -> Coll[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]: ...
    def append$mcVV$sp(self, other: Coll[scala.Tuple2[scala.runtime.BoxedUnit, scala.runtime.BoxedUnit]]) -> Coll[scala.Tuple2[scala.runtime.BoxedUnit, scala.runtime.BoxedUnit]]: ...
    def append$mcVZ$sp(self, other: Coll[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]) -> Coll[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]: ...
    def append$mcZ$sp(self, other: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def append$mcZB$sp(self, other: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def append$mcZC$sp(self, other: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def append$mcZD$sp(self, other: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def append$mcZF$sp(self, other: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def append$mcZI$sp(self, other: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def append$mcZJ$sp(self, other: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def append$mcZS$sp(self, other: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def append$mcZV$sp(self, other: Coll[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]) -> Coll[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]: ...
    def append$mcZZ$sp(self, other: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def apply(self, i: int) -> scala.Tuple2[_PairOfCols__L, _PairOfCols__R]: ...
    def apply$mcB$sp(self, i: int) -> int: ...
    def apply$mcBB$sp(self, i: int) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def apply$mcBC$sp(self, i: int) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def apply$mcBD$sp(self, i: int) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def apply$mcBF$sp(self, i: int) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def apply$mcBI$sp(self, i: int) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def apply$mcBJ$sp(self, i: int) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def apply$mcBS$sp(self, i: int) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def apply$mcBV$sp(self, i: int) -> scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]: ...
    def apply$mcBZ$sp(self, i: int) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def apply$mcC$sp(self, i: int) -> str: ...
    def apply$mcCB$sp(self, i: int) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def apply$mcCC$sp(self, i: int) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def apply$mcCD$sp(self, i: int) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def apply$mcCF$sp(self, i: int) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def apply$mcCI$sp(self, i: int) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def apply$mcCJ$sp(self, i: int) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def apply$mcCS$sp(self, i: int) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def apply$mcCV$sp(self, i: int) -> scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]: ...
    def apply$mcCZ$sp(self, i: int) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def apply$mcD$sp(self, i: int) -> float: ...
    def apply$mcDB$sp(self, i: int) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def apply$mcDC$sp(self, i: int) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def apply$mcDD$sp(self, i: int) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def apply$mcDF$sp(self, i: int) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def apply$mcDI$sp(self, i: int) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def apply$mcDJ$sp(self, i: int) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def apply$mcDS$sp(self, i: int) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def apply$mcDV$sp(self, i: int) -> scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]: ...
    def apply$mcDZ$sp(self, i: int) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def apply$mcF$sp(self, i: int) -> float: ...
    def apply$mcFB$sp(self, i: int) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def apply$mcFC$sp(self, i: int) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def apply$mcFD$sp(self, i: int) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def apply$mcFF$sp(self, i: int) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def apply$mcFI$sp(self, i: int) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def apply$mcFJ$sp(self, i: int) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def apply$mcFS$sp(self, i: int) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def apply$mcFV$sp(self, i: int) -> scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]: ...
    def apply$mcFZ$sp(self, i: int) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def apply$mcI$sp(self, i: int) -> int: ...
    def apply$mcIB$sp(self, i: int) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def apply$mcIC$sp(self, i: int) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def apply$mcID$sp(self, i: int) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def apply$mcIF$sp(self, i: int) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def apply$mcII$sp(self, i: int) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def apply$mcIJ$sp(self, i: int) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def apply$mcIS$sp(self, i: int) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def apply$mcIV$sp(self, i: int) -> scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]: ...
    def apply$mcIZ$sp(self, i: int) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def apply$mcJ$sp(self, i: int) -> int: ...
    def apply$mcJB$sp(self, i: int) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def apply$mcJC$sp(self, i: int) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def apply$mcJD$sp(self, i: int) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def apply$mcJF$sp(self, i: int) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def apply$mcJI$sp(self, i: int) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def apply$mcJJ$sp(self, i: int) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def apply$mcJS$sp(self, i: int) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def apply$mcJV$sp(self, i: int) -> scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]: ...
    def apply$mcJZ$sp(self, i: int) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def apply$mcS$sp(self, i: int) -> int: ...
    def apply$mcSB$sp(self, i: int) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def apply$mcSC$sp(self, i: int) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def apply$mcSD$sp(self, i: int) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def apply$mcSF$sp(self, i: int) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def apply$mcSI$sp(self, i: int) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def apply$mcSJ$sp(self, i: int) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def apply$mcSS$sp(self, i: int) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def apply$mcSV$sp(self, i: int) -> scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]: ...
    def apply$mcSZ$sp(self, i: int) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def apply$mcV$sp(self, i: int) -> None: ...
    def apply$mcVB$sp(self, i: int) -> scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]: ...
    def apply$mcVC$sp(self, i: int) -> scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]: ...
    def apply$mcVD$sp(self, i: int) -> scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]: ...
    def apply$mcVF$sp(self, i: int) -> scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]: ...
    def apply$mcVI$sp(self, i: int) -> scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]: ...
    def apply$mcVJ$sp(self, i: int) -> scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]: ...
    def apply$mcVS$sp(self, i: int) -> scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]: ...
    def apply$mcVV$sp(self, i: int) -> scala.Tuple2[scala.runtime.BoxedUnit, scala.runtime.BoxedUnit]: ...
    def apply$mcVZ$sp(self, i: int) -> scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]: ...
    def apply$mcZ$sp(self, i: int) -> bool: ...
    def apply$mcZB$sp(self, i: int) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def apply$mcZC$sp(self, i: int) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def apply$mcZD$sp(self, i: int) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def apply$mcZF$sp(self, i: int) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def apply$mcZI$sp(self, i: int) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def apply$mcZJ$sp(self, i: int) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def apply$mcZS$sp(self, i: int) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def apply$mcZV$sp(self, i: int) -> scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]: ...
    def apply$mcZZ$sp(self, i: int) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def builder(self) -> CollBuilder: ...
    def diff(self, that: Coll[scala.Tuple2[_PairOfCols__L, _PairOfCols__R]]) -> Coll[scala.Tuple2[_PairOfCols__L, _PairOfCols__R]]: ...
    def diff$mcB$sp(self, that: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def diff$mcC$sp(self, that: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def diff$mcD$sp(self, that: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def diff$mcF$sp(self, that: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def diff$mcI$sp(self, that: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def diff$mcJ$sp(self, that: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def diff$mcS$sp(self, that: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def diff$mcV$sp(self, that: Coll[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def diff$mcZ$sp(self, that: Coll[typing.Any]) -> Coll[typing.Any]: ...
    _distinctByKey__T = typing.TypeVar('_distinctByKey__T')  # <T>
    _distinctByKey__U = typing.TypeVar('_distinctByKey__U')  # <U>
    def distinctByKey(self, ev: scala.Predef..less.colon.less[scala.Tuple2[_PairOfCols__L, _PairOfCols__R], scala.Tuple2[_distinctByKey__T, _distinctByKey__U]]) -> Coll[scala.Tuple2[_PairOfCols__L, _PairOfCols__R]]: ...
    _distinctByKey$mcB$sp__T = typing.TypeVar('_distinctByKey$mcB$sp__T')  # <T>
    _distinctByKey$mcB$sp__U = typing.TypeVar('_distinctByKey$mcB$sp__U')  # <U>
    def distinctByKey$mcB$sp(self, ev: scala.Predef..less.colon.less[typing.Any, scala.Tuple2[_distinctByKey.mcB.sp__T, _distinctByKey.mcB.sp__U]]) -> Coll[typing.Any]: ...
    _distinctByKey$mcC$sp__T = typing.TypeVar('_distinctByKey$mcC$sp__T')  # <T>
    _distinctByKey$mcC$sp__U = typing.TypeVar('_distinctByKey$mcC$sp__U')  # <U>
    def distinctByKey$mcC$sp(self, ev: scala.Predef..less.colon.less[typing.Any, scala.Tuple2[_distinctByKey.mcC.sp__T, _distinctByKey.mcC.sp__U]]) -> Coll[typing.Any]: ...
    _distinctByKey$mcD$sp__T = typing.TypeVar('_distinctByKey$mcD$sp__T')  # <T>
    _distinctByKey$mcD$sp__U = typing.TypeVar('_distinctByKey$mcD$sp__U')  # <U>
    def distinctByKey$mcD$sp(self, ev: scala.Predef..less.colon.less[typing.Any, scala.Tuple2[_distinctByKey.mcD.sp__T, _distinctByKey.mcD.sp__U]]) -> Coll[typing.Any]: ...
    _distinctByKey$mcF$sp__T = typing.TypeVar('_distinctByKey$mcF$sp__T')  # <T>
    _distinctByKey$mcF$sp__U = typing.TypeVar('_distinctByKey$mcF$sp__U')  # <U>
    def distinctByKey$mcF$sp(self, ev: scala.Predef..less.colon.less[typing.Any, scala.Tuple2[_distinctByKey.mcF.sp__T, _distinctByKey.mcF.sp__U]]) -> Coll[typing.Any]: ...
    _distinctByKey$mcI$sp__T = typing.TypeVar('_distinctByKey$mcI$sp__T')  # <T>
    _distinctByKey$mcI$sp__U = typing.TypeVar('_distinctByKey$mcI$sp__U')  # <U>
    def distinctByKey$mcI$sp(self, ev: scala.Predef..less.colon.less[typing.Any, scala.Tuple2[_distinctByKey.mcI.sp__T, _distinctByKey.mcI.sp__U]]) -> Coll[typing.Any]: ...
    _distinctByKey$mcJ$sp__T = typing.TypeVar('_distinctByKey$mcJ$sp__T')  # <T>
    _distinctByKey$mcJ$sp__U = typing.TypeVar('_distinctByKey$mcJ$sp__U')  # <U>
    def distinctByKey$mcJ$sp(self, ev: scala.Predef..less.colon.less[typing.Any, scala.Tuple2[_distinctByKey.mcJ.sp__T, _distinctByKey.mcJ.sp__U]]) -> Coll[typing.Any]: ...
    _distinctByKey$mcS$sp__T = typing.TypeVar('_distinctByKey$mcS$sp__T')  # <T>
    _distinctByKey$mcS$sp__U = typing.TypeVar('_distinctByKey$mcS$sp__U')  # <U>
    def distinctByKey$mcS$sp(self, ev: scala.Predef..less.colon.less[typing.Any, scala.Tuple2[_distinctByKey.mcS.sp__T, _distinctByKey.mcS.sp__U]]) -> Coll[typing.Any]: ...
    _distinctByKey$mcV$sp__T = typing.TypeVar('_distinctByKey$mcV$sp__T')  # <T>
    _distinctByKey$mcV$sp__U = typing.TypeVar('_distinctByKey$mcV$sp__U')  # <U>
    def distinctByKey$mcV$sp(self, ev: scala.Predef..less.colon.less[scala.runtime.BoxedUnit, scala.Tuple2[_distinctByKey.mcV.sp__T, _distinctByKey.mcV.sp__U]]) -> Coll[scala.runtime.BoxedUnit]: ...
    _distinctByKey$mcZ$sp__T = typing.TypeVar('_distinctByKey$mcZ$sp__T')  # <T>
    _distinctByKey$mcZ$sp__U = typing.TypeVar('_distinctByKey$mcZ$sp__U')  # <U>
    def distinctByKey$mcZ$sp(self, ev: scala.Predef..less.colon.less[typing.Any, scala.Tuple2[_distinctByKey.mcZ.sp__T, _distinctByKey.mcZ.sp__U]]) -> Coll[typing.Any]: ...
    def equals(self, that: typing.Any) -> bool: ...
    def exists(self, p: scala.Function1[scala.Tuple2[_PairOfCols__L, _PairOfCols__R], typing.Any]) -> bool: ...
    def exists$mcB$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> bool: ...
    def exists$mcBB$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> bool: ...
    def exists$mcBC$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> bool: ...
    def exists$mcBD$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> bool: ...
    def exists$mcBF$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> bool: ...
    def exists$mcBI$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> bool: ...
    def exists$mcBJ$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> bool: ...
    def exists$mcBS$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> bool: ...
    def exists$mcBV$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any]) -> bool: ...
    def exists$mcBZ$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> bool: ...
    def exists$mcC$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> bool: ...
    def exists$mcCB$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> bool: ...
    def exists$mcCC$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> bool: ...
    def exists$mcCD$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> bool: ...
    def exists$mcCF$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> bool: ...
    def exists$mcCI$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> bool: ...
    def exists$mcCJ$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> bool: ...
    def exists$mcCS$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> bool: ...
    def exists$mcCV$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any]) -> bool: ...
    def exists$mcCZ$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> bool: ...
    def exists$mcD$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> bool: ...
    def exists$mcDB$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> bool: ...
    def exists$mcDC$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> bool: ...
    def exists$mcDD$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> bool: ...
    def exists$mcDF$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> bool: ...
    def exists$mcDI$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> bool: ...
    def exists$mcDJ$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> bool: ...
    def exists$mcDS$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> bool: ...
    def exists$mcDV$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any]) -> bool: ...
    def exists$mcDZ$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> bool: ...
    def exists$mcF$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> bool: ...
    def exists$mcFB$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> bool: ...
    def exists$mcFC$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> bool: ...
    def exists$mcFD$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> bool: ...
    def exists$mcFF$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> bool: ...
    def exists$mcFI$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> bool: ...
    def exists$mcFJ$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> bool: ...
    def exists$mcFS$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> bool: ...
    def exists$mcFV$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any]) -> bool: ...
    def exists$mcFZ$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> bool: ...
    def exists$mcI$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> bool: ...
    def exists$mcIB$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> bool: ...
    def exists$mcIC$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> bool: ...
    def exists$mcID$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> bool: ...
    def exists$mcIF$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> bool: ...
    def exists$mcII$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> bool: ...
    def exists$mcIJ$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> bool: ...
    def exists$mcIS$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> bool: ...
    def exists$mcIV$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any]) -> bool: ...
    def exists$mcIZ$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> bool: ...
    def exists$mcJ$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> bool: ...
    def exists$mcJB$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> bool: ...
    def exists$mcJC$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> bool: ...
    def exists$mcJD$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> bool: ...
    def exists$mcJF$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> bool: ...
    def exists$mcJI$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> bool: ...
    def exists$mcJJ$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> bool: ...
    def exists$mcJS$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> bool: ...
    def exists$mcJV$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any]) -> bool: ...
    def exists$mcJZ$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> bool: ...
    def exists$mcS$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> bool: ...
    def exists$mcSB$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> bool: ...
    def exists$mcSC$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> bool: ...
    def exists$mcSD$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> bool: ...
    def exists$mcSF$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> bool: ...
    def exists$mcSI$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> bool: ...
    def exists$mcSJ$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> bool: ...
    def exists$mcSS$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> bool: ...
    def exists$mcSV$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any]) -> bool: ...
    def exists$mcSZ$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> bool: ...
    def exists$mcV$sp(self, p: scala.Function1[scala.runtime.BoxedUnit, typing.Any]) -> bool: ...
    def exists$mcVB$sp(self, p: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any]) -> bool: ...
    def exists$mcVC$sp(self, p: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any]) -> bool: ...
    def exists$mcVD$sp(self, p: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any]) -> bool: ...
    def exists$mcVF$sp(self, p: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any]) -> bool: ...
    def exists$mcVI$sp(self, p: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any]) -> bool: ...
    def exists$mcVJ$sp(self, p: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any]) -> bool: ...
    def exists$mcVS$sp(self, p: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any]) -> bool: ...
    def exists$mcVV$sp(self, p: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, scala.runtime.BoxedUnit], typing.Any]) -> bool: ...
    def exists$mcVZ$sp(self, p: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any]) -> bool: ...
    def exists$mcZ$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> bool: ...
    def exists$mcZB$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> bool: ...
    def exists$mcZC$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> bool: ...
    def exists$mcZD$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> bool: ...
    def exists$mcZF$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> bool: ...
    def exists$mcZI$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> bool: ...
    def exists$mcZJ$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> bool: ...
    def exists$mcZS$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> bool: ...
    def exists$mcZV$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any]) -> bool: ...
    def exists$mcZZ$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> bool: ...
    def filter(self, p: scala.Function1[scala.Tuple2[_PairOfCols__L, _PairOfCols__R], typing.Any]) -> Coll[scala.Tuple2[_PairOfCols__L, _PairOfCols__R]]: ...
    def filter$mcB$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> Coll[typing.Any]: ...
    def filter$mcBB$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def filter$mcBC$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def filter$mcBD$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def filter$mcBF$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def filter$mcBI$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def filter$mcBJ$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def filter$mcBS$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def filter$mcBV$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any]) -> Coll[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]: ...
    def filter$mcBZ$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def filter$mcC$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> Coll[typing.Any]: ...
    def filter$mcCB$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def filter$mcCC$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def filter$mcCD$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def filter$mcCF$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def filter$mcCI$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def filter$mcCJ$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def filter$mcCS$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def filter$mcCV$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any]) -> Coll[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]: ...
    def filter$mcCZ$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def filter$mcD$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> Coll[typing.Any]: ...
    def filter$mcDB$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def filter$mcDC$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def filter$mcDD$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def filter$mcDF$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def filter$mcDI$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def filter$mcDJ$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def filter$mcDS$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def filter$mcDV$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any]) -> Coll[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]: ...
    def filter$mcDZ$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def filter$mcF$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> Coll[typing.Any]: ...
    def filter$mcFB$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def filter$mcFC$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def filter$mcFD$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def filter$mcFF$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def filter$mcFI$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def filter$mcFJ$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def filter$mcFS$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def filter$mcFV$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any]) -> Coll[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]: ...
    def filter$mcFZ$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def filter$mcI$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> Coll[typing.Any]: ...
    def filter$mcIB$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def filter$mcIC$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def filter$mcID$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def filter$mcIF$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def filter$mcII$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def filter$mcIJ$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def filter$mcIS$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def filter$mcIV$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any]) -> Coll[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]: ...
    def filter$mcIZ$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def filter$mcJ$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> Coll[typing.Any]: ...
    def filter$mcJB$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def filter$mcJC$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def filter$mcJD$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def filter$mcJF$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def filter$mcJI$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def filter$mcJJ$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def filter$mcJS$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def filter$mcJV$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any]) -> Coll[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]: ...
    def filter$mcJZ$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def filter$mcS$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> Coll[typing.Any]: ...
    def filter$mcSB$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def filter$mcSC$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def filter$mcSD$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def filter$mcSF$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def filter$mcSI$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def filter$mcSJ$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def filter$mcSS$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def filter$mcSV$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any]) -> Coll[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]: ...
    def filter$mcSZ$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def filter$mcV$sp(self, p: scala.Function1[scala.runtime.BoxedUnit, typing.Any]) -> Coll[scala.runtime.BoxedUnit]: ...
    def filter$mcVB$sp(self, p: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any]) -> Coll[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]: ...
    def filter$mcVC$sp(self, p: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any]) -> Coll[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]: ...
    def filter$mcVD$sp(self, p: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any]) -> Coll[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]: ...
    def filter$mcVF$sp(self, p: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any]) -> Coll[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]: ...
    def filter$mcVI$sp(self, p: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any]) -> Coll[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]: ...
    def filter$mcVJ$sp(self, p: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any]) -> Coll[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]: ...
    def filter$mcVS$sp(self, p: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any]) -> Coll[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]: ...
    def filter$mcVV$sp(self, p: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, scala.runtime.BoxedUnit], typing.Any]) -> Coll[scala.Tuple2[scala.runtime.BoxedUnit, scala.runtime.BoxedUnit]]: ...
    def filter$mcVZ$sp(self, p: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any]) -> Coll[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]: ...
    def filter$mcZ$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> Coll[typing.Any]: ...
    def filter$mcZB$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def filter$mcZC$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def filter$mcZD$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def filter$mcZF$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def filter$mcZI$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def filter$mcZJ$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def filter$mcZS$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def filter$mcZV$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any]) -> Coll[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]: ...
    def filter$mcZZ$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def find(self, p: scala.Function1[scala.Tuple2[_PairOfCols__L, _PairOfCols__R], typing.Any]) -> scala.Option[scala.Tuple2[_PairOfCols__L, _PairOfCols__R]]: ...
    def find$mcB$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> scala.Option[typing.Any]: ...
    def find$mcC$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> scala.Option[typing.Any]: ...
    def find$mcD$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> scala.Option[typing.Any]: ...
    def find$mcF$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> scala.Option[typing.Any]: ...
    def find$mcI$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> scala.Option[typing.Any]: ...
    def find$mcJ$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> scala.Option[typing.Any]: ...
    def find$mcS$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> scala.Option[typing.Any]: ...
    def find$mcV$sp(self, p: scala.Function1[scala.runtime.BoxedUnit, typing.Any]) -> scala.Option[scala.runtime.BoxedUnit]: ...
    def find$mcZ$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> scala.Option[typing.Any]: ...
    _flatMap__B = typing.TypeVar('_flatMap__B')  # <B>
    def flatMap(self, f: scala.Function1[scala.Tuple2[_PairOfCols__L, _PairOfCols__R], Coll[_flatMap__B]], evidence$15: scalan.RType[_flatMap__B]) -> Coll[_flatMap__B]: ...
    _flatMap$mcB$sp__B = typing.TypeVar('_flatMap$mcB$sp__B')  # <B>
    def flatMap$mcB$sp(self, f: scala.Function1[typing.Any, Coll[_flatMap.mcB.sp__B]], evidence$2: scalan.RType[_flatMap.mcB.sp__B]) -> Coll[_flatMap.mcB.sp__B]: ...
    _flatMap$mcBB$sp__B = typing.TypeVar('_flatMap$mcBB$sp__B')  # <B>
    def flatMap$mcBB$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], Coll[_flatMap.mcBB.sp__B]], evidence$15: scalan.RType[_flatMap.mcBB.sp__B]) -> Coll[_flatMap.mcBB.sp__B]: ...
    _flatMap$mcBC$sp__B = typing.TypeVar('_flatMap$mcBC$sp__B')  # <B>
    def flatMap$mcBC$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], Coll[_flatMap.mcBC.sp__B]], evidence$15: scalan.RType[_flatMap.mcBC.sp__B]) -> Coll[_flatMap.mcBC.sp__B]: ...
    _flatMap$mcBD$sp__B = typing.TypeVar('_flatMap$mcBD$sp__B')  # <B>
    def flatMap$mcBD$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], Coll[_flatMap.mcBD.sp__B]], evidence$15: scalan.RType[_flatMap.mcBD.sp__B]) -> Coll[_flatMap.mcBD.sp__B]: ...
    _flatMap$mcBF$sp__B = typing.TypeVar('_flatMap$mcBF$sp__B')  # <B>
    def flatMap$mcBF$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], Coll[_flatMap.mcBF.sp__B]], evidence$15: scalan.RType[_flatMap.mcBF.sp__B]) -> Coll[_flatMap.mcBF.sp__B]: ...
    _flatMap$mcBI$sp__B = typing.TypeVar('_flatMap$mcBI$sp__B')  # <B>
    def flatMap$mcBI$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], Coll[_flatMap.mcBI.sp__B]], evidence$15: scalan.RType[_flatMap.mcBI.sp__B]) -> Coll[_flatMap.mcBI.sp__B]: ...
    _flatMap$mcBJ$sp__B = typing.TypeVar('_flatMap$mcBJ$sp__B')  # <B>
    def flatMap$mcBJ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], Coll[_flatMap.mcBJ.sp__B]], evidence$15: scalan.RType[_flatMap.mcBJ.sp__B]) -> Coll[_flatMap.mcBJ.sp__B]: ...
    _flatMap$mcBS$sp__B = typing.TypeVar('_flatMap$mcBS$sp__B')  # <B>
    def flatMap$mcBS$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], Coll[_flatMap.mcBS.sp__B]], evidence$15: scalan.RType[_flatMap.mcBS.sp__B]) -> Coll[_flatMap.mcBS.sp__B]: ...
    _flatMap$mcBV$sp__B = typing.TypeVar('_flatMap$mcBV$sp__B')  # <B>
    def flatMap$mcBV$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], Coll[_flatMap.mcBV.sp__B]], evidence$15: scalan.RType[_flatMap.mcBV.sp__B]) -> Coll[_flatMap.mcBV.sp__B]: ...
    _flatMap$mcBZ$sp__B = typing.TypeVar('_flatMap$mcBZ$sp__B')  # <B>
    def flatMap$mcBZ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], Coll[_flatMap.mcBZ.sp__B]], evidence$15: scalan.RType[_flatMap.mcBZ.sp__B]) -> Coll[_flatMap.mcBZ.sp__B]: ...
    _flatMap$mcC$sp__B = typing.TypeVar('_flatMap$mcC$sp__B')  # <B>
    def flatMap$mcC$sp(self, f: scala.Function1[typing.Any, Coll[_flatMap.mcC.sp__B]], evidence$2: scalan.RType[_flatMap.mcC.sp__B]) -> Coll[_flatMap.mcC.sp__B]: ...
    _flatMap$mcCB$sp__B = typing.TypeVar('_flatMap$mcCB$sp__B')  # <B>
    def flatMap$mcCB$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], Coll[_flatMap.mcCB.sp__B]], evidence$15: scalan.RType[_flatMap.mcCB.sp__B]) -> Coll[_flatMap.mcCB.sp__B]: ...
    _flatMap$mcCC$sp__B = typing.TypeVar('_flatMap$mcCC$sp__B')  # <B>
    def flatMap$mcCC$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], Coll[_flatMap.mcCC.sp__B]], evidence$15: scalan.RType[_flatMap.mcCC.sp__B]) -> Coll[_flatMap.mcCC.sp__B]: ...
    _flatMap$mcCD$sp__B = typing.TypeVar('_flatMap$mcCD$sp__B')  # <B>
    def flatMap$mcCD$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], Coll[_flatMap.mcCD.sp__B]], evidence$15: scalan.RType[_flatMap.mcCD.sp__B]) -> Coll[_flatMap.mcCD.sp__B]: ...
    _flatMap$mcCF$sp__B = typing.TypeVar('_flatMap$mcCF$sp__B')  # <B>
    def flatMap$mcCF$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], Coll[_flatMap.mcCF.sp__B]], evidence$15: scalan.RType[_flatMap.mcCF.sp__B]) -> Coll[_flatMap.mcCF.sp__B]: ...
    _flatMap$mcCI$sp__B = typing.TypeVar('_flatMap$mcCI$sp__B')  # <B>
    def flatMap$mcCI$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], Coll[_flatMap.mcCI.sp__B]], evidence$15: scalan.RType[_flatMap.mcCI.sp__B]) -> Coll[_flatMap.mcCI.sp__B]: ...
    _flatMap$mcCJ$sp__B = typing.TypeVar('_flatMap$mcCJ$sp__B')  # <B>
    def flatMap$mcCJ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], Coll[_flatMap.mcCJ.sp__B]], evidence$15: scalan.RType[_flatMap.mcCJ.sp__B]) -> Coll[_flatMap.mcCJ.sp__B]: ...
    _flatMap$mcCS$sp__B = typing.TypeVar('_flatMap$mcCS$sp__B')  # <B>
    def flatMap$mcCS$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], Coll[_flatMap.mcCS.sp__B]], evidence$15: scalan.RType[_flatMap.mcCS.sp__B]) -> Coll[_flatMap.mcCS.sp__B]: ...
    _flatMap$mcCV$sp__B = typing.TypeVar('_flatMap$mcCV$sp__B')  # <B>
    def flatMap$mcCV$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], Coll[_flatMap.mcCV.sp__B]], evidence$15: scalan.RType[_flatMap.mcCV.sp__B]) -> Coll[_flatMap.mcCV.sp__B]: ...
    _flatMap$mcCZ$sp__B = typing.TypeVar('_flatMap$mcCZ$sp__B')  # <B>
    def flatMap$mcCZ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], Coll[_flatMap.mcCZ.sp__B]], evidence$15: scalan.RType[_flatMap.mcCZ.sp__B]) -> Coll[_flatMap.mcCZ.sp__B]: ...
    _flatMap$mcD$sp__B = typing.TypeVar('_flatMap$mcD$sp__B')  # <B>
    def flatMap$mcD$sp(self, f: scala.Function1[typing.Any, Coll[_flatMap.mcD.sp__B]], evidence$2: scalan.RType[_flatMap.mcD.sp__B]) -> Coll[_flatMap.mcD.sp__B]: ...
    _flatMap$mcDB$sp__B = typing.TypeVar('_flatMap$mcDB$sp__B')  # <B>
    def flatMap$mcDB$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], Coll[_flatMap.mcDB.sp__B]], evidence$15: scalan.RType[_flatMap.mcDB.sp__B]) -> Coll[_flatMap.mcDB.sp__B]: ...
    _flatMap$mcDC$sp__B = typing.TypeVar('_flatMap$mcDC$sp__B')  # <B>
    def flatMap$mcDC$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], Coll[_flatMap.mcDC.sp__B]], evidence$15: scalan.RType[_flatMap.mcDC.sp__B]) -> Coll[_flatMap.mcDC.sp__B]: ...
    _flatMap$mcDD$sp__B = typing.TypeVar('_flatMap$mcDD$sp__B')  # <B>
    def flatMap$mcDD$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], Coll[_flatMap.mcDD.sp__B]], evidence$15: scalan.RType[_flatMap.mcDD.sp__B]) -> Coll[_flatMap.mcDD.sp__B]: ...
    _flatMap$mcDF$sp__B = typing.TypeVar('_flatMap$mcDF$sp__B')  # <B>
    def flatMap$mcDF$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], Coll[_flatMap.mcDF.sp__B]], evidence$15: scalan.RType[_flatMap.mcDF.sp__B]) -> Coll[_flatMap.mcDF.sp__B]: ...
    _flatMap$mcDI$sp__B = typing.TypeVar('_flatMap$mcDI$sp__B')  # <B>
    def flatMap$mcDI$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], Coll[_flatMap.mcDI.sp__B]], evidence$15: scalan.RType[_flatMap.mcDI.sp__B]) -> Coll[_flatMap.mcDI.sp__B]: ...
    _flatMap$mcDJ$sp__B = typing.TypeVar('_flatMap$mcDJ$sp__B')  # <B>
    def flatMap$mcDJ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], Coll[_flatMap.mcDJ.sp__B]], evidence$15: scalan.RType[_flatMap.mcDJ.sp__B]) -> Coll[_flatMap.mcDJ.sp__B]: ...
    _flatMap$mcDS$sp__B = typing.TypeVar('_flatMap$mcDS$sp__B')  # <B>
    def flatMap$mcDS$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], Coll[_flatMap.mcDS.sp__B]], evidence$15: scalan.RType[_flatMap.mcDS.sp__B]) -> Coll[_flatMap.mcDS.sp__B]: ...
    _flatMap$mcDV$sp__B = typing.TypeVar('_flatMap$mcDV$sp__B')  # <B>
    def flatMap$mcDV$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], Coll[_flatMap.mcDV.sp__B]], evidence$15: scalan.RType[_flatMap.mcDV.sp__B]) -> Coll[_flatMap.mcDV.sp__B]: ...
    _flatMap$mcDZ$sp__B = typing.TypeVar('_flatMap$mcDZ$sp__B')  # <B>
    def flatMap$mcDZ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], Coll[_flatMap.mcDZ.sp__B]], evidence$15: scalan.RType[_flatMap.mcDZ.sp__B]) -> Coll[_flatMap.mcDZ.sp__B]: ...
    _flatMap$mcF$sp__B = typing.TypeVar('_flatMap$mcF$sp__B')  # <B>
    def flatMap$mcF$sp(self, f: scala.Function1[typing.Any, Coll[_flatMap.mcF.sp__B]], evidence$2: scalan.RType[_flatMap.mcF.sp__B]) -> Coll[_flatMap.mcF.sp__B]: ...
    _flatMap$mcFB$sp__B = typing.TypeVar('_flatMap$mcFB$sp__B')  # <B>
    def flatMap$mcFB$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], Coll[_flatMap.mcFB.sp__B]], evidence$15: scalan.RType[_flatMap.mcFB.sp__B]) -> Coll[_flatMap.mcFB.sp__B]: ...
    _flatMap$mcFC$sp__B = typing.TypeVar('_flatMap$mcFC$sp__B')  # <B>
    def flatMap$mcFC$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], Coll[_flatMap.mcFC.sp__B]], evidence$15: scalan.RType[_flatMap.mcFC.sp__B]) -> Coll[_flatMap.mcFC.sp__B]: ...
    _flatMap$mcFD$sp__B = typing.TypeVar('_flatMap$mcFD$sp__B')  # <B>
    def flatMap$mcFD$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], Coll[_flatMap.mcFD.sp__B]], evidence$15: scalan.RType[_flatMap.mcFD.sp__B]) -> Coll[_flatMap.mcFD.sp__B]: ...
    _flatMap$mcFF$sp__B = typing.TypeVar('_flatMap$mcFF$sp__B')  # <B>
    def flatMap$mcFF$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], Coll[_flatMap.mcFF.sp__B]], evidence$15: scalan.RType[_flatMap.mcFF.sp__B]) -> Coll[_flatMap.mcFF.sp__B]: ...
    _flatMap$mcFI$sp__B = typing.TypeVar('_flatMap$mcFI$sp__B')  # <B>
    def flatMap$mcFI$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], Coll[_flatMap.mcFI.sp__B]], evidence$15: scalan.RType[_flatMap.mcFI.sp__B]) -> Coll[_flatMap.mcFI.sp__B]: ...
    _flatMap$mcFJ$sp__B = typing.TypeVar('_flatMap$mcFJ$sp__B')  # <B>
    def flatMap$mcFJ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], Coll[_flatMap.mcFJ.sp__B]], evidence$15: scalan.RType[_flatMap.mcFJ.sp__B]) -> Coll[_flatMap.mcFJ.sp__B]: ...
    _flatMap$mcFS$sp__B = typing.TypeVar('_flatMap$mcFS$sp__B')  # <B>
    def flatMap$mcFS$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], Coll[_flatMap.mcFS.sp__B]], evidence$15: scalan.RType[_flatMap.mcFS.sp__B]) -> Coll[_flatMap.mcFS.sp__B]: ...
    _flatMap$mcFV$sp__B = typing.TypeVar('_flatMap$mcFV$sp__B')  # <B>
    def flatMap$mcFV$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], Coll[_flatMap.mcFV.sp__B]], evidence$15: scalan.RType[_flatMap.mcFV.sp__B]) -> Coll[_flatMap.mcFV.sp__B]: ...
    _flatMap$mcFZ$sp__B = typing.TypeVar('_flatMap$mcFZ$sp__B')  # <B>
    def flatMap$mcFZ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], Coll[_flatMap.mcFZ.sp__B]], evidence$15: scalan.RType[_flatMap.mcFZ.sp__B]) -> Coll[_flatMap.mcFZ.sp__B]: ...
    _flatMap$mcI$sp__B = typing.TypeVar('_flatMap$mcI$sp__B')  # <B>
    def flatMap$mcI$sp(self, f: scala.Function1[typing.Any, Coll[_flatMap.mcI.sp__B]], evidence$2: scalan.RType[_flatMap.mcI.sp__B]) -> Coll[_flatMap.mcI.sp__B]: ...
    _flatMap$mcIB$sp__B = typing.TypeVar('_flatMap$mcIB$sp__B')  # <B>
    def flatMap$mcIB$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], Coll[_flatMap.mcIB.sp__B]], evidence$15: scalan.RType[_flatMap.mcIB.sp__B]) -> Coll[_flatMap.mcIB.sp__B]: ...
    _flatMap$mcIC$sp__B = typing.TypeVar('_flatMap$mcIC$sp__B')  # <B>
    def flatMap$mcIC$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], Coll[_flatMap.mcIC.sp__B]], evidence$15: scalan.RType[_flatMap.mcIC.sp__B]) -> Coll[_flatMap.mcIC.sp__B]: ...
    _flatMap$mcID$sp__B = typing.TypeVar('_flatMap$mcID$sp__B')  # <B>
    def flatMap$mcID$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], Coll[_flatMap.mcID.sp__B]], evidence$15: scalan.RType[_flatMap.mcID.sp__B]) -> Coll[_flatMap.mcID.sp__B]: ...
    _flatMap$mcIF$sp__B = typing.TypeVar('_flatMap$mcIF$sp__B')  # <B>
    def flatMap$mcIF$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], Coll[_flatMap.mcIF.sp__B]], evidence$15: scalan.RType[_flatMap.mcIF.sp__B]) -> Coll[_flatMap.mcIF.sp__B]: ...
    _flatMap$mcII$sp__B = typing.TypeVar('_flatMap$mcII$sp__B')  # <B>
    def flatMap$mcII$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], Coll[_flatMap.mcII.sp__B]], evidence$15: scalan.RType[_flatMap.mcII.sp__B]) -> Coll[_flatMap.mcII.sp__B]: ...
    _flatMap$mcIJ$sp__B = typing.TypeVar('_flatMap$mcIJ$sp__B')  # <B>
    def flatMap$mcIJ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], Coll[_flatMap.mcIJ.sp__B]], evidence$15: scalan.RType[_flatMap.mcIJ.sp__B]) -> Coll[_flatMap.mcIJ.sp__B]: ...
    _flatMap$mcIS$sp__B = typing.TypeVar('_flatMap$mcIS$sp__B')  # <B>
    def flatMap$mcIS$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], Coll[_flatMap.mcIS.sp__B]], evidence$15: scalan.RType[_flatMap.mcIS.sp__B]) -> Coll[_flatMap.mcIS.sp__B]: ...
    _flatMap$mcIV$sp__B = typing.TypeVar('_flatMap$mcIV$sp__B')  # <B>
    def flatMap$mcIV$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], Coll[_flatMap.mcIV.sp__B]], evidence$15: scalan.RType[_flatMap.mcIV.sp__B]) -> Coll[_flatMap.mcIV.sp__B]: ...
    _flatMap$mcIZ$sp__B = typing.TypeVar('_flatMap$mcIZ$sp__B')  # <B>
    def flatMap$mcIZ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], Coll[_flatMap.mcIZ.sp__B]], evidence$15: scalan.RType[_flatMap.mcIZ.sp__B]) -> Coll[_flatMap.mcIZ.sp__B]: ...
    _flatMap$mcJ$sp__B = typing.TypeVar('_flatMap$mcJ$sp__B')  # <B>
    def flatMap$mcJ$sp(self, f: scala.Function1[typing.Any, Coll[_flatMap.mcJ.sp__B]], evidence$2: scalan.RType[_flatMap.mcJ.sp__B]) -> Coll[_flatMap.mcJ.sp__B]: ...
    _flatMap$mcJB$sp__B = typing.TypeVar('_flatMap$mcJB$sp__B')  # <B>
    def flatMap$mcJB$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], Coll[_flatMap.mcJB.sp__B]], evidence$15: scalan.RType[_flatMap.mcJB.sp__B]) -> Coll[_flatMap.mcJB.sp__B]: ...
    _flatMap$mcJC$sp__B = typing.TypeVar('_flatMap$mcJC$sp__B')  # <B>
    def flatMap$mcJC$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], Coll[_flatMap.mcJC.sp__B]], evidence$15: scalan.RType[_flatMap.mcJC.sp__B]) -> Coll[_flatMap.mcJC.sp__B]: ...
    _flatMap$mcJD$sp__B = typing.TypeVar('_flatMap$mcJD$sp__B')  # <B>
    def flatMap$mcJD$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], Coll[_flatMap.mcJD.sp__B]], evidence$15: scalan.RType[_flatMap.mcJD.sp__B]) -> Coll[_flatMap.mcJD.sp__B]: ...
    _flatMap$mcJF$sp__B = typing.TypeVar('_flatMap$mcJF$sp__B')  # <B>
    def flatMap$mcJF$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], Coll[_flatMap.mcJF.sp__B]], evidence$15: scalan.RType[_flatMap.mcJF.sp__B]) -> Coll[_flatMap.mcJF.sp__B]: ...
    _flatMap$mcJI$sp__B = typing.TypeVar('_flatMap$mcJI$sp__B')  # <B>
    def flatMap$mcJI$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], Coll[_flatMap.mcJI.sp__B]], evidence$15: scalan.RType[_flatMap.mcJI.sp__B]) -> Coll[_flatMap.mcJI.sp__B]: ...
    _flatMap$mcJJ$sp__B = typing.TypeVar('_flatMap$mcJJ$sp__B')  # <B>
    def flatMap$mcJJ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], Coll[_flatMap.mcJJ.sp__B]], evidence$15: scalan.RType[_flatMap.mcJJ.sp__B]) -> Coll[_flatMap.mcJJ.sp__B]: ...
    _flatMap$mcJS$sp__B = typing.TypeVar('_flatMap$mcJS$sp__B')  # <B>
    def flatMap$mcJS$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], Coll[_flatMap.mcJS.sp__B]], evidence$15: scalan.RType[_flatMap.mcJS.sp__B]) -> Coll[_flatMap.mcJS.sp__B]: ...
    _flatMap$mcJV$sp__B = typing.TypeVar('_flatMap$mcJV$sp__B')  # <B>
    def flatMap$mcJV$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], Coll[_flatMap.mcJV.sp__B]], evidence$15: scalan.RType[_flatMap.mcJV.sp__B]) -> Coll[_flatMap.mcJV.sp__B]: ...
    _flatMap$mcJZ$sp__B = typing.TypeVar('_flatMap$mcJZ$sp__B')  # <B>
    def flatMap$mcJZ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], Coll[_flatMap.mcJZ.sp__B]], evidence$15: scalan.RType[_flatMap.mcJZ.sp__B]) -> Coll[_flatMap.mcJZ.sp__B]: ...
    _flatMap$mcS$sp__B = typing.TypeVar('_flatMap$mcS$sp__B')  # <B>
    def flatMap$mcS$sp(self, f: scala.Function1[typing.Any, Coll[_flatMap.mcS.sp__B]], evidence$2: scalan.RType[_flatMap.mcS.sp__B]) -> Coll[_flatMap.mcS.sp__B]: ...
    _flatMap$mcSB$sp__B = typing.TypeVar('_flatMap$mcSB$sp__B')  # <B>
    def flatMap$mcSB$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], Coll[_flatMap.mcSB.sp__B]], evidence$15: scalan.RType[_flatMap.mcSB.sp__B]) -> Coll[_flatMap.mcSB.sp__B]: ...
    _flatMap$mcSC$sp__B = typing.TypeVar('_flatMap$mcSC$sp__B')  # <B>
    def flatMap$mcSC$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], Coll[_flatMap.mcSC.sp__B]], evidence$15: scalan.RType[_flatMap.mcSC.sp__B]) -> Coll[_flatMap.mcSC.sp__B]: ...
    _flatMap$mcSD$sp__B = typing.TypeVar('_flatMap$mcSD$sp__B')  # <B>
    def flatMap$mcSD$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], Coll[_flatMap.mcSD.sp__B]], evidence$15: scalan.RType[_flatMap.mcSD.sp__B]) -> Coll[_flatMap.mcSD.sp__B]: ...
    _flatMap$mcSF$sp__B = typing.TypeVar('_flatMap$mcSF$sp__B')  # <B>
    def flatMap$mcSF$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], Coll[_flatMap.mcSF.sp__B]], evidence$15: scalan.RType[_flatMap.mcSF.sp__B]) -> Coll[_flatMap.mcSF.sp__B]: ...
    _flatMap$mcSI$sp__B = typing.TypeVar('_flatMap$mcSI$sp__B')  # <B>
    def flatMap$mcSI$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], Coll[_flatMap.mcSI.sp__B]], evidence$15: scalan.RType[_flatMap.mcSI.sp__B]) -> Coll[_flatMap.mcSI.sp__B]: ...
    _flatMap$mcSJ$sp__B = typing.TypeVar('_flatMap$mcSJ$sp__B')  # <B>
    def flatMap$mcSJ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], Coll[_flatMap.mcSJ.sp__B]], evidence$15: scalan.RType[_flatMap.mcSJ.sp__B]) -> Coll[_flatMap.mcSJ.sp__B]: ...
    _flatMap$mcSS$sp__B = typing.TypeVar('_flatMap$mcSS$sp__B')  # <B>
    def flatMap$mcSS$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], Coll[_flatMap.mcSS.sp__B]], evidence$15: scalan.RType[_flatMap.mcSS.sp__B]) -> Coll[_flatMap.mcSS.sp__B]: ...
    _flatMap$mcSV$sp__B = typing.TypeVar('_flatMap$mcSV$sp__B')  # <B>
    def flatMap$mcSV$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], Coll[_flatMap.mcSV.sp__B]], evidence$15: scalan.RType[_flatMap.mcSV.sp__B]) -> Coll[_flatMap.mcSV.sp__B]: ...
    _flatMap$mcSZ$sp__B = typing.TypeVar('_flatMap$mcSZ$sp__B')  # <B>
    def flatMap$mcSZ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], Coll[_flatMap.mcSZ.sp__B]], evidence$15: scalan.RType[_flatMap.mcSZ.sp__B]) -> Coll[_flatMap.mcSZ.sp__B]: ...
    _flatMap$mcV$sp__B = typing.TypeVar('_flatMap$mcV$sp__B')  # <B>
    def flatMap$mcV$sp(self, f: scala.Function1[scala.runtime.BoxedUnit, Coll[_flatMap.mcV.sp__B]], evidence$2: scalan.RType[_flatMap.mcV.sp__B]) -> Coll[_flatMap.mcV.sp__B]: ...
    _flatMap$mcVB$sp__B = typing.TypeVar('_flatMap$mcVB$sp__B')  # <B>
    def flatMap$mcVB$sp(self, f: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], Coll[_flatMap.mcVB.sp__B]], evidence$15: scalan.RType[_flatMap.mcVB.sp__B]) -> Coll[_flatMap.mcVB.sp__B]: ...
    _flatMap$mcVC$sp__B = typing.TypeVar('_flatMap$mcVC$sp__B')  # <B>
    def flatMap$mcVC$sp(self, f: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], Coll[_flatMap.mcVC.sp__B]], evidence$15: scalan.RType[_flatMap.mcVC.sp__B]) -> Coll[_flatMap.mcVC.sp__B]: ...
    _flatMap$mcVD$sp__B = typing.TypeVar('_flatMap$mcVD$sp__B')  # <B>
    def flatMap$mcVD$sp(self, f: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], Coll[_flatMap.mcVD.sp__B]], evidence$15: scalan.RType[_flatMap.mcVD.sp__B]) -> Coll[_flatMap.mcVD.sp__B]: ...
    _flatMap$mcVF$sp__B = typing.TypeVar('_flatMap$mcVF$sp__B')  # <B>
    def flatMap$mcVF$sp(self, f: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], Coll[_flatMap.mcVF.sp__B]], evidence$15: scalan.RType[_flatMap.mcVF.sp__B]) -> Coll[_flatMap.mcVF.sp__B]: ...
    _flatMap$mcVI$sp__B = typing.TypeVar('_flatMap$mcVI$sp__B')  # <B>
    def flatMap$mcVI$sp(self, f: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], Coll[_flatMap.mcVI.sp__B]], evidence$15: scalan.RType[_flatMap.mcVI.sp__B]) -> Coll[_flatMap.mcVI.sp__B]: ...
    _flatMap$mcVJ$sp__B = typing.TypeVar('_flatMap$mcVJ$sp__B')  # <B>
    def flatMap$mcVJ$sp(self, f: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], Coll[_flatMap.mcVJ.sp__B]], evidence$15: scalan.RType[_flatMap.mcVJ.sp__B]) -> Coll[_flatMap.mcVJ.sp__B]: ...
    _flatMap$mcVS$sp__B = typing.TypeVar('_flatMap$mcVS$sp__B')  # <B>
    def flatMap$mcVS$sp(self, f: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], Coll[_flatMap.mcVS.sp__B]], evidence$15: scalan.RType[_flatMap.mcVS.sp__B]) -> Coll[_flatMap.mcVS.sp__B]: ...
    _flatMap$mcVV$sp__B = typing.TypeVar('_flatMap$mcVV$sp__B')  # <B>
    def flatMap$mcVV$sp(self, f: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, scala.runtime.BoxedUnit], Coll[_flatMap.mcVV.sp__B]], evidence$15: scalan.RType[_flatMap.mcVV.sp__B]) -> Coll[_flatMap.mcVV.sp__B]: ...
    _flatMap$mcVZ$sp__B = typing.TypeVar('_flatMap$mcVZ$sp__B')  # <B>
    def flatMap$mcVZ$sp(self, f: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], Coll[_flatMap.mcVZ.sp__B]], evidence$15: scalan.RType[_flatMap.mcVZ.sp__B]) -> Coll[_flatMap.mcVZ.sp__B]: ...
    _flatMap$mcZ$sp__B = typing.TypeVar('_flatMap$mcZ$sp__B')  # <B>
    def flatMap$mcZ$sp(self, f: scala.Function1[typing.Any, Coll[_flatMap.mcZ.sp__B]], evidence$2: scalan.RType[_flatMap.mcZ.sp__B]) -> Coll[_flatMap.mcZ.sp__B]: ...
    _flatMap$mcZB$sp__B = typing.TypeVar('_flatMap$mcZB$sp__B')  # <B>
    def flatMap$mcZB$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], Coll[_flatMap.mcZB.sp__B]], evidence$15: scalan.RType[_flatMap.mcZB.sp__B]) -> Coll[_flatMap.mcZB.sp__B]: ...
    _flatMap$mcZC$sp__B = typing.TypeVar('_flatMap$mcZC$sp__B')  # <B>
    def flatMap$mcZC$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], Coll[_flatMap.mcZC.sp__B]], evidence$15: scalan.RType[_flatMap.mcZC.sp__B]) -> Coll[_flatMap.mcZC.sp__B]: ...
    _flatMap$mcZD$sp__B = typing.TypeVar('_flatMap$mcZD$sp__B')  # <B>
    def flatMap$mcZD$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], Coll[_flatMap.mcZD.sp__B]], evidence$15: scalan.RType[_flatMap.mcZD.sp__B]) -> Coll[_flatMap.mcZD.sp__B]: ...
    _flatMap$mcZF$sp__B = typing.TypeVar('_flatMap$mcZF$sp__B')  # <B>
    def flatMap$mcZF$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], Coll[_flatMap.mcZF.sp__B]], evidence$15: scalan.RType[_flatMap.mcZF.sp__B]) -> Coll[_flatMap.mcZF.sp__B]: ...
    _flatMap$mcZI$sp__B = typing.TypeVar('_flatMap$mcZI$sp__B')  # <B>
    def flatMap$mcZI$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], Coll[_flatMap.mcZI.sp__B]], evidence$15: scalan.RType[_flatMap.mcZI.sp__B]) -> Coll[_flatMap.mcZI.sp__B]: ...
    _flatMap$mcZJ$sp__B = typing.TypeVar('_flatMap$mcZJ$sp__B')  # <B>
    def flatMap$mcZJ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], Coll[_flatMap.mcZJ.sp__B]], evidence$15: scalan.RType[_flatMap.mcZJ.sp__B]) -> Coll[_flatMap.mcZJ.sp__B]: ...
    _flatMap$mcZS$sp__B = typing.TypeVar('_flatMap$mcZS$sp__B')  # <B>
    def flatMap$mcZS$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], Coll[_flatMap.mcZS.sp__B]], evidence$15: scalan.RType[_flatMap.mcZS.sp__B]) -> Coll[_flatMap.mcZS.sp__B]: ...
    _flatMap$mcZV$sp__B = typing.TypeVar('_flatMap$mcZV$sp__B')  # <B>
    def flatMap$mcZV$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], Coll[_flatMap.mcZV.sp__B]], evidence$15: scalan.RType[_flatMap.mcZV.sp__B]) -> Coll[_flatMap.mcZV.sp__B]: ...
    _flatMap$mcZZ$sp__B = typing.TypeVar('_flatMap$mcZZ$sp__B')  # <B>
    def flatMap$mcZZ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], Coll[_flatMap.mcZZ.sp__B]], evidence$15: scalan.RType[_flatMap.mcZZ.sp__B]) -> Coll[_flatMap.mcZZ.sp__B]: ...
    _foldLeft__B = typing.TypeVar('_foldLeft__B')  # <B>
    def foldLeft(self, zero: _foldLeft__B, op: scala.Function1[scala.Tuple2[_foldLeft__B, scala.Tuple2[_PairOfCols__L, _PairOfCols__R]], _foldLeft__B]) -> _foldLeft__B: ...
    _foldLeft$mcB$sp__B = typing.TypeVar('_foldLeft$mcB$sp__B')  # <B>
    def foldLeft$mcB$sp(self, zero: _foldLeft.mcB.sp__B, op: scala.Function1[scala.Tuple2[_foldLeft.mcB.sp__B, typing.Any], _foldLeft.mcB.sp__B]) -> _foldLeft.mcB.sp__B: ...
    _foldLeft$mcBB$sp__B = typing.TypeVar('_foldLeft$mcBB$sp__B')  # <B>
    def foldLeft$mcBB$sp(self, zero: _foldLeft.mcBB.sp__B, op: scala.Function1[scala.Tuple2[_foldLeft.mcBB.sp__B, scala.Tuple2[typing.Any, typing.Any]], _foldLeft.mcBB.sp__B]) -> _foldLeft.mcBB.sp__B: ...
    _foldLeft$mcBC$sp__B = typing.TypeVar('_foldLeft$mcBC$sp__B')  # <B>
    def foldLeft$mcBC$sp(self, zero: _foldLeft.mcBC.sp__B, op: scala.Function1[scala.Tuple2[_foldLeft.mcBC.sp__B, scala.Tuple2[typing.Any, typing.Any]], _foldLeft.mcBC.sp__B]) -> _foldLeft.mcBC.sp__B: ...
    _foldLeft$mcBD$sp__B = typing.TypeVar('_foldLeft$mcBD$sp__B')  # <B>
    def foldLeft$mcBD$sp(self, zero: _foldLeft.mcBD.sp__B, op: scala.Function1[scala.Tuple2[_foldLeft.mcBD.sp__B, scala.Tuple2[typing.Any, typing.Any]], _foldLeft.mcBD.sp__B]) -> _foldLeft.mcBD.sp__B: ...
    _foldLeft$mcBF$sp__B = typing.TypeVar('_foldLeft$mcBF$sp__B')  # <B>
    def foldLeft$mcBF$sp(self, zero: _foldLeft.mcBF.sp__B, op: scala.Function1[scala.Tuple2[_foldLeft.mcBF.sp__B, scala.Tuple2[typing.Any, typing.Any]], _foldLeft.mcBF.sp__B]) -> _foldLeft.mcBF.sp__B: ...
    _foldLeft$mcBI$sp__B = typing.TypeVar('_foldLeft$mcBI$sp__B')  # <B>
    def foldLeft$mcBI$sp(self, zero: _foldLeft.mcBI.sp__B, op: scala.Function1[scala.Tuple2[_foldLeft.mcBI.sp__B, scala.Tuple2[typing.Any, typing.Any]], _foldLeft.mcBI.sp__B]) -> _foldLeft.mcBI.sp__B: ...
    _foldLeft$mcBJ$sp__B = typing.TypeVar('_foldLeft$mcBJ$sp__B')  # <B>
    def foldLeft$mcBJ$sp(self, zero: _foldLeft.mcBJ.sp__B, op: scala.Function1[scala.Tuple2[_foldLeft.mcBJ.sp__B, scala.Tuple2[typing.Any, typing.Any]], _foldLeft.mcBJ.sp__B]) -> _foldLeft.mcBJ.sp__B: ...
    _foldLeft$mcBS$sp__B = typing.TypeVar('_foldLeft$mcBS$sp__B')  # <B>
    def foldLeft$mcBS$sp(self, zero: _foldLeft.mcBS.sp__B, op: scala.Function1[scala.Tuple2[_foldLeft.mcBS.sp__B, scala.Tuple2[typing.Any, typing.Any]], _foldLeft.mcBS.sp__B]) -> _foldLeft.mcBS.sp__B: ...
    _foldLeft$mcBV$sp__B = typing.TypeVar('_foldLeft$mcBV$sp__B')  # <B>
    def foldLeft$mcBV$sp(self, zero: _foldLeft.mcBV.sp__B, op: scala.Function1[scala.Tuple2[_foldLeft.mcBV.sp__B, scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]], _foldLeft.mcBV.sp__B]) -> _foldLeft.mcBV.sp__B: ...
    _foldLeft$mcBZ$sp__B = typing.TypeVar('_foldLeft$mcBZ$sp__B')  # <B>
    def foldLeft$mcBZ$sp(self, zero: _foldLeft.mcBZ.sp__B, op: scala.Function1[scala.Tuple2[_foldLeft.mcBZ.sp__B, scala.Tuple2[typing.Any, typing.Any]], _foldLeft.mcBZ.sp__B]) -> _foldLeft.mcBZ.sp__B: ...
    _foldLeft$mcC$sp__B = typing.TypeVar('_foldLeft$mcC$sp__B')  # <B>
    def foldLeft$mcC$sp(self, zero: _foldLeft.mcC.sp__B, op: scala.Function1[scala.Tuple2[_foldLeft.mcC.sp__B, typing.Any], _foldLeft.mcC.sp__B]) -> _foldLeft.mcC.sp__B: ...
    _foldLeft$mcCB$sp__B = typing.TypeVar('_foldLeft$mcCB$sp__B')  # <B>
    def foldLeft$mcCB$sp(self, zero: _foldLeft.mcCB.sp__B, op: scala.Function1[scala.Tuple2[_foldLeft.mcCB.sp__B, scala.Tuple2[typing.Any, typing.Any]], _foldLeft.mcCB.sp__B]) -> _foldLeft.mcCB.sp__B: ...
    _foldLeft$mcCC$sp__B = typing.TypeVar('_foldLeft$mcCC$sp__B')  # <B>
    def foldLeft$mcCC$sp(self, zero: _foldLeft.mcCC.sp__B, op: scala.Function1[scala.Tuple2[_foldLeft.mcCC.sp__B, scala.Tuple2[typing.Any, typing.Any]], _foldLeft.mcCC.sp__B]) -> _foldLeft.mcCC.sp__B: ...
    _foldLeft$mcCD$sp__B = typing.TypeVar('_foldLeft$mcCD$sp__B')  # <B>
    def foldLeft$mcCD$sp(self, zero: _foldLeft.mcCD.sp__B, op: scala.Function1[scala.Tuple2[_foldLeft.mcCD.sp__B, scala.Tuple2[typing.Any, typing.Any]], _foldLeft.mcCD.sp__B]) -> _foldLeft.mcCD.sp__B: ...
    _foldLeft$mcCF$sp__B = typing.TypeVar('_foldLeft$mcCF$sp__B')  # <B>
    def foldLeft$mcCF$sp(self, zero: _foldLeft.mcCF.sp__B, op: scala.Function1[scala.Tuple2[_foldLeft.mcCF.sp__B, scala.Tuple2[typing.Any, typing.Any]], _foldLeft.mcCF.sp__B]) -> _foldLeft.mcCF.sp__B: ...
    _foldLeft$mcCI$sp__B = typing.TypeVar('_foldLeft$mcCI$sp__B')  # <B>
    def foldLeft$mcCI$sp(self, zero: _foldLeft.mcCI.sp__B, op: scala.Function1[scala.Tuple2[_foldLeft.mcCI.sp__B, scala.Tuple2[typing.Any, typing.Any]], _foldLeft.mcCI.sp__B]) -> _foldLeft.mcCI.sp__B: ...
    _foldLeft$mcCJ$sp__B = typing.TypeVar('_foldLeft$mcCJ$sp__B')  # <B>
    def foldLeft$mcCJ$sp(self, zero: _foldLeft.mcCJ.sp__B, op: scala.Function1[scala.Tuple2[_foldLeft.mcCJ.sp__B, scala.Tuple2[typing.Any, typing.Any]], _foldLeft.mcCJ.sp__B]) -> _foldLeft.mcCJ.sp__B: ...
    _foldLeft$mcCS$sp__B = typing.TypeVar('_foldLeft$mcCS$sp__B')  # <B>
    def foldLeft$mcCS$sp(self, zero: _foldLeft.mcCS.sp__B, op: scala.Function1[scala.Tuple2[_foldLeft.mcCS.sp__B, scala.Tuple2[typing.Any, typing.Any]], _foldLeft.mcCS.sp__B]) -> _foldLeft.mcCS.sp__B: ...
    _foldLeft$mcCV$sp__B = typing.TypeVar('_foldLeft$mcCV$sp__B')  # <B>
    def foldLeft$mcCV$sp(self, zero: _foldLeft.mcCV.sp__B, op: scala.Function1[scala.Tuple2[_foldLeft.mcCV.sp__B, scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]], _foldLeft.mcCV.sp__B]) -> _foldLeft.mcCV.sp__B: ...
    _foldLeft$mcCZ$sp__B = typing.TypeVar('_foldLeft$mcCZ$sp__B')  # <B>
    def foldLeft$mcCZ$sp(self, zero: _foldLeft.mcCZ.sp__B, op: scala.Function1[scala.Tuple2[_foldLeft.mcCZ.sp__B, scala.Tuple2[typing.Any, typing.Any]], _foldLeft.mcCZ.sp__B]) -> _foldLeft.mcCZ.sp__B: ...
    _foldLeft$mcD$sp__B = typing.TypeVar('_foldLeft$mcD$sp__B')  # <B>
    def foldLeft$mcD$sp(self, zero: _foldLeft.mcD.sp__B, op: scala.Function1[scala.Tuple2[_foldLeft.mcD.sp__B, typing.Any], _foldLeft.mcD.sp__B]) -> _foldLeft.mcD.sp__B: ...
    _foldLeft$mcDB$sp__B = typing.TypeVar('_foldLeft$mcDB$sp__B')  # <B>
    def foldLeft$mcDB$sp(self, zero: _foldLeft.mcDB.sp__B, op: scala.Function1[scala.Tuple2[_foldLeft.mcDB.sp__B, scala.Tuple2[typing.Any, typing.Any]], _foldLeft.mcDB.sp__B]) -> _foldLeft.mcDB.sp__B: ...
    _foldLeft$mcDC$sp__B = typing.TypeVar('_foldLeft$mcDC$sp__B')  # <B>
    def foldLeft$mcDC$sp(self, zero: _foldLeft.mcDC.sp__B, op: scala.Function1[scala.Tuple2[_foldLeft.mcDC.sp__B, scala.Tuple2[typing.Any, typing.Any]], _foldLeft.mcDC.sp__B]) -> _foldLeft.mcDC.sp__B: ...
    _foldLeft$mcDD$sp__B = typing.TypeVar('_foldLeft$mcDD$sp__B')  # <B>
    def foldLeft$mcDD$sp(self, zero: _foldLeft.mcDD.sp__B, op: scala.Function1[scala.Tuple2[_foldLeft.mcDD.sp__B, scala.Tuple2[typing.Any, typing.Any]], _foldLeft.mcDD.sp__B]) -> _foldLeft.mcDD.sp__B: ...
    _foldLeft$mcDF$sp__B = typing.TypeVar('_foldLeft$mcDF$sp__B')  # <B>
    def foldLeft$mcDF$sp(self, zero: _foldLeft.mcDF.sp__B, op: scala.Function1[scala.Tuple2[_foldLeft.mcDF.sp__B, scala.Tuple2[typing.Any, typing.Any]], _foldLeft.mcDF.sp__B]) -> _foldLeft.mcDF.sp__B: ...
    _foldLeft$mcDI$sp__B = typing.TypeVar('_foldLeft$mcDI$sp__B')  # <B>
    def foldLeft$mcDI$sp(self, zero: _foldLeft.mcDI.sp__B, op: scala.Function1[scala.Tuple2[_foldLeft.mcDI.sp__B, scala.Tuple2[typing.Any, typing.Any]], _foldLeft.mcDI.sp__B]) -> _foldLeft.mcDI.sp__B: ...
    _foldLeft$mcDJ$sp__B = typing.TypeVar('_foldLeft$mcDJ$sp__B')  # <B>
    def foldLeft$mcDJ$sp(self, zero: _foldLeft.mcDJ.sp__B, op: scala.Function1[scala.Tuple2[_foldLeft.mcDJ.sp__B, scala.Tuple2[typing.Any, typing.Any]], _foldLeft.mcDJ.sp__B]) -> _foldLeft.mcDJ.sp__B: ...
    _foldLeft$mcDS$sp__B = typing.TypeVar('_foldLeft$mcDS$sp__B')  # <B>
    def foldLeft$mcDS$sp(self, zero: _foldLeft.mcDS.sp__B, op: scala.Function1[scala.Tuple2[_foldLeft.mcDS.sp__B, scala.Tuple2[typing.Any, typing.Any]], _foldLeft.mcDS.sp__B]) -> _foldLeft.mcDS.sp__B: ...
    _foldLeft$mcDV$sp__B = typing.TypeVar('_foldLeft$mcDV$sp__B')  # <B>
    def foldLeft$mcDV$sp(self, zero: _foldLeft.mcDV.sp__B, op: scala.Function1[scala.Tuple2[_foldLeft.mcDV.sp__B, scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]], _foldLeft.mcDV.sp__B]) -> _foldLeft.mcDV.sp__B: ...
    _foldLeft$mcDZ$sp__B = typing.TypeVar('_foldLeft$mcDZ$sp__B')  # <B>
    def foldLeft$mcDZ$sp(self, zero: _foldLeft.mcDZ.sp__B, op: scala.Function1[scala.Tuple2[_foldLeft.mcDZ.sp__B, scala.Tuple2[typing.Any, typing.Any]], _foldLeft.mcDZ.sp__B]) -> _foldLeft.mcDZ.sp__B: ...
    _foldLeft$mcF$sp__B = typing.TypeVar('_foldLeft$mcF$sp__B')  # <B>
    def foldLeft$mcF$sp(self, zero: _foldLeft.mcF.sp__B, op: scala.Function1[scala.Tuple2[_foldLeft.mcF.sp__B, typing.Any], _foldLeft.mcF.sp__B]) -> _foldLeft.mcF.sp__B: ...
    _foldLeft$mcFB$sp__B = typing.TypeVar('_foldLeft$mcFB$sp__B')  # <B>
    def foldLeft$mcFB$sp(self, zero: _foldLeft.mcFB.sp__B, op: scala.Function1[scala.Tuple2[_foldLeft.mcFB.sp__B, scala.Tuple2[typing.Any, typing.Any]], _foldLeft.mcFB.sp__B]) -> _foldLeft.mcFB.sp__B: ...
    _foldLeft$mcFC$sp__B = typing.TypeVar('_foldLeft$mcFC$sp__B')  # <B>
    def foldLeft$mcFC$sp(self, zero: _foldLeft.mcFC.sp__B, op: scala.Function1[scala.Tuple2[_foldLeft.mcFC.sp__B, scala.Tuple2[typing.Any, typing.Any]], _foldLeft.mcFC.sp__B]) -> _foldLeft.mcFC.sp__B: ...
    _foldLeft$mcFD$sp__B = typing.TypeVar('_foldLeft$mcFD$sp__B')  # <B>
    def foldLeft$mcFD$sp(self, zero: _foldLeft.mcFD.sp__B, op: scala.Function1[scala.Tuple2[_foldLeft.mcFD.sp__B, scala.Tuple2[typing.Any, typing.Any]], _foldLeft.mcFD.sp__B]) -> _foldLeft.mcFD.sp__B: ...
    _foldLeft$mcFF$sp__B = typing.TypeVar('_foldLeft$mcFF$sp__B')  # <B>
    def foldLeft$mcFF$sp(self, zero: _foldLeft.mcFF.sp__B, op: scala.Function1[scala.Tuple2[_foldLeft.mcFF.sp__B, scala.Tuple2[typing.Any, typing.Any]], _foldLeft.mcFF.sp__B]) -> _foldLeft.mcFF.sp__B: ...
    _foldLeft$mcFI$sp__B = typing.TypeVar('_foldLeft$mcFI$sp__B')  # <B>
    def foldLeft$mcFI$sp(self, zero: _foldLeft.mcFI.sp__B, op: scala.Function1[scala.Tuple2[_foldLeft.mcFI.sp__B, scala.Tuple2[typing.Any, typing.Any]], _foldLeft.mcFI.sp__B]) -> _foldLeft.mcFI.sp__B: ...
    _foldLeft$mcFJ$sp__B = typing.TypeVar('_foldLeft$mcFJ$sp__B')  # <B>
    def foldLeft$mcFJ$sp(self, zero: _foldLeft.mcFJ.sp__B, op: scala.Function1[scala.Tuple2[_foldLeft.mcFJ.sp__B, scala.Tuple2[typing.Any, typing.Any]], _foldLeft.mcFJ.sp__B]) -> _foldLeft.mcFJ.sp__B: ...
    _foldLeft$mcFS$sp__B = typing.TypeVar('_foldLeft$mcFS$sp__B')  # <B>
    def foldLeft$mcFS$sp(self, zero: _foldLeft.mcFS.sp__B, op: scala.Function1[scala.Tuple2[_foldLeft.mcFS.sp__B, scala.Tuple2[typing.Any, typing.Any]], _foldLeft.mcFS.sp__B]) -> _foldLeft.mcFS.sp__B: ...
    _foldLeft$mcFV$sp__B = typing.TypeVar('_foldLeft$mcFV$sp__B')  # <B>
    def foldLeft$mcFV$sp(self, zero: _foldLeft.mcFV.sp__B, op: scala.Function1[scala.Tuple2[_foldLeft.mcFV.sp__B, scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]], _foldLeft.mcFV.sp__B]) -> _foldLeft.mcFV.sp__B: ...
    _foldLeft$mcFZ$sp__B = typing.TypeVar('_foldLeft$mcFZ$sp__B')  # <B>
    def foldLeft$mcFZ$sp(self, zero: _foldLeft.mcFZ.sp__B, op: scala.Function1[scala.Tuple2[_foldLeft.mcFZ.sp__B, scala.Tuple2[typing.Any, typing.Any]], _foldLeft.mcFZ.sp__B]) -> _foldLeft.mcFZ.sp__B: ...
    _foldLeft$mcI$sp__B = typing.TypeVar('_foldLeft$mcI$sp__B')  # <B>
    def foldLeft$mcI$sp(self, zero: _foldLeft.mcI.sp__B, op: scala.Function1[scala.Tuple2[_foldLeft.mcI.sp__B, typing.Any], _foldLeft.mcI.sp__B]) -> _foldLeft.mcI.sp__B: ...
    _foldLeft$mcIB$sp__B = typing.TypeVar('_foldLeft$mcIB$sp__B')  # <B>
    def foldLeft$mcIB$sp(self, zero: _foldLeft.mcIB.sp__B, op: scala.Function1[scala.Tuple2[_foldLeft.mcIB.sp__B, scala.Tuple2[typing.Any, typing.Any]], _foldLeft.mcIB.sp__B]) -> _foldLeft.mcIB.sp__B: ...
    _foldLeft$mcIC$sp__B = typing.TypeVar('_foldLeft$mcIC$sp__B')  # <B>
    def foldLeft$mcIC$sp(self, zero: _foldLeft.mcIC.sp__B, op: scala.Function1[scala.Tuple2[_foldLeft.mcIC.sp__B, scala.Tuple2[typing.Any, typing.Any]], _foldLeft.mcIC.sp__B]) -> _foldLeft.mcIC.sp__B: ...
    _foldLeft$mcID$sp__B = typing.TypeVar('_foldLeft$mcID$sp__B')  # <B>
    def foldLeft$mcID$sp(self, zero: _foldLeft.mcID.sp__B, op: scala.Function1[scala.Tuple2[_foldLeft.mcID.sp__B, scala.Tuple2[typing.Any, typing.Any]], _foldLeft.mcID.sp__B]) -> _foldLeft.mcID.sp__B: ...
    _foldLeft$mcIF$sp__B = typing.TypeVar('_foldLeft$mcIF$sp__B')  # <B>
    def foldLeft$mcIF$sp(self, zero: _foldLeft.mcIF.sp__B, op: scala.Function1[scala.Tuple2[_foldLeft.mcIF.sp__B, scala.Tuple2[typing.Any, typing.Any]], _foldLeft.mcIF.sp__B]) -> _foldLeft.mcIF.sp__B: ...
    _foldLeft$mcII$sp__B = typing.TypeVar('_foldLeft$mcII$sp__B')  # <B>
    def foldLeft$mcII$sp(self, zero: _foldLeft.mcII.sp__B, op: scala.Function1[scala.Tuple2[_foldLeft.mcII.sp__B, scala.Tuple2[typing.Any, typing.Any]], _foldLeft.mcII.sp__B]) -> _foldLeft.mcII.sp__B: ...
    _foldLeft$mcIJ$sp__B = typing.TypeVar('_foldLeft$mcIJ$sp__B')  # <B>
    def foldLeft$mcIJ$sp(self, zero: _foldLeft.mcIJ.sp__B, op: scala.Function1[scala.Tuple2[_foldLeft.mcIJ.sp__B, scala.Tuple2[typing.Any, typing.Any]], _foldLeft.mcIJ.sp__B]) -> _foldLeft.mcIJ.sp__B: ...
    _foldLeft$mcIS$sp__B = typing.TypeVar('_foldLeft$mcIS$sp__B')  # <B>
    def foldLeft$mcIS$sp(self, zero: _foldLeft.mcIS.sp__B, op: scala.Function1[scala.Tuple2[_foldLeft.mcIS.sp__B, scala.Tuple2[typing.Any, typing.Any]], _foldLeft.mcIS.sp__B]) -> _foldLeft.mcIS.sp__B: ...
    _foldLeft$mcIV$sp__B = typing.TypeVar('_foldLeft$mcIV$sp__B')  # <B>
    def foldLeft$mcIV$sp(self, zero: _foldLeft.mcIV.sp__B, op: scala.Function1[scala.Tuple2[_foldLeft.mcIV.sp__B, scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]], _foldLeft.mcIV.sp__B]) -> _foldLeft.mcIV.sp__B: ...
    _foldLeft$mcIZ$sp__B = typing.TypeVar('_foldLeft$mcIZ$sp__B')  # <B>
    def foldLeft$mcIZ$sp(self, zero: _foldLeft.mcIZ.sp__B, op: scala.Function1[scala.Tuple2[_foldLeft.mcIZ.sp__B, scala.Tuple2[typing.Any, typing.Any]], _foldLeft.mcIZ.sp__B]) -> _foldLeft.mcIZ.sp__B: ...
    _foldLeft$mcJ$sp__B = typing.TypeVar('_foldLeft$mcJ$sp__B')  # <B>
    def foldLeft$mcJ$sp(self, zero: _foldLeft.mcJ.sp__B, op: scala.Function1[scala.Tuple2[_foldLeft.mcJ.sp__B, typing.Any], _foldLeft.mcJ.sp__B]) -> _foldLeft.mcJ.sp__B: ...
    _foldLeft$mcJB$sp__B = typing.TypeVar('_foldLeft$mcJB$sp__B')  # <B>
    def foldLeft$mcJB$sp(self, zero: _foldLeft.mcJB.sp__B, op: scala.Function1[scala.Tuple2[_foldLeft.mcJB.sp__B, scala.Tuple2[typing.Any, typing.Any]], _foldLeft.mcJB.sp__B]) -> _foldLeft.mcJB.sp__B: ...
    _foldLeft$mcJC$sp__B = typing.TypeVar('_foldLeft$mcJC$sp__B')  # <B>
    def foldLeft$mcJC$sp(self, zero: _foldLeft.mcJC.sp__B, op: scala.Function1[scala.Tuple2[_foldLeft.mcJC.sp__B, scala.Tuple2[typing.Any, typing.Any]], _foldLeft.mcJC.sp__B]) -> _foldLeft.mcJC.sp__B: ...
    _foldLeft$mcJD$sp__B = typing.TypeVar('_foldLeft$mcJD$sp__B')  # <B>
    def foldLeft$mcJD$sp(self, zero: _foldLeft.mcJD.sp__B, op: scala.Function1[scala.Tuple2[_foldLeft.mcJD.sp__B, scala.Tuple2[typing.Any, typing.Any]], _foldLeft.mcJD.sp__B]) -> _foldLeft.mcJD.sp__B: ...
    _foldLeft$mcJF$sp__B = typing.TypeVar('_foldLeft$mcJF$sp__B')  # <B>
    def foldLeft$mcJF$sp(self, zero: _foldLeft.mcJF.sp__B, op: scala.Function1[scala.Tuple2[_foldLeft.mcJF.sp__B, scala.Tuple2[typing.Any, typing.Any]], _foldLeft.mcJF.sp__B]) -> _foldLeft.mcJF.sp__B: ...
    _foldLeft$mcJI$sp__B = typing.TypeVar('_foldLeft$mcJI$sp__B')  # <B>
    def foldLeft$mcJI$sp(self, zero: _foldLeft.mcJI.sp__B, op: scala.Function1[scala.Tuple2[_foldLeft.mcJI.sp__B, scala.Tuple2[typing.Any, typing.Any]], _foldLeft.mcJI.sp__B]) -> _foldLeft.mcJI.sp__B: ...
    _foldLeft$mcJJ$sp__B = typing.TypeVar('_foldLeft$mcJJ$sp__B')  # <B>
    def foldLeft$mcJJ$sp(self, zero: _foldLeft.mcJJ.sp__B, op: scala.Function1[scala.Tuple2[_foldLeft.mcJJ.sp__B, scala.Tuple2[typing.Any, typing.Any]], _foldLeft.mcJJ.sp__B]) -> _foldLeft.mcJJ.sp__B: ...
    _foldLeft$mcJS$sp__B = typing.TypeVar('_foldLeft$mcJS$sp__B')  # <B>
    def foldLeft$mcJS$sp(self, zero: _foldLeft.mcJS.sp__B, op: scala.Function1[scala.Tuple2[_foldLeft.mcJS.sp__B, scala.Tuple2[typing.Any, typing.Any]], _foldLeft.mcJS.sp__B]) -> _foldLeft.mcJS.sp__B: ...
    _foldLeft$mcJV$sp__B = typing.TypeVar('_foldLeft$mcJV$sp__B')  # <B>
    def foldLeft$mcJV$sp(self, zero: _foldLeft.mcJV.sp__B, op: scala.Function1[scala.Tuple2[_foldLeft.mcJV.sp__B, scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]], _foldLeft.mcJV.sp__B]) -> _foldLeft.mcJV.sp__B: ...
    _foldLeft$mcJZ$sp__B = typing.TypeVar('_foldLeft$mcJZ$sp__B')  # <B>
    def foldLeft$mcJZ$sp(self, zero: _foldLeft.mcJZ.sp__B, op: scala.Function1[scala.Tuple2[_foldLeft.mcJZ.sp__B, scala.Tuple2[typing.Any, typing.Any]], _foldLeft.mcJZ.sp__B]) -> _foldLeft.mcJZ.sp__B: ...
    _foldLeft$mcS$sp__B = typing.TypeVar('_foldLeft$mcS$sp__B')  # <B>
    def foldLeft$mcS$sp(self, zero: _foldLeft.mcS.sp__B, op: scala.Function1[scala.Tuple2[_foldLeft.mcS.sp__B, typing.Any], _foldLeft.mcS.sp__B]) -> _foldLeft.mcS.sp__B: ...
    _foldLeft$mcSB$sp__B = typing.TypeVar('_foldLeft$mcSB$sp__B')  # <B>
    def foldLeft$mcSB$sp(self, zero: _foldLeft.mcSB.sp__B, op: scala.Function1[scala.Tuple2[_foldLeft.mcSB.sp__B, scala.Tuple2[typing.Any, typing.Any]], _foldLeft.mcSB.sp__B]) -> _foldLeft.mcSB.sp__B: ...
    _foldLeft$mcSC$sp__B = typing.TypeVar('_foldLeft$mcSC$sp__B')  # <B>
    def foldLeft$mcSC$sp(self, zero: _foldLeft.mcSC.sp__B, op: scala.Function1[scala.Tuple2[_foldLeft.mcSC.sp__B, scala.Tuple2[typing.Any, typing.Any]], _foldLeft.mcSC.sp__B]) -> _foldLeft.mcSC.sp__B: ...
    _foldLeft$mcSD$sp__B = typing.TypeVar('_foldLeft$mcSD$sp__B')  # <B>
    def foldLeft$mcSD$sp(self, zero: _foldLeft.mcSD.sp__B, op: scala.Function1[scala.Tuple2[_foldLeft.mcSD.sp__B, scala.Tuple2[typing.Any, typing.Any]], _foldLeft.mcSD.sp__B]) -> _foldLeft.mcSD.sp__B: ...
    _foldLeft$mcSF$sp__B = typing.TypeVar('_foldLeft$mcSF$sp__B')  # <B>
    def foldLeft$mcSF$sp(self, zero: _foldLeft.mcSF.sp__B, op: scala.Function1[scala.Tuple2[_foldLeft.mcSF.sp__B, scala.Tuple2[typing.Any, typing.Any]], _foldLeft.mcSF.sp__B]) -> _foldLeft.mcSF.sp__B: ...
    _foldLeft$mcSI$sp__B = typing.TypeVar('_foldLeft$mcSI$sp__B')  # <B>
    def foldLeft$mcSI$sp(self, zero: _foldLeft.mcSI.sp__B, op: scala.Function1[scala.Tuple2[_foldLeft.mcSI.sp__B, scala.Tuple2[typing.Any, typing.Any]], _foldLeft.mcSI.sp__B]) -> _foldLeft.mcSI.sp__B: ...
    _foldLeft$mcSJ$sp__B = typing.TypeVar('_foldLeft$mcSJ$sp__B')  # <B>
    def foldLeft$mcSJ$sp(self, zero: _foldLeft.mcSJ.sp__B, op: scala.Function1[scala.Tuple2[_foldLeft.mcSJ.sp__B, scala.Tuple2[typing.Any, typing.Any]], _foldLeft.mcSJ.sp__B]) -> _foldLeft.mcSJ.sp__B: ...
    _foldLeft$mcSS$sp__B = typing.TypeVar('_foldLeft$mcSS$sp__B')  # <B>
    def foldLeft$mcSS$sp(self, zero: _foldLeft.mcSS.sp__B, op: scala.Function1[scala.Tuple2[_foldLeft.mcSS.sp__B, scala.Tuple2[typing.Any, typing.Any]], _foldLeft.mcSS.sp__B]) -> _foldLeft.mcSS.sp__B: ...
    _foldLeft$mcSV$sp__B = typing.TypeVar('_foldLeft$mcSV$sp__B')  # <B>
    def foldLeft$mcSV$sp(self, zero: _foldLeft.mcSV.sp__B, op: scala.Function1[scala.Tuple2[_foldLeft.mcSV.sp__B, scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]], _foldLeft.mcSV.sp__B]) -> _foldLeft.mcSV.sp__B: ...
    _foldLeft$mcSZ$sp__B = typing.TypeVar('_foldLeft$mcSZ$sp__B')  # <B>
    def foldLeft$mcSZ$sp(self, zero: _foldLeft.mcSZ.sp__B, op: scala.Function1[scala.Tuple2[_foldLeft.mcSZ.sp__B, scala.Tuple2[typing.Any, typing.Any]], _foldLeft.mcSZ.sp__B]) -> _foldLeft.mcSZ.sp__B: ...
    _foldLeft$mcV$sp__B = typing.TypeVar('_foldLeft$mcV$sp__B')  # <B>
    def foldLeft$mcV$sp(self, zero: _foldLeft.mcV.sp__B, op: scala.Function1[scala.Tuple2[_foldLeft.mcV.sp__B, scala.runtime.BoxedUnit], _foldLeft.mcV.sp__B]) -> _foldLeft.mcV.sp__B: ...
    _foldLeft$mcVB$sp__B = typing.TypeVar('_foldLeft$mcVB$sp__B')  # <B>
    def foldLeft$mcVB$sp(self, zero: _foldLeft.mcVB.sp__B, op: scala.Function1[scala.Tuple2[_foldLeft.mcVB.sp__B, scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]], _foldLeft.mcVB.sp__B]) -> _foldLeft.mcVB.sp__B: ...
    _foldLeft$mcVC$sp__B = typing.TypeVar('_foldLeft$mcVC$sp__B')  # <B>
    def foldLeft$mcVC$sp(self, zero: _foldLeft.mcVC.sp__B, op: scala.Function1[scala.Tuple2[_foldLeft.mcVC.sp__B, scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]], _foldLeft.mcVC.sp__B]) -> _foldLeft.mcVC.sp__B: ...
    _foldLeft$mcVD$sp__B = typing.TypeVar('_foldLeft$mcVD$sp__B')  # <B>
    def foldLeft$mcVD$sp(self, zero: _foldLeft.mcVD.sp__B, op: scala.Function1[scala.Tuple2[_foldLeft.mcVD.sp__B, scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]], _foldLeft.mcVD.sp__B]) -> _foldLeft.mcVD.sp__B: ...
    _foldLeft$mcVF$sp__B = typing.TypeVar('_foldLeft$mcVF$sp__B')  # <B>
    def foldLeft$mcVF$sp(self, zero: _foldLeft.mcVF.sp__B, op: scala.Function1[scala.Tuple2[_foldLeft.mcVF.sp__B, scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]], _foldLeft.mcVF.sp__B]) -> _foldLeft.mcVF.sp__B: ...
    _foldLeft$mcVI$sp__B = typing.TypeVar('_foldLeft$mcVI$sp__B')  # <B>
    def foldLeft$mcVI$sp(self, zero: _foldLeft.mcVI.sp__B, op: scala.Function1[scala.Tuple2[_foldLeft.mcVI.sp__B, scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]], _foldLeft.mcVI.sp__B]) -> _foldLeft.mcVI.sp__B: ...
    _foldLeft$mcVJ$sp__B = typing.TypeVar('_foldLeft$mcVJ$sp__B')  # <B>
    def foldLeft$mcVJ$sp(self, zero: _foldLeft.mcVJ.sp__B, op: scala.Function1[scala.Tuple2[_foldLeft.mcVJ.sp__B, scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]], _foldLeft.mcVJ.sp__B]) -> _foldLeft.mcVJ.sp__B: ...
    _foldLeft$mcVS$sp__B = typing.TypeVar('_foldLeft$mcVS$sp__B')  # <B>
    def foldLeft$mcVS$sp(self, zero: _foldLeft.mcVS.sp__B, op: scala.Function1[scala.Tuple2[_foldLeft.mcVS.sp__B, scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]], _foldLeft.mcVS.sp__B]) -> _foldLeft.mcVS.sp__B: ...
    _foldLeft$mcVV$sp__B = typing.TypeVar('_foldLeft$mcVV$sp__B')  # <B>
    def foldLeft$mcVV$sp(self, zero: _foldLeft.mcVV.sp__B, op: scala.Function1[scala.Tuple2[_foldLeft.mcVV.sp__B, scala.Tuple2[scala.runtime.BoxedUnit, scala.runtime.BoxedUnit]], _foldLeft.mcVV.sp__B]) -> _foldLeft.mcVV.sp__B: ...
    _foldLeft$mcVZ$sp__B = typing.TypeVar('_foldLeft$mcVZ$sp__B')  # <B>
    def foldLeft$mcVZ$sp(self, zero: _foldLeft.mcVZ.sp__B, op: scala.Function1[scala.Tuple2[_foldLeft.mcVZ.sp__B, scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]], _foldLeft.mcVZ.sp__B]) -> _foldLeft.mcVZ.sp__B: ...
    _foldLeft$mcZ$sp__B = typing.TypeVar('_foldLeft$mcZ$sp__B')  # <B>
    def foldLeft$mcZ$sp(self, zero: _foldLeft.mcZ.sp__B, op: scala.Function1[scala.Tuple2[_foldLeft.mcZ.sp__B, typing.Any], _foldLeft.mcZ.sp__B]) -> _foldLeft.mcZ.sp__B: ...
    _foldLeft$mcZB$sp__B = typing.TypeVar('_foldLeft$mcZB$sp__B')  # <B>
    def foldLeft$mcZB$sp(self, zero: _foldLeft.mcZB.sp__B, op: scala.Function1[scala.Tuple2[_foldLeft.mcZB.sp__B, scala.Tuple2[typing.Any, typing.Any]], _foldLeft.mcZB.sp__B]) -> _foldLeft.mcZB.sp__B: ...
    _foldLeft$mcZC$sp__B = typing.TypeVar('_foldLeft$mcZC$sp__B')  # <B>
    def foldLeft$mcZC$sp(self, zero: _foldLeft.mcZC.sp__B, op: scala.Function1[scala.Tuple2[_foldLeft.mcZC.sp__B, scala.Tuple2[typing.Any, typing.Any]], _foldLeft.mcZC.sp__B]) -> _foldLeft.mcZC.sp__B: ...
    _foldLeft$mcZD$sp__B = typing.TypeVar('_foldLeft$mcZD$sp__B')  # <B>
    def foldLeft$mcZD$sp(self, zero: _foldLeft.mcZD.sp__B, op: scala.Function1[scala.Tuple2[_foldLeft.mcZD.sp__B, scala.Tuple2[typing.Any, typing.Any]], _foldLeft.mcZD.sp__B]) -> _foldLeft.mcZD.sp__B: ...
    _foldLeft$mcZF$sp__B = typing.TypeVar('_foldLeft$mcZF$sp__B')  # <B>
    def foldLeft$mcZF$sp(self, zero: _foldLeft.mcZF.sp__B, op: scala.Function1[scala.Tuple2[_foldLeft.mcZF.sp__B, scala.Tuple2[typing.Any, typing.Any]], _foldLeft.mcZF.sp__B]) -> _foldLeft.mcZF.sp__B: ...
    _foldLeft$mcZI$sp__B = typing.TypeVar('_foldLeft$mcZI$sp__B')  # <B>
    def foldLeft$mcZI$sp(self, zero: _foldLeft.mcZI.sp__B, op: scala.Function1[scala.Tuple2[_foldLeft.mcZI.sp__B, scala.Tuple2[typing.Any, typing.Any]], _foldLeft.mcZI.sp__B]) -> _foldLeft.mcZI.sp__B: ...
    _foldLeft$mcZJ$sp__B = typing.TypeVar('_foldLeft$mcZJ$sp__B')  # <B>
    def foldLeft$mcZJ$sp(self, zero: _foldLeft.mcZJ.sp__B, op: scala.Function1[scala.Tuple2[_foldLeft.mcZJ.sp__B, scala.Tuple2[typing.Any, typing.Any]], _foldLeft.mcZJ.sp__B]) -> _foldLeft.mcZJ.sp__B: ...
    _foldLeft$mcZS$sp__B = typing.TypeVar('_foldLeft$mcZS$sp__B')  # <B>
    def foldLeft$mcZS$sp(self, zero: _foldLeft.mcZS.sp__B, op: scala.Function1[scala.Tuple2[_foldLeft.mcZS.sp__B, scala.Tuple2[typing.Any, typing.Any]], _foldLeft.mcZS.sp__B]) -> _foldLeft.mcZS.sp__B: ...
    _foldLeft$mcZV$sp__B = typing.TypeVar('_foldLeft$mcZV$sp__B')  # <B>
    def foldLeft$mcZV$sp(self, zero: _foldLeft.mcZV.sp__B, op: scala.Function1[scala.Tuple2[_foldLeft.mcZV.sp__B, scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]], _foldLeft.mcZV.sp__B]) -> _foldLeft.mcZV.sp__B: ...
    _foldLeft$mcZZ$sp__B = typing.TypeVar('_foldLeft$mcZZ$sp__B')  # <B>
    def foldLeft$mcZZ$sp(self, zero: _foldLeft.mcZZ.sp__B, op: scala.Function1[scala.Tuple2[_foldLeft.mcZZ.sp__B, scala.Tuple2[typing.Any, typing.Any]], _foldLeft.mcZZ.sp__B]) -> _foldLeft.mcZZ.sp__B: ...
    def forall(self, p: scala.Function1[scala.Tuple2[_PairOfCols__L, _PairOfCols__R], typing.Any]) -> bool: ...
    def forall$mcB$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> bool: ...
    def forall$mcBB$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> bool: ...
    def forall$mcBC$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> bool: ...
    def forall$mcBD$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> bool: ...
    def forall$mcBF$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> bool: ...
    def forall$mcBI$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> bool: ...
    def forall$mcBJ$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> bool: ...
    def forall$mcBS$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> bool: ...
    def forall$mcBV$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any]) -> bool: ...
    def forall$mcBZ$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> bool: ...
    def forall$mcC$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> bool: ...
    def forall$mcCB$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> bool: ...
    def forall$mcCC$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> bool: ...
    def forall$mcCD$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> bool: ...
    def forall$mcCF$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> bool: ...
    def forall$mcCI$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> bool: ...
    def forall$mcCJ$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> bool: ...
    def forall$mcCS$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> bool: ...
    def forall$mcCV$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any]) -> bool: ...
    def forall$mcCZ$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> bool: ...
    def forall$mcD$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> bool: ...
    def forall$mcDB$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> bool: ...
    def forall$mcDC$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> bool: ...
    def forall$mcDD$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> bool: ...
    def forall$mcDF$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> bool: ...
    def forall$mcDI$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> bool: ...
    def forall$mcDJ$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> bool: ...
    def forall$mcDS$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> bool: ...
    def forall$mcDV$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any]) -> bool: ...
    def forall$mcDZ$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> bool: ...
    def forall$mcF$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> bool: ...
    def forall$mcFB$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> bool: ...
    def forall$mcFC$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> bool: ...
    def forall$mcFD$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> bool: ...
    def forall$mcFF$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> bool: ...
    def forall$mcFI$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> bool: ...
    def forall$mcFJ$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> bool: ...
    def forall$mcFS$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> bool: ...
    def forall$mcFV$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any]) -> bool: ...
    def forall$mcFZ$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> bool: ...
    def forall$mcI$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> bool: ...
    def forall$mcIB$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> bool: ...
    def forall$mcIC$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> bool: ...
    def forall$mcID$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> bool: ...
    def forall$mcIF$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> bool: ...
    def forall$mcII$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> bool: ...
    def forall$mcIJ$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> bool: ...
    def forall$mcIS$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> bool: ...
    def forall$mcIV$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any]) -> bool: ...
    def forall$mcIZ$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> bool: ...
    def forall$mcJ$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> bool: ...
    def forall$mcJB$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> bool: ...
    def forall$mcJC$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> bool: ...
    def forall$mcJD$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> bool: ...
    def forall$mcJF$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> bool: ...
    def forall$mcJI$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> bool: ...
    def forall$mcJJ$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> bool: ...
    def forall$mcJS$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> bool: ...
    def forall$mcJV$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any]) -> bool: ...
    def forall$mcJZ$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> bool: ...
    def forall$mcS$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> bool: ...
    def forall$mcSB$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> bool: ...
    def forall$mcSC$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> bool: ...
    def forall$mcSD$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> bool: ...
    def forall$mcSF$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> bool: ...
    def forall$mcSI$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> bool: ...
    def forall$mcSJ$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> bool: ...
    def forall$mcSS$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> bool: ...
    def forall$mcSV$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any]) -> bool: ...
    def forall$mcSZ$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> bool: ...
    def forall$mcV$sp(self, p: scala.Function1[scala.runtime.BoxedUnit, typing.Any]) -> bool: ...
    def forall$mcVB$sp(self, p: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any]) -> bool: ...
    def forall$mcVC$sp(self, p: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any]) -> bool: ...
    def forall$mcVD$sp(self, p: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any]) -> bool: ...
    def forall$mcVF$sp(self, p: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any]) -> bool: ...
    def forall$mcVI$sp(self, p: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any]) -> bool: ...
    def forall$mcVJ$sp(self, p: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any]) -> bool: ...
    def forall$mcVS$sp(self, p: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any]) -> bool: ...
    def forall$mcVV$sp(self, p: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, scala.runtime.BoxedUnit], typing.Any]) -> bool: ...
    def forall$mcVZ$sp(self, p: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any]) -> bool: ...
    def forall$mcZ$sp(self, p: scala.Function1[typing.Any, typing.Any]) -> bool: ...
    def forall$mcZB$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> bool: ...
    def forall$mcZC$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> bool: ...
    def forall$mcZD$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> bool: ...
    def forall$mcZF$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> bool: ...
    def forall$mcZI$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> bool: ...
    def forall$mcZJ$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> bool: ...
    def forall$mcZS$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> bool: ...
    def forall$mcZV$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any]) -> bool: ...
    def forall$mcZZ$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> bool: ...
    def getOrElse(self, i: int, default: scala.Tuple2[_PairOfCols__L, _PairOfCols__R]) -> scala.Tuple2[_PairOfCols__L, _PairOfCols__R]: ...
    def getOrElse$mcB$sp(self, index: int, default: int) -> int: ...
    def getOrElse$mcBB$sp(self, i: int, default: scala.Tuple2[typing.Any, typing.Any]) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def getOrElse$mcBC$sp(self, i: int, default: scala.Tuple2[typing.Any, typing.Any]) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def getOrElse$mcBD$sp(self, i: int, default: scala.Tuple2[typing.Any, typing.Any]) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def getOrElse$mcBF$sp(self, i: int, default: scala.Tuple2[typing.Any, typing.Any]) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def getOrElse$mcBI$sp(self, i: int, default: scala.Tuple2[typing.Any, typing.Any]) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def getOrElse$mcBJ$sp(self, i: int, default: scala.Tuple2[typing.Any, typing.Any]) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def getOrElse$mcBS$sp(self, i: int, default: scala.Tuple2[typing.Any, typing.Any]) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def getOrElse$mcBV$sp(self, i: int, default: scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]) -> scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]: ...
    def getOrElse$mcBZ$sp(self, i: int, default: scala.Tuple2[typing.Any, typing.Any]) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def getOrElse$mcC$sp(self, index: int, default: str) -> str: ...
    def getOrElse$mcCB$sp(self, i: int, default: scala.Tuple2[typing.Any, typing.Any]) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def getOrElse$mcCC$sp(self, i: int, default: scala.Tuple2[typing.Any, typing.Any]) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def getOrElse$mcCD$sp(self, i: int, default: scala.Tuple2[typing.Any, typing.Any]) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def getOrElse$mcCF$sp(self, i: int, default: scala.Tuple2[typing.Any, typing.Any]) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def getOrElse$mcCI$sp(self, i: int, default: scala.Tuple2[typing.Any, typing.Any]) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def getOrElse$mcCJ$sp(self, i: int, default: scala.Tuple2[typing.Any, typing.Any]) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def getOrElse$mcCS$sp(self, i: int, default: scala.Tuple2[typing.Any, typing.Any]) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def getOrElse$mcCV$sp(self, i: int, default: scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]) -> scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]: ...
    def getOrElse$mcCZ$sp(self, i: int, default: scala.Tuple2[typing.Any, typing.Any]) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def getOrElse$mcD$sp(self, index: int, default: float) -> float: ...
    def getOrElse$mcDB$sp(self, i: int, default: scala.Tuple2[typing.Any, typing.Any]) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def getOrElse$mcDC$sp(self, i: int, default: scala.Tuple2[typing.Any, typing.Any]) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def getOrElse$mcDD$sp(self, i: int, default: scala.Tuple2[typing.Any, typing.Any]) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def getOrElse$mcDF$sp(self, i: int, default: scala.Tuple2[typing.Any, typing.Any]) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def getOrElse$mcDI$sp(self, i: int, default: scala.Tuple2[typing.Any, typing.Any]) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def getOrElse$mcDJ$sp(self, i: int, default: scala.Tuple2[typing.Any, typing.Any]) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def getOrElse$mcDS$sp(self, i: int, default: scala.Tuple2[typing.Any, typing.Any]) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def getOrElse$mcDV$sp(self, i: int, default: scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]) -> scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]: ...
    def getOrElse$mcDZ$sp(self, i: int, default: scala.Tuple2[typing.Any, typing.Any]) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def getOrElse$mcF$sp(self, index: int, default: float) -> float: ...
    def getOrElse$mcFB$sp(self, i: int, default: scala.Tuple2[typing.Any, typing.Any]) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def getOrElse$mcFC$sp(self, i: int, default: scala.Tuple2[typing.Any, typing.Any]) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def getOrElse$mcFD$sp(self, i: int, default: scala.Tuple2[typing.Any, typing.Any]) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def getOrElse$mcFF$sp(self, i: int, default: scala.Tuple2[typing.Any, typing.Any]) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def getOrElse$mcFI$sp(self, i: int, default: scala.Tuple2[typing.Any, typing.Any]) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def getOrElse$mcFJ$sp(self, i: int, default: scala.Tuple2[typing.Any, typing.Any]) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def getOrElse$mcFS$sp(self, i: int, default: scala.Tuple2[typing.Any, typing.Any]) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def getOrElse$mcFV$sp(self, i: int, default: scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]) -> scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]: ...
    def getOrElse$mcFZ$sp(self, i: int, default: scala.Tuple2[typing.Any, typing.Any]) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def getOrElse$mcI$sp(self, index: int, default: int) -> int: ...
    def getOrElse$mcIB$sp(self, i: int, default: scala.Tuple2[typing.Any, typing.Any]) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def getOrElse$mcIC$sp(self, i: int, default: scala.Tuple2[typing.Any, typing.Any]) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def getOrElse$mcID$sp(self, i: int, default: scala.Tuple2[typing.Any, typing.Any]) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def getOrElse$mcIF$sp(self, i: int, default: scala.Tuple2[typing.Any, typing.Any]) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def getOrElse$mcII$sp(self, i: int, default: scala.Tuple2[typing.Any, typing.Any]) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def getOrElse$mcIJ$sp(self, i: int, default: scala.Tuple2[typing.Any, typing.Any]) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def getOrElse$mcIS$sp(self, i: int, default: scala.Tuple2[typing.Any, typing.Any]) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def getOrElse$mcIV$sp(self, i: int, default: scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]) -> scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]: ...
    def getOrElse$mcIZ$sp(self, i: int, default: scala.Tuple2[typing.Any, typing.Any]) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def getOrElse$mcJ$sp(self, index: int, default: int) -> int: ...
    def getOrElse$mcJB$sp(self, i: int, default: scala.Tuple2[typing.Any, typing.Any]) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def getOrElse$mcJC$sp(self, i: int, default: scala.Tuple2[typing.Any, typing.Any]) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def getOrElse$mcJD$sp(self, i: int, default: scala.Tuple2[typing.Any, typing.Any]) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def getOrElse$mcJF$sp(self, i: int, default: scala.Tuple2[typing.Any, typing.Any]) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def getOrElse$mcJI$sp(self, i: int, default: scala.Tuple2[typing.Any, typing.Any]) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def getOrElse$mcJJ$sp(self, i: int, default: scala.Tuple2[typing.Any, typing.Any]) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def getOrElse$mcJS$sp(self, i: int, default: scala.Tuple2[typing.Any, typing.Any]) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def getOrElse$mcJV$sp(self, i: int, default: scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]) -> scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]: ...
    def getOrElse$mcJZ$sp(self, i: int, default: scala.Tuple2[typing.Any, typing.Any]) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def getOrElse$mcS$sp(self, index: int, default: int) -> int: ...
    def getOrElse$mcSB$sp(self, i: int, default: scala.Tuple2[typing.Any, typing.Any]) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def getOrElse$mcSC$sp(self, i: int, default: scala.Tuple2[typing.Any, typing.Any]) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def getOrElse$mcSD$sp(self, i: int, default: scala.Tuple2[typing.Any, typing.Any]) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def getOrElse$mcSF$sp(self, i: int, default: scala.Tuple2[typing.Any, typing.Any]) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def getOrElse$mcSI$sp(self, i: int, default: scala.Tuple2[typing.Any, typing.Any]) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def getOrElse$mcSJ$sp(self, i: int, default: scala.Tuple2[typing.Any, typing.Any]) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def getOrElse$mcSS$sp(self, i: int, default: scala.Tuple2[typing.Any, typing.Any]) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def getOrElse$mcSV$sp(self, i: int, default: scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]) -> scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]: ...
    def getOrElse$mcSZ$sp(self, i: int, default: scala.Tuple2[typing.Any, typing.Any]) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def getOrElse$mcV$sp(self, index: int, default: scala.runtime.BoxedUnit) -> None: ...
    def getOrElse$mcVB$sp(self, i: int, default: scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]) -> scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]: ...
    def getOrElse$mcVC$sp(self, i: int, default: scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]) -> scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]: ...
    def getOrElse$mcVD$sp(self, i: int, default: scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]) -> scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]: ...
    def getOrElse$mcVF$sp(self, i: int, default: scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]) -> scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]: ...
    def getOrElse$mcVI$sp(self, i: int, default: scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]) -> scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]: ...
    def getOrElse$mcVJ$sp(self, i: int, default: scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]) -> scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]: ...
    def getOrElse$mcVS$sp(self, i: int, default: scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]) -> scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]: ...
    def getOrElse$mcVV$sp(self, i: int, default: scala.Tuple2[scala.runtime.BoxedUnit, scala.runtime.BoxedUnit]) -> scala.Tuple2[scala.runtime.BoxedUnit, scala.runtime.BoxedUnit]: ...
    def getOrElse$mcVZ$sp(self, i: int, default: scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]) -> scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]: ...
    def getOrElse$mcZ$sp(self, index: int, default: bool) -> bool: ...
    def getOrElse$mcZB$sp(self, i: int, default: scala.Tuple2[typing.Any, typing.Any]) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def getOrElse$mcZC$sp(self, i: int, default: scala.Tuple2[typing.Any, typing.Any]) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def getOrElse$mcZD$sp(self, i: int, default: scala.Tuple2[typing.Any, typing.Any]) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def getOrElse$mcZF$sp(self, i: int, default: scala.Tuple2[typing.Any, typing.Any]) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def getOrElse$mcZI$sp(self, i: int, default: scala.Tuple2[typing.Any, typing.Any]) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def getOrElse$mcZJ$sp(self, i: int, default: scala.Tuple2[typing.Any, typing.Any]) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def getOrElse$mcZS$sp(self, i: int, default: scala.Tuple2[typing.Any, typing.Any]) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def getOrElse$mcZV$sp(self, i: int, default: scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]) -> scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]: ...
    def getOrElse$mcZZ$sp(self, i: int, default: scala.Tuple2[typing.Any, typing.Any]) -> scala.Tuple2[typing.Any, typing.Any]: ...
    _groupBy__K = typing.TypeVar('_groupBy__K')  # <K>
    def groupBy(self, key: scala.Function1[scala.Tuple2[_PairOfCols__L, _PairOfCols__R], _groupBy__K], evidence$5: scalan.RType[_groupBy__K]) -> Coll[scala.Tuple2[_groupBy__K, Coll[scala.Tuple2[_PairOfCols__L, _PairOfCols__R]]]]: ...
    _groupBy$mcB$sp__K = typing.TypeVar('_groupBy$mcB$sp__K')  # <K>
    def groupBy$mcB$sp(self, key: scala.Function1[typing.Any, _groupBy.mcB.sp__K], evidence$5: scalan.RType[_groupBy.mcB.sp__K]) -> Coll[scala.Tuple2[_groupBy.mcB.sp__K, Coll[typing.Any]]]: ...
    _groupBy$mcC$sp__K = typing.TypeVar('_groupBy$mcC$sp__K')  # <K>
    def groupBy$mcC$sp(self, key: scala.Function1[typing.Any, _groupBy.mcC.sp__K], evidence$5: scalan.RType[_groupBy.mcC.sp__K]) -> Coll[scala.Tuple2[_groupBy.mcC.sp__K, Coll[typing.Any]]]: ...
    _groupBy$mcD$sp__K = typing.TypeVar('_groupBy$mcD$sp__K')  # <K>
    def groupBy$mcD$sp(self, key: scala.Function1[typing.Any, _groupBy.mcD.sp__K], evidence$5: scalan.RType[_groupBy.mcD.sp__K]) -> Coll[scala.Tuple2[_groupBy.mcD.sp__K, Coll[typing.Any]]]: ...
    _groupBy$mcF$sp__K = typing.TypeVar('_groupBy$mcF$sp__K')  # <K>
    def groupBy$mcF$sp(self, key: scala.Function1[typing.Any, _groupBy.mcF.sp__K], evidence$5: scalan.RType[_groupBy.mcF.sp__K]) -> Coll[scala.Tuple2[_groupBy.mcF.sp__K, Coll[typing.Any]]]: ...
    _groupBy$mcI$sp__K = typing.TypeVar('_groupBy$mcI$sp__K')  # <K>
    def groupBy$mcI$sp(self, key: scala.Function1[typing.Any, _groupBy.mcI.sp__K], evidence$5: scalan.RType[_groupBy.mcI.sp__K]) -> Coll[scala.Tuple2[_groupBy.mcI.sp__K, Coll[typing.Any]]]: ...
    _groupBy$mcJ$sp__K = typing.TypeVar('_groupBy$mcJ$sp__K')  # <K>
    def groupBy$mcJ$sp(self, key: scala.Function1[typing.Any, _groupBy.mcJ.sp__K], evidence$5: scalan.RType[_groupBy.mcJ.sp__K]) -> Coll[scala.Tuple2[_groupBy.mcJ.sp__K, Coll[typing.Any]]]: ...
    _groupBy$mcS$sp__K = typing.TypeVar('_groupBy$mcS$sp__K')  # <K>
    def groupBy$mcS$sp(self, key: scala.Function1[typing.Any, _groupBy.mcS.sp__K], evidence$5: scalan.RType[_groupBy.mcS.sp__K]) -> Coll[scala.Tuple2[_groupBy.mcS.sp__K, Coll[typing.Any]]]: ...
    _groupBy$mcV$sp__K = typing.TypeVar('_groupBy$mcV$sp__K')  # <K>
    def groupBy$mcV$sp(self, key: scala.Function1[scala.runtime.BoxedUnit, _groupBy.mcV.sp__K], evidence$5: scalan.RType[_groupBy.mcV.sp__K]) -> Coll[scala.Tuple2[_groupBy.mcV.sp__K, Coll[scala.runtime.BoxedUnit]]]: ...
    _groupBy$mcZ$sp__K = typing.TypeVar('_groupBy$mcZ$sp__K')  # <K>
    def groupBy$mcZ$sp(self, key: scala.Function1[typing.Any, _groupBy.mcZ.sp__K], evidence$5: scalan.RType[_groupBy.mcZ.sp__K]) -> Coll[scala.Tuple2[_groupBy.mcZ.sp__K, Coll[typing.Any]]]: ...
    _groupByProjecting__K = typing.TypeVar('_groupByProjecting__K')  # <K>
    _groupByProjecting__V = typing.TypeVar('_groupByProjecting__V')  # <V>
    def groupByProjecting(self, key: scala.Function1[scala.Tuple2[_PairOfCols__L, _PairOfCols__R], _groupByProjecting__K], proj: scala.Function1[scala.Tuple2[_PairOfCols__L, _PairOfCols__R], _groupByProjecting__V], evidence$6: scalan.RType[_groupByProjecting__K], evidence$7: scalan.RType[_groupByProjecting__V]) -> Coll[scala.Tuple2[_groupByProjecting__K, Coll[_groupByProjecting__V]]]: ...
    _groupByProjecting$mcB$sp__K = typing.TypeVar('_groupByProjecting$mcB$sp__K')  # <K>
    _groupByProjecting$mcB$sp__V = typing.TypeVar('_groupByProjecting$mcB$sp__V')  # <V>
    def groupByProjecting$mcB$sp(self, key: scala.Function1[typing.Any, _groupByProjecting.mcB.sp__K], proj: scala.Function1[typing.Any, _groupByProjecting.mcB.sp__V], evidence$6: scalan.RType[_groupByProjecting.mcB.sp__K], evidence$7: scalan.RType[_groupByProjecting.mcB.sp__V]) -> Coll[scala.Tuple2[_groupByProjecting.mcB.sp__K, Coll[_groupByProjecting.mcB.sp__V]]]: ...
    _groupByProjecting$mcC$sp__K = typing.TypeVar('_groupByProjecting$mcC$sp__K')  # <K>
    _groupByProjecting$mcC$sp__V = typing.TypeVar('_groupByProjecting$mcC$sp__V')  # <V>
    def groupByProjecting$mcC$sp(self, key: scala.Function1[typing.Any, _groupByProjecting.mcC.sp__K], proj: scala.Function1[typing.Any, _groupByProjecting.mcC.sp__V], evidence$6: scalan.RType[_groupByProjecting.mcC.sp__K], evidence$7: scalan.RType[_groupByProjecting.mcC.sp__V]) -> Coll[scala.Tuple2[_groupByProjecting.mcC.sp__K, Coll[_groupByProjecting.mcC.sp__V]]]: ...
    _groupByProjecting$mcD$sp__K = typing.TypeVar('_groupByProjecting$mcD$sp__K')  # <K>
    _groupByProjecting$mcD$sp__V = typing.TypeVar('_groupByProjecting$mcD$sp__V')  # <V>
    def groupByProjecting$mcD$sp(self, key: scala.Function1[typing.Any, _groupByProjecting.mcD.sp__K], proj: scala.Function1[typing.Any, _groupByProjecting.mcD.sp__V], evidence$6: scalan.RType[_groupByProjecting.mcD.sp__K], evidence$7: scalan.RType[_groupByProjecting.mcD.sp__V]) -> Coll[scala.Tuple2[_groupByProjecting.mcD.sp__K, Coll[_groupByProjecting.mcD.sp__V]]]: ...
    _groupByProjecting$mcF$sp__K = typing.TypeVar('_groupByProjecting$mcF$sp__K')  # <K>
    _groupByProjecting$mcF$sp__V = typing.TypeVar('_groupByProjecting$mcF$sp__V')  # <V>
    def groupByProjecting$mcF$sp(self, key: scala.Function1[typing.Any, _groupByProjecting.mcF.sp__K], proj: scala.Function1[typing.Any, _groupByProjecting.mcF.sp__V], evidence$6: scalan.RType[_groupByProjecting.mcF.sp__K], evidence$7: scalan.RType[_groupByProjecting.mcF.sp__V]) -> Coll[scala.Tuple2[_groupByProjecting.mcF.sp__K, Coll[_groupByProjecting.mcF.sp__V]]]: ...
    _groupByProjecting$mcI$sp__K = typing.TypeVar('_groupByProjecting$mcI$sp__K')  # <K>
    _groupByProjecting$mcI$sp__V = typing.TypeVar('_groupByProjecting$mcI$sp__V')  # <V>
    def groupByProjecting$mcI$sp(self, key: scala.Function1[typing.Any, _groupByProjecting.mcI.sp__K], proj: scala.Function1[typing.Any, _groupByProjecting.mcI.sp__V], evidence$6: scalan.RType[_groupByProjecting.mcI.sp__K], evidence$7: scalan.RType[_groupByProjecting.mcI.sp__V]) -> Coll[scala.Tuple2[_groupByProjecting.mcI.sp__K, Coll[_groupByProjecting.mcI.sp__V]]]: ...
    _groupByProjecting$mcJ$sp__K = typing.TypeVar('_groupByProjecting$mcJ$sp__K')  # <K>
    _groupByProjecting$mcJ$sp__V = typing.TypeVar('_groupByProjecting$mcJ$sp__V')  # <V>
    def groupByProjecting$mcJ$sp(self, key: scala.Function1[typing.Any, _groupByProjecting.mcJ.sp__K], proj: scala.Function1[typing.Any, _groupByProjecting.mcJ.sp__V], evidence$6: scalan.RType[_groupByProjecting.mcJ.sp__K], evidence$7: scalan.RType[_groupByProjecting.mcJ.sp__V]) -> Coll[scala.Tuple2[_groupByProjecting.mcJ.sp__K, Coll[_groupByProjecting.mcJ.sp__V]]]: ...
    _groupByProjecting$mcS$sp__K = typing.TypeVar('_groupByProjecting$mcS$sp__K')  # <K>
    _groupByProjecting$mcS$sp__V = typing.TypeVar('_groupByProjecting$mcS$sp__V')  # <V>
    def groupByProjecting$mcS$sp(self, key: scala.Function1[typing.Any, _groupByProjecting.mcS.sp__K], proj: scala.Function1[typing.Any, _groupByProjecting.mcS.sp__V], evidence$6: scalan.RType[_groupByProjecting.mcS.sp__K], evidence$7: scalan.RType[_groupByProjecting.mcS.sp__V]) -> Coll[scala.Tuple2[_groupByProjecting.mcS.sp__K, Coll[_groupByProjecting.mcS.sp__V]]]: ...
    _groupByProjecting$mcV$sp__K = typing.TypeVar('_groupByProjecting$mcV$sp__K')  # <K>
    _groupByProjecting$mcV$sp__V = typing.TypeVar('_groupByProjecting$mcV$sp__V')  # <V>
    def groupByProjecting$mcV$sp(self, key: scala.Function1[scala.runtime.BoxedUnit, _groupByProjecting.mcV.sp__K], proj: scala.Function1[scala.runtime.BoxedUnit, _groupByProjecting.mcV.sp__V], evidence$6: scalan.RType[_groupByProjecting.mcV.sp__K], evidence$7: scalan.RType[_groupByProjecting.mcV.sp__V]) -> Coll[scala.Tuple2[_groupByProjecting.mcV.sp__K, Coll[_groupByProjecting.mcV.sp__V]]]: ...
    _groupByProjecting$mcZ$sp__K = typing.TypeVar('_groupByProjecting$mcZ$sp__K')  # <K>
    _groupByProjecting$mcZ$sp__V = typing.TypeVar('_groupByProjecting$mcZ$sp__V')  # <V>
    def groupByProjecting$mcZ$sp(self, key: scala.Function1[typing.Any, _groupByProjecting.mcZ.sp__K], proj: scala.Function1[typing.Any, _groupByProjecting.mcZ.sp__V], evidence$6: scalan.RType[_groupByProjecting.mcZ.sp__K], evidence$7: scalan.RType[_groupByProjecting.mcZ.sp__V]) -> Coll[scala.Tuple2[_groupByProjecting.mcZ.sp__K, Coll[_groupByProjecting.mcZ.sp__V]]]: ...
    def hashCode(self) -> int: ...
    def indexOf(self, elem: typing.Any, from_: int) -> int: ...
    def indexOf$mcB$sp(self, elem: int, from_: int) -> int: ...
    def indexOf$mcC$sp(self, elem: str, from_: int) -> int: ...
    def indexOf$mcD$sp(self, elem: float, from_: int) -> int: ...
    def indexOf$mcF$sp(self, elem: float, from_: int) -> int: ...
    def indexOf$mcI$sp(self, elem: int, from_: int) -> int: ...
    def indexOf$mcJ$sp(self, elem: int, from_: int) -> int: ...
    def indexOf$mcS$sp(self, elem: int, from_: int) -> int: ...
    def indexOf$mcV$sp(self, elem: scala.runtime.BoxedUnit, from_: int) -> int: ...
    def indexOf$mcZ$sp(self, elem: bool, from_: int) -> int: ...
    def indexWhere(self, p: scala.Function1[scala.Tuple2[_PairOfCols__L, _PairOfCols__R], typing.Any], from_: int) -> int: ...
    def indexWhere$mcB$sp(self, p: scala.Function1[typing.Any, typing.Any], from_: int) -> int: ...
    def indexWhere$mcBB$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], from_: int) -> int: ...
    def indexWhere$mcBC$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], from_: int) -> int: ...
    def indexWhere$mcBD$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], from_: int) -> int: ...
    def indexWhere$mcBF$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], from_: int) -> int: ...
    def indexWhere$mcBI$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], from_: int) -> int: ...
    def indexWhere$mcBJ$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], from_: int) -> int: ...
    def indexWhere$mcBS$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], from_: int) -> int: ...
    def indexWhere$mcBV$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any], from_: int) -> int: ...
    def indexWhere$mcBZ$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], from_: int) -> int: ...
    def indexWhere$mcC$sp(self, p: scala.Function1[typing.Any, typing.Any], from_: int) -> int: ...
    def indexWhere$mcCB$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], from_: int) -> int: ...
    def indexWhere$mcCC$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], from_: int) -> int: ...
    def indexWhere$mcCD$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], from_: int) -> int: ...
    def indexWhere$mcCF$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], from_: int) -> int: ...
    def indexWhere$mcCI$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], from_: int) -> int: ...
    def indexWhere$mcCJ$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], from_: int) -> int: ...
    def indexWhere$mcCS$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], from_: int) -> int: ...
    def indexWhere$mcCV$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any], from_: int) -> int: ...
    def indexWhere$mcCZ$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], from_: int) -> int: ...
    def indexWhere$mcD$sp(self, p: scala.Function1[typing.Any, typing.Any], from_: int) -> int: ...
    def indexWhere$mcDB$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], from_: int) -> int: ...
    def indexWhere$mcDC$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], from_: int) -> int: ...
    def indexWhere$mcDD$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], from_: int) -> int: ...
    def indexWhere$mcDF$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], from_: int) -> int: ...
    def indexWhere$mcDI$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], from_: int) -> int: ...
    def indexWhere$mcDJ$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], from_: int) -> int: ...
    def indexWhere$mcDS$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], from_: int) -> int: ...
    def indexWhere$mcDV$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any], from_: int) -> int: ...
    def indexWhere$mcDZ$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], from_: int) -> int: ...
    def indexWhere$mcF$sp(self, p: scala.Function1[typing.Any, typing.Any], from_: int) -> int: ...
    def indexWhere$mcFB$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], from_: int) -> int: ...
    def indexWhere$mcFC$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], from_: int) -> int: ...
    def indexWhere$mcFD$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], from_: int) -> int: ...
    def indexWhere$mcFF$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], from_: int) -> int: ...
    def indexWhere$mcFI$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], from_: int) -> int: ...
    def indexWhere$mcFJ$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], from_: int) -> int: ...
    def indexWhere$mcFS$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], from_: int) -> int: ...
    def indexWhere$mcFV$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any], from_: int) -> int: ...
    def indexWhere$mcFZ$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], from_: int) -> int: ...
    def indexWhere$mcI$sp(self, p: scala.Function1[typing.Any, typing.Any], from_: int) -> int: ...
    def indexWhere$mcIB$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], from_: int) -> int: ...
    def indexWhere$mcIC$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], from_: int) -> int: ...
    def indexWhere$mcID$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], from_: int) -> int: ...
    def indexWhere$mcIF$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], from_: int) -> int: ...
    def indexWhere$mcII$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], from_: int) -> int: ...
    def indexWhere$mcIJ$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], from_: int) -> int: ...
    def indexWhere$mcIS$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], from_: int) -> int: ...
    def indexWhere$mcIV$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any], from_: int) -> int: ...
    def indexWhere$mcIZ$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], from_: int) -> int: ...
    def indexWhere$mcJ$sp(self, p: scala.Function1[typing.Any, typing.Any], from_: int) -> int: ...
    def indexWhere$mcJB$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], from_: int) -> int: ...
    def indexWhere$mcJC$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], from_: int) -> int: ...
    def indexWhere$mcJD$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], from_: int) -> int: ...
    def indexWhere$mcJF$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], from_: int) -> int: ...
    def indexWhere$mcJI$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], from_: int) -> int: ...
    def indexWhere$mcJJ$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], from_: int) -> int: ...
    def indexWhere$mcJS$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], from_: int) -> int: ...
    def indexWhere$mcJV$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any], from_: int) -> int: ...
    def indexWhere$mcJZ$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], from_: int) -> int: ...
    def indexWhere$mcS$sp(self, p: scala.Function1[typing.Any, typing.Any], from_: int) -> int: ...
    def indexWhere$mcSB$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], from_: int) -> int: ...
    def indexWhere$mcSC$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], from_: int) -> int: ...
    def indexWhere$mcSD$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], from_: int) -> int: ...
    def indexWhere$mcSF$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], from_: int) -> int: ...
    def indexWhere$mcSI$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], from_: int) -> int: ...
    def indexWhere$mcSJ$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], from_: int) -> int: ...
    def indexWhere$mcSS$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], from_: int) -> int: ...
    def indexWhere$mcSV$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any], from_: int) -> int: ...
    def indexWhere$mcSZ$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], from_: int) -> int: ...
    def indexWhere$mcV$sp(self, p: scala.Function1[scala.runtime.BoxedUnit, typing.Any], from_: int) -> int: ...
    def indexWhere$mcVB$sp(self, p: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any], from_: int) -> int: ...
    def indexWhere$mcVC$sp(self, p: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any], from_: int) -> int: ...
    def indexWhere$mcVD$sp(self, p: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any], from_: int) -> int: ...
    def indexWhere$mcVF$sp(self, p: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any], from_: int) -> int: ...
    def indexWhere$mcVI$sp(self, p: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any], from_: int) -> int: ...
    def indexWhere$mcVJ$sp(self, p: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any], from_: int) -> int: ...
    def indexWhere$mcVS$sp(self, p: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any], from_: int) -> int: ...
    def indexWhere$mcVV$sp(self, p: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, scala.runtime.BoxedUnit], typing.Any], from_: int) -> int: ...
    def indexWhere$mcVZ$sp(self, p: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any], from_: int) -> int: ...
    def indexWhere$mcZ$sp(self, p: scala.Function1[typing.Any, typing.Any], from_: int) -> int: ...
    def indexWhere$mcZB$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], from_: int) -> int: ...
    def indexWhere$mcZC$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], from_: int) -> int: ...
    def indexWhere$mcZD$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], from_: int) -> int: ...
    def indexWhere$mcZF$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], from_: int) -> int: ...
    def indexWhere$mcZI$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], from_: int) -> int: ...
    def indexWhere$mcZJ$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], from_: int) -> int: ...
    def indexWhere$mcZS$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], from_: int) -> int: ...
    def indexWhere$mcZV$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any], from_: int) -> int: ...
    def indexWhere$mcZZ$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], from_: int) -> int: ...
    def indices(self) -> Coll[typing.Any]: ...
    def intersect(self, that: Coll[scala.Tuple2[_PairOfCols__L, _PairOfCols__R]]) -> Coll[scala.Tuple2[_PairOfCols__L, _PairOfCols__R]]: ...
    def intersect$mcB$sp(self, that: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def intersect$mcC$sp(self, that: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def intersect$mcD$sp(self, that: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def intersect$mcF$sp(self, that: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def intersect$mcI$sp(self, that: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def intersect$mcJ$sp(self, that: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def intersect$mcS$sp(self, that: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def intersect$mcV$sp(self, that: Coll[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def intersect$mcZ$sp(self, that: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def isDefinedAt(self, idx: int) -> bool: ...
    def isEmpty(self) -> bool: ...
    def isReplArray(self, len: int, value: scala.Tuple2[_PairOfCols__L, _PairOfCols__R]) -> bool: ...
    def isReplArray$mcB$sp(self, len: int, value: int) -> bool: ...
    def isReplArray$mcBB$sp(self, len: int, value: scala.Tuple2[typing.Any, typing.Any]) -> bool: ...
    def isReplArray$mcBC$sp(self, len: int, value: scala.Tuple2[typing.Any, typing.Any]) -> bool: ...
    def isReplArray$mcBD$sp(self, len: int, value: scala.Tuple2[typing.Any, typing.Any]) -> bool: ...
    def isReplArray$mcBF$sp(self, len: int, value: scala.Tuple2[typing.Any, typing.Any]) -> bool: ...
    def isReplArray$mcBI$sp(self, len: int, value: scala.Tuple2[typing.Any, typing.Any]) -> bool: ...
    def isReplArray$mcBJ$sp(self, len: int, value: scala.Tuple2[typing.Any, typing.Any]) -> bool: ...
    def isReplArray$mcBS$sp(self, len: int, value: scala.Tuple2[typing.Any, typing.Any]) -> bool: ...
    def isReplArray$mcBV$sp(self, len: int, value: scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]) -> bool: ...
    def isReplArray$mcBZ$sp(self, len: int, value: scala.Tuple2[typing.Any, typing.Any]) -> bool: ...
    def isReplArray$mcC$sp(self, len: int, value: str) -> bool: ...
    def isReplArray$mcCB$sp(self, len: int, value: scala.Tuple2[typing.Any, typing.Any]) -> bool: ...
    def isReplArray$mcCC$sp(self, len: int, value: scala.Tuple2[typing.Any, typing.Any]) -> bool: ...
    def isReplArray$mcCD$sp(self, len: int, value: scala.Tuple2[typing.Any, typing.Any]) -> bool: ...
    def isReplArray$mcCF$sp(self, len: int, value: scala.Tuple2[typing.Any, typing.Any]) -> bool: ...
    def isReplArray$mcCI$sp(self, len: int, value: scala.Tuple2[typing.Any, typing.Any]) -> bool: ...
    def isReplArray$mcCJ$sp(self, len: int, value: scala.Tuple2[typing.Any, typing.Any]) -> bool: ...
    def isReplArray$mcCS$sp(self, len: int, value: scala.Tuple2[typing.Any, typing.Any]) -> bool: ...
    def isReplArray$mcCV$sp(self, len: int, value: scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]) -> bool: ...
    def isReplArray$mcCZ$sp(self, len: int, value: scala.Tuple2[typing.Any, typing.Any]) -> bool: ...
    def isReplArray$mcD$sp(self, len: int, value: float) -> bool: ...
    def isReplArray$mcDB$sp(self, len: int, value: scala.Tuple2[typing.Any, typing.Any]) -> bool: ...
    def isReplArray$mcDC$sp(self, len: int, value: scala.Tuple2[typing.Any, typing.Any]) -> bool: ...
    def isReplArray$mcDD$sp(self, len: int, value: scala.Tuple2[typing.Any, typing.Any]) -> bool: ...
    def isReplArray$mcDF$sp(self, len: int, value: scala.Tuple2[typing.Any, typing.Any]) -> bool: ...
    def isReplArray$mcDI$sp(self, len: int, value: scala.Tuple2[typing.Any, typing.Any]) -> bool: ...
    def isReplArray$mcDJ$sp(self, len: int, value: scala.Tuple2[typing.Any, typing.Any]) -> bool: ...
    def isReplArray$mcDS$sp(self, len: int, value: scala.Tuple2[typing.Any, typing.Any]) -> bool: ...
    def isReplArray$mcDV$sp(self, len: int, value: scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]) -> bool: ...
    def isReplArray$mcDZ$sp(self, len: int, value: scala.Tuple2[typing.Any, typing.Any]) -> bool: ...
    def isReplArray$mcF$sp(self, len: int, value: float) -> bool: ...
    def isReplArray$mcFB$sp(self, len: int, value: scala.Tuple2[typing.Any, typing.Any]) -> bool: ...
    def isReplArray$mcFC$sp(self, len: int, value: scala.Tuple2[typing.Any, typing.Any]) -> bool: ...
    def isReplArray$mcFD$sp(self, len: int, value: scala.Tuple2[typing.Any, typing.Any]) -> bool: ...
    def isReplArray$mcFF$sp(self, len: int, value: scala.Tuple2[typing.Any, typing.Any]) -> bool: ...
    def isReplArray$mcFI$sp(self, len: int, value: scala.Tuple2[typing.Any, typing.Any]) -> bool: ...
    def isReplArray$mcFJ$sp(self, len: int, value: scala.Tuple2[typing.Any, typing.Any]) -> bool: ...
    def isReplArray$mcFS$sp(self, len: int, value: scala.Tuple2[typing.Any, typing.Any]) -> bool: ...
    def isReplArray$mcFV$sp(self, len: int, value: scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]) -> bool: ...
    def isReplArray$mcFZ$sp(self, len: int, value: scala.Tuple2[typing.Any, typing.Any]) -> bool: ...
    def isReplArray$mcI$sp(self, len: int, value: int) -> bool: ...
    def isReplArray$mcIB$sp(self, len: int, value: scala.Tuple2[typing.Any, typing.Any]) -> bool: ...
    def isReplArray$mcIC$sp(self, len: int, value: scala.Tuple2[typing.Any, typing.Any]) -> bool: ...
    def isReplArray$mcID$sp(self, len: int, value: scala.Tuple2[typing.Any, typing.Any]) -> bool: ...
    def isReplArray$mcIF$sp(self, len: int, value: scala.Tuple2[typing.Any, typing.Any]) -> bool: ...
    def isReplArray$mcII$sp(self, len: int, value: scala.Tuple2[typing.Any, typing.Any]) -> bool: ...
    def isReplArray$mcIJ$sp(self, len: int, value: scala.Tuple2[typing.Any, typing.Any]) -> bool: ...
    def isReplArray$mcIS$sp(self, len: int, value: scala.Tuple2[typing.Any, typing.Any]) -> bool: ...
    def isReplArray$mcIV$sp(self, len: int, value: scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]) -> bool: ...
    def isReplArray$mcIZ$sp(self, len: int, value: scala.Tuple2[typing.Any, typing.Any]) -> bool: ...
    def isReplArray$mcJ$sp(self, len: int, value: int) -> bool: ...
    def isReplArray$mcJB$sp(self, len: int, value: scala.Tuple2[typing.Any, typing.Any]) -> bool: ...
    def isReplArray$mcJC$sp(self, len: int, value: scala.Tuple2[typing.Any, typing.Any]) -> bool: ...
    def isReplArray$mcJD$sp(self, len: int, value: scala.Tuple2[typing.Any, typing.Any]) -> bool: ...
    def isReplArray$mcJF$sp(self, len: int, value: scala.Tuple2[typing.Any, typing.Any]) -> bool: ...
    def isReplArray$mcJI$sp(self, len: int, value: scala.Tuple2[typing.Any, typing.Any]) -> bool: ...
    def isReplArray$mcJJ$sp(self, len: int, value: scala.Tuple2[typing.Any, typing.Any]) -> bool: ...
    def isReplArray$mcJS$sp(self, len: int, value: scala.Tuple2[typing.Any, typing.Any]) -> bool: ...
    def isReplArray$mcJV$sp(self, len: int, value: scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]) -> bool: ...
    def isReplArray$mcJZ$sp(self, len: int, value: scala.Tuple2[typing.Any, typing.Any]) -> bool: ...
    def isReplArray$mcS$sp(self, len: int, value: int) -> bool: ...
    def isReplArray$mcSB$sp(self, len: int, value: scala.Tuple2[typing.Any, typing.Any]) -> bool: ...
    def isReplArray$mcSC$sp(self, len: int, value: scala.Tuple2[typing.Any, typing.Any]) -> bool: ...
    def isReplArray$mcSD$sp(self, len: int, value: scala.Tuple2[typing.Any, typing.Any]) -> bool: ...
    def isReplArray$mcSF$sp(self, len: int, value: scala.Tuple2[typing.Any, typing.Any]) -> bool: ...
    def isReplArray$mcSI$sp(self, len: int, value: scala.Tuple2[typing.Any, typing.Any]) -> bool: ...
    def isReplArray$mcSJ$sp(self, len: int, value: scala.Tuple2[typing.Any, typing.Any]) -> bool: ...
    def isReplArray$mcSS$sp(self, len: int, value: scala.Tuple2[typing.Any, typing.Any]) -> bool: ...
    def isReplArray$mcSV$sp(self, len: int, value: scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]) -> bool: ...
    def isReplArray$mcSZ$sp(self, len: int, value: scala.Tuple2[typing.Any, typing.Any]) -> bool: ...
    def isReplArray$mcV$sp(self, len: int, value: scala.runtime.BoxedUnit) -> bool: ...
    def isReplArray$mcVB$sp(self, len: int, value: scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]) -> bool: ...
    def isReplArray$mcVC$sp(self, len: int, value: scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]) -> bool: ...
    def isReplArray$mcVD$sp(self, len: int, value: scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]) -> bool: ...
    def isReplArray$mcVF$sp(self, len: int, value: scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]) -> bool: ...
    def isReplArray$mcVI$sp(self, len: int, value: scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]) -> bool: ...
    def isReplArray$mcVJ$sp(self, len: int, value: scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]) -> bool: ...
    def isReplArray$mcVS$sp(self, len: int, value: scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]) -> bool: ...
    def isReplArray$mcVV$sp(self, len: int, value: scala.Tuple2[scala.runtime.BoxedUnit, scala.runtime.BoxedUnit]) -> bool: ...
    def isReplArray$mcVZ$sp(self, len: int, value: scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]) -> bool: ...
    def isReplArray$mcZ$sp(self, len: int, value: bool) -> bool: ...
    def isReplArray$mcZB$sp(self, len: int, value: scala.Tuple2[typing.Any, typing.Any]) -> bool: ...
    def isReplArray$mcZC$sp(self, len: int, value: scala.Tuple2[typing.Any, typing.Any]) -> bool: ...
    def isReplArray$mcZD$sp(self, len: int, value: scala.Tuple2[typing.Any, typing.Any]) -> bool: ...
    def isReplArray$mcZF$sp(self, len: int, value: scala.Tuple2[typing.Any, typing.Any]) -> bool: ...
    def isReplArray$mcZI$sp(self, len: int, value: scala.Tuple2[typing.Any, typing.Any]) -> bool: ...
    def isReplArray$mcZJ$sp(self, len: int, value: scala.Tuple2[typing.Any, typing.Any]) -> bool: ...
    def isReplArray$mcZS$sp(self, len: int, value: scala.Tuple2[typing.Any, typing.Any]) -> bool: ...
    def isReplArray$mcZV$sp(self, len: int, value: scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]) -> bool: ...
    def isReplArray$mcZZ$sp(self, len: int, value: scala.Tuple2[typing.Any, typing.Any]) -> bool: ...
    def isValidIndex(self, i: int) -> bool: ...
    def lastIndexWhere(self, p: scala.Function1[scala.Tuple2[_PairOfCols__L, _PairOfCols__R], typing.Any], end: int) -> int: ...
    def lastIndexWhere$mcB$sp(self, p: scala.Function1[typing.Any, typing.Any], end: int) -> int: ...
    def lastIndexWhere$mcBB$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], end: int) -> int: ...
    def lastIndexWhere$mcBC$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], end: int) -> int: ...
    def lastIndexWhere$mcBD$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], end: int) -> int: ...
    def lastIndexWhere$mcBF$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], end: int) -> int: ...
    def lastIndexWhere$mcBI$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], end: int) -> int: ...
    def lastIndexWhere$mcBJ$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], end: int) -> int: ...
    def lastIndexWhere$mcBS$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], end: int) -> int: ...
    def lastIndexWhere$mcBV$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any], end: int) -> int: ...
    def lastIndexWhere$mcBZ$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], end: int) -> int: ...
    def lastIndexWhere$mcC$sp(self, p: scala.Function1[typing.Any, typing.Any], end: int) -> int: ...
    def lastIndexWhere$mcCB$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], end: int) -> int: ...
    def lastIndexWhere$mcCC$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], end: int) -> int: ...
    def lastIndexWhere$mcCD$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], end: int) -> int: ...
    def lastIndexWhere$mcCF$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], end: int) -> int: ...
    def lastIndexWhere$mcCI$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], end: int) -> int: ...
    def lastIndexWhere$mcCJ$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], end: int) -> int: ...
    def lastIndexWhere$mcCS$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], end: int) -> int: ...
    def lastIndexWhere$mcCV$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any], end: int) -> int: ...
    def lastIndexWhere$mcCZ$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], end: int) -> int: ...
    def lastIndexWhere$mcD$sp(self, p: scala.Function1[typing.Any, typing.Any], end: int) -> int: ...
    def lastIndexWhere$mcDB$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], end: int) -> int: ...
    def lastIndexWhere$mcDC$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], end: int) -> int: ...
    def lastIndexWhere$mcDD$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], end: int) -> int: ...
    def lastIndexWhere$mcDF$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], end: int) -> int: ...
    def lastIndexWhere$mcDI$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], end: int) -> int: ...
    def lastIndexWhere$mcDJ$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], end: int) -> int: ...
    def lastIndexWhere$mcDS$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], end: int) -> int: ...
    def lastIndexWhere$mcDV$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any], end: int) -> int: ...
    def lastIndexWhere$mcDZ$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], end: int) -> int: ...
    def lastIndexWhere$mcF$sp(self, p: scala.Function1[typing.Any, typing.Any], end: int) -> int: ...
    def lastIndexWhere$mcFB$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], end: int) -> int: ...
    def lastIndexWhere$mcFC$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], end: int) -> int: ...
    def lastIndexWhere$mcFD$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], end: int) -> int: ...
    def lastIndexWhere$mcFF$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], end: int) -> int: ...
    def lastIndexWhere$mcFI$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], end: int) -> int: ...
    def lastIndexWhere$mcFJ$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], end: int) -> int: ...
    def lastIndexWhere$mcFS$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], end: int) -> int: ...
    def lastIndexWhere$mcFV$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any], end: int) -> int: ...
    def lastIndexWhere$mcFZ$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], end: int) -> int: ...
    def lastIndexWhere$mcI$sp(self, p: scala.Function1[typing.Any, typing.Any], end: int) -> int: ...
    def lastIndexWhere$mcIB$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], end: int) -> int: ...
    def lastIndexWhere$mcIC$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], end: int) -> int: ...
    def lastIndexWhere$mcID$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], end: int) -> int: ...
    def lastIndexWhere$mcIF$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], end: int) -> int: ...
    def lastIndexWhere$mcII$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], end: int) -> int: ...
    def lastIndexWhere$mcIJ$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], end: int) -> int: ...
    def lastIndexWhere$mcIS$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], end: int) -> int: ...
    def lastIndexWhere$mcIV$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any], end: int) -> int: ...
    def lastIndexWhere$mcIZ$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], end: int) -> int: ...
    def lastIndexWhere$mcJ$sp(self, p: scala.Function1[typing.Any, typing.Any], end: int) -> int: ...
    def lastIndexWhere$mcJB$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], end: int) -> int: ...
    def lastIndexWhere$mcJC$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], end: int) -> int: ...
    def lastIndexWhere$mcJD$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], end: int) -> int: ...
    def lastIndexWhere$mcJF$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], end: int) -> int: ...
    def lastIndexWhere$mcJI$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], end: int) -> int: ...
    def lastIndexWhere$mcJJ$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], end: int) -> int: ...
    def lastIndexWhere$mcJS$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], end: int) -> int: ...
    def lastIndexWhere$mcJV$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any], end: int) -> int: ...
    def lastIndexWhere$mcJZ$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], end: int) -> int: ...
    def lastIndexWhere$mcS$sp(self, p: scala.Function1[typing.Any, typing.Any], end: int) -> int: ...
    def lastIndexWhere$mcSB$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], end: int) -> int: ...
    def lastIndexWhere$mcSC$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], end: int) -> int: ...
    def lastIndexWhere$mcSD$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], end: int) -> int: ...
    def lastIndexWhere$mcSF$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], end: int) -> int: ...
    def lastIndexWhere$mcSI$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], end: int) -> int: ...
    def lastIndexWhere$mcSJ$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], end: int) -> int: ...
    def lastIndexWhere$mcSS$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], end: int) -> int: ...
    def lastIndexWhere$mcSV$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any], end: int) -> int: ...
    def lastIndexWhere$mcSZ$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], end: int) -> int: ...
    def lastIndexWhere$mcV$sp(self, p: scala.Function1[scala.runtime.BoxedUnit, typing.Any], end: int) -> int: ...
    def lastIndexWhere$mcVB$sp(self, p: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any], end: int) -> int: ...
    def lastIndexWhere$mcVC$sp(self, p: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any], end: int) -> int: ...
    def lastIndexWhere$mcVD$sp(self, p: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any], end: int) -> int: ...
    def lastIndexWhere$mcVF$sp(self, p: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any], end: int) -> int: ...
    def lastIndexWhere$mcVI$sp(self, p: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any], end: int) -> int: ...
    def lastIndexWhere$mcVJ$sp(self, p: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any], end: int) -> int: ...
    def lastIndexWhere$mcVS$sp(self, p: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any], end: int) -> int: ...
    def lastIndexWhere$mcVV$sp(self, p: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, scala.runtime.BoxedUnit], typing.Any], end: int) -> int: ...
    def lastIndexWhere$mcVZ$sp(self, p: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any], end: int) -> int: ...
    def lastIndexWhere$mcZ$sp(self, p: scala.Function1[typing.Any, typing.Any], end: int) -> int: ...
    def lastIndexWhere$mcZB$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], end: int) -> int: ...
    def lastIndexWhere$mcZC$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], end: int) -> int: ...
    def lastIndexWhere$mcZD$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], end: int) -> int: ...
    def lastIndexWhere$mcZF$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], end: int) -> int: ...
    def lastIndexWhere$mcZI$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], end: int) -> int: ...
    def lastIndexWhere$mcZJ$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], end: int) -> int: ...
    def lastIndexWhere$mcZS$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], end: int) -> int: ...
    def lastIndexWhere$mcZV$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any], end: int) -> int: ...
    def lastIndexWhere$mcZZ$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], end: int) -> int: ...
    def length(self) -> int: ...
    def ls(self) -> Coll[_PairOfCols__L]: ...
    def ls$mcB$sp(self) -> Coll[typing.Any]: ...
    def ls$mcC$sp(self) -> Coll[typing.Any]: ...
    def ls$mcD$sp(self) -> Coll[typing.Any]: ...
    def ls$mcF$sp(self) -> Coll[typing.Any]: ...
    def ls$mcI$sp(self) -> Coll[typing.Any]: ...
    def ls$mcJ$sp(self) -> Coll[typing.Any]: ...
    def ls$mcS$sp(self) -> Coll[typing.Any]: ...
    def ls$mcV$sp(self) -> Coll[scala.runtime.BoxedUnit]: ...
    def ls$mcZ$sp(self) -> Coll[typing.Any]: ...
    _map__V = typing.TypeVar('_map__V')  # <V>
    def map(self, f: scala.Function1[scala.Tuple2[_PairOfCols__L, _PairOfCols__R], _map__V], evidence$14: scalan.RType[_map__V]) -> Coll[_map__V]: ...
    def map$mBc$sp(self, f: scala.Function1[scala.Tuple2[_PairOfCols__L, _PairOfCols__R], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mBcB$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mBcBB$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mBcBC$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mBcBD$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mBcBF$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mBcBI$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mBcBJ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mBcBS$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mBcBV$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mBcBZ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mBcC$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mBcCB$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mBcCC$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mBcCD$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mBcCF$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mBcCI$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mBcCJ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mBcCS$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mBcCV$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mBcCZ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mBcD$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mBcDB$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mBcDC$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mBcDD$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mBcDF$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mBcDI$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mBcDJ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mBcDS$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mBcDV$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mBcDZ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mBcF$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mBcFB$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mBcFC$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mBcFD$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mBcFF$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mBcFI$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mBcFJ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mBcFS$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mBcFV$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mBcFZ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mBcI$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mBcIB$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mBcIC$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mBcID$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mBcIF$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mBcII$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mBcIJ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mBcIS$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mBcIV$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mBcIZ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mBcJ$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mBcJB$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mBcJC$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mBcJD$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mBcJF$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mBcJI$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mBcJJ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mBcJS$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mBcJV$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mBcJZ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mBcS$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mBcSB$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mBcSC$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mBcSD$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mBcSF$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mBcSI$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mBcSJ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mBcSS$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mBcSV$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mBcSZ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mBcV$sp(self, f: scala.Function1[scala.runtime.BoxedUnit, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mBcVB$sp(self, f: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mBcVC$sp(self, f: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mBcVD$sp(self, f: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mBcVF$sp(self, f: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mBcVI$sp(self, f: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mBcVJ$sp(self, f: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mBcVS$sp(self, f: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mBcVV$sp(self, f: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, scala.runtime.BoxedUnit], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mBcVZ$sp(self, f: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mBcZ$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mBcZB$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mBcZC$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mBcZD$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mBcZF$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mBcZI$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mBcZJ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mBcZS$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mBcZV$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mBcZZ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mCc$sp(self, f: scala.Function1[scala.Tuple2[_PairOfCols__L, _PairOfCols__R], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mCcB$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mCcBB$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mCcBC$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mCcBD$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mCcBF$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mCcBI$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mCcBJ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mCcBS$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mCcBV$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mCcBZ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mCcC$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mCcCB$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mCcCC$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mCcCD$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mCcCF$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mCcCI$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mCcCJ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mCcCS$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mCcCV$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mCcCZ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mCcD$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mCcDB$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mCcDC$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mCcDD$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mCcDF$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mCcDI$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mCcDJ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mCcDS$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mCcDV$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mCcDZ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mCcF$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mCcFB$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mCcFC$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mCcFD$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mCcFF$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mCcFI$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mCcFJ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mCcFS$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mCcFV$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mCcFZ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mCcI$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mCcIB$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mCcIC$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mCcID$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mCcIF$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mCcII$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mCcIJ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mCcIS$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mCcIV$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mCcIZ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mCcJ$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mCcJB$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mCcJC$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mCcJD$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mCcJF$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mCcJI$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mCcJJ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mCcJS$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mCcJV$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mCcJZ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mCcS$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mCcSB$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mCcSC$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mCcSD$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mCcSF$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mCcSI$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mCcSJ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mCcSS$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mCcSV$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mCcSZ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mCcV$sp(self, f: scala.Function1[scala.runtime.BoxedUnit, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mCcVB$sp(self, f: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mCcVC$sp(self, f: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mCcVD$sp(self, f: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mCcVF$sp(self, f: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mCcVI$sp(self, f: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mCcVJ$sp(self, f: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mCcVS$sp(self, f: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mCcVV$sp(self, f: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, scala.runtime.BoxedUnit], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mCcVZ$sp(self, f: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mCcZ$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mCcZB$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mCcZC$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mCcZD$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mCcZF$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mCcZI$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mCcZJ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mCcZS$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mCcZV$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mCcZZ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mDc$sp(self, f: scala.Function1[scala.Tuple2[_PairOfCols__L, _PairOfCols__R], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mDcB$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mDcBB$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mDcBC$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mDcBD$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mDcBF$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mDcBI$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mDcBJ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mDcBS$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mDcBV$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mDcBZ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mDcC$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mDcCB$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mDcCC$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mDcCD$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mDcCF$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mDcCI$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mDcCJ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mDcCS$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mDcCV$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mDcCZ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mDcD$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mDcDB$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mDcDC$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mDcDD$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mDcDF$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mDcDI$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mDcDJ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mDcDS$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mDcDV$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mDcDZ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mDcF$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mDcFB$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mDcFC$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mDcFD$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mDcFF$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mDcFI$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mDcFJ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mDcFS$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mDcFV$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mDcFZ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mDcI$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mDcIB$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mDcIC$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mDcID$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mDcIF$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mDcII$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mDcIJ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mDcIS$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mDcIV$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mDcIZ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mDcJ$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mDcJB$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mDcJC$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mDcJD$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mDcJF$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mDcJI$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mDcJJ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mDcJS$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mDcJV$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mDcJZ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mDcS$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mDcSB$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mDcSC$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mDcSD$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mDcSF$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mDcSI$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mDcSJ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mDcSS$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mDcSV$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mDcSZ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mDcV$sp(self, f: scala.Function1[scala.runtime.BoxedUnit, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mDcVB$sp(self, f: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mDcVC$sp(self, f: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mDcVD$sp(self, f: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mDcVF$sp(self, f: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mDcVI$sp(self, f: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mDcVJ$sp(self, f: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mDcVS$sp(self, f: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mDcVV$sp(self, f: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, scala.runtime.BoxedUnit], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mDcVZ$sp(self, f: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mDcZ$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mDcZB$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mDcZC$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mDcZD$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mDcZF$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mDcZI$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mDcZJ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mDcZS$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mDcZV$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mDcZZ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mFc$sp(self, f: scala.Function1[scala.Tuple2[_PairOfCols__L, _PairOfCols__R], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mFcB$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mFcBB$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mFcBC$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mFcBD$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mFcBF$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mFcBI$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mFcBJ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mFcBS$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mFcBV$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mFcBZ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mFcC$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mFcCB$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mFcCC$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mFcCD$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mFcCF$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mFcCI$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mFcCJ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mFcCS$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mFcCV$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mFcCZ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mFcD$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mFcDB$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mFcDC$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mFcDD$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mFcDF$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mFcDI$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mFcDJ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mFcDS$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mFcDV$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mFcDZ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mFcF$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mFcFB$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mFcFC$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mFcFD$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mFcFF$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mFcFI$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mFcFJ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mFcFS$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mFcFV$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mFcFZ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mFcI$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mFcIB$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mFcIC$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mFcID$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mFcIF$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mFcII$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mFcIJ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mFcIS$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mFcIV$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mFcIZ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mFcJ$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mFcJB$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mFcJC$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mFcJD$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mFcJF$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mFcJI$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mFcJJ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mFcJS$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mFcJV$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mFcJZ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mFcS$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mFcSB$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mFcSC$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mFcSD$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mFcSF$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mFcSI$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mFcSJ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mFcSS$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mFcSV$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mFcSZ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mFcV$sp(self, f: scala.Function1[scala.runtime.BoxedUnit, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mFcVB$sp(self, f: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mFcVC$sp(self, f: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mFcVD$sp(self, f: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mFcVF$sp(self, f: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mFcVI$sp(self, f: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mFcVJ$sp(self, f: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mFcVS$sp(self, f: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mFcVV$sp(self, f: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, scala.runtime.BoxedUnit], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mFcVZ$sp(self, f: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mFcZ$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mFcZB$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mFcZC$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mFcZD$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mFcZF$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mFcZI$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mFcZJ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mFcZS$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mFcZV$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mFcZZ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mIc$sp(self, f: scala.Function1[scala.Tuple2[_PairOfCols__L, _PairOfCols__R], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mIcB$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mIcBB$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mIcBC$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mIcBD$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mIcBF$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mIcBI$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mIcBJ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mIcBS$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mIcBV$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mIcBZ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mIcC$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mIcCB$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mIcCC$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mIcCD$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mIcCF$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mIcCI$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mIcCJ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mIcCS$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mIcCV$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mIcCZ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mIcD$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mIcDB$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mIcDC$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mIcDD$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mIcDF$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mIcDI$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mIcDJ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mIcDS$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mIcDV$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mIcDZ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mIcF$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mIcFB$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mIcFC$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mIcFD$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mIcFF$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mIcFI$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mIcFJ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mIcFS$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mIcFV$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mIcFZ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mIcI$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mIcIB$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mIcIC$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mIcID$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mIcIF$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mIcII$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mIcIJ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mIcIS$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mIcIV$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mIcIZ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mIcJ$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mIcJB$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mIcJC$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mIcJD$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mIcJF$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mIcJI$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mIcJJ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mIcJS$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mIcJV$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mIcJZ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mIcS$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mIcSB$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mIcSC$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mIcSD$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mIcSF$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mIcSI$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mIcSJ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mIcSS$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mIcSV$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mIcSZ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mIcV$sp(self, f: scala.Function1[scala.runtime.BoxedUnit, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mIcVB$sp(self, f: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mIcVC$sp(self, f: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mIcVD$sp(self, f: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mIcVF$sp(self, f: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mIcVI$sp(self, f: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mIcVJ$sp(self, f: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mIcVS$sp(self, f: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mIcVV$sp(self, f: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, scala.runtime.BoxedUnit], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mIcVZ$sp(self, f: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mIcZ$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mIcZB$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mIcZC$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mIcZD$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mIcZF$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mIcZI$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mIcZJ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mIcZS$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mIcZV$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mIcZZ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mJc$sp(self, f: scala.Function1[scala.Tuple2[_PairOfCols__L, _PairOfCols__R], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mJcB$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mJcBB$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mJcBC$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mJcBD$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mJcBF$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mJcBI$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mJcBJ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mJcBS$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mJcBV$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mJcBZ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mJcC$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mJcCB$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mJcCC$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mJcCD$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mJcCF$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mJcCI$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mJcCJ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mJcCS$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mJcCV$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mJcCZ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mJcD$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mJcDB$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mJcDC$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mJcDD$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mJcDF$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mJcDI$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mJcDJ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mJcDS$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mJcDV$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mJcDZ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mJcF$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mJcFB$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mJcFC$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mJcFD$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mJcFF$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mJcFI$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mJcFJ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mJcFS$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mJcFV$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mJcFZ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mJcI$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mJcIB$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mJcIC$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mJcID$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mJcIF$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mJcII$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mJcIJ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mJcIS$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mJcIV$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mJcIZ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mJcJ$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mJcJB$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mJcJC$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mJcJD$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mJcJF$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mJcJI$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mJcJJ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mJcJS$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mJcJV$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mJcJZ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mJcS$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mJcSB$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mJcSC$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mJcSD$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mJcSF$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mJcSI$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mJcSJ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mJcSS$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mJcSV$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mJcSZ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mJcV$sp(self, f: scala.Function1[scala.runtime.BoxedUnit, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mJcVB$sp(self, f: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mJcVC$sp(self, f: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mJcVD$sp(self, f: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mJcVF$sp(self, f: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mJcVI$sp(self, f: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mJcVJ$sp(self, f: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mJcVS$sp(self, f: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mJcVV$sp(self, f: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, scala.runtime.BoxedUnit], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mJcVZ$sp(self, f: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mJcZ$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mJcZB$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mJcZC$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mJcZD$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mJcZF$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mJcZI$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mJcZJ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mJcZS$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mJcZV$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mJcZZ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mSc$sp(self, f: scala.Function1[scala.Tuple2[_PairOfCols__L, _PairOfCols__R], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mScB$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mScBB$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mScBC$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mScBD$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mScBF$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mScBI$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mScBJ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mScBS$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mScBV$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mScBZ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mScC$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mScCB$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mScCC$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mScCD$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mScCF$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mScCI$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mScCJ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mScCS$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mScCV$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mScCZ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mScD$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mScDB$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mScDC$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mScDD$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mScDF$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mScDI$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mScDJ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mScDS$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mScDV$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mScDZ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mScF$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mScFB$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mScFC$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mScFD$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mScFF$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mScFI$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mScFJ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mScFS$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mScFV$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mScFZ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mScI$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mScIB$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mScIC$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mScID$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mScIF$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mScII$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mScIJ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mScIS$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mScIV$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mScIZ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mScJ$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mScJB$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mScJC$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mScJD$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mScJF$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mScJI$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mScJJ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mScJS$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mScJV$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mScJZ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mScS$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mScSB$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mScSC$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mScSD$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mScSF$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mScSI$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mScSJ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mScSS$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mScSV$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mScSZ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mScV$sp(self, f: scala.Function1[scala.runtime.BoxedUnit, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mScVB$sp(self, f: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mScVC$sp(self, f: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mScVD$sp(self, f: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mScVF$sp(self, f: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mScVI$sp(self, f: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mScVJ$sp(self, f: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mScVS$sp(self, f: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mScVV$sp(self, f: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, scala.runtime.BoxedUnit], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mScVZ$sp(self, f: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mScZ$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mScZB$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mScZC$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mScZD$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mScZF$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mScZI$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mScZJ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mScZS$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mScZV$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mScZZ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mVc$sp(self, f: scala.Function1[scala.Tuple2[_PairOfCols__L, _PairOfCols__R], scala.runtime.BoxedUnit], evidence$14: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def map$mVcB$sp(self, f: scala.Function1[typing.Any, scala.runtime.BoxedUnit], evidence$1: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def map$mVcBB$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], scala.runtime.BoxedUnit], evidence$14: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def map$mVcBC$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], scala.runtime.BoxedUnit], evidence$14: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def map$mVcBD$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], scala.runtime.BoxedUnit], evidence$14: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def map$mVcBF$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], scala.runtime.BoxedUnit], evidence$14: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def map$mVcBI$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], scala.runtime.BoxedUnit], evidence$14: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def map$mVcBJ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], scala.runtime.BoxedUnit], evidence$14: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def map$mVcBS$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], scala.runtime.BoxedUnit], evidence$14: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def map$mVcBV$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], scala.runtime.BoxedUnit], evidence$14: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def map$mVcBZ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], scala.runtime.BoxedUnit], evidence$14: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def map$mVcC$sp(self, f: scala.Function1[typing.Any, scala.runtime.BoxedUnit], evidence$1: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def map$mVcCB$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], scala.runtime.BoxedUnit], evidence$14: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def map$mVcCC$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], scala.runtime.BoxedUnit], evidence$14: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def map$mVcCD$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], scala.runtime.BoxedUnit], evidence$14: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def map$mVcCF$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], scala.runtime.BoxedUnit], evidence$14: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def map$mVcCI$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], scala.runtime.BoxedUnit], evidence$14: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def map$mVcCJ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], scala.runtime.BoxedUnit], evidence$14: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def map$mVcCS$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], scala.runtime.BoxedUnit], evidence$14: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def map$mVcCV$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], scala.runtime.BoxedUnit], evidence$14: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def map$mVcCZ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], scala.runtime.BoxedUnit], evidence$14: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def map$mVcD$sp(self, f: scala.Function1[typing.Any, scala.runtime.BoxedUnit], evidence$1: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def map$mVcDB$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], scala.runtime.BoxedUnit], evidence$14: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def map$mVcDC$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], scala.runtime.BoxedUnit], evidence$14: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def map$mVcDD$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], scala.runtime.BoxedUnit], evidence$14: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def map$mVcDF$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], scala.runtime.BoxedUnit], evidence$14: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def map$mVcDI$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], scala.runtime.BoxedUnit], evidence$14: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def map$mVcDJ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], scala.runtime.BoxedUnit], evidence$14: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def map$mVcDS$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], scala.runtime.BoxedUnit], evidence$14: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def map$mVcDV$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], scala.runtime.BoxedUnit], evidence$14: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def map$mVcDZ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], scala.runtime.BoxedUnit], evidence$14: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def map$mVcF$sp(self, f: scala.Function1[typing.Any, scala.runtime.BoxedUnit], evidence$1: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def map$mVcFB$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], scala.runtime.BoxedUnit], evidence$14: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def map$mVcFC$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], scala.runtime.BoxedUnit], evidence$14: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def map$mVcFD$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], scala.runtime.BoxedUnit], evidence$14: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def map$mVcFF$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], scala.runtime.BoxedUnit], evidence$14: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def map$mVcFI$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], scala.runtime.BoxedUnit], evidence$14: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def map$mVcFJ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], scala.runtime.BoxedUnit], evidence$14: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def map$mVcFS$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], scala.runtime.BoxedUnit], evidence$14: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def map$mVcFV$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], scala.runtime.BoxedUnit], evidence$14: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def map$mVcFZ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], scala.runtime.BoxedUnit], evidence$14: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def map$mVcI$sp(self, f: scala.Function1[typing.Any, scala.runtime.BoxedUnit], evidence$1: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def map$mVcIB$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], scala.runtime.BoxedUnit], evidence$14: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def map$mVcIC$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], scala.runtime.BoxedUnit], evidence$14: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def map$mVcID$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], scala.runtime.BoxedUnit], evidence$14: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def map$mVcIF$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], scala.runtime.BoxedUnit], evidence$14: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def map$mVcII$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], scala.runtime.BoxedUnit], evidence$14: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def map$mVcIJ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], scala.runtime.BoxedUnit], evidence$14: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def map$mVcIS$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], scala.runtime.BoxedUnit], evidence$14: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def map$mVcIV$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], scala.runtime.BoxedUnit], evidence$14: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def map$mVcIZ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], scala.runtime.BoxedUnit], evidence$14: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def map$mVcJ$sp(self, f: scala.Function1[typing.Any, scala.runtime.BoxedUnit], evidence$1: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def map$mVcJB$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], scala.runtime.BoxedUnit], evidence$14: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def map$mVcJC$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], scala.runtime.BoxedUnit], evidence$14: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def map$mVcJD$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], scala.runtime.BoxedUnit], evidence$14: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def map$mVcJF$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], scala.runtime.BoxedUnit], evidence$14: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def map$mVcJI$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], scala.runtime.BoxedUnit], evidence$14: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def map$mVcJJ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], scala.runtime.BoxedUnit], evidence$14: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def map$mVcJS$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], scala.runtime.BoxedUnit], evidence$14: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def map$mVcJV$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], scala.runtime.BoxedUnit], evidence$14: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def map$mVcJZ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], scala.runtime.BoxedUnit], evidence$14: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def map$mVcS$sp(self, f: scala.Function1[typing.Any, scala.runtime.BoxedUnit], evidence$1: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def map$mVcSB$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], scala.runtime.BoxedUnit], evidence$14: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def map$mVcSC$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], scala.runtime.BoxedUnit], evidence$14: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def map$mVcSD$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], scala.runtime.BoxedUnit], evidence$14: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def map$mVcSF$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], scala.runtime.BoxedUnit], evidence$14: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def map$mVcSI$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], scala.runtime.BoxedUnit], evidence$14: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def map$mVcSJ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], scala.runtime.BoxedUnit], evidence$14: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def map$mVcSS$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], scala.runtime.BoxedUnit], evidence$14: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def map$mVcSV$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], scala.runtime.BoxedUnit], evidence$14: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def map$mVcSZ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], scala.runtime.BoxedUnit], evidence$14: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def map$mVcV$sp(self, f: scala.Function1[scala.runtime.BoxedUnit, scala.runtime.BoxedUnit], evidence$1: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def map$mVcVB$sp(self, f: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], scala.runtime.BoxedUnit], evidence$14: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def map$mVcVC$sp(self, f: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], scala.runtime.BoxedUnit], evidence$14: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def map$mVcVD$sp(self, f: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], scala.runtime.BoxedUnit], evidence$14: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def map$mVcVF$sp(self, f: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], scala.runtime.BoxedUnit], evidence$14: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def map$mVcVI$sp(self, f: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], scala.runtime.BoxedUnit], evidence$14: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def map$mVcVJ$sp(self, f: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], scala.runtime.BoxedUnit], evidence$14: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def map$mVcVS$sp(self, f: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], scala.runtime.BoxedUnit], evidence$14: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def map$mVcVV$sp(self, f: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, scala.runtime.BoxedUnit], scala.runtime.BoxedUnit], evidence$14: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def map$mVcVZ$sp(self, f: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], scala.runtime.BoxedUnit], evidence$14: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def map$mVcZ$sp(self, f: scala.Function1[typing.Any, scala.runtime.BoxedUnit], evidence$1: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def map$mVcZB$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], scala.runtime.BoxedUnit], evidence$14: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def map$mVcZC$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], scala.runtime.BoxedUnit], evidence$14: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def map$mVcZD$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], scala.runtime.BoxedUnit], evidence$14: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def map$mVcZF$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], scala.runtime.BoxedUnit], evidence$14: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def map$mVcZI$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], scala.runtime.BoxedUnit], evidence$14: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def map$mVcZJ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], scala.runtime.BoxedUnit], evidence$14: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def map$mVcZS$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], scala.runtime.BoxedUnit], evidence$14: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def map$mVcZV$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], scala.runtime.BoxedUnit], evidence$14: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def map$mVcZZ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], scala.runtime.BoxedUnit], evidence$14: scalan.RType[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def map$mZc$sp(self, f: scala.Function1[scala.Tuple2[_PairOfCols__L, _PairOfCols__R], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mZcB$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mZcBB$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mZcBC$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mZcBD$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mZcBF$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mZcBI$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mZcBJ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mZcBS$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mZcBV$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mZcBZ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mZcC$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mZcCB$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mZcCC$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mZcCD$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mZcCF$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mZcCI$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mZcCJ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mZcCS$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mZcCV$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mZcCZ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mZcD$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mZcDB$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mZcDC$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mZcDD$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mZcDF$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mZcDI$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mZcDJ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mZcDS$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mZcDV$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mZcDZ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mZcF$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mZcFB$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mZcFC$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mZcFD$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mZcFF$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mZcFI$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mZcFJ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mZcFS$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mZcFV$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mZcFZ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mZcI$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mZcIB$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mZcIC$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mZcID$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mZcIF$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mZcII$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mZcIJ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mZcIS$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mZcIV$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mZcIZ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mZcJ$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mZcJB$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mZcJC$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mZcJD$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mZcJF$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mZcJI$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mZcJJ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mZcJS$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mZcJV$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mZcJZ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mZcS$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mZcSB$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mZcSC$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mZcSD$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mZcSF$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mZcSI$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mZcSJ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mZcSS$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mZcSV$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mZcSZ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mZcV$sp(self, f: scala.Function1[scala.runtime.BoxedUnit, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mZcVB$sp(self, f: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mZcVC$sp(self, f: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mZcVD$sp(self, f: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mZcVF$sp(self, f: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mZcVI$sp(self, f: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mZcVJ$sp(self, f: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mZcVS$sp(self, f: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mZcVV$sp(self, f: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, scala.runtime.BoxedUnit], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mZcVZ$sp(self, f: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mZcZ$sp(self, f: scala.Function1[typing.Any, typing.Any], evidence$1: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mZcZB$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mZcZC$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mZcZD$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mZcZF$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mZcZI$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mZcZJ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mZcZS$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mZcZV$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    def map$mZcZZ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], evidence$14: scalan.RType[typing.Any]) -> Coll[typing.Any]: ...
    _map$mcB$sp__B = typing.TypeVar('_map$mcB$sp__B')  # <B>
    def map$mcB$sp(self, f: scala.Function1[typing.Any, _map.mcB.sp__B], evidence$1: scalan.RType[_map.mcB.sp__B]) -> Coll[_map.mcB.sp__B]: ...
    _map$mcBB$sp__V = typing.TypeVar('_map$mcBB$sp__V')  # <V>
    def map$mcBB$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], _map.mcBB.sp__V], evidence$14: scalan.RType[_map.mcBB.sp__V]) -> Coll[_map.mcBB.sp__V]: ...
    _map$mcBC$sp__V = typing.TypeVar('_map$mcBC$sp__V')  # <V>
    def map$mcBC$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], _map.mcBC.sp__V], evidence$14: scalan.RType[_map.mcBC.sp__V]) -> Coll[_map.mcBC.sp__V]: ...
    _map$mcBD$sp__V = typing.TypeVar('_map$mcBD$sp__V')  # <V>
    def map$mcBD$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], _map.mcBD.sp__V], evidence$14: scalan.RType[_map.mcBD.sp__V]) -> Coll[_map.mcBD.sp__V]: ...
    _map$mcBF$sp__V = typing.TypeVar('_map$mcBF$sp__V')  # <V>
    def map$mcBF$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], _map.mcBF.sp__V], evidence$14: scalan.RType[_map.mcBF.sp__V]) -> Coll[_map.mcBF.sp__V]: ...
    _map$mcBI$sp__V = typing.TypeVar('_map$mcBI$sp__V')  # <V>
    def map$mcBI$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], _map.mcBI.sp__V], evidence$14: scalan.RType[_map.mcBI.sp__V]) -> Coll[_map.mcBI.sp__V]: ...
    _map$mcBJ$sp__V = typing.TypeVar('_map$mcBJ$sp__V')  # <V>
    def map$mcBJ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], _map.mcBJ.sp__V], evidence$14: scalan.RType[_map.mcBJ.sp__V]) -> Coll[_map.mcBJ.sp__V]: ...
    _map$mcBS$sp__V = typing.TypeVar('_map$mcBS$sp__V')  # <V>
    def map$mcBS$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], _map.mcBS.sp__V], evidence$14: scalan.RType[_map.mcBS.sp__V]) -> Coll[_map.mcBS.sp__V]: ...
    _map$mcBV$sp__V = typing.TypeVar('_map$mcBV$sp__V')  # <V>
    def map$mcBV$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], _map.mcBV.sp__V], evidence$14: scalan.RType[_map.mcBV.sp__V]) -> Coll[_map.mcBV.sp__V]: ...
    _map$mcBZ$sp__V = typing.TypeVar('_map$mcBZ$sp__V')  # <V>
    def map$mcBZ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], _map.mcBZ.sp__V], evidence$14: scalan.RType[_map.mcBZ.sp__V]) -> Coll[_map.mcBZ.sp__V]: ...
    _map$mcC$sp__B = typing.TypeVar('_map$mcC$sp__B')  # <B>
    def map$mcC$sp(self, f: scala.Function1[typing.Any, _map.mcC.sp__B], evidence$1: scalan.RType[_map.mcC.sp__B]) -> Coll[_map.mcC.sp__B]: ...
    _map$mcCB$sp__V = typing.TypeVar('_map$mcCB$sp__V')  # <V>
    def map$mcCB$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], _map.mcCB.sp__V], evidence$14: scalan.RType[_map.mcCB.sp__V]) -> Coll[_map.mcCB.sp__V]: ...
    _map$mcCC$sp__V = typing.TypeVar('_map$mcCC$sp__V')  # <V>
    def map$mcCC$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], _map.mcCC.sp__V], evidence$14: scalan.RType[_map.mcCC.sp__V]) -> Coll[_map.mcCC.sp__V]: ...
    _map$mcCD$sp__V = typing.TypeVar('_map$mcCD$sp__V')  # <V>
    def map$mcCD$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], _map.mcCD.sp__V], evidence$14: scalan.RType[_map.mcCD.sp__V]) -> Coll[_map.mcCD.sp__V]: ...
    _map$mcCF$sp__V = typing.TypeVar('_map$mcCF$sp__V')  # <V>
    def map$mcCF$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], _map.mcCF.sp__V], evidence$14: scalan.RType[_map.mcCF.sp__V]) -> Coll[_map.mcCF.sp__V]: ...
    _map$mcCI$sp__V = typing.TypeVar('_map$mcCI$sp__V')  # <V>
    def map$mcCI$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], _map.mcCI.sp__V], evidence$14: scalan.RType[_map.mcCI.sp__V]) -> Coll[_map.mcCI.sp__V]: ...
    _map$mcCJ$sp__V = typing.TypeVar('_map$mcCJ$sp__V')  # <V>
    def map$mcCJ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], _map.mcCJ.sp__V], evidence$14: scalan.RType[_map.mcCJ.sp__V]) -> Coll[_map.mcCJ.sp__V]: ...
    _map$mcCS$sp__V = typing.TypeVar('_map$mcCS$sp__V')  # <V>
    def map$mcCS$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], _map.mcCS.sp__V], evidence$14: scalan.RType[_map.mcCS.sp__V]) -> Coll[_map.mcCS.sp__V]: ...
    _map$mcCV$sp__V = typing.TypeVar('_map$mcCV$sp__V')  # <V>
    def map$mcCV$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], _map.mcCV.sp__V], evidence$14: scalan.RType[_map.mcCV.sp__V]) -> Coll[_map.mcCV.sp__V]: ...
    _map$mcCZ$sp__V = typing.TypeVar('_map$mcCZ$sp__V')  # <V>
    def map$mcCZ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], _map.mcCZ.sp__V], evidence$14: scalan.RType[_map.mcCZ.sp__V]) -> Coll[_map.mcCZ.sp__V]: ...
    _map$mcD$sp__B = typing.TypeVar('_map$mcD$sp__B')  # <B>
    def map$mcD$sp(self, f: scala.Function1[typing.Any, _map.mcD.sp__B], evidence$1: scalan.RType[_map.mcD.sp__B]) -> Coll[_map.mcD.sp__B]: ...
    _map$mcDB$sp__V = typing.TypeVar('_map$mcDB$sp__V')  # <V>
    def map$mcDB$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], _map.mcDB.sp__V], evidence$14: scalan.RType[_map.mcDB.sp__V]) -> Coll[_map.mcDB.sp__V]: ...
    _map$mcDC$sp__V = typing.TypeVar('_map$mcDC$sp__V')  # <V>
    def map$mcDC$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], _map.mcDC.sp__V], evidence$14: scalan.RType[_map.mcDC.sp__V]) -> Coll[_map.mcDC.sp__V]: ...
    _map$mcDD$sp__V = typing.TypeVar('_map$mcDD$sp__V')  # <V>
    def map$mcDD$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], _map.mcDD.sp__V], evidence$14: scalan.RType[_map.mcDD.sp__V]) -> Coll[_map.mcDD.sp__V]: ...
    _map$mcDF$sp__V = typing.TypeVar('_map$mcDF$sp__V')  # <V>
    def map$mcDF$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], _map.mcDF.sp__V], evidence$14: scalan.RType[_map.mcDF.sp__V]) -> Coll[_map.mcDF.sp__V]: ...
    _map$mcDI$sp__V = typing.TypeVar('_map$mcDI$sp__V')  # <V>
    def map$mcDI$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], _map.mcDI.sp__V], evidence$14: scalan.RType[_map.mcDI.sp__V]) -> Coll[_map.mcDI.sp__V]: ...
    _map$mcDJ$sp__V = typing.TypeVar('_map$mcDJ$sp__V')  # <V>
    def map$mcDJ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], _map.mcDJ.sp__V], evidence$14: scalan.RType[_map.mcDJ.sp__V]) -> Coll[_map.mcDJ.sp__V]: ...
    _map$mcDS$sp__V = typing.TypeVar('_map$mcDS$sp__V')  # <V>
    def map$mcDS$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], _map.mcDS.sp__V], evidence$14: scalan.RType[_map.mcDS.sp__V]) -> Coll[_map.mcDS.sp__V]: ...
    _map$mcDV$sp__V = typing.TypeVar('_map$mcDV$sp__V')  # <V>
    def map$mcDV$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], _map.mcDV.sp__V], evidence$14: scalan.RType[_map.mcDV.sp__V]) -> Coll[_map.mcDV.sp__V]: ...
    _map$mcDZ$sp__V = typing.TypeVar('_map$mcDZ$sp__V')  # <V>
    def map$mcDZ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], _map.mcDZ.sp__V], evidence$14: scalan.RType[_map.mcDZ.sp__V]) -> Coll[_map.mcDZ.sp__V]: ...
    _map$mcF$sp__B = typing.TypeVar('_map$mcF$sp__B')  # <B>
    def map$mcF$sp(self, f: scala.Function1[typing.Any, _map.mcF.sp__B], evidence$1: scalan.RType[_map.mcF.sp__B]) -> Coll[_map.mcF.sp__B]: ...
    _map$mcFB$sp__V = typing.TypeVar('_map$mcFB$sp__V')  # <V>
    def map$mcFB$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], _map.mcFB.sp__V], evidence$14: scalan.RType[_map.mcFB.sp__V]) -> Coll[_map.mcFB.sp__V]: ...
    _map$mcFC$sp__V = typing.TypeVar('_map$mcFC$sp__V')  # <V>
    def map$mcFC$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], _map.mcFC.sp__V], evidence$14: scalan.RType[_map.mcFC.sp__V]) -> Coll[_map.mcFC.sp__V]: ...
    _map$mcFD$sp__V = typing.TypeVar('_map$mcFD$sp__V')  # <V>
    def map$mcFD$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], _map.mcFD.sp__V], evidence$14: scalan.RType[_map.mcFD.sp__V]) -> Coll[_map.mcFD.sp__V]: ...
    _map$mcFF$sp__V = typing.TypeVar('_map$mcFF$sp__V')  # <V>
    def map$mcFF$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], _map.mcFF.sp__V], evidence$14: scalan.RType[_map.mcFF.sp__V]) -> Coll[_map.mcFF.sp__V]: ...
    _map$mcFI$sp__V = typing.TypeVar('_map$mcFI$sp__V')  # <V>
    def map$mcFI$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], _map.mcFI.sp__V], evidence$14: scalan.RType[_map.mcFI.sp__V]) -> Coll[_map.mcFI.sp__V]: ...
    _map$mcFJ$sp__V = typing.TypeVar('_map$mcFJ$sp__V')  # <V>
    def map$mcFJ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], _map.mcFJ.sp__V], evidence$14: scalan.RType[_map.mcFJ.sp__V]) -> Coll[_map.mcFJ.sp__V]: ...
    _map$mcFS$sp__V = typing.TypeVar('_map$mcFS$sp__V')  # <V>
    def map$mcFS$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], _map.mcFS.sp__V], evidence$14: scalan.RType[_map.mcFS.sp__V]) -> Coll[_map.mcFS.sp__V]: ...
    _map$mcFV$sp__V = typing.TypeVar('_map$mcFV$sp__V')  # <V>
    def map$mcFV$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], _map.mcFV.sp__V], evidence$14: scalan.RType[_map.mcFV.sp__V]) -> Coll[_map.mcFV.sp__V]: ...
    _map$mcFZ$sp__V = typing.TypeVar('_map$mcFZ$sp__V')  # <V>
    def map$mcFZ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], _map.mcFZ.sp__V], evidence$14: scalan.RType[_map.mcFZ.sp__V]) -> Coll[_map.mcFZ.sp__V]: ...
    _map$mcI$sp__B = typing.TypeVar('_map$mcI$sp__B')  # <B>
    def map$mcI$sp(self, f: scala.Function1[typing.Any, _map.mcI.sp__B], evidence$1: scalan.RType[_map.mcI.sp__B]) -> Coll[_map.mcI.sp__B]: ...
    _map$mcIB$sp__V = typing.TypeVar('_map$mcIB$sp__V')  # <V>
    def map$mcIB$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], _map.mcIB.sp__V], evidence$14: scalan.RType[_map.mcIB.sp__V]) -> Coll[_map.mcIB.sp__V]: ...
    _map$mcIC$sp__V = typing.TypeVar('_map$mcIC$sp__V')  # <V>
    def map$mcIC$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], _map.mcIC.sp__V], evidence$14: scalan.RType[_map.mcIC.sp__V]) -> Coll[_map.mcIC.sp__V]: ...
    _map$mcID$sp__V = typing.TypeVar('_map$mcID$sp__V')  # <V>
    def map$mcID$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], _map.mcID.sp__V], evidence$14: scalan.RType[_map.mcID.sp__V]) -> Coll[_map.mcID.sp__V]: ...
    _map$mcIF$sp__V = typing.TypeVar('_map$mcIF$sp__V')  # <V>
    def map$mcIF$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], _map.mcIF.sp__V], evidence$14: scalan.RType[_map.mcIF.sp__V]) -> Coll[_map.mcIF.sp__V]: ...
    _map$mcII$sp__V = typing.TypeVar('_map$mcII$sp__V')  # <V>
    def map$mcII$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], _map.mcII.sp__V], evidence$14: scalan.RType[_map.mcII.sp__V]) -> Coll[_map.mcII.sp__V]: ...
    _map$mcIJ$sp__V = typing.TypeVar('_map$mcIJ$sp__V')  # <V>
    def map$mcIJ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], _map.mcIJ.sp__V], evidence$14: scalan.RType[_map.mcIJ.sp__V]) -> Coll[_map.mcIJ.sp__V]: ...
    _map$mcIS$sp__V = typing.TypeVar('_map$mcIS$sp__V')  # <V>
    def map$mcIS$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], _map.mcIS.sp__V], evidence$14: scalan.RType[_map.mcIS.sp__V]) -> Coll[_map.mcIS.sp__V]: ...
    _map$mcIV$sp__V = typing.TypeVar('_map$mcIV$sp__V')  # <V>
    def map$mcIV$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], _map.mcIV.sp__V], evidence$14: scalan.RType[_map.mcIV.sp__V]) -> Coll[_map.mcIV.sp__V]: ...
    _map$mcIZ$sp__V = typing.TypeVar('_map$mcIZ$sp__V')  # <V>
    def map$mcIZ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], _map.mcIZ.sp__V], evidence$14: scalan.RType[_map.mcIZ.sp__V]) -> Coll[_map.mcIZ.sp__V]: ...
    _map$mcJ$sp__B = typing.TypeVar('_map$mcJ$sp__B')  # <B>
    def map$mcJ$sp(self, f: scala.Function1[typing.Any, _map.mcJ.sp__B], evidence$1: scalan.RType[_map.mcJ.sp__B]) -> Coll[_map.mcJ.sp__B]: ...
    _map$mcJB$sp__V = typing.TypeVar('_map$mcJB$sp__V')  # <V>
    def map$mcJB$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], _map.mcJB.sp__V], evidence$14: scalan.RType[_map.mcJB.sp__V]) -> Coll[_map.mcJB.sp__V]: ...
    _map$mcJC$sp__V = typing.TypeVar('_map$mcJC$sp__V')  # <V>
    def map$mcJC$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], _map.mcJC.sp__V], evidence$14: scalan.RType[_map.mcJC.sp__V]) -> Coll[_map.mcJC.sp__V]: ...
    _map$mcJD$sp__V = typing.TypeVar('_map$mcJD$sp__V')  # <V>
    def map$mcJD$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], _map.mcJD.sp__V], evidence$14: scalan.RType[_map.mcJD.sp__V]) -> Coll[_map.mcJD.sp__V]: ...
    _map$mcJF$sp__V = typing.TypeVar('_map$mcJF$sp__V')  # <V>
    def map$mcJF$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], _map.mcJF.sp__V], evidence$14: scalan.RType[_map.mcJF.sp__V]) -> Coll[_map.mcJF.sp__V]: ...
    _map$mcJI$sp__V = typing.TypeVar('_map$mcJI$sp__V')  # <V>
    def map$mcJI$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], _map.mcJI.sp__V], evidence$14: scalan.RType[_map.mcJI.sp__V]) -> Coll[_map.mcJI.sp__V]: ...
    _map$mcJJ$sp__V = typing.TypeVar('_map$mcJJ$sp__V')  # <V>
    def map$mcJJ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], _map.mcJJ.sp__V], evidence$14: scalan.RType[_map.mcJJ.sp__V]) -> Coll[_map.mcJJ.sp__V]: ...
    _map$mcJS$sp__V = typing.TypeVar('_map$mcJS$sp__V')  # <V>
    def map$mcJS$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], _map.mcJS.sp__V], evidence$14: scalan.RType[_map.mcJS.sp__V]) -> Coll[_map.mcJS.sp__V]: ...
    _map$mcJV$sp__V = typing.TypeVar('_map$mcJV$sp__V')  # <V>
    def map$mcJV$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], _map.mcJV.sp__V], evidence$14: scalan.RType[_map.mcJV.sp__V]) -> Coll[_map.mcJV.sp__V]: ...
    _map$mcJZ$sp__V = typing.TypeVar('_map$mcJZ$sp__V')  # <V>
    def map$mcJZ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], _map.mcJZ.sp__V], evidence$14: scalan.RType[_map.mcJZ.sp__V]) -> Coll[_map.mcJZ.sp__V]: ...
    _map$mcS$sp__B = typing.TypeVar('_map$mcS$sp__B')  # <B>
    def map$mcS$sp(self, f: scala.Function1[typing.Any, _map.mcS.sp__B], evidence$1: scalan.RType[_map.mcS.sp__B]) -> Coll[_map.mcS.sp__B]: ...
    _map$mcSB$sp__V = typing.TypeVar('_map$mcSB$sp__V')  # <V>
    def map$mcSB$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], _map.mcSB.sp__V], evidence$14: scalan.RType[_map.mcSB.sp__V]) -> Coll[_map.mcSB.sp__V]: ...
    _map$mcSC$sp__V = typing.TypeVar('_map$mcSC$sp__V')  # <V>
    def map$mcSC$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], _map.mcSC.sp__V], evidence$14: scalan.RType[_map.mcSC.sp__V]) -> Coll[_map.mcSC.sp__V]: ...
    _map$mcSD$sp__V = typing.TypeVar('_map$mcSD$sp__V')  # <V>
    def map$mcSD$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], _map.mcSD.sp__V], evidence$14: scalan.RType[_map.mcSD.sp__V]) -> Coll[_map.mcSD.sp__V]: ...
    _map$mcSF$sp__V = typing.TypeVar('_map$mcSF$sp__V')  # <V>
    def map$mcSF$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], _map.mcSF.sp__V], evidence$14: scalan.RType[_map.mcSF.sp__V]) -> Coll[_map.mcSF.sp__V]: ...
    _map$mcSI$sp__V = typing.TypeVar('_map$mcSI$sp__V')  # <V>
    def map$mcSI$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], _map.mcSI.sp__V], evidence$14: scalan.RType[_map.mcSI.sp__V]) -> Coll[_map.mcSI.sp__V]: ...
    _map$mcSJ$sp__V = typing.TypeVar('_map$mcSJ$sp__V')  # <V>
    def map$mcSJ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], _map.mcSJ.sp__V], evidence$14: scalan.RType[_map.mcSJ.sp__V]) -> Coll[_map.mcSJ.sp__V]: ...
    _map$mcSS$sp__V = typing.TypeVar('_map$mcSS$sp__V')  # <V>
    def map$mcSS$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], _map.mcSS.sp__V], evidence$14: scalan.RType[_map.mcSS.sp__V]) -> Coll[_map.mcSS.sp__V]: ...
    _map$mcSV$sp__V = typing.TypeVar('_map$mcSV$sp__V')  # <V>
    def map$mcSV$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], _map.mcSV.sp__V], evidence$14: scalan.RType[_map.mcSV.sp__V]) -> Coll[_map.mcSV.sp__V]: ...
    _map$mcSZ$sp__V = typing.TypeVar('_map$mcSZ$sp__V')  # <V>
    def map$mcSZ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], _map.mcSZ.sp__V], evidence$14: scalan.RType[_map.mcSZ.sp__V]) -> Coll[_map.mcSZ.sp__V]: ...
    _map$mcV$sp__B = typing.TypeVar('_map$mcV$sp__B')  # <B>
    def map$mcV$sp(self, f: scala.Function1[scala.runtime.BoxedUnit, _map.mcV.sp__B], evidence$1: scalan.RType[_map.mcV.sp__B]) -> Coll[_map.mcV.sp__B]: ...
    _map$mcVB$sp__V = typing.TypeVar('_map$mcVB$sp__V')  # <V>
    def map$mcVB$sp(self, f: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], _map.mcVB.sp__V], evidence$14: scalan.RType[_map.mcVB.sp__V]) -> Coll[_map.mcVB.sp__V]: ...
    _map$mcVC$sp__V = typing.TypeVar('_map$mcVC$sp__V')  # <V>
    def map$mcVC$sp(self, f: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], _map.mcVC.sp__V], evidence$14: scalan.RType[_map.mcVC.sp__V]) -> Coll[_map.mcVC.sp__V]: ...
    _map$mcVD$sp__V = typing.TypeVar('_map$mcVD$sp__V')  # <V>
    def map$mcVD$sp(self, f: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], _map.mcVD.sp__V], evidence$14: scalan.RType[_map.mcVD.sp__V]) -> Coll[_map.mcVD.sp__V]: ...
    _map$mcVF$sp__V = typing.TypeVar('_map$mcVF$sp__V')  # <V>
    def map$mcVF$sp(self, f: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], _map.mcVF.sp__V], evidence$14: scalan.RType[_map.mcVF.sp__V]) -> Coll[_map.mcVF.sp__V]: ...
    _map$mcVI$sp__V = typing.TypeVar('_map$mcVI$sp__V')  # <V>
    def map$mcVI$sp(self, f: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], _map.mcVI.sp__V], evidence$14: scalan.RType[_map.mcVI.sp__V]) -> Coll[_map.mcVI.sp__V]: ...
    _map$mcVJ$sp__V = typing.TypeVar('_map$mcVJ$sp__V')  # <V>
    def map$mcVJ$sp(self, f: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], _map.mcVJ.sp__V], evidence$14: scalan.RType[_map.mcVJ.sp__V]) -> Coll[_map.mcVJ.sp__V]: ...
    _map$mcVS$sp__V = typing.TypeVar('_map$mcVS$sp__V')  # <V>
    def map$mcVS$sp(self, f: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], _map.mcVS.sp__V], evidence$14: scalan.RType[_map.mcVS.sp__V]) -> Coll[_map.mcVS.sp__V]: ...
    _map$mcVV$sp__V = typing.TypeVar('_map$mcVV$sp__V')  # <V>
    def map$mcVV$sp(self, f: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, scala.runtime.BoxedUnit], _map.mcVV.sp__V], evidence$14: scalan.RType[_map.mcVV.sp__V]) -> Coll[_map.mcVV.sp__V]: ...
    _map$mcVZ$sp__V = typing.TypeVar('_map$mcVZ$sp__V')  # <V>
    def map$mcVZ$sp(self, f: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], _map.mcVZ.sp__V], evidence$14: scalan.RType[_map.mcVZ.sp__V]) -> Coll[_map.mcVZ.sp__V]: ...
    _map$mcZ$sp__B = typing.TypeVar('_map$mcZ$sp__B')  # <B>
    def map$mcZ$sp(self, f: scala.Function1[typing.Any, _map.mcZ.sp__B], evidence$1: scalan.RType[_map.mcZ.sp__B]) -> Coll[_map.mcZ.sp__B]: ...
    _map$mcZB$sp__V = typing.TypeVar('_map$mcZB$sp__V')  # <V>
    def map$mcZB$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], _map.mcZB.sp__V], evidence$14: scalan.RType[_map.mcZB.sp__V]) -> Coll[_map.mcZB.sp__V]: ...
    _map$mcZC$sp__V = typing.TypeVar('_map$mcZC$sp__V')  # <V>
    def map$mcZC$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], _map.mcZC.sp__V], evidence$14: scalan.RType[_map.mcZC.sp__V]) -> Coll[_map.mcZC.sp__V]: ...
    _map$mcZD$sp__V = typing.TypeVar('_map$mcZD$sp__V')  # <V>
    def map$mcZD$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], _map.mcZD.sp__V], evidence$14: scalan.RType[_map.mcZD.sp__V]) -> Coll[_map.mcZD.sp__V]: ...
    _map$mcZF$sp__V = typing.TypeVar('_map$mcZF$sp__V')  # <V>
    def map$mcZF$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], _map.mcZF.sp__V], evidence$14: scalan.RType[_map.mcZF.sp__V]) -> Coll[_map.mcZF.sp__V]: ...
    _map$mcZI$sp__V = typing.TypeVar('_map$mcZI$sp__V')  # <V>
    def map$mcZI$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], _map.mcZI.sp__V], evidence$14: scalan.RType[_map.mcZI.sp__V]) -> Coll[_map.mcZI.sp__V]: ...
    _map$mcZJ$sp__V = typing.TypeVar('_map$mcZJ$sp__V')  # <V>
    def map$mcZJ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], _map.mcZJ.sp__V], evidence$14: scalan.RType[_map.mcZJ.sp__V]) -> Coll[_map.mcZJ.sp__V]: ...
    _map$mcZS$sp__V = typing.TypeVar('_map$mcZS$sp__V')  # <V>
    def map$mcZS$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], _map.mcZS.sp__V], evidence$14: scalan.RType[_map.mcZS.sp__V]) -> Coll[_map.mcZS.sp__V]: ...
    _map$mcZV$sp__V = typing.TypeVar('_map$mcZV$sp__V')  # <V>
    def map$mcZV$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], _map.mcZV.sp__V], evidence$14: scalan.RType[_map.mcZV.sp__V]) -> Coll[_map.mcZV.sp__V]: ...
    _map$mcZZ$sp__V = typing.TypeVar('_map$mcZZ$sp__V')  # <V>
    def map$mcZZ$sp(self, f: scala.Function1[scala.Tuple2[typing.Any, typing.Any], _map.mcZZ.sp__V], evidence$14: scalan.RType[_map.mcZZ.sp__V]) -> Coll[_map.mcZZ.sp__V]: ...
    _mapFirst__T1 = typing.TypeVar('_mapFirst__T1')  # <T1>
    def mapFirst(self, f: scala.Function1[_PairOfCols__L, _mapFirst__T1], evidence$18: scalan.RType[_mapFirst__T1]) -> Coll[scala.Tuple2[_mapFirst__T1, _PairOfCols__R]]: ...
    _mapFirst$mcBB$sp__T1 = typing.TypeVar('_mapFirst$mcBB$sp__T1')  # <T1>
    def mapFirst$mcBB$sp(self, f: scala.Function1[typing.Any, _mapFirst.mcBB.sp__T1], evidence$18: scalan.RType[_mapFirst.mcBB.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcBB.sp__T1, typing.Any]]: ...
    _mapFirst$mcBC$sp__T1 = typing.TypeVar('_mapFirst$mcBC$sp__T1')  # <T1>
    def mapFirst$mcBC$sp(self, f: scala.Function1[typing.Any, _mapFirst.mcBC.sp__T1], evidence$18: scalan.RType[_mapFirst.mcBC.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcBC.sp__T1, typing.Any]]: ...
    _mapFirst$mcBD$sp__T1 = typing.TypeVar('_mapFirst$mcBD$sp__T1')  # <T1>
    def mapFirst$mcBD$sp(self, f: scala.Function1[typing.Any, _mapFirst.mcBD.sp__T1], evidence$18: scalan.RType[_mapFirst.mcBD.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcBD.sp__T1, typing.Any]]: ...
    _mapFirst$mcBF$sp__T1 = typing.TypeVar('_mapFirst$mcBF$sp__T1')  # <T1>
    def mapFirst$mcBF$sp(self, f: scala.Function1[typing.Any, _mapFirst.mcBF.sp__T1], evidence$18: scalan.RType[_mapFirst.mcBF.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcBF.sp__T1, typing.Any]]: ...
    _mapFirst$mcBI$sp__T1 = typing.TypeVar('_mapFirst$mcBI$sp__T1')  # <T1>
    def mapFirst$mcBI$sp(self, f: scala.Function1[typing.Any, _mapFirst.mcBI.sp__T1], evidence$18: scalan.RType[_mapFirst.mcBI.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcBI.sp__T1, typing.Any]]: ...
    _mapFirst$mcBJ$sp__T1 = typing.TypeVar('_mapFirst$mcBJ$sp__T1')  # <T1>
    def mapFirst$mcBJ$sp(self, f: scala.Function1[typing.Any, _mapFirst.mcBJ.sp__T1], evidence$18: scalan.RType[_mapFirst.mcBJ.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcBJ.sp__T1, typing.Any]]: ...
    _mapFirst$mcBS$sp__T1 = typing.TypeVar('_mapFirst$mcBS$sp__T1')  # <T1>
    def mapFirst$mcBS$sp(self, f: scala.Function1[typing.Any, _mapFirst.mcBS.sp__T1], evidence$18: scalan.RType[_mapFirst.mcBS.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcBS.sp__T1, typing.Any]]: ...
    _mapFirst$mcBV$sp__T1 = typing.TypeVar('_mapFirst$mcBV$sp__T1')  # <T1>
    def mapFirst$mcBV$sp(self, f: scala.Function1[typing.Any, _mapFirst.mcBV.sp__T1], evidence$18: scalan.RType[_mapFirst.mcBV.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcBV.sp__T1, scala.runtime.BoxedUnit]]: ...
    _mapFirst$mcBZ$sp__T1 = typing.TypeVar('_mapFirst$mcBZ$sp__T1')  # <T1>
    def mapFirst$mcBZ$sp(self, f: scala.Function1[typing.Any, _mapFirst.mcBZ.sp__T1], evidence$18: scalan.RType[_mapFirst.mcBZ.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcBZ.sp__T1, typing.Any]]: ...
    _mapFirst$mcCB$sp__T1 = typing.TypeVar('_mapFirst$mcCB$sp__T1')  # <T1>
    def mapFirst$mcCB$sp(self, f: scala.Function1[typing.Any, _mapFirst.mcCB.sp__T1], evidence$18: scalan.RType[_mapFirst.mcCB.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcCB.sp__T1, typing.Any]]: ...
    _mapFirst$mcCC$sp__T1 = typing.TypeVar('_mapFirst$mcCC$sp__T1')  # <T1>
    def mapFirst$mcCC$sp(self, f: scala.Function1[typing.Any, _mapFirst.mcCC.sp__T1], evidence$18: scalan.RType[_mapFirst.mcCC.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcCC.sp__T1, typing.Any]]: ...
    _mapFirst$mcCD$sp__T1 = typing.TypeVar('_mapFirst$mcCD$sp__T1')  # <T1>
    def mapFirst$mcCD$sp(self, f: scala.Function1[typing.Any, _mapFirst.mcCD.sp__T1], evidence$18: scalan.RType[_mapFirst.mcCD.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcCD.sp__T1, typing.Any]]: ...
    _mapFirst$mcCF$sp__T1 = typing.TypeVar('_mapFirst$mcCF$sp__T1')  # <T1>
    def mapFirst$mcCF$sp(self, f: scala.Function1[typing.Any, _mapFirst.mcCF.sp__T1], evidence$18: scalan.RType[_mapFirst.mcCF.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcCF.sp__T1, typing.Any]]: ...
    _mapFirst$mcCI$sp__T1 = typing.TypeVar('_mapFirst$mcCI$sp__T1')  # <T1>
    def mapFirst$mcCI$sp(self, f: scala.Function1[typing.Any, _mapFirst.mcCI.sp__T1], evidence$18: scalan.RType[_mapFirst.mcCI.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcCI.sp__T1, typing.Any]]: ...
    _mapFirst$mcCJ$sp__T1 = typing.TypeVar('_mapFirst$mcCJ$sp__T1')  # <T1>
    def mapFirst$mcCJ$sp(self, f: scala.Function1[typing.Any, _mapFirst.mcCJ.sp__T1], evidence$18: scalan.RType[_mapFirst.mcCJ.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcCJ.sp__T1, typing.Any]]: ...
    _mapFirst$mcCS$sp__T1 = typing.TypeVar('_mapFirst$mcCS$sp__T1')  # <T1>
    def mapFirst$mcCS$sp(self, f: scala.Function1[typing.Any, _mapFirst.mcCS.sp__T1], evidence$18: scalan.RType[_mapFirst.mcCS.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcCS.sp__T1, typing.Any]]: ...
    _mapFirst$mcCV$sp__T1 = typing.TypeVar('_mapFirst$mcCV$sp__T1')  # <T1>
    def mapFirst$mcCV$sp(self, f: scala.Function1[typing.Any, _mapFirst.mcCV.sp__T1], evidence$18: scalan.RType[_mapFirst.mcCV.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcCV.sp__T1, scala.runtime.BoxedUnit]]: ...
    _mapFirst$mcCZ$sp__T1 = typing.TypeVar('_mapFirst$mcCZ$sp__T1')  # <T1>
    def mapFirst$mcCZ$sp(self, f: scala.Function1[typing.Any, _mapFirst.mcCZ.sp__T1], evidence$18: scalan.RType[_mapFirst.mcCZ.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcCZ.sp__T1, typing.Any]]: ...
    _mapFirst$mcDB$sp__T1 = typing.TypeVar('_mapFirst$mcDB$sp__T1')  # <T1>
    def mapFirst$mcDB$sp(self, f: scala.Function1[typing.Any, _mapFirst.mcDB.sp__T1], evidence$18: scalan.RType[_mapFirst.mcDB.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcDB.sp__T1, typing.Any]]: ...
    _mapFirst$mcDC$sp__T1 = typing.TypeVar('_mapFirst$mcDC$sp__T1')  # <T1>
    def mapFirst$mcDC$sp(self, f: scala.Function1[typing.Any, _mapFirst.mcDC.sp__T1], evidence$18: scalan.RType[_mapFirst.mcDC.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcDC.sp__T1, typing.Any]]: ...
    _mapFirst$mcDD$sp__T1 = typing.TypeVar('_mapFirst$mcDD$sp__T1')  # <T1>
    def mapFirst$mcDD$sp(self, f: scala.Function1[typing.Any, _mapFirst.mcDD.sp__T1], evidence$18: scalan.RType[_mapFirst.mcDD.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcDD.sp__T1, typing.Any]]: ...
    _mapFirst$mcDF$sp__T1 = typing.TypeVar('_mapFirst$mcDF$sp__T1')  # <T1>
    def mapFirst$mcDF$sp(self, f: scala.Function1[typing.Any, _mapFirst.mcDF.sp__T1], evidence$18: scalan.RType[_mapFirst.mcDF.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcDF.sp__T1, typing.Any]]: ...
    _mapFirst$mcDI$sp__T1 = typing.TypeVar('_mapFirst$mcDI$sp__T1')  # <T1>
    def mapFirst$mcDI$sp(self, f: scala.Function1[typing.Any, _mapFirst.mcDI.sp__T1], evidence$18: scalan.RType[_mapFirst.mcDI.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcDI.sp__T1, typing.Any]]: ...
    _mapFirst$mcDJ$sp__T1 = typing.TypeVar('_mapFirst$mcDJ$sp__T1')  # <T1>
    def mapFirst$mcDJ$sp(self, f: scala.Function1[typing.Any, _mapFirst.mcDJ.sp__T1], evidence$18: scalan.RType[_mapFirst.mcDJ.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcDJ.sp__T1, typing.Any]]: ...
    _mapFirst$mcDS$sp__T1 = typing.TypeVar('_mapFirst$mcDS$sp__T1')  # <T1>
    def mapFirst$mcDS$sp(self, f: scala.Function1[typing.Any, _mapFirst.mcDS.sp__T1], evidence$18: scalan.RType[_mapFirst.mcDS.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcDS.sp__T1, typing.Any]]: ...
    _mapFirst$mcDV$sp__T1 = typing.TypeVar('_mapFirst$mcDV$sp__T1')  # <T1>
    def mapFirst$mcDV$sp(self, f: scala.Function1[typing.Any, _mapFirst.mcDV.sp__T1], evidence$18: scalan.RType[_mapFirst.mcDV.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcDV.sp__T1, scala.runtime.BoxedUnit]]: ...
    _mapFirst$mcDZ$sp__T1 = typing.TypeVar('_mapFirst$mcDZ$sp__T1')  # <T1>
    def mapFirst$mcDZ$sp(self, f: scala.Function1[typing.Any, _mapFirst.mcDZ.sp__T1], evidence$18: scalan.RType[_mapFirst.mcDZ.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcDZ.sp__T1, typing.Any]]: ...
    _mapFirst$mcFB$sp__T1 = typing.TypeVar('_mapFirst$mcFB$sp__T1')  # <T1>
    def mapFirst$mcFB$sp(self, f: scala.Function1[typing.Any, _mapFirst.mcFB.sp__T1], evidence$18: scalan.RType[_mapFirst.mcFB.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcFB.sp__T1, typing.Any]]: ...
    _mapFirst$mcFC$sp__T1 = typing.TypeVar('_mapFirst$mcFC$sp__T1')  # <T1>
    def mapFirst$mcFC$sp(self, f: scala.Function1[typing.Any, _mapFirst.mcFC.sp__T1], evidence$18: scalan.RType[_mapFirst.mcFC.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcFC.sp__T1, typing.Any]]: ...
    _mapFirst$mcFD$sp__T1 = typing.TypeVar('_mapFirst$mcFD$sp__T1')  # <T1>
    def mapFirst$mcFD$sp(self, f: scala.Function1[typing.Any, _mapFirst.mcFD.sp__T1], evidence$18: scalan.RType[_mapFirst.mcFD.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcFD.sp__T1, typing.Any]]: ...
    _mapFirst$mcFF$sp__T1 = typing.TypeVar('_mapFirst$mcFF$sp__T1')  # <T1>
    def mapFirst$mcFF$sp(self, f: scala.Function1[typing.Any, _mapFirst.mcFF.sp__T1], evidence$18: scalan.RType[_mapFirst.mcFF.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcFF.sp__T1, typing.Any]]: ...
    _mapFirst$mcFI$sp__T1 = typing.TypeVar('_mapFirst$mcFI$sp__T1')  # <T1>
    def mapFirst$mcFI$sp(self, f: scala.Function1[typing.Any, _mapFirst.mcFI.sp__T1], evidence$18: scalan.RType[_mapFirst.mcFI.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcFI.sp__T1, typing.Any]]: ...
    _mapFirst$mcFJ$sp__T1 = typing.TypeVar('_mapFirst$mcFJ$sp__T1')  # <T1>
    def mapFirst$mcFJ$sp(self, f: scala.Function1[typing.Any, _mapFirst.mcFJ.sp__T1], evidence$18: scalan.RType[_mapFirst.mcFJ.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcFJ.sp__T1, typing.Any]]: ...
    _mapFirst$mcFS$sp__T1 = typing.TypeVar('_mapFirst$mcFS$sp__T1')  # <T1>
    def mapFirst$mcFS$sp(self, f: scala.Function1[typing.Any, _mapFirst.mcFS.sp__T1], evidence$18: scalan.RType[_mapFirst.mcFS.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcFS.sp__T1, typing.Any]]: ...
    _mapFirst$mcFV$sp__T1 = typing.TypeVar('_mapFirst$mcFV$sp__T1')  # <T1>
    def mapFirst$mcFV$sp(self, f: scala.Function1[typing.Any, _mapFirst.mcFV.sp__T1], evidence$18: scalan.RType[_mapFirst.mcFV.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcFV.sp__T1, scala.runtime.BoxedUnit]]: ...
    _mapFirst$mcFZ$sp__T1 = typing.TypeVar('_mapFirst$mcFZ$sp__T1')  # <T1>
    def mapFirst$mcFZ$sp(self, f: scala.Function1[typing.Any, _mapFirst.mcFZ.sp__T1], evidence$18: scalan.RType[_mapFirst.mcFZ.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcFZ.sp__T1, typing.Any]]: ...
    _mapFirst$mcIB$sp__T1 = typing.TypeVar('_mapFirst$mcIB$sp__T1')  # <T1>
    def mapFirst$mcIB$sp(self, f: scala.Function1[typing.Any, _mapFirst.mcIB.sp__T1], evidence$18: scalan.RType[_mapFirst.mcIB.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcIB.sp__T1, typing.Any]]: ...
    _mapFirst$mcIC$sp__T1 = typing.TypeVar('_mapFirst$mcIC$sp__T1')  # <T1>
    def mapFirst$mcIC$sp(self, f: scala.Function1[typing.Any, _mapFirst.mcIC.sp__T1], evidence$18: scalan.RType[_mapFirst.mcIC.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcIC.sp__T1, typing.Any]]: ...
    _mapFirst$mcID$sp__T1 = typing.TypeVar('_mapFirst$mcID$sp__T1')  # <T1>
    def mapFirst$mcID$sp(self, f: scala.Function1[typing.Any, _mapFirst.mcID.sp__T1], evidence$18: scalan.RType[_mapFirst.mcID.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcID.sp__T1, typing.Any]]: ...
    _mapFirst$mcIF$sp__T1 = typing.TypeVar('_mapFirst$mcIF$sp__T1')  # <T1>
    def mapFirst$mcIF$sp(self, f: scala.Function1[typing.Any, _mapFirst.mcIF.sp__T1], evidence$18: scalan.RType[_mapFirst.mcIF.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcIF.sp__T1, typing.Any]]: ...
    _mapFirst$mcII$sp__T1 = typing.TypeVar('_mapFirst$mcII$sp__T1')  # <T1>
    def mapFirst$mcII$sp(self, f: scala.Function1[typing.Any, _mapFirst.mcII.sp__T1], evidence$18: scalan.RType[_mapFirst.mcII.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcII.sp__T1, typing.Any]]: ...
    _mapFirst$mcIJ$sp__T1 = typing.TypeVar('_mapFirst$mcIJ$sp__T1')  # <T1>
    def mapFirst$mcIJ$sp(self, f: scala.Function1[typing.Any, _mapFirst.mcIJ.sp__T1], evidence$18: scalan.RType[_mapFirst.mcIJ.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcIJ.sp__T1, typing.Any]]: ...
    _mapFirst$mcIS$sp__T1 = typing.TypeVar('_mapFirst$mcIS$sp__T1')  # <T1>
    def mapFirst$mcIS$sp(self, f: scala.Function1[typing.Any, _mapFirst.mcIS.sp__T1], evidence$18: scalan.RType[_mapFirst.mcIS.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcIS.sp__T1, typing.Any]]: ...
    _mapFirst$mcIV$sp__T1 = typing.TypeVar('_mapFirst$mcIV$sp__T1')  # <T1>
    def mapFirst$mcIV$sp(self, f: scala.Function1[typing.Any, _mapFirst.mcIV.sp__T1], evidence$18: scalan.RType[_mapFirst.mcIV.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcIV.sp__T1, scala.runtime.BoxedUnit]]: ...
    _mapFirst$mcIZ$sp__T1 = typing.TypeVar('_mapFirst$mcIZ$sp__T1')  # <T1>
    def mapFirst$mcIZ$sp(self, f: scala.Function1[typing.Any, _mapFirst.mcIZ.sp__T1], evidence$18: scalan.RType[_mapFirst.mcIZ.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcIZ.sp__T1, typing.Any]]: ...
    _mapFirst$mcJB$sp__T1 = typing.TypeVar('_mapFirst$mcJB$sp__T1')  # <T1>
    def mapFirst$mcJB$sp(self, f: scala.Function1[typing.Any, _mapFirst.mcJB.sp__T1], evidence$18: scalan.RType[_mapFirst.mcJB.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcJB.sp__T1, typing.Any]]: ...
    _mapFirst$mcJC$sp__T1 = typing.TypeVar('_mapFirst$mcJC$sp__T1')  # <T1>
    def mapFirst$mcJC$sp(self, f: scala.Function1[typing.Any, _mapFirst.mcJC.sp__T1], evidence$18: scalan.RType[_mapFirst.mcJC.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcJC.sp__T1, typing.Any]]: ...
    _mapFirst$mcJD$sp__T1 = typing.TypeVar('_mapFirst$mcJD$sp__T1')  # <T1>
    def mapFirst$mcJD$sp(self, f: scala.Function1[typing.Any, _mapFirst.mcJD.sp__T1], evidence$18: scalan.RType[_mapFirst.mcJD.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcJD.sp__T1, typing.Any]]: ...
    _mapFirst$mcJF$sp__T1 = typing.TypeVar('_mapFirst$mcJF$sp__T1')  # <T1>
    def mapFirst$mcJF$sp(self, f: scala.Function1[typing.Any, _mapFirst.mcJF.sp__T1], evidence$18: scalan.RType[_mapFirst.mcJF.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcJF.sp__T1, typing.Any]]: ...
    _mapFirst$mcJI$sp__T1 = typing.TypeVar('_mapFirst$mcJI$sp__T1')  # <T1>
    def mapFirst$mcJI$sp(self, f: scala.Function1[typing.Any, _mapFirst.mcJI.sp__T1], evidence$18: scalan.RType[_mapFirst.mcJI.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcJI.sp__T1, typing.Any]]: ...
    _mapFirst$mcJJ$sp__T1 = typing.TypeVar('_mapFirst$mcJJ$sp__T1')  # <T1>
    def mapFirst$mcJJ$sp(self, f: scala.Function1[typing.Any, _mapFirst.mcJJ.sp__T1], evidence$18: scalan.RType[_mapFirst.mcJJ.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcJJ.sp__T1, typing.Any]]: ...
    _mapFirst$mcJS$sp__T1 = typing.TypeVar('_mapFirst$mcJS$sp__T1')  # <T1>
    def mapFirst$mcJS$sp(self, f: scala.Function1[typing.Any, _mapFirst.mcJS.sp__T1], evidence$18: scalan.RType[_mapFirst.mcJS.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcJS.sp__T1, typing.Any]]: ...
    _mapFirst$mcJV$sp__T1 = typing.TypeVar('_mapFirst$mcJV$sp__T1')  # <T1>
    def mapFirst$mcJV$sp(self, f: scala.Function1[typing.Any, _mapFirst.mcJV.sp__T1], evidence$18: scalan.RType[_mapFirst.mcJV.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcJV.sp__T1, scala.runtime.BoxedUnit]]: ...
    _mapFirst$mcJZ$sp__T1 = typing.TypeVar('_mapFirst$mcJZ$sp__T1')  # <T1>
    def mapFirst$mcJZ$sp(self, f: scala.Function1[typing.Any, _mapFirst.mcJZ.sp__T1], evidence$18: scalan.RType[_mapFirst.mcJZ.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcJZ.sp__T1, typing.Any]]: ...
    _mapFirst$mcSB$sp__T1 = typing.TypeVar('_mapFirst$mcSB$sp__T1')  # <T1>
    def mapFirst$mcSB$sp(self, f: scala.Function1[typing.Any, _mapFirst.mcSB.sp__T1], evidence$18: scalan.RType[_mapFirst.mcSB.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcSB.sp__T1, typing.Any]]: ...
    _mapFirst$mcSC$sp__T1 = typing.TypeVar('_mapFirst$mcSC$sp__T1')  # <T1>
    def mapFirst$mcSC$sp(self, f: scala.Function1[typing.Any, _mapFirst.mcSC.sp__T1], evidence$18: scalan.RType[_mapFirst.mcSC.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcSC.sp__T1, typing.Any]]: ...
    _mapFirst$mcSD$sp__T1 = typing.TypeVar('_mapFirst$mcSD$sp__T1')  # <T1>
    def mapFirst$mcSD$sp(self, f: scala.Function1[typing.Any, _mapFirst.mcSD.sp__T1], evidence$18: scalan.RType[_mapFirst.mcSD.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcSD.sp__T1, typing.Any]]: ...
    _mapFirst$mcSF$sp__T1 = typing.TypeVar('_mapFirst$mcSF$sp__T1')  # <T1>
    def mapFirst$mcSF$sp(self, f: scala.Function1[typing.Any, _mapFirst.mcSF.sp__T1], evidence$18: scalan.RType[_mapFirst.mcSF.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcSF.sp__T1, typing.Any]]: ...
    _mapFirst$mcSI$sp__T1 = typing.TypeVar('_mapFirst$mcSI$sp__T1')  # <T1>
    def mapFirst$mcSI$sp(self, f: scala.Function1[typing.Any, _mapFirst.mcSI.sp__T1], evidence$18: scalan.RType[_mapFirst.mcSI.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcSI.sp__T1, typing.Any]]: ...
    _mapFirst$mcSJ$sp__T1 = typing.TypeVar('_mapFirst$mcSJ$sp__T1')  # <T1>
    def mapFirst$mcSJ$sp(self, f: scala.Function1[typing.Any, _mapFirst.mcSJ.sp__T1], evidence$18: scalan.RType[_mapFirst.mcSJ.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcSJ.sp__T1, typing.Any]]: ...
    _mapFirst$mcSS$sp__T1 = typing.TypeVar('_mapFirst$mcSS$sp__T1')  # <T1>
    def mapFirst$mcSS$sp(self, f: scala.Function1[typing.Any, _mapFirst.mcSS.sp__T1], evidence$18: scalan.RType[_mapFirst.mcSS.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcSS.sp__T1, typing.Any]]: ...
    _mapFirst$mcSV$sp__T1 = typing.TypeVar('_mapFirst$mcSV$sp__T1')  # <T1>
    def mapFirst$mcSV$sp(self, f: scala.Function1[typing.Any, _mapFirst.mcSV.sp__T1], evidence$18: scalan.RType[_mapFirst.mcSV.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcSV.sp__T1, scala.runtime.BoxedUnit]]: ...
    _mapFirst$mcSZ$sp__T1 = typing.TypeVar('_mapFirst$mcSZ$sp__T1')  # <T1>
    def mapFirst$mcSZ$sp(self, f: scala.Function1[typing.Any, _mapFirst.mcSZ.sp__T1], evidence$18: scalan.RType[_mapFirst.mcSZ.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcSZ.sp__T1, typing.Any]]: ...
    _mapFirst$mcVB$sp__T1 = typing.TypeVar('_mapFirst$mcVB$sp__T1')  # <T1>
    def mapFirst$mcVB$sp(self, f: scala.Function1[scala.runtime.BoxedUnit, _mapFirst.mcVB.sp__T1], evidence$18: scalan.RType[_mapFirst.mcVB.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcVB.sp__T1, typing.Any]]: ...
    _mapFirst$mcVC$sp__T1 = typing.TypeVar('_mapFirst$mcVC$sp__T1')  # <T1>
    def mapFirst$mcVC$sp(self, f: scala.Function1[scala.runtime.BoxedUnit, _mapFirst.mcVC.sp__T1], evidence$18: scalan.RType[_mapFirst.mcVC.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcVC.sp__T1, typing.Any]]: ...
    _mapFirst$mcVD$sp__T1 = typing.TypeVar('_mapFirst$mcVD$sp__T1')  # <T1>
    def mapFirst$mcVD$sp(self, f: scala.Function1[scala.runtime.BoxedUnit, _mapFirst.mcVD.sp__T1], evidence$18: scalan.RType[_mapFirst.mcVD.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcVD.sp__T1, typing.Any]]: ...
    _mapFirst$mcVF$sp__T1 = typing.TypeVar('_mapFirst$mcVF$sp__T1')  # <T1>
    def mapFirst$mcVF$sp(self, f: scala.Function1[scala.runtime.BoxedUnit, _mapFirst.mcVF.sp__T1], evidence$18: scalan.RType[_mapFirst.mcVF.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcVF.sp__T1, typing.Any]]: ...
    _mapFirst$mcVI$sp__T1 = typing.TypeVar('_mapFirst$mcVI$sp__T1')  # <T1>
    def mapFirst$mcVI$sp(self, f: scala.Function1[scala.runtime.BoxedUnit, _mapFirst.mcVI.sp__T1], evidence$18: scalan.RType[_mapFirst.mcVI.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcVI.sp__T1, typing.Any]]: ...
    _mapFirst$mcVJ$sp__T1 = typing.TypeVar('_mapFirst$mcVJ$sp__T1')  # <T1>
    def mapFirst$mcVJ$sp(self, f: scala.Function1[scala.runtime.BoxedUnit, _mapFirst.mcVJ.sp__T1], evidence$18: scalan.RType[_mapFirst.mcVJ.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcVJ.sp__T1, typing.Any]]: ...
    _mapFirst$mcVS$sp__T1 = typing.TypeVar('_mapFirst$mcVS$sp__T1')  # <T1>
    def mapFirst$mcVS$sp(self, f: scala.Function1[scala.runtime.BoxedUnit, _mapFirst.mcVS.sp__T1], evidence$18: scalan.RType[_mapFirst.mcVS.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcVS.sp__T1, typing.Any]]: ...
    _mapFirst$mcVV$sp__T1 = typing.TypeVar('_mapFirst$mcVV$sp__T1')  # <T1>
    def mapFirst$mcVV$sp(self, f: scala.Function1[scala.runtime.BoxedUnit, _mapFirst.mcVV.sp__T1], evidence$18: scalan.RType[_mapFirst.mcVV.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcVV.sp__T1, scala.runtime.BoxedUnit]]: ...
    _mapFirst$mcVZ$sp__T1 = typing.TypeVar('_mapFirst$mcVZ$sp__T1')  # <T1>
    def mapFirst$mcVZ$sp(self, f: scala.Function1[scala.runtime.BoxedUnit, _mapFirst.mcVZ.sp__T1], evidence$18: scalan.RType[_mapFirst.mcVZ.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcVZ.sp__T1, typing.Any]]: ...
    _mapFirst$mcZB$sp__T1 = typing.TypeVar('_mapFirst$mcZB$sp__T1')  # <T1>
    def mapFirst$mcZB$sp(self, f: scala.Function1[typing.Any, _mapFirst.mcZB.sp__T1], evidence$18: scalan.RType[_mapFirst.mcZB.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcZB.sp__T1, typing.Any]]: ...
    _mapFirst$mcZC$sp__T1 = typing.TypeVar('_mapFirst$mcZC$sp__T1')  # <T1>
    def mapFirst$mcZC$sp(self, f: scala.Function1[typing.Any, _mapFirst.mcZC.sp__T1], evidence$18: scalan.RType[_mapFirst.mcZC.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcZC.sp__T1, typing.Any]]: ...
    _mapFirst$mcZD$sp__T1 = typing.TypeVar('_mapFirst$mcZD$sp__T1')  # <T1>
    def mapFirst$mcZD$sp(self, f: scala.Function1[typing.Any, _mapFirst.mcZD.sp__T1], evidence$18: scalan.RType[_mapFirst.mcZD.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcZD.sp__T1, typing.Any]]: ...
    _mapFirst$mcZF$sp__T1 = typing.TypeVar('_mapFirst$mcZF$sp__T1')  # <T1>
    def mapFirst$mcZF$sp(self, f: scala.Function1[typing.Any, _mapFirst.mcZF.sp__T1], evidence$18: scalan.RType[_mapFirst.mcZF.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcZF.sp__T1, typing.Any]]: ...
    _mapFirst$mcZI$sp__T1 = typing.TypeVar('_mapFirst$mcZI$sp__T1')  # <T1>
    def mapFirst$mcZI$sp(self, f: scala.Function1[typing.Any, _mapFirst.mcZI.sp__T1], evidence$18: scalan.RType[_mapFirst.mcZI.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcZI.sp__T1, typing.Any]]: ...
    _mapFirst$mcZJ$sp__T1 = typing.TypeVar('_mapFirst$mcZJ$sp__T1')  # <T1>
    def mapFirst$mcZJ$sp(self, f: scala.Function1[typing.Any, _mapFirst.mcZJ.sp__T1], evidence$18: scalan.RType[_mapFirst.mcZJ.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcZJ.sp__T1, typing.Any]]: ...
    _mapFirst$mcZS$sp__T1 = typing.TypeVar('_mapFirst$mcZS$sp__T1')  # <T1>
    def mapFirst$mcZS$sp(self, f: scala.Function1[typing.Any, _mapFirst.mcZS.sp__T1], evidence$18: scalan.RType[_mapFirst.mcZS.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcZS.sp__T1, typing.Any]]: ...
    _mapFirst$mcZV$sp__T1 = typing.TypeVar('_mapFirst$mcZV$sp__T1')  # <T1>
    def mapFirst$mcZV$sp(self, f: scala.Function1[typing.Any, _mapFirst.mcZV.sp__T1], evidence$18: scalan.RType[_mapFirst.mcZV.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcZV.sp__T1, scala.runtime.BoxedUnit]]: ...
    _mapFirst$mcZZ$sp__T1 = typing.TypeVar('_mapFirst$mcZZ$sp__T1')  # <T1>
    def mapFirst$mcZZ$sp(self, f: scala.Function1[typing.Any, _mapFirst.mcZZ.sp__T1], evidence$18: scalan.RType[_mapFirst.mcZZ.sp__T1]) -> Coll[scala.Tuple2[_mapFirst.mcZZ.sp__T1, typing.Any]]: ...
    _mapReduce__K = typing.TypeVar('_mapReduce__K')  # <K>
    _mapReduce__V = typing.TypeVar('_mapReduce__V')  # <V>
    def mapReduce(self, m: scala.Function1[scala.Tuple2[_PairOfCols__L, _PairOfCols__R], scala.Tuple2[_mapReduce__K, _mapReduce__V]], r: scala.Function1[scala.Tuple2[_mapReduce__V, _mapReduce__V], _mapReduce__V], evidence$16: scalan.RType[_mapReduce__K], evidence$17: scalan.RType[_mapReduce__V]) -> Coll[scala.Tuple2[_mapReduce__K, _mapReduce__V]]: ...
    _mapReduce$mcB$sp__K = typing.TypeVar('_mapReduce$mcB$sp__K')  # <K>
    _mapReduce$mcB$sp__V = typing.TypeVar('_mapReduce$mcB$sp__V')  # <V>
    def mapReduce$mcB$sp(self, m: scala.Function1[typing.Any, scala.Tuple2[_mapReduce.mcB.sp__K, _mapReduce.mcB.sp__V]], r: scala.Function1[scala.Tuple2[_mapReduce.mcB.sp__V, _mapReduce.mcB.sp__V], _mapReduce.mcB.sp__V], evidence$3: scalan.RType[_mapReduce.mcB.sp__K], evidence$4: scalan.RType[_mapReduce.mcB.sp__V]) -> Coll[scala.Tuple2[_mapReduce.mcB.sp__K, _mapReduce.mcB.sp__V]]: ...
    _mapReduce$mcBB$sp__K = typing.TypeVar('_mapReduce$mcBB$sp__K')  # <K>
    _mapReduce$mcBB$sp__V = typing.TypeVar('_mapReduce$mcBB$sp__V')  # <V>
    def mapReduce$mcBB$sp(self, m: scala.Function1[scala.Tuple2[typing.Any, typing.Any], scala.Tuple2[_mapReduce.mcBB.sp__K, _mapReduce.mcBB.sp__V]], r: scala.Function1[scala.Tuple2[_mapReduce.mcBB.sp__V, _mapReduce.mcBB.sp__V], _mapReduce.mcBB.sp__V], evidence$16: scalan.RType[_mapReduce.mcBB.sp__K], evidence$17: scalan.RType[_mapReduce.mcBB.sp__V]) -> Coll[scala.Tuple2[_mapReduce.mcBB.sp__K, _mapReduce.mcBB.sp__V]]: ...
    _mapReduce$mcBC$sp__K = typing.TypeVar('_mapReduce$mcBC$sp__K')  # <K>
    _mapReduce$mcBC$sp__V = typing.TypeVar('_mapReduce$mcBC$sp__V')  # <V>
    def mapReduce$mcBC$sp(self, m: scala.Function1[scala.Tuple2[typing.Any, typing.Any], scala.Tuple2[_mapReduce.mcBC.sp__K, _mapReduce.mcBC.sp__V]], r: scala.Function1[scala.Tuple2[_mapReduce.mcBC.sp__V, _mapReduce.mcBC.sp__V], _mapReduce.mcBC.sp__V], evidence$16: scalan.RType[_mapReduce.mcBC.sp__K], evidence$17: scalan.RType[_mapReduce.mcBC.sp__V]) -> Coll[scala.Tuple2[_mapReduce.mcBC.sp__K, _mapReduce.mcBC.sp__V]]: ...
    _mapReduce$mcBD$sp__K = typing.TypeVar('_mapReduce$mcBD$sp__K')  # <K>
    _mapReduce$mcBD$sp__V = typing.TypeVar('_mapReduce$mcBD$sp__V')  # <V>
    def mapReduce$mcBD$sp(self, m: scala.Function1[scala.Tuple2[typing.Any, typing.Any], scala.Tuple2[_mapReduce.mcBD.sp__K, _mapReduce.mcBD.sp__V]], r: scala.Function1[scala.Tuple2[_mapReduce.mcBD.sp__V, _mapReduce.mcBD.sp__V], _mapReduce.mcBD.sp__V], evidence$16: scalan.RType[_mapReduce.mcBD.sp__K], evidence$17: scalan.RType[_mapReduce.mcBD.sp__V]) -> Coll[scala.Tuple2[_mapReduce.mcBD.sp__K, _mapReduce.mcBD.sp__V]]: ...
    _mapReduce$mcBF$sp__K = typing.TypeVar('_mapReduce$mcBF$sp__K')  # <K>
    _mapReduce$mcBF$sp__V = typing.TypeVar('_mapReduce$mcBF$sp__V')  # <V>
    def mapReduce$mcBF$sp(self, m: scala.Function1[scala.Tuple2[typing.Any, typing.Any], scala.Tuple2[_mapReduce.mcBF.sp__K, _mapReduce.mcBF.sp__V]], r: scala.Function1[scala.Tuple2[_mapReduce.mcBF.sp__V, _mapReduce.mcBF.sp__V], _mapReduce.mcBF.sp__V], evidence$16: scalan.RType[_mapReduce.mcBF.sp__K], evidence$17: scalan.RType[_mapReduce.mcBF.sp__V]) -> Coll[scala.Tuple2[_mapReduce.mcBF.sp__K, _mapReduce.mcBF.sp__V]]: ...
    _mapReduce$mcBI$sp__K = typing.TypeVar('_mapReduce$mcBI$sp__K')  # <K>
    _mapReduce$mcBI$sp__V = typing.TypeVar('_mapReduce$mcBI$sp__V')  # <V>
    def mapReduce$mcBI$sp(self, m: scala.Function1[scala.Tuple2[typing.Any, typing.Any], scala.Tuple2[_mapReduce.mcBI.sp__K, _mapReduce.mcBI.sp__V]], r: scala.Function1[scala.Tuple2[_mapReduce.mcBI.sp__V, _mapReduce.mcBI.sp__V], _mapReduce.mcBI.sp__V], evidence$16: scalan.RType[_mapReduce.mcBI.sp__K], evidence$17: scalan.RType[_mapReduce.mcBI.sp__V]) -> Coll[scala.Tuple2[_mapReduce.mcBI.sp__K, _mapReduce.mcBI.sp__V]]: ...
    _mapReduce$mcBJ$sp__K = typing.TypeVar('_mapReduce$mcBJ$sp__K')  # <K>
    _mapReduce$mcBJ$sp__V = typing.TypeVar('_mapReduce$mcBJ$sp__V')  # <V>
    def mapReduce$mcBJ$sp(self, m: scala.Function1[scala.Tuple2[typing.Any, typing.Any], scala.Tuple2[_mapReduce.mcBJ.sp__K, _mapReduce.mcBJ.sp__V]], r: scala.Function1[scala.Tuple2[_mapReduce.mcBJ.sp__V, _mapReduce.mcBJ.sp__V], _mapReduce.mcBJ.sp__V], evidence$16: scalan.RType[_mapReduce.mcBJ.sp__K], evidence$17: scalan.RType[_mapReduce.mcBJ.sp__V]) -> Coll[scala.Tuple2[_mapReduce.mcBJ.sp__K, _mapReduce.mcBJ.sp__V]]: ...
    _mapReduce$mcBS$sp__K = typing.TypeVar('_mapReduce$mcBS$sp__K')  # <K>
    _mapReduce$mcBS$sp__V = typing.TypeVar('_mapReduce$mcBS$sp__V')  # <V>
    def mapReduce$mcBS$sp(self, m: scala.Function1[scala.Tuple2[typing.Any, typing.Any], scala.Tuple2[_mapReduce.mcBS.sp__K, _mapReduce.mcBS.sp__V]], r: scala.Function1[scala.Tuple2[_mapReduce.mcBS.sp__V, _mapReduce.mcBS.sp__V], _mapReduce.mcBS.sp__V], evidence$16: scalan.RType[_mapReduce.mcBS.sp__K], evidence$17: scalan.RType[_mapReduce.mcBS.sp__V]) -> Coll[scala.Tuple2[_mapReduce.mcBS.sp__K, _mapReduce.mcBS.sp__V]]: ...
    _mapReduce$mcBV$sp__K = typing.TypeVar('_mapReduce$mcBV$sp__K')  # <K>
    _mapReduce$mcBV$sp__V = typing.TypeVar('_mapReduce$mcBV$sp__V')  # <V>
    def mapReduce$mcBV$sp(self, m: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], scala.Tuple2[_mapReduce.mcBV.sp__K, _mapReduce.mcBV.sp__V]], r: scala.Function1[scala.Tuple2[_mapReduce.mcBV.sp__V, _mapReduce.mcBV.sp__V], _mapReduce.mcBV.sp__V], evidence$16: scalan.RType[_mapReduce.mcBV.sp__K], evidence$17: scalan.RType[_mapReduce.mcBV.sp__V]) -> Coll[scala.Tuple2[_mapReduce.mcBV.sp__K, _mapReduce.mcBV.sp__V]]: ...
    _mapReduce$mcBZ$sp__K = typing.TypeVar('_mapReduce$mcBZ$sp__K')  # <K>
    _mapReduce$mcBZ$sp__V = typing.TypeVar('_mapReduce$mcBZ$sp__V')  # <V>
    def mapReduce$mcBZ$sp(self, m: scala.Function1[scala.Tuple2[typing.Any, typing.Any], scala.Tuple2[_mapReduce.mcBZ.sp__K, _mapReduce.mcBZ.sp__V]], r: scala.Function1[scala.Tuple2[_mapReduce.mcBZ.sp__V, _mapReduce.mcBZ.sp__V], _mapReduce.mcBZ.sp__V], evidence$16: scalan.RType[_mapReduce.mcBZ.sp__K], evidence$17: scalan.RType[_mapReduce.mcBZ.sp__V]) -> Coll[scala.Tuple2[_mapReduce.mcBZ.sp__K, _mapReduce.mcBZ.sp__V]]: ...
    _mapReduce$mcC$sp__K = typing.TypeVar('_mapReduce$mcC$sp__K')  # <K>
    _mapReduce$mcC$sp__V = typing.TypeVar('_mapReduce$mcC$sp__V')  # <V>
    def mapReduce$mcC$sp(self, m: scala.Function1[typing.Any, scala.Tuple2[_mapReduce.mcC.sp__K, _mapReduce.mcC.sp__V]], r: scala.Function1[scala.Tuple2[_mapReduce.mcC.sp__V, _mapReduce.mcC.sp__V], _mapReduce.mcC.sp__V], evidence$3: scalan.RType[_mapReduce.mcC.sp__K], evidence$4: scalan.RType[_mapReduce.mcC.sp__V]) -> Coll[scala.Tuple2[_mapReduce.mcC.sp__K, _mapReduce.mcC.sp__V]]: ...
    _mapReduce$mcCB$sp__K = typing.TypeVar('_mapReduce$mcCB$sp__K')  # <K>
    _mapReduce$mcCB$sp__V = typing.TypeVar('_mapReduce$mcCB$sp__V')  # <V>
    def mapReduce$mcCB$sp(self, m: scala.Function1[scala.Tuple2[typing.Any, typing.Any], scala.Tuple2[_mapReduce.mcCB.sp__K, _mapReduce.mcCB.sp__V]], r: scala.Function1[scala.Tuple2[_mapReduce.mcCB.sp__V, _mapReduce.mcCB.sp__V], _mapReduce.mcCB.sp__V], evidence$16: scalan.RType[_mapReduce.mcCB.sp__K], evidence$17: scalan.RType[_mapReduce.mcCB.sp__V]) -> Coll[scala.Tuple2[_mapReduce.mcCB.sp__K, _mapReduce.mcCB.sp__V]]: ...
    _mapReduce$mcCC$sp__K = typing.TypeVar('_mapReduce$mcCC$sp__K')  # <K>
    _mapReduce$mcCC$sp__V = typing.TypeVar('_mapReduce$mcCC$sp__V')  # <V>
    def mapReduce$mcCC$sp(self, m: scala.Function1[scala.Tuple2[typing.Any, typing.Any], scala.Tuple2[_mapReduce.mcCC.sp__K, _mapReduce.mcCC.sp__V]], r: scala.Function1[scala.Tuple2[_mapReduce.mcCC.sp__V, _mapReduce.mcCC.sp__V], _mapReduce.mcCC.sp__V], evidence$16: scalan.RType[_mapReduce.mcCC.sp__K], evidence$17: scalan.RType[_mapReduce.mcCC.sp__V]) -> Coll[scala.Tuple2[_mapReduce.mcCC.sp__K, _mapReduce.mcCC.sp__V]]: ...
    _mapReduce$mcCD$sp__K = typing.TypeVar('_mapReduce$mcCD$sp__K')  # <K>
    _mapReduce$mcCD$sp__V = typing.TypeVar('_mapReduce$mcCD$sp__V')  # <V>
    def mapReduce$mcCD$sp(self, m: scala.Function1[scala.Tuple2[typing.Any, typing.Any], scala.Tuple2[_mapReduce.mcCD.sp__K, _mapReduce.mcCD.sp__V]], r: scala.Function1[scala.Tuple2[_mapReduce.mcCD.sp__V, _mapReduce.mcCD.sp__V], _mapReduce.mcCD.sp__V], evidence$16: scalan.RType[_mapReduce.mcCD.sp__K], evidence$17: scalan.RType[_mapReduce.mcCD.sp__V]) -> Coll[scala.Tuple2[_mapReduce.mcCD.sp__K, _mapReduce.mcCD.sp__V]]: ...
    _mapReduce$mcCF$sp__K = typing.TypeVar('_mapReduce$mcCF$sp__K')  # <K>
    _mapReduce$mcCF$sp__V = typing.TypeVar('_mapReduce$mcCF$sp__V')  # <V>
    def mapReduce$mcCF$sp(self, m: scala.Function1[scala.Tuple2[typing.Any, typing.Any], scala.Tuple2[_mapReduce.mcCF.sp__K, _mapReduce.mcCF.sp__V]], r: scala.Function1[scala.Tuple2[_mapReduce.mcCF.sp__V, _mapReduce.mcCF.sp__V], _mapReduce.mcCF.sp__V], evidence$16: scalan.RType[_mapReduce.mcCF.sp__K], evidence$17: scalan.RType[_mapReduce.mcCF.sp__V]) -> Coll[scala.Tuple2[_mapReduce.mcCF.sp__K, _mapReduce.mcCF.sp__V]]: ...
    _mapReduce$mcCI$sp__K = typing.TypeVar('_mapReduce$mcCI$sp__K')  # <K>
    _mapReduce$mcCI$sp__V = typing.TypeVar('_mapReduce$mcCI$sp__V')  # <V>
    def mapReduce$mcCI$sp(self, m: scala.Function1[scala.Tuple2[typing.Any, typing.Any], scala.Tuple2[_mapReduce.mcCI.sp__K, _mapReduce.mcCI.sp__V]], r: scala.Function1[scala.Tuple2[_mapReduce.mcCI.sp__V, _mapReduce.mcCI.sp__V], _mapReduce.mcCI.sp__V], evidence$16: scalan.RType[_mapReduce.mcCI.sp__K], evidence$17: scalan.RType[_mapReduce.mcCI.sp__V]) -> Coll[scala.Tuple2[_mapReduce.mcCI.sp__K, _mapReduce.mcCI.sp__V]]: ...
    _mapReduce$mcCJ$sp__K = typing.TypeVar('_mapReduce$mcCJ$sp__K')  # <K>
    _mapReduce$mcCJ$sp__V = typing.TypeVar('_mapReduce$mcCJ$sp__V')  # <V>
    def mapReduce$mcCJ$sp(self, m: scala.Function1[scala.Tuple2[typing.Any, typing.Any], scala.Tuple2[_mapReduce.mcCJ.sp__K, _mapReduce.mcCJ.sp__V]], r: scala.Function1[scala.Tuple2[_mapReduce.mcCJ.sp__V, _mapReduce.mcCJ.sp__V], _mapReduce.mcCJ.sp__V], evidence$16: scalan.RType[_mapReduce.mcCJ.sp__K], evidence$17: scalan.RType[_mapReduce.mcCJ.sp__V]) -> Coll[scala.Tuple2[_mapReduce.mcCJ.sp__K, _mapReduce.mcCJ.sp__V]]: ...
    _mapReduce$mcCS$sp__K = typing.TypeVar('_mapReduce$mcCS$sp__K')  # <K>
    _mapReduce$mcCS$sp__V = typing.TypeVar('_mapReduce$mcCS$sp__V')  # <V>
    def mapReduce$mcCS$sp(self, m: scala.Function1[scala.Tuple2[typing.Any, typing.Any], scala.Tuple2[_mapReduce.mcCS.sp__K, _mapReduce.mcCS.sp__V]], r: scala.Function1[scala.Tuple2[_mapReduce.mcCS.sp__V, _mapReduce.mcCS.sp__V], _mapReduce.mcCS.sp__V], evidence$16: scalan.RType[_mapReduce.mcCS.sp__K], evidence$17: scalan.RType[_mapReduce.mcCS.sp__V]) -> Coll[scala.Tuple2[_mapReduce.mcCS.sp__K, _mapReduce.mcCS.sp__V]]: ...
    _mapReduce$mcCV$sp__K = typing.TypeVar('_mapReduce$mcCV$sp__K')  # <K>
    _mapReduce$mcCV$sp__V = typing.TypeVar('_mapReduce$mcCV$sp__V')  # <V>
    def mapReduce$mcCV$sp(self, m: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], scala.Tuple2[_mapReduce.mcCV.sp__K, _mapReduce.mcCV.sp__V]], r: scala.Function1[scala.Tuple2[_mapReduce.mcCV.sp__V, _mapReduce.mcCV.sp__V], _mapReduce.mcCV.sp__V], evidence$16: scalan.RType[_mapReduce.mcCV.sp__K], evidence$17: scalan.RType[_mapReduce.mcCV.sp__V]) -> Coll[scala.Tuple2[_mapReduce.mcCV.sp__K, _mapReduce.mcCV.sp__V]]: ...
    _mapReduce$mcCZ$sp__K = typing.TypeVar('_mapReduce$mcCZ$sp__K')  # <K>
    _mapReduce$mcCZ$sp__V = typing.TypeVar('_mapReduce$mcCZ$sp__V')  # <V>
    def mapReduce$mcCZ$sp(self, m: scala.Function1[scala.Tuple2[typing.Any, typing.Any], scala.Tuple2[_mapReduce.mcCZ.sp__K, _mapReduce.mcCZ.sp__V]], r: scala.Function1[scala.Tuple2[_mapReduce.mcCZ.sp__V, _mapReduce.mcCZ.sp__V], _mapReduce.mcCZ.sp__V], evidence$16: scalan.RType[_mapReduce.mcCZ.sp__K], evidence$17: scalan.RType[_mapReduce.mcCZ.sp__V]) -> Coll[scala.Tuple2[_mapReduce.mcCZ.sp__K, _mapReduce.mcCZ.sp__V]]: ...
    _mapReduce$mcD$sp__K = typing.TypeVar('_mapReduce$mcD$sp__K')  # <K>
    _mapReduce$mcD$sp__V = typing.TypeVar('_mapReduce$mcD$sp__V')  # <V>
    def mapReduce$mcD$sp(self, m: scala.Function1[typing.Any, scala.Tuple2[_mapReduce.mcD.sp__K, _mapReduce.mcD.sp__V]], r: scala.Function1[scala.Tuple2[_mapReduce.mcD.sp__V, _mapReduce.mcD.sp__V], _mapReduce.mcD.sp__V], evidence$3: scalan.RType[_mapReduce.mcD.sp__K], evidence$4: scalan.RType[_mapReduce.mcD.sp__V]) -> Coll[scala.Tuple2[_mapReduce.mcD.sp__K, _mapReduce.mcD.sp__V]]: ...
    _mapReduce$mcDB$sp__K = typing.TypeVar('_mapReduce$mcDB$sp__K')  # <K>
    _mapReduce$mcDB$sp__V = typing.TypeVar('_mapReduce$mcDB$sp__V')  # <V>
    def mapReduce$mcDB$sp(self, m: scala.Function1[scala.Tuple2[typing.Any, typing.Any], scala.Tuple2[_mapReduce.mcDB.sp__K, _mapReduce.mcDB.sp__V]], r: scala.Function1[scala.Tuple2[_mapReduce.mcDB.sp__V, _mapReduce.mcDB.sp__V], _mapReduce.mcDB.sp__V], evidence$16: scalan.RType[_mapReduce.mcDB.sp__K], evidence$17: scalan.RType[_mapReduce.mcDB.sp__V]) -> Coll[scala.Tuple2[_mapReduce.mcDB.sp__K, _mapReduce.mcDB.sp__V]]: ...
    _mapReduce$mcDC$sp__K = typing.TypeVar('_mapReduce$mcDC$sp__K')  # <K>
    _mapReduce$mcDC$sp__V = typing.TypeVar('_mapReduce$mcDC$sp__V')  # <V>
    def mapReduce$mcDC$sp(self, m: scala.Function1[scala.Tuple2[typing.Any, typing.Any], scala.Tuple2[_mapReduce.mcDC.sp__K, _mapReduce.mcDC.sp__V]], r: scala.Function1[scala.Tuple2[_mapReduce.mcDC.sp__V, _mapReduce.mcDC.sp__V], _mapReduce.mcDC.sp__V], evidence$16: scalan.RType[_mapReduce.mcDC.sp__K], evidence$17: scalan.RType[_mapReduce.mcDC.sp__V]) -> Coll[scala.Tuple2[_mapReduce.mcDC.sp__K, _mapReduce.mcDC.sp__V]]: ...
    _mapReduce$mcDD$sp__K = typing.TypeVar('_mapReduce$mcDD$sp__K')  # <K>
    _mapReduce$mcDD$sp__V = typing.TypeVar('_mapReduce$mcDD$sp__V')  # <V>
    def mapReduce$mcDD$sp(self, m: scala.Function1[scala.Tuple2[typing.Any, typing.Any], scala.Tuple2[_mapReduce.mcDD.sp__K, _mapReduce.mcDD.sp__V]], r: scala.Function1[scala.Tuple2[_mapReduce.mcDD.sp__V, _mapReduce.mcDD.sp__V], _mapReduce.mcDD.sp__V], evidence$16: scalan.RType[_mapReduce.mcDD.sp__K], evidence$17: scalan.RType[_mapReduce.mcDD.sp__V]) -> Coll[scala.Tuple2[_mapReduce.mcDD.sp__K, _mapReduce.mcDD.sp__V]]: ...
    _mapReduce$mcDF$sp__K = typing.TypeVar('_mapReduce$mcDF$sp__K')  # <K>
    _mapReduce$mcDF$sp__V = typing.TypeVar('_mapReduce$mcDF$sp__V')  # <V>
    def mapReduce$mcDF$sp(self, m: scala.Function1[scala.Tuple2[typing.Any, typing.Any], scala.Tuple2[_mapReduce.mcDF.sp__K, _mapReduce.mcDF.sp__V]], r: scala.Function1[scala.Tuple2[_mapReduce.mcDF.sp__V, _mapReduce.mcDF.sp__V], _mapReduce.mcDF.sp__V], evidence$16: scalan.RType[_mapReduce.mcDF.sp__K], evidence$17: scalan.RType[_mapReduce.mcDF.sp__V]) -> Coll[scala.Tuple2[_mapReduce.mcDF.sp__K, _mapReduce.mcDF.sp__V]]: ...
    _mapReduce$mcDI$sp__K = typing.TypeVar('_mapReduce$mcDI$sp__K')  # <K>
    _mapReduce$mcDI$sp__V = typing.TypeVar('_mapReduce$mcDI$sp__V')  # <V>
    def mapReduce$mcDI$sp(self, m: scala.Function1[scala.Tuple2[typing.Any, typing.Any], scala.Tuple2[_mapReduce.mcDI.sp__K, _mapReduce.mcDI.sp__V]], r: scala.Function1[scala.Tuple2[_mapReduce.mcDI.sp__V, _mapReduce.mcDI.sp__V], _mapReduce.mcDI.sp__V], evidence$16: scalan.RType[_mapReduce.mcDI.sp__K], evidence$17: scalan.RType[_mapReduce.mcDI.sp__V]) -> Coll[scala.Tuple2[_mapReduce.mcDI.sp__K, _mapReduce.mcDI.sp__V]]: ...
    _mapReduce$mcDJ$sp__K = typing.TypeVar('_mapReduce$mcDJ$sp__K')  # <K>
    _mapReduce$mcDJ$sp__V = typing.TypeVar('_mapReduce$mcDJ$sp__V')  # <V>
    def mapReduce$mcDJ$sp(self, m: scala.Function1[scala.Tuple2[typing.Any, typing.Any], scala.Tuple2[_mapReduce.mcDJ.sp__K, _mapReduce.mcDJ.sp__V]], r: scala.Function1[scala.Tuple2[_mapReduce.mcDJ.sp__V, _mapReduce.mcDJ.sp__V], _mapReduce.mcDJ.sp__V], evidence$16: scalan.RType[_mapReduce.mcDJ.sp__K], evidence$17: scalan.RType[_mapReduce.mcDJ.sp__V]) -> Coll[scala.Tuple2[_mapReduce.mcDJ.sp__K, _mapReduce.mcDJ.sp__V]]: ...
    _mapReduce$mcDS$sp__K = typing.TypeVar('_mapReduce$mcDS$sp__K')  # <K>
    _mapReduce$mcDS$sp__V = typing.TypeVar('_mapReduce$mcDS$sp__V')  # <V>
    def mapReduce$mcDS$sp(self, m: scala.Function1[scala.Tuple2[typing.Any, typing.Any], scala.Tuple2[_mapReduce.mcDS.sp__K, _mapReduce.mcDS.sp__V]], r: scala.Function1[scala.Tuple2[_mapReduce.mcDS.sp__V, _mapReduce.mcDS.sp__V], _mapReduce.mcDS.sp__V], evidence$16: scalan.RType[_mapReduce.mcDS.sp__K], evidence$17: scalan.RType[_mapReduce.mcDS.sp__V]) -> Coll[scala.Tuple2[_mapReduce.mcDS.sp__K, _mapReduce.mcDS.sp__V]]: ...
    _mapReduce$mcDV$sp__K = typing.TypeVar('_mapReduce$mcDV$sp__K')  # <K>
    _mapReduce$mcDV$sp__V = typing.TypeVar('_mapReduce$mcDV$sp__V')  # <V>
    def mapReduce$mcDV$sp(self, m: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], scala.Tuple2[_mapReduce.mcDV.sp__K, _mapReduce.mcDV.sp__V]], r: scala.Function1[scala.Tuple2[_mapReduce.mcDV.sp__V, _mapReduce.mcDV.sp__V], _mapReduce.mcDV.sp__V], evidence$16: scalan.RType[_mapReduce.mcDV.sp__K], evidence$17: scalan.RType[_mapReduce.mcDV.sp__V]) -> Coll[scala.Tuple2[_mapReduce.mcDV.sp__K, _mapReduce.mcDV.sp__V]]: ...
    _mapReduce$mcDZ$sp__K = typing.TypeVar('_mapReduce$mcDZ$sp__K')  # <K>
    _mapReduce$mcDZ$sp__V = typing.TypeVar('_mapReduce$mcDZ$sp__V')  # <V>
    def mapReduce$mcDZ$sp(self, m: scala.Function1[scala.Tuple2[typing.Any, typing.Any], scala.Tuple2[_mapReduce.mcDZ.sp__K, _mapReduce.mcDZ.sp__V]], r: scala.Function1[scala.Tuple2[_mapReduce.mcDZ.sp__V, _mapReduce.mcDZ.sp__V], _mapReduce.mcDZ.sp__V], evidence$16: scalan.RType[_mapReduce.mcDZ.sp__K], evidence$17: scalan.RType[_mapReduce.mcDZ.sp__V]) -> Coll[scala.Tuple2[_mapReduce.mcDZ.sp__K, _mapReduce.mcDZ.sp__V]]: ...
    _mapReduce$mcF$sp__K = typing.TypeVar('_mapReduce$mcF$sp__K')  # <K>
    _mapReduce$mcF$sp__V = typing.TypeVar('_mapReduce$mcF$sp__V')  # <V>
    def mapReduce$mcF$sp(self, m: scala.Function1[typing.Any, scala.Tuple2[_mapReduce.mcF.sp__K, _mapReduce.mcF.sp__V]], r: scala.Function1[scala.Tuple2[_mapReduce.mcF.sp__V, _mapReduce.mcF.sp__V], _mapReduce.mcF.sp__V], evidence$3: scalan.RType[_mapReduce.mcF.sp__K], evidence$4: scalan.RType[_mapReduce.mcF.sp__V]) -> Coll[scala.Tuple2[_mapReduce.mcF.sp__K, _mapReduce.mcF.sp__V]]: ...
    _mapReduce$mcFB$sp__K = typing.TypeVar('_mapReduce$mcFB$sp__K')  # <K>
    _mapReduce$mcFB$sp__V = typing.TypeVar('_mapReduce$mcFB$sp__V')  # <V>
    def mapReduce$mcFB$sp(self, m: scala.Function1[scala.Tuple2[typing.Any, typing.Any], scala.Tuple2[_mapReduce.mcFB.sp__K, _mapReduce.mcFB.sp__V]], r: scala.Function1[scala.Tuple2[_mapReduce.mcFB.sp__V, _mapReduce.mcFB.sp__V], _mapReduce.mcFB.sp__V], evidence$16: scalan.RType[_mapReduce.mcFB.sp__K], evidence$17: scalan.RType[_mapReduce.mcFB.sp__V]) -> Coll[scala.Tuple2[_mapReduce.mcFB.sp__K, _mapReduce.mcFB.sp__V]]: ...
    _mapReduce$mcFC$sp__K = typing.TypeVar('_mapReduce$mcFC$sp__K')  # <K>
    _mapReduce$mcFC$sp__V = typing.TypeVar('_mapReduce$mcFC$sp__V')  # <V>
    def mapReduce$mcFC$sp(self, m: scala.Function1[scala.Tuple2[typing.Any, typing.Any], scala.Tuple2[_mapReduce.mcFC.sp__K, _mapReduce.mcFC.sp__V]], r: scala.Function1[scala.Tuple2[_mapReduce.mcFC.sp__V, _mapReduce.mcFC.sp__V], _mapReduce.mcFC.sp__V], evidence$16: scalan.RType[_mapReduce.mcFC.sp__K], evidence$17: scalan.RType[_mapReduce.mcFC.sp__V]) -> Coll[scala.Tuple2[_mapReduce.mcFC.sp__K, _mapReduce.mcFC.sp__V]]: ...
    _mapReduce$mcFD$sp__K = typing.TypeVar('_mapReduce$mcFD$sp__K')  # <K>
    _mapReduce$mcFD$sp__V = typing.TypeVar('_mapReduce$mcFD$sp__V')  # <V>
    def mapReduce$mcFD$sp(self, m: scala.Function1[scala.Tuple2[typing.Any, typing.Any], scala.Tuple2[_mapReduce.mcFD.sp__K, _mapReduce.mcFD.sp__V]], r: scala.Function1[scala.Tuple2[_mapReduce.mcFD.sp__V, _mapReduce.mcFD.sp__V], _mapReduce.mcFD.sp__V], evidence$16: scalan.RType[_mapReduce.mcFD.sp__K], evidence$17: scalan.RType[_mapReduce.mcFD.sp__V]) -> Coll[scala.Tuple2[_mapReduce.mcFD.sp__K, _mapReduce.mcFD.sp__V]]: ...
    _mapReduce$mcFF$sp__K = typing.TypeVar('_mapReduce$mcFF$sp__K')  # <K>
    _mapReduce$mcFF$sp__V = typing.TypeVar('_mapReduce$mcFF$sp__V')  # <V>
    def mapReduce$mcFF$sp(self, m: scala.Function1[scala.Tuple2[typing.Any, typing.Any], scala.Tuple2[_mapReduce.mcFF.sp__K, _mapReduce.mcFF.sp__V]], r: scala.Function1[scala.Tuple2[_mapReduce.mcFF.sp__V, _mapReduce.mcFF.sp__V], _mapReduce.mcFF.sp__V], evidence$16: scalan.RType[_mapReduce.mcFF.sp__K], evidence$17: scalan.RType[_mapReduce.mcFF.sp__V]) -> Coll[scala.Tuple2[_mapReduce.mcFF.sp__K, _mapReduce.mcFF.sp__V]]: ...
    _mapReduce$mcFI$sp__K = typing.TypeVar('_mapReduce$mcFI$sp__K')  # <K>
    _mapReduce$mcFI$sp__V = typing.TypeVar('_mapReduce$mcFI$sp__V')  # <V>
    def mapReduce$mcFI$sp(self, m: scala.Function1[scala.Tuple2[typing.Any, typing.Any], scala.Tuple2[_mapReduce.mcFI.sp__K, _mapReduce.mcFI.sp__V]], r: scala.Function1[scala.Tuple2[_mapReduce.mcFI.sp__V, _mapReduce.mcFI.sp__V], _mapReduce.mcFI.sp__V], evidence$16: scalan.RType[_mapReduce.mcFI.sp__K], evidence$17: scalan.RType[_mapReduce.mcFI.sp__V]) -> Coll[scala.Tuple2[_mapReduce.mcFI.sp__K, _mapReduce.mcFI.sp__V]]: ...
    _mapReduce$mcFJ$sp__K = typing.TypeVar('_mapReduce$mcFJ$sp__K')  # <K>
    _mapReduce$mcFJ$sp__V = typing.TypeVar('_mapReduce$mcFJ$sp__V')  # <V>
    def mapReduce$mcFJ$sp(self, m: scala.Function1[scala.Tuple2[typing.Any, typing.Any], scala.Tuple2[_mapReduce.mcFJ.sp__K, _mapReduce.mcFJ.sp__V]], r: scala.Function1[scala.Tuple2[_mapReduce.mcFJ.sp__V, _mapReduce.mcFJ.sp__V], _mapReduce.mcFJ.sp__V], evidence$16: scalan.RType[_mapReduce.mcFJ.sp__K], evidence$17: scalan.RType[_mapReduce.mcFJ.sp__V]) -> Coll[scala.Tuple2[_mapReduce.mcFJ.sp__K, _mapReduce.mcFJ.sp__V]]: ...
    _mapReduce$mcFS$sp__K = typing.TypeVar('_mapReduce$mcFS$sp__K')  # <K>
    _mapReduce$mcFS$sp__V = typing.TypeVar('_mapReduce$mcFS$sp__V')  # <V>
    def mapReduce$mcFS$sp(self, m: scala.Function1[scala.Tuple2[typing.Any, typing.Any], scala.Tuple2[_mapReduce.mcFS.sp__K, _mapReduce.mcFS.sp__V]], r: scala.Function1[scala.Tuple2[_mapReduce.mcFS.sp__V, _mapReduce.mcFS.sp__V], _mapReduce.mcFS.sp__V], evidence$16: scalan.RType[_mapReduce.mcFS.sp__K], evidence$17: scalan.RType[_mapReduce.mcFS.sp__V]) -> Coll[scala.Tuple2[_mapReduce.mcFS.sp__K, _mapReduce.mcFS.sp__V]]: ...
    _mapReduce$mcFV$sp__K = typing.TypeVar('_mapReduce$mcFV$sp__K')  # <K>
    _mapReduce$mcFV$sp__V = typing.TypeVar('_mapReduce$mcFV$sp__V')  # <V>
    def mapReduce$mcFV$sp(self, m: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], scala.Tuple2[_mapReduce.mcFV.sp__K, _mapReduce.mcFV.sp__V]], r: scala.Function1[scala.Tuple2[_mapReduce.mcFV.sp__V, _mapReduce.mcFV.sp__V], _mapReduce.mcFV.sp__V], evidence$16: scalan.RType[_mapReduce.mcFV.sp__K], evidence$17: scalan.RType[_mapReduce.mcFV.sp__V]) -> Coll[scala.Tuple2[_mapReduce.mcFV.sp__K, _mapReduce.mcFV.sp__V]]: ...
    _mapReduce$mcFZ$sp__K = typing.TypeVar('_mapReduce$mcFZ$sp__K')  # <K>
    _mapReduce$mcFZ$sp__V = typing.TypeVar('_mapReduce$mcFZ$sp__V')  # <V>
    def mapReduce$mcFZ$sp(self, m: scala.Function1[scala.Tuple2[typing.Any, typing.Any], scala.Tuple2[_mapReduce.mcFZ.sp__K, _mapReduce.mcFZ.sp__V]], r: scala.Function1[scala.Tuple2[_mapReduce.mcFZ.sp__V, _mapReduce.mcFZ.sp__V], _mapReduce.mcFZ.sp__V], evidence$16: scalan.RType[_mapReduce.mcFZ.sp__K], evidence$17: scalan.RType[_mapReduce.mcFZ.sp__V]) -> Coll[scala.Tuple2[_mapReduce.mcFZ.sp__K, _mapReduce.mcFZ.sp__V]]: ...
    _mapReduce$mcI$sp__K = typing.TypeVar('_mapReduce$mcI$sp__K')  # <K>
    _mapReduce$mcI$sp__V = typing.TypeVar('_mapReduce$mcI$sp__V')  # <V>
    def mapReduce$mcI$sp(self, m: scala.Function1[typing.Any, scala.Tuple2[_mapReduce.mcI.sp__K, _mapReduce.mcI.sp__V]], r: scala.Function1[scala.Tuple2[_mapReduce.mcI.sp__V, _mapReduce.mcI.sp__V], _mapReduce.mcI.sp__V], evidence$3: scalan.RType[_mapReduce.mcI.sp__K], evidence$4: scalan.RType[_mapReduce.mcI.sp__V]) -> Coll[scala.Tuple2[_mapReduce.mcI.sp__K, _mapReduce.mcI.sp__V]]: ...
    _mapReduce$mcIB$sp__K = typing.TypeVar('_mapReduce$mcIB$sp__K')  # <K>
    _mapReduce$mcIB$sp__V = typing.TypeVar('_mapReduce$mcIB$sp__V')  # <V>
    def mapReduce$mcIB$sp(self, m: scala.Function1[scala.Tuple2[typing.Any, typing.Any], scala.Tuple2[_mapReduce.mcIB.sp__K, _mapReduce.mcIB.sp__V]], r: scala.Function1[scala.Tuple2[_mapReduce.mcIB.sp__V, _mapReduce.mcIB.sp__V], _mapReduce.mcIB.sp__V], evidence$16: scalan.RType[_mapReduce.mcIB.sp__K], evidence$17: scalan.RType[_mapReduce.mcIB.sp__V]) -> Coll[scala.Tuple2[_mapReduce.mcIB.sp__K, _mapReduce.mcIB.sp__V]]: ...
    _mapReduce$mcIC$sp__K = typing.TypeVar('_mapReduce$mcIC$sp__K')  # <K>
    _mapReduce$mcIC$sp__V = typing.TypeVar('_mapReduce$mcIC$sp__V')  # <V>
    def mapReduce$mcIC$sp(self, m: scala.Function1[scala.Tuple2[typing.Any, typing.Any], scala.Tuple2[_mapReduce.mcIC.sp__K, _mapReduce.mcIC.sp__V]], r: scala.Function1[scala.Tuple2[_mapReduce.mcIC.sp__V, _mapReduce.mcIC.sp__V], _mapReduce.mcIC.sp__V], evidence$16: scalan.RType[_mapReduce.mcIC.sp__K], evidence$17: scalan.RType[_mapReduce.mcIC.sp__V]) -> Coll[scala.Tuple2[_mapReduce.mcIC.sp__K, _mapReduce.mcIC.sp__V]]: ...
    _mapReduce$mcID$sp__K = typing.TypeVar('_mapReduce$mcID$sp__K')  # <K>
    _mapReduce$mcID$sp__V = typing.TypeVar('_mapReduce$mcID$sp__V')  # <V>
    def mapReduce$mcID$sp(self, m: scala.Function1[scala.Tuple2[typing.Any, typing.Any], scala.Tuple2[_mapReduce.mcID.sp__K, _mapReduce.mcID.sp__V]], r: scala.Function1[scala.Tuple2[_mapReduce.mcID.sp__V, _mapReduce.mcID.sp__V], _mapReduce.mcID.sp__V], evidence$16: scalan.RType[_mapReduce.mcID.sp__K], evidence$17: scalan.RType[_mapReduce.mcID.sp__V]) -> Coll[scala.Tuple2[_mapReduce.mcID.sp__K, _mapReduce.mcID.sp__V]]: ...
    _mapReduce$mcIF$sp__K = typing.TypeVar('_mapReduce$mcIF$sp__K')  # <K>
    _mapReduce$mcIF$sp__V = typing.TypeVar('_mapReduce$mcIF$sp__V')  # <V>
    def mapReduce$mcIF$sp(self, m: scala.Function1[scala.Tuple2[typing.Any, typing.Any], scala.Tuple2[_mapReduce.mcIF.sp__K, _mapReduce.mcIF.sp__V]], r: scala.Function1[scala.Tuple2[_mapReduce.mcIF.sp__V, _mapReduce.mcIF.sp__V], _mapReduce.mcIF.sp__V], evidence$16: scalan.RType[_mapReduce.mcIF.sp__K], evidence$17: scalan.RType[_mapReduce.mcIF.sp__V]) -> Coll[scala.Tuple2[_mapReduce.mcIF.sp__K, _mapReduce.mcIF.sp__V]]: ...
    _mapReduce$mcII$sp__K = typing.TypeVar('_mapReduce$mcII$sp__K')  # <K>
    _mapReduce$mcII$sp__V = typing.TypeVar('_mapReduce$mcII$sp__V')  # <V>
    def mapReduce$mcII$sp(self, m: scala.Function1[scala.Tuple2[typing.Any, typing.Any], scala.Tuple2[_mapReduce.mcII.sp__K, _mapReduce.mcII.sp__V]], r: scala.Function1[scala.Tuple2[_mapReduce.mcII.sp__V, _mapReduce.mcII.sp__V], _mapReduce.mcII.sp__V], evidence$16: scalan.RType[_mapReduce.mcII.sp__K], evidence$17: scalan.RType[_mapReduce.mcII.sp__V]) -> Coll[scala.Tuple2[_mapReduce.mcII.sp__K, _mapReduce.mcII.sp__V]]: ...
    _mapReduce$mcIJ$sp__K = typing.TypeVar('_mapReduce$mcIJ$sp__K')  # <K>
    _mapReduce$mcIJ$sp__V = typing.TypeVar('_mapReduce$mcIJ$sp__V')  # <V>
    def mapReduce$mcIJ$sp(self, m: scala.Function1[scala.Tuple2[typing.Any, typing.Any], scala.Tuple2[_mapReduce.mcIJ.sp__K, _mapReduce.mcIJ.sp__V]], r: scala.Function1[scala.Tuple2[_mapReduce.mcIJ.sp__V, _mapReduce.mcIJ.sp__V], _mapReduce.mcIJ.sp__V], evidence$16: scalan.RType[_mapReduce.mcIJ.sp__K], evidence$17: scalan.RType[_mapReduce.mcIJ.sp__V]) -> Coll[scala.Tuple2[_mapReduce.mcIJ.sp__K, _mapReduce.mcIJ.sp__V]]: ...
    _mapReduce$mcIS$sp__K = typing.TypeVar('_mapReduce$mcIS$sp__K')  # <K>
    _mapReduce$mcIS$sp__V = typing.TypeVar('_mapReduce$mcIS$sp__V')  # <V>
    def mapReduce$mcIS$sp(self, m: scala.Function1[scala.Tuple2[typing.Any, typing.Any], scala.Tuple2[_mapReduce.mcIS.sp__K, _mapReduce.mcIS.sp__V]], r: scala.Function1[scala.Tuple2[_mapReduce.mcIS.sp__V, _mapReduce.mcIS.sp__V], _mapReduce.mcIS.sp__V], evidence$16: scalan.RType[_mapReduce.mcIS.sp__K], evidence$17: scalan.RType[_mapReduce.mcIS.sp__V]) -> Coll[scala.Tuple2[_mapReduce.mcIS.sp__K, _mapReduce.mcIS.sp__V]]: ...
    _mapReduce$mcIV$sp__K = typing.TypeVar('_mapReduce$mcIV$sp__K')  # <K>
    _mapReduce$mcIV$sp__V = typing.TypeVar('_mapReduce$mcIV$sp__V')  # <V>
    def mapReduce$mcIV$sp(self, m: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], scala.Tuple2[_mapReduce.mcIV.sp__K, _mapReduce.mcIV.sp__V]], r: scala.Function1[scala.Tuple2[_mapReduce.mcIV.sp__V, _mapReduce.mcIV.sp__V], _mapReduce.mcIV.sp__V], evidence$16: scalan.RType[_mapReduce.mcIV.sp__K], evidence$17: scalan.RType[_mapReduce.mcIV.sp__V]) -> Coll[scala.Tuple2[_mapReduce.mcIV.sp__K, _mapReduce.mcIV.sp__V]]: ...
    _mapReduce$mcIZ$sp__K = typing.TypeVar('_mapReduce$mcIZ$sp__K')  # <K>
    _mapReduce$mcIZ$sp__V = typing.TypeVar('_mapReduce$mcIZ$sp__V')  # <V>
    def mapReduce$mcIZ$sp(self, m: scala.Function1[scala.Tuple2[typing.Any, typing.Any], scala.Tuple2[_mapReduce.mcIZ.sp__K, _mapReduce.mcIZ.sp__V]], r: scala.Function1[scala.Tuple2[_mapReduce.mcIZ.sp__V, _mapReduce.mcIZ.sp__V], _mapReduce.mcIZ.sp__V], evidence$16: scalan.RType[_mapReduce.mcIZ.sp__K], evidence$17: scalan.RType[_mapReduce.mcIZ.sp__V]) -> Coll[scala.Tuple2[_mapReduce.mcIZ.sp__K, _mapReduce.mcIZ.sp__V]]: ...
    _mapReduce$mcJ$sp__K = typing.TypeVar('_mapReduce$mcJ$sp__K')  # <K>
    _mapReduce$mcJ$sp__V = typing.TypeVar('_mapReduce$mcJ$sp__V')  # <V>
    def mapReduce$mcJ$sp(self, m: scala.Function1[typing.Any, scala.Tuple2[_mapReduce.mcJ.sp__K, _mapReduce.mcJ.sp__V]], r: scala.Function1[scala.Tuple2[_mapReduce.mcJ.sp__V, _mapReduce.mcJ.sp__V], _mapReduce.mcJ.sp__V], evidence$3: scalan.RType[_mapReduce.mcJ.sp__K], evidence$4: scalan.RType[_mapReduce.mcJ.sp__V]) -> Coll[scala.Tuple2[_mapReduce.mcJ.sp__K, _mapReduce.mcJ.sp__V]]: ...
    _mapReduce$mcJB$sp__K = typing.TypeVar('_mapReduce$mcJB$sp__K')  # <K>
    _mapReduce$mcJB$sp__V = typing.TypeVar('_mapReduce$mcJB$sp__V')  # <V>
    def mapReduce$mcJB$sp(self, m: scala.Function1[scala.Tuple2[typing.Any, typing.Any], scala.Tuple2[_mapReduce.mcJB.sp__K, _mapReduce.mcJB.sp__V]], r: scala.Function1[scala.Tuple2[_mapReduce.mcJB.sp__V, _mapReduce.mcJB.sp__V], _mapReduce.mcJB.sp__V], evidence$16: scalan.RType[_mapReduce.mcJB.sp__K], evidence$17: scalan.RType[_mapReduce.mcJB.sp__V]) -> Coll[scala.Tuple2[_mapReduce.mcJB.sp__K, _mapReduce.mcJB.sp__V]]: ...
    _mapReduce$mcJC$sp__K = typing.TypeVar('_mapReduce$mcJC$sp__K')  # <K>
    _mapReduce$mcJC$sp__V = typing.TypeVar('_mapReduce$mcJC$sp__V')  # <V>
    def mapReduce$mcJC$sp(self, m: scala.Function1[scala.Tuple2[typing.Any, typing.Any], scala.Tuple2[_mapReduce.mcJC.sp__K, _mapReduce.mcJC.sp__V]], r: scala.Function1[scala.Tuple2[_mapReduce.mcJC.sp__V, _mapReduce.mcJC.sp__V], _mapReduce.mcJC.sp__V], evidence$16: scalan.RType[_mapReduce.mcJC.sp__K], evidence$17: scalan.RType[_mapReduce.mcJC.sp__V]) -> Coll[scala.Tuple2[_mapReduce.mcJC.sp__K, _mapReduce.mcJC.sp__V]]: ...
    _mapReduce$mcJD$sp__K = typing.TypeVar('_mapReduce$mcJD$sp__K')  # <K>
    _mapReduce$mcJD$sp__V = typing.TypeVar('_mapReduce$mcJD$sp__V')  # <V>
    def mapReduce$mcJD$sp(self, m: scala.Function1[scala.Tuple2[typing.Any, typing.Any], scala.Tuple2[_mapReduce.mcJD.sp__K, _mapReduce.mcJD.sp__V]], r: scala.Function1[scala.Tuple2[_mapReduce.mcJD.sp__V, _mapReduce.mcJD.sp__V], _mapReduce.mcJD.sp__V], evidence$16: scalan.RType[_mapReduce.mcJD.sp__K], evidence$17: scalan.RType[_mapReduce.mcJD.sp__V]) -> Coll[scala.Tuple2[_mapReduce.mcJD.sp__K, _mapReduce.mcJD.sp__V]]: ...
    _mapReduce$mcJF$sp__K = typing.TypeVar('_mapReduce$mcJF$sp__K')  # <K>
    _mapReduce$mcJF$sp__V = typing.TypeVar('_mapReduce$mcJF$sp__V')  # <V>
    def mapReduce$mcJF$sp(self, m: scala.Function1[scala.Tuple2[typing.Any, typing.Any], scala.Tuple2[_mapReduce.mcJF.sp__K, _mapReduce.mcJF.sp__V]], r: scala.Function1[scala.Tuple2[_mapReduce.mcJF.sp__V, _mapReduce.mcJF.sp__V], _mapReduce.mcJF.sp__V], evidence$16: scalan.RType[_mapReduce.mcJF.sp__K], evidence$17: scalan.RType[_mapReduce.mcJF.sp__V]) -> Coll[scala.Tuple2[_mapReduce.mcJF.sp__K, _mapReduce.mcJF.sp__V]]: ...
    _mapReduce$mcJI$sp__K = typing.TypeVar('_mapReduce$mcJI$sp__K')  # <K>
    _mapReduce$mcJI$sp__V = typing.TypeVar('_mapReduce$mcJI$sp__V')  # <V>
    def mapReduce$mcJI$sp(self, m: scala.Function1[scala.Tuple2[typing.Any, typing.Any], scala.Tuple2[_mapReduce.mcJI.sp__K, _mapReduce.mcJI.sp__V]], r: scala.Function1[scala.Tuple2[_mapReduce.mcJI.sp__V, _mapReduce.mcJI.sp__V], _mapReduce.mcJI.sp__V], evidence$16: scalan.RType[_mapReduce.mcJI.sp__K], evidence$17: scalan.RType[_mapReduce.mcJI.sp__V]) -> Coll[scala.Tuple2[_mapReduce.mcJI.sp__K, _mapReduce.mcJI.sp__V]]: ...
    _mapReduce$mcJJ$sp__K = typing.TypeVar('_mapReduce$mcJJ$sp__K')  # <K>
    _mapReduce$mcJJ$sp__V = typing.TypeVar('_mapReduce$mcJJ$sp__V')  # <V>
    def mapReduce$mcJJ$sp(self, m: scala.Function1[scala.Tuple2[typing.Any, typing.Any], scala.Tuple2[_mapReduce.mcJJ.sp__K, _mapReduce.mcJJ.sp__V]], r: scala.Function1[scala.Tuple2[_mapReduce.mcJJ.sp__V, _mapReduce.mcJJ.sp__V], _mapReduce.mcJJ.sp__V], evidence$16: scalan.RType[_mapReduce.mcJJ.sp__K], evidence$17: scalan.RType[_mapReduce.mcJJ.sp__V]) -> Coll[scala.Tuple2[_mapReduce.mcJJ.sp__K, _mapReduce.mcJJ.sp__V]]: ...
    _mapReduce$mcJS$sp__K = typing.TypeVar('_mapReduce$mcJS$sp__K')  # <K>
    _mapReduce$mcJS$sp__V = typing.TypeVar('_mapReduce$mcJS$sp__V')  # <V>
    def mapReduce$mcJS$sp(self, m: scala.Function1[scala.Tuple2[typing.Any, typing.Any], scala.Tuple2[_mapReduce.mcJS.sp__K, _mapReduce.mcJS.sp__V]], r: scala.Function1[scala.Tuple2[_mapReduce.mcJS.sp__V, _mapReduce.mcJS.sp__V], _mapReduce.mcJS.sp__V], evidence$16: scalan.RType[_mapReduce.mcJS.sp__K], evidence$17: scalan.RType[_mapReduce.mcJS.sp__V]) -> Coll[scala.Tuple2[_mapReduce.mcJS.sp__K, _mapReduce.mcJS.sp__V]]: ...
    _mapReduce$mcJV$sp__K = typing.TypeVar('_mapReduce$mcJV$sp__K')  # <K>
    _mapReduce$mcJV$sp__V = typing.TypeVar('_mapReduce$mcJV$sp__V')  # <V>
    def mapReduce$mcJV$sp(self, m: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], scala.Tuple2[_mapReduce.mcJV.sp__K, _mapReduce.mcJV.sp__V]], r: scala.Function1[scala.Tuple2[_mapReduce.mcJV.sp__V, _mapReduce.mcJV.sp__V], _mapReduce.mcJV.sp__V], evidence$16: scalan.RType[_mapReduce.mcJV.sp__K], evidence$17: scalan.RType[_mapReduce.mcJV.sp__V]) -> Coll[scala.Tuple2[_mapReduce.mcJV.sp__K, _mapReduce.mcJV.sp__V]]: ...
    _mapReduce$mcJZ$sp__K = typing.TypeVar('_mapReduce$mcJZ$sp__K')  # <K>
    _mapReduce$mcJZ$sp__V = typing.TypeVar('_mapReduce$mcJZ$sp__V')  # <V>
    def mapReduce$mcJZ$sp(self, m: scala.Function1[scala.Tuple2[typing.Any, typing.Any], scala.Tuple2[_mapReduce.mcJZ.sp__K, _mapReduce.mcJZ.sp__V]], r: scala.Function1[scala.Tuple2[_mapReduce.mcJZ.sp__V, _mapReduce.mcJZ.sp__V], _mapReduce.mcJZ.sp__V], evidence$16: scalan.RType[_mapReduce.mcJZ.sp__K], evidence$17: scalan.RType[_mapReduce.mcJZ.sp__V]) -> Coll[scala.Tuple2[_mapReduce.mcJZ.sp__K, _mapReduce.mcJZ.sp__V]]: ...
    _mapReduce$mcS$sp__K = typing.TypeVar('_mapReduce$mcS$sp__K')  # <K>
    _mapReduce$mcS$sp__V = typing.TypeVar('_mapReduce$mcS$sp__V')  # <V>
    def mapReduce$mcS$sp(self, m: scala.Function1[typing.Any, scala.Tuple2[_mapReduce.mcS.sp__K, _mapReduce.mcS.sp__V]], r: scala.Function1[scala.Tuple2[_mapReduce.mcS.sp__V, _mapReduce.mcS.sp__V], _mapReduce.mcS.sp__V], evidence$3: scalan.RType[_mapReduce.mcS.sp__K], evidence$4: scalan.RType[_mapReduce.mcS.sp__V]) -> Coll[scala.Tuple2[_mapReduce.mcS.sp__K, _mapReduce.mcS.sp__V]]: ...
    _mapReduce$mcSB$sp__K = typing.TypeVar('_mapReduce$mcSB$sp__K')  # <K>
    _mapReduce$mcSB$sp__V = typing.TypeVar('_mapReduce$mcSB$sp__V')  # <V>
    def mapReduce$mcSB$sp(self, m: scala.Function1[scala.Tuple2[typing.Any, typing.Any], scala.Tuple2[_mapReduce.mcSB.sp__K, _mapReduce.mcSB.sp__V]], r: scala.Function1[scala.Tuple2[_mapReduce.mcSB.sp__V, _mapReduce.mcSB.sp__V], _mapReduce.mcSB.sp__V], evidence$16: scalan.RType[_mapReduce.mcSB.sp__K], evidence$17: scalan.RType[_mapReduce.mcSB.sp__V]) -> Coll[scala.Tuple2[_mapReduce.mcSB.sp__K, _mapReduce.mcSB.sp__V]]: ...
    _mapReduce$mcSC$sp__K = typing.TypeVar('_mapReduce$mcSC$sp__K')  # <K>
    _mapReduce$mcSC$sp__V = typing.TypeVar('_mapReduce$mcSC$sp__V')  # <V>
    def mapReduce$mcSC$sp(self, m: scala.Function1[scala.Tuple2[typing.Any, typing.Any], scala.Tuple2[_mapReduce.mcSC.sp__K, _mapReduce.mcSC.sp__V]], r: scala.Function1[scala.Tuple2[_mapReduce.mcSC.sp__V, _mapReduce.mcSC.sp__V], _mapReduce.mcSC.sp__V], evidence$16: scalan.RType[_mapReduce.mcSC.sp__K], evidence$17: scalan.RType[_mapReduce.mcSC.sp__V]) -> Coll[scala.Tuple2[_mapReduce.mcSC.sp__K, _mapReduce.mcSC.sp__V]]: ...
    _mapReduce$mcSD$sp__K = typing.TypeVar('_mapReduce$mcSD$sp__K')  # <K>
    _mapReduce$mcSD$sp__V = typing.TypeVar('_mapReduce$mcSD$sp__V')  # <V>
    def mapReduce$mcSD$sp(self, m: scala.Function1[scala.Tuple2[typing.Any, typing.Any], scala.Tuple2[_mapReduce.mcSD.sp__K, _mapReduce.mcSD.sp__V]], r: scala.Function1[scala.Tuple2[_mapReduce.mcSD.sp__V, _mapReduce.mcSD.sp__V], _mapReduce.mcSD.sp__V], evidence$16: scalan.RType[_mapReduce.mcSD.sp__K], evidence$17: scalan.RType[_mapReduce.mcSD.sp__V]) -> Coll[scala.Tuple2[_mapReduce.mcSD.sp__K, _mapReduce.mcSD.sp__V]]: ...
    _mapReduce$mcSF$sp__K = typing.TypeVar('_mapReduce$mcSF$sp__K')  # <K>
    _mapReduce$mcSF$sp__V = typing.TypeVar('_mapReduce$mcSF$sp__V')  # <V>
    def mapReduce$mcSF$sp(self, m: scala.Function1[scala.Tuple2[typing.Any, typing.Any], scala.Tuple2[_mapReduce.mcSF.sp__K, _mapReduce.mcSF.sp__V]], r: scala.Function1[scala.Tuple2[_mapReduce.mcSF.sp__V, _mapReduce.mcSF.sp__V], _mapReduce.mcSF.sp__V], evidence$16: scalan.RType[_mapReduce.mcSF.sp__K], evidence$17: scalan.RType[_mapReduce.mcSF.sp__V]) -> Coll[scala.Tuple2[_mapReduce.mcSF.sp__K, _mapReduce.mcSF.sp__V]]: ...
    _mapReduce$mcSI$sp__K = typing.TypeVar('_mapReduce$mcSI$sp__K')  # <K>
    _mapReduce$mcSI$sp__V = typing.TypeVar('_mapReduce$mcSI$sp__V')  # <V>
    def mapReduce$mcSI$sp(self, m: scala.Function1[scala.Tuple2[typing.Any, typing.Any], scala.Tuple2[_mapReduce.mcSI.sp__K, _mapReduce.mcSI.sp__V]], r: scala.Function1[scala.Tuple2[_mapReduce.mcSI.sp__V, _mapReduce.mcSI.sp__V], _mapReduce.mcSI.sp__V], evidence$16: scalan.RType[_mapReduce.mcSI.sp__K], evidence$17: scalan.RType[_mapReduce.mcSI.sp__V]) -> Coll[scala.Tuple2[_mapReduce.mcSI.sp__K, _mapReduce.mcSI.sp__V]]: ...
    _mapReduce$mcSJ$sp__K = typing.TypeVar('_mapReduce$mcSJ$sp__K')  # <K>
    _mapReduce$mcSJ$sp__V = typing.TypeVar('_mapReduce$mcSJ$sp__V')  # <V>
    def mapReduce$mcSJ$sp(self, m: scala.Function1[scala.Tuple2[typing.Any, typing.Any], scala.Tuple2[_mapReduce.mcSJ.sp__K, _mapReduce.mcSJ.sp__V]], r: scala.Function1[scala.Tuple2[_mapReduce.mcSJ.sp__V, _mapReduce.mcSJ.sp__V], _mapReduce.mcSJ.sp__V], evidence$16: scalan.RType[_mapReduce.mcSJ.sp__K], evidence$17: scalan.RType[_mapReduce.mcSJ.sp__V]) -> Coll[scala.Tuple2[_mapReduce.mcSJ.sp__K, _mapReduce.mcSJ.sp__V]]: ...
    _mapReduce$mcSS$sp__K = typing.TypeVar('_mapReduce$mcSS$sp__K')  # <K>
    _mapReduce$mcSS$sp__V = typing.TypeVar('_mapReduce$mcSS$sp__V')  # <V>
    def mapReduce$mcSS$sp(self, m: scala.Function1[scala.Tuple2[typing.Any, typing.Any], scala.Tuple2[_mapReduce.mcSS.sp__K, _mapReduce.mcSS.sp__V]], r: scala.Function1[scala.Tuple2[_mapReduce.mcSS.sp__V, _mapReduce.mcSS.sp__V], _mapReduce.mcSS.sp__V], evidence$16: scalan.RType[_mapReduce.mcSS.sp__K], evidence$17: scalan.RType[_mapReduce.mcSS.sp__V]) -> Coll[scala.Tuple2[_mapReduce.mcSS.sp__K, _mapReduce.mcSS.sp__V]]: ...
    _mapReduce$mcSV$sp__K = typing.TypeVar('_mapReduce$mcSV$sp__K')  # <K>
    _mapReduce$mcSV$sp__V = typing.TypeVar('_mapReduce$mcSV$sp__V')  # <V>
    def mapReduce$mcSV$sp(self, m: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], scala.Tuple2[_mapReduce.mcSV.sp__K, _mapReduce.mcSV.sp__V]], r: scala.Function1[scala.Tuple2[_mapReduce.mcSV.sp__V, _mapReduce.mcSV.sp__V], _mapReduce.mcSV.sp__V], evidence$16: scalan.RType[_mapReduce.mcSV.sp__K], evidence$17: scalan.RType[_mapReduce.mcSV.sp__V]) -> Coll[scala.Tuple2[_mapReduce.mcSV.sp__K, _mapReduce.mcSV.sp__V]]: ...
    _mapReduce$mcSZ$sp__K = typing.TypeVar('_mapReduce$mcSZ$sp__K')  # <K>
    _mapReduce$mcSZ$sp__V = typing.TypeVar('_mapReduce$mcSZ$sp__V')  # <V>
    def mapReduce$mcSZ$sp(self, m: scala.Function1[scala.Tuple2[typing.Any, typing.Any], scala.Tuple2[_mapReduce.mcSZ.sp__K, _mapReduce.mcSZ.sp__V]], r: scala.Function1[scala.Tuple2[_mapReduce.mcSZ.sp__V, _mapReduce.mcSZ.sp__V], _mapReduce.mcSZ.sp__V], evidence$16: scalan.RType[_mapReduce.mcSZ.sp__K], evidence$17: scalan.RType[_mapReduce.mcSZ.sp__V]) -> Coll[scala.Tuple2[_mapReduce.mcSZ.sp__K, _mapReduce.mcSZ.sp__V]]: ...
    _mapReduce$mcV$sp__K = typing.TypeVar('_mapReduce$mcV$sp__K')  # <K>
    _mapReduce$mcV$sp__V = typing.TypeVar('_mapReduce$mcV$sp__V')  # <V>
    def mapReduce$mcV$sp(self, m: scala.Function1[scala.runtime.BoxedUnit, scala.Tuple2[_mapReduce.mcV.sp__K, _mapReduce.mcV.sp__V]], r: scala.Function1[scala.Tuple2[_mapReduce.mcV.sp__V, _mapReduce.mcV.sp__V], _mapReduce.mcV.sp__V], evidence$3: scalan.RType[_mapReduce.mcV.sp__K], evidence$4: scalan.RType[_mapReduce.mcV.sp__V]) -> Coll[scala.Tuple2[_mapReduce.mcV.sp__K, _mapReduce.mcV.sp__V]]: ...
    _mapReduce$mcVB$sp__K = typing.TypeVar('_mapReduce$mcVB$sp__K')  # <K>
    _mapReduce$mcVB$sp__V = typing.TypeVar('_mapReduce$mcVB$sp__V')  # <V>
    def mapReduce$mcVB$sp(self, m: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], scala.Tuple2[_mapReduce.mcVB.sp__K, _mapReduce.mcVB.sp__V]], r: scala.Function1[scala.Tuple2[_mapReduce.mcVB.sp__V, _mapReduce.mcVB.sp__V], _mapReduce.mcVB.sp__V], evidence$16: scalan.RType[_mapReduce.mcVB.sp__K], evidence$17: scalan.RType[_mapReduce.mcVB.sp__V]) -> Coll[scala.Tuple2[_mapReduce.mcVB.sp__K, _mapReduce.mcVB.sp__V]]: ...
    _mapReduce$mcVC$sp__K = typing.TypeVar('_mapReduce$mcVC$sp__K')  # <K>
    _mapReduce$mcVC$sp__V = typing.TypeVar('_mapReduce$mcVC$sp__V')  # <V>
    def mapReduce$mcVC$sp(self, m: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], scala.Tuple2[_mapReduce.mcVC.sp__K, _mapReduce.mcVC.sp__V]], r: scala.Function1[scala.Tuple2[_mapReduce.mcVC.sp__V, _mapReduce.mcVC.sp__V], _mapReduce.mcVC.sp__V], evidence$16: scalan.RType[_mapReduce.mcVC.sp__K], evidence$17: scalan.RType[_mapReduce.mcVC.sp__V]) -> Coll[scala.Tuple2[_mapReduce.mcVC.sp__K, _mapReduce.mcVC.sp__V]]: ...
    _mapReduce$mcVD$sp__K = typing.TypeVar('_mapReduce$mcVD$sp__K')  # <K>
    _mapReduce$mcVD$sp__V = typing.TypeVar('_mapReduce$mcVD$sp__V')  # <V>
    def mapReduce$mcVD$sp(self, m: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], scala.Tuple2[_mapReduce.mcVD.sp__K, _mapReduce.mcVD.sp__V]], r: scala.Function1[scala.Tuple2[_mapReduce.mcVD.sp__V, _mapReduce.mcVD.sp__V], _mapReduce.mcVD.sp__V], evidence$16: scalan.RType[_mapReduce.mcVD.sp__K], evidence$17: scalan.RType[_mapReduce.mcVD.sp__V]) -> Coll[scala.Tuple2[_mapReduce.mcVD.sp__K, _mapReduce.mcVD.sp__V]]: ...
    _mapReduce$mcVF$sp__K = typing.TypeVar('_mapReduce$mcVF$sp__K')  # <K>
    _mapReduce$mcVF$sp__V = typing.TypeVar('_mapReduce$mcVF$sp__V')  # <V>
    def mapReduce$mcVF$sp(self, m: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], scala.Tuple2[_mapReduce.mcVF.sp__K, _mapReduce.mcVF.sp__V]], r: scala.Function1[scala.Tuple2[_mapReduce.mcVF.sp__V, _mapReduce.mcVF.sp__V], _mapReduce.mcVF.sp__V], evidence$16: scalan.RType[_mapReduce.mcVF.sp__K], evidence$17: scalan.RType[_mapReduce.mcVF.sp__V]) -> Coll[scala.Tuple2[_mapReduce.mcVF.sp__K, _mapReduce.mcVF.sp__V]]: ...
    _mapReduce$mcVI$sp__K = typing.TypeVar('_mapReduce$mcVI$sp__K')  # <K>
    _mapReduce$mcVI$sp__V = typing.TypeVar('_mapReduce$mcVI$sp__V')  # <V>
    def mapReduce$mcVI$sp(self, m: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], scala.Tuple2[_mapReduce.mcVI.sp__K, _mapReduce.mcVI.sp__V]], r: scala.Function1[scala.Tuple2[_mapReduce.mcVI.sp__V, _mapReduce.mcVI.sp__V], _mapReduce.mcVI.sp__V], evidence$16: scalan.RType[_mapReduce.mcVI.sp__K], evidence$17: scalan.RType[_mapReduce.mcVI.sp__V]) -> Coll[scala.Tuple2[_mapReduce.mcVI.sp__K, _mapReduce.mcVI.sp__V]]: ...
    _mapReduce$mcVJ$sp__K = typing.TypeVar('_mapReduce$mcVJ$sp__K')  # <K>
    _mapReduce$mcVJ$sp__V = typing.TypeVar('_mapReduce$mcVJ$sp__V')  # <V>
    def mapReduce$mcVJ$sp(self, m: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], scala.Tuple2[_mapReduce.mcVJ.sp__K, _mapReduce.mcVJ.sp__V]], r: scala.Function1[scala.Tuple2[_mapReduce.mcVJ.sp__V, _mapReduce.mcVJ.sp__V], _mapReduce.mcVJ.sp__V], evidence$16: scalan.RType[_mapReduce.mcVJ.sp__K], evidence$17: scalan.RType[_mapReduce.mcVJ.sp__V]) -> Coll[scala.Tuple2[_mapReduce.mcVJ.sp__K, _mapReduce.mcVJ.sp__V]]: ...
    _mapReduce$mcVS$sp__K = typing.TypeVar('_mapReduce$mcVS$sp__K')  # <K>
    _mapReduce$mcVS$sp__V = typing.TypeVar('_mapReduce$mcVS$sp__V')  # <V>
    def mapReduce$mcVS$sp(self, m: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], scala.Tuple2[_mapReduce.mcVS.sp__K, _mapReduce.mcVS.sp__V]], r: scala.Function1[scala.Tuple2[_mapReduce.mcVS.sp__V, _mapReduce.mcVS.sp__V], _mapReduce.mcVS.sp__V], evidence$16: scalan.RType[_mapReduce.mcVS.sp__K], evidence$17: scalan.RType[_mapReduce.mcVS.sp__V]) -> Coll[scala.Tuple2[_mapReduce.mcVS.sp__K, _mapReduce.mcVS.sp__V]]: ...
    _mapReduce$mcVV$sp__K = typing.TypeVar('_mapReduce$mcVV$sp__K')  # <K>
    _mapReduce$mcVV$sp__V = typing.TypeVar('_mapReduce$mcVV$sp__V')  # <V>
    def mapReduce$mcVV$sp(self, m: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, scala.runtime.BoxedUnit], scala.Tuple2[_mapReduce.mcVV.sp__K, _mapReduce.mcVV.sp__V]], r: scala.Function1[scala.Tuple2[_mapReduce.mcVV.sp__V, _mapReduce.mcVV.sp__V], _mapReduce.mcVV.sp__V], evidence$16: scalan.RType[_mapReduce.mcVV.sp__K], evidence$17: scalan.RType[_mapReduce.mcVV.sp__V]) -> Coll[scala.Tuple2[_mapReduce.mcVV.sp__K, _mapReduce.mcVV.sp__V]]: ...
    _mapReduce$mcVZ$sp__K = typing.TypeVar('_mapReduce$mcVZ$sp__K')  # <K>
    _mapReduce$mcVZ$sp__V = typing.TypeVar('_mapReduce$mcVZ$sp__V')  # <V>
    def mapReduce$mcVZ$sp(self, m: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], scala.Tuple2[_mapReduce.mcVZ.sp__K, _mapReduce.mcVZ.sp__V]], r: scala.Function1[scala.Tuple2[_mapReduce.mcVZ.sp__V, _mapReduce.mcVZ.sp__V], _mapReduce.mcVZ.sp__V], evidence$16: scalan.RType[_mapReduce.mcVZ.sp__K], evidence$17: scalan.RType[_mapReduce.mcVZ.sp__V]) -> Coll[scala.Tuple2[_mapReduce.mcVZ.sp__K, _mapReduce.mcVZ.sp__V]]: ...
    _mapReduce$mcZ$sp__K = typing.TypeVar('_mapReduce$mcZ$sp__K')  # <K>
    _mapReduce$mcZ$sp__V = typing.TypeVar('_mapReduce$mcZ$sp__V')  # <V>
    def mapReduce$mcZ$sp(self, m: scala.Function1[typing.Any, scala.Tuple2[_mapReduce.mcZ.sp__K, _mapReduce.mcZ.sp__V]], r: scala.Function1[scala.Tuple2[_mapReduce.mcZ.sp__V, _mapReduce.mcZ.sp__V], _mapReduce.mcZ.sp__V], evidence$3: scalan.RType[_mapReduce.mcZ.sp__K], evidence$4: scalan.RType[_mapReduce.mcZ.sp__V]) -> Coll[scala.Tuple2[_mapReduce.mcZ.sp__K, _mapReduce.mcZ.sp__V]]: ...
    _mapReduce$mcZB$sp__K = typing.TypeVar('_mapReduce$mcZB$sp__K')  # <K>
    _mapReduce$mcZB$sp__V = typing.TypeVar('_mapReduce$mcZB$sp__V')  # <V>
    def mapReduce$mcZB$sp(self, m: scala.Function1[scala.Tuple2[typing.Any, typing.Any], scala.Tuple2[_mapReduce.mcZB.sp__K, _mapReduce.mcZB.sp__V]], r: scala.Function1[scala.Tuple2[_mapReduce.mcZB.sp__V, _mapReduce.mcZB.sp__V], _mapReduce.mcZB.sp__V], evidence$16: scalan.RType[_mapReduce.mcZB.sp__K], evidence$17: scalan.RType[_mapReduce.mcZB.sp__V]) -> Coll[scala.Tuple2[_mapReduce.mcZB.sp__K, _mapReduce.mcZB.sp__V]]: ...
    _mapReduce$mcZC$sp__K = typing.TypeVar('_mapReduce$mcZC$sp__K')  # <K>
    _mapReduce$mcZC$sp__V = typing.TypeVar('_mapReduce$mcZC$sp__V')  # <V>
    def mapReduce$mcZC$sp(self, m: scala.Function1[scala.Tuple2[typing.Any, typing.Any], scala.Tuple2[_mapReduce.mcZC.sp__K, _mapReduce.mcZC.sp__V]], r: scala.Function1[scala.Tuple2[_mapReduce.mcZC.sp__V, _mapReduce.mcZC.sp__V], _mapReduce.mcZC.sp__V], evidence$16: scalan.RType[_mapReduce.mcZC.sp__K], evidence$17: scalan.RType[_mapReduce.mcZC.sp__V]) -> Coll[scala.Tuple2[_mapReduce.mcZC.sp__K, _mapReduce.mcZC.sp__V]]: ...
    _mapReduce$mcZD$sp__K = typing.TypeVar('_mapReduce$mcZD$sp__K')  # <K>
    _mapReduce$mcZD$sp__V = typing.TypeVar('_mapReduce$mcZD$sp__V')  # <V>
    def mapReduce$mcZD$sp(self, m: scala.Function1[scala.Tuple2[typing.Any, typing.Any], scala.Tuple2[_mapReduce.mcZD.sp__K, _mapReduce.mcZD.sp__V]], r: scala.Function1[scala.Tuple2[_mapReduce.mcZD.sp__V, _mapReduce.mcZD.sp__V], _mapReduce.mcZD.sp__V], evidence$16: scalan.RType[_mapReduce.mcZD.sp__K], evidence$17: scalan.RType[_mapReduce.mcZD.sp__V]) -> Coll[scala.Tuple2[_mapReduce.mcZD.sp__K, _mapReduce.mcZD.sp__V]]: ...
    _mapReduce$mcZF$sp__K = typing.TypeVar('_mapReduce$mcZF$sp__K')  # <K>
    _mapReduce$mcZF$sp__V = typing.TypeVar('_mapReduce$mcZF$sp__V')  # <V>
    def mapReduce$mcZF$sp(self, m: scala.Function1[scala.Tuple2[typing.Any, typing.Any], scala.Tuple2[_mapReduce.mcZF.sp__K, _mapReduce.mcZF.sp__V]], r: scala.Function1[scala.Tuple2[_mapReduce.mcZF.sp__V, _mapReduce.mcZF.sp__V], _mapReduce.mcZF.sp__V], evidence$16: scalan.RType[_mapReduce.mcZF.sp__K], evidence$17: scalan.RType[_mapReduce.mcZF.sp__V]) -> Coll[scala.Tuple2[_mapReduce.mcZF.sp__K, _mapReduce.mcZF.sp__V]]: ...
    _mapReduce$mcZI$sp__K = typing.TypeVar('_mapReduce$mcZI$sp__K')  # <K>
    _mapReduce$mcZI$sp__V = typing.TypeVar('_mapReduce$mcZI$sp__V')  # <V>
    def mapReduce$mcZI$sp(self, m: scala.Function1[scala.Tuple2[typing.Any, typing.Any], scala.Tuple2[_mapReduce.mcZI.sp__K, _mapReduce.mcZI.sp__V]], r: scala.Function1[scala.Tuple2[_mapReduce.mcZI.sp__V, _mapReduce.mcZI.sp__V], _mapReduce.mcZI.sp__V], evidence$16: scalan.RType[_mapReduce.mcZI.sp__K], evidence$17: scalan.RType[_mapReduce.mcZI.sp__V]) -> Coll[scala.Tuple2[_mapReduce.mcZI.sp__K, _mapReduce.mcZI.sp__V]]: ...
    _mapReduce$mcZJ$sp__K = typing.TypeVar('_mapReduce$mcZJ$sp__K')  # <K>
    _mapReduce$mcZJ$sp__V = typing.TypeVar('_mapReduce$mcZJ$sp__V')  # <V>
    def mapReduce$mcZJ$sp(self, m: scala.Function1[scala.Tuple2[typing.Any, typing.Any], scala.Tuple2[_mapReduce.mcZJ.sp__K, _mapReduce.mcZJ.sp__V]], r: scala.Function1[scala.Tuple2[_mapReduce.mcZJ.sp__V, _mapReduce.mcZJ.sp__V], _mapReduce.mcZJ.sp__V], evidence$16: scalan.RType[_mapReduce.mcZJ.sp__K], evidence$17: scalan.RType[_mapReduce.mcZJ.sp__V]) -> Coll[scala.Tuple2[_mapReduce.mcZJ.sp__K, _mapReduce.mcZJ.sp__V]]: ...
    _mapReduce$mcZS$sp__K = typing.TypeVar('_mapReduce$mcZS$sp__K')  # <K>
    _mapReduce$mcZS$sp__V = typing.TypeVar('_mapReduce$mcZS$sp__V')  # <V>
    def mapReduce$mcZS$sp(self, m: scala.Function1[scala.Tuple2[typing.Any, typing.Any], scala.Tuple2[_mapReduce.mcZS.sp__K, _mapReduce.mcZS.sp__V]], r: scala.Function1[scala.Tuple2[_mapReduce.mcZS.sp__V, _mapReduce.mcZS.sp__V], _mapReduce.mcZS.sp__V], evidence$16: scalan.RType[_mapReduce.mcZS.sp__K], evidence$17: scalan.RType[_mapReduce.mcZS.sp__V]) -> Coll[scala.Tuple2[_mapReduce.mcZS.sp__K, _mapReduce.mcZS.sp__V]]: ...
    _mapReduce$mcZV$sp__K = typing.TypeVar('_mapReduce$mcZV$sp__K')  # <K>
    _mapReduce$mcZV$sp__V = typing.TypeVar('_mapReduce$mcZV$sp__V')  # <V>
    def mapReduce$mcZV$sp(self, m: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], scala.Tuple2[_mapReduce.mcZV.sp__K, _mapReduce.mcZV.sp__V]], r: scala.Function1[scala.Tuple2[_mapReduce.mcZV.sp__V, _mapReduce.mcZV.sp__V], _mapReduce.mcZV.sp__V], evidence$16: scalan.RType[_mapReduce.mcZV.sp__K], evidence$17: scalan.RType[_mapReduce.mcZV.sp__V]) -> Coll[scala.Tuple2[_mapReduce.mcZV.sp__K, _mapReduce.mcZV.sp__V]]: ...
    _mapReduce$mcZZ$sp__K = typing.TypeVar('_mapReduce$mcZZ$sp__K')  # <K>
    _mapReduce$mcZZ$sp__V = typing.TypeVar('_mapReduce$mcZZ$sp__V')  # <V>
    def mapReduce$mcZZ$sp(self, m: scala.Function1[scala.Tuple2[typing.Any, typing.Any], scala.Tuple2[_mapReduce.mcZZ.sp__K, _mapReduce.mcZZ.sp__V]], r: scala.Function1[scala.Tuple2[_mapReduce.mcZZ.sp__V, _mapReduce.mcZZ.sp__V], _mapReduce.mcZZ.sp__V], evidence$16: scalan.RType[_mapReduce.mcZZ.sp__K], evidence$17: scalan.RType[_mapReduce.mcZZ.sp__V]) -> Coll[scala.Tuple2[_mapReduce.mcZZ.sp__K, _mapReduce.mcZZ.sp__V]]: ...
    _mapSecond__T1 = typing.TypeVar('_mapSecond__T1')  # <T1>
    def mapSecond(self, f: scala.Function1[_PairOfCols__R, _mapSecond__T1], evidence$19: scalan.RType[_mapSecond__T1]) -> Coll[scala.Tuple2[_PairOfCols__L, _mapSecond__T1]]: ...
    _mapSecond$mcBB$sp__T1 = typing.TypeVar('_mapSecond$mcBB$sp__T1')  # <T1>
    def mapSecond$mcBB$sp(self, f: scala.Function1[typing.Any, _mapSecond.mcBB.sp__T1], evidence$19: scalan.RType[_mapSecond.mcBB.sp__T1]) -> Coll[scala.Tuple2[typing.Any, _mapSecond.mcBB.sp__T1]]: ...
    _mapSecond$mcBC$sp__T1 = typing.TypeVar('_mapSecond$mcBC$sp__T1')  # <T1>
    def mapSecond$mcBC$sp(self, f: scala.Function1[typing.Any, _mapSecond.mcBC.sp__T1], evidence$19: scalan.RType[_mapSecond.mcBC.sp__T1]) -> Coll[scala.Tuple2[typing.Any, _mapSecond.mcBC.sp__T1]]: ...
    _mapSecond$mcBD$sp__T1 = typing.TypeVar('_mapSecond$mcBD$sp__T1')  # <T1>
    def mapSecond$mcBD$sp(self, f: scala.Function1[typing.Any, _mapSecond.mcBD.sp__T1], evidence$19: scalan.RType[_mapSecond.mcBD.sp__T1]) -> Coll[scala.Tuple2[typing.Any, _mapSecond.mcBD.sp__T1]]: ...
    _mapSecond$mcBF$sp__T1 = typing.TypeVar('_mapSecond$mcBF$sp__T1')  # <T1>
    def mapSecond$mcBF$sp(self, f: scala.Function1[typing.Any, _mapSecond.mcBF.sp__T1], evidence$19: scalan.RType[_mapSecond.mcBF.sp__T1]) -> Coll[scala.Tuple2[typing.Any, _mapSecond.mcBF.sp__T1]]: ...
    _mapSecond$mcBI$sp__T1 = typing.TypeVar('_mapSecond$mcBI$sp__T1')  # <T1>
    def mapSecond$mcBI$sp(self, f: scala.Function1[typing.Any, _mapSecond.mcBI.sp__T1], evidence$19: scalan.RType[_mapSecond.mcBI.sp__T1]) -> Coll[scala.Tuple2[typing.Any, _mapSecond.mcBI.sp__T1]]: ...
    _mapSecond$mcBJ$sp__T1 = typing.TypeVar('_mapSecond$mcBJ$sp__T1')  # <T1>
    def mapSecond$mcBJ$sp(self, f: scala.Function1[typing.Any, _mapSecond.mcBJ.sp__T1], evidence$19: scalan.RType[_mapSecond.mcBJ.sp__T1]) -> Coll[scala.Tuple2[typing.Any, _mapSecond.mcBJ.sp__T1]]: ...
    _mapSecond$mcBS$sp__T1 = typing.TypeVar('_mapSecond$mcBS$sp__T1')  # <T1>
    def mapSecond$mcBS$sp(self, f: scala.Function1[typing.Any, _mapSecond.mcBS.sp__T1], evidence$19: scalan.RType[_mapSecond.mcBS.sp__T1]) -> Coll[scala.Tuple2[typing.Any, _mapSecond.mcBS.sp__T1]]: ...
    _mapSecond$mcBV$sp__T1 = typing.TypeVar('_mapSecond$mcBV$sp__T1')  # <T1>
    def mapSecond$mcBV$sp(self, f: scala.Function1[scala.runtime.BoxedUnit, _mapSecond.mcBV.sp__T1], evidence$19: scalan.RType[_mapSecond.mcBV.sp__T1]) -> Coll[scala.Tuple2[typing.Any, _mapSecond.mcBV.sp__T1]]: ...
    _mapSecond$mcBZ$sp__T1 = typing.TypeVar('_mapSecond$mcBZ$sp__T1')  # <T1>
    def mapSecond$mcBZ$sp(self, f: scala.Function1[typing.Any, _mapSecond.mcBZ.sp__T1], evidence$19: scalan.RType[_mapSecond.mcBZ.sp__T1]) -> Coll[scala.Tuple2[typing.Any, _mapSecond.mcBZ.sp__T1]]: ...
    _mapSecond$mcCB$sp__T1 = typing.TypeVar('_mapSecond$mcCB$sp__T1')  # <T1>
    def mapSecond$mcCB$sp(self, f: scala.Function1[typing.Any, _mapSecond.mcCB.sp__T1], evidence$19: scalan.RType[_mapSecond.mcCB.sp__T1]) -> Coll[scala.Tuple2[typing.Any, _mapSecond.mcCB.sp__T1]]: ...
    _mapSecond$mcCC$sp__T1 = typing.TypeVar('_mapSecond$mcCC$sp__T1')  # <T1>
    def mapSecond$mcCC$sp(self, f: scala.Function1[typing.Any, _mapSecond.mcCC.sp__T1], evidence$19: scalan.RType[_mapSecond.mcCC.sp__T1]) -> Coll[scala.Tuple2[typing.Any, _mapSecond.mcCC.sp__T1]]: ...
    _mapSecond$mcCD$sp__T1 = typing.TypeVar('_mapSecond$mcCD$sp__T1')  # <T1>
    def mapSecond$mcCD$sp(self, f: scala.Function1[typing.Any, _mapSecond.mcCD.sp__T1], evidence$19: scalan.RType[_mapSecond.mcCD.sp__T1]) -> Coll[scala.Tuple2[typing.Any, _mapSecond.mcCD.sp__T1]]: ...
    _mapSecond$mcCF$sp__T1 = typing.TypeVar('_mapSecond$mcCF$sp__T1')  # <T1>
    def mapSecond$mcCF$sp(self, f: scala.Function1[typing.Any, _mapSecond.mcCF.sp__T1], evidence$19: scalan.RType[_mapSecond.mcCF.sp__T1]) -> Coll[scala.Tuple2[typing.Any, _mapSecond.mcCF.sp__T1]]: ...
    _mapSecond$mcCI$sp__T1 = typing.TypeVar('_mapSecond$mcCI$sp__T1')  # <T1>
    def mapSecond$mcCI$sp(self, f: scala.Function1[typing.Any, _mapSecond.mcCI.sp__T1], evidence$19: scalan.RType[_mapSecond.mcCI.sp__T1]) -> Coll[scala.Tuple2[typing.Any, _mapSecond.mcCI.sp__T1]]: ...
    _mapSecond$mcCJ$sp__T1 = typing.TypeVar('_mapSecond$mcCJ$sp__T1')  # <T1>
    def mapSecond$mcCJ$sp(self, f: scala.Function1[typing.Any, _mapSecond.mcCJ.sp__T1], evidence$19: scalan.RType[_mapSecond.mcCJ.sp__T1]) -> Coll[scala.Tuple2[typing.Any, _mapSecond.mcCJ.sp__T1]]: ...
    _mapSecond$mcCS$sp__T1 = typing.TypeVar('_mapSecond$mcCS$sp__T1')  # <T1>
    def mapSecond$mcCS$sp(self, f: scala.Function1[typing.Any, _mapSecond.mcCS.sp__T1], evidence$19: scalan.RType[_mapSecond.mcCS.sp__T1]) -> Coll[scala.Tuple2[typing.Any, _mapSecond.mcCS.sp__T1]]: ...
    _mapSecond$mcCV$sp__T1 = typing.TypeVar('_mapSecond$mcCV$sp__T1')  # <T1>
    def mapSecond$mcCV$sp(self, f: scala.Function1[scala.runtime.BoxedUnit, _mapSecond.mcCV.sp__T1], evidence$19: scalan.RType[_mapSecond.mcCV.sp__T1]) -> Coll[scala.Tuple2[typing.Any, _mapSecond.mcCV.sp__T1]]: ...
    _mapSecond$mcCZ$sp__T1 = typing.TypeVar('_mapSecond$mcCZ$sp__T1')  # <T1>
    def mapSecond$mcCZ$sp(self, f: scala.Function1[typing.Any, _mapSecond.mcCZ.sp__T1], evidence$19: scalan.RType[_mapSecond.mcCZ.sp__T1]) -> Coll[scala.Tuple2[typing.Any, _mapSecond.mcCZ.sp__T1]]: ...
    _mapSecond$mcDB$sp__T1 = typing.TypeVar('_mapSecond$mcDB$sp__T1')  # <T1>
    def mapSecond$mcDB$sp(self, f: scala.Function1[typing.Any, _mapSecond.mcDB.sp__T1], evidence$19: scalan.RType[_mapSecond.mcDB.sp__T1]) -> Coll[scala.Tuple2[typing.Any, _mapSecond.mcDB.sp__T1]]: ...
    _mapSecond$mcDC$sp__T1 = typing.TypeVar('_mapSecond$mcDC$sp__T1')  # <T1>
    def mapSecond$mcDC$sp(self, f: scala.Function1[typing.Any, _mapSecond.mcDC.sp__T1], evidence$19: scalan.RType[_mapSecond.mcDC.sp__T1]) -> Coll[scala.Tuple2[typing.Any, _mapSecond.mcDC.sp__T1]]: ...
    _mapSecond$mcDD$sp__T1 = typing.TypeVar('_mapSecond$mcDD$sp__T1')  # <T1>
    def mapSecond$mcDD$sp(self, f: scala.Function1[typing.Any, _mapSecond.mcDD.sp__T1], evidence$19: scalan.RType[_mapSecond.mcDD.sp__T1]) -> Coll[scala.Tuple2[typing.Any, _mapSecond.mcDD.sp__T1]]: ...
    _mapSecond$mcDF$sp__T1 = typing.TypeVar('_mapSecond$mcDF$sp__T1')  # <T1>
    def mapSecond$mcDF$sp(self, f: scala.Function1[typing.Any, _mapSecond.mcDF.sp__T1], evidence$19: scalan.RType[_mapSecond.mcDF.sp__T1]) -> Coll[scala.Tuple2[typing.Any, _mapSecond.mcDF.sp__T1]]: ...
    _mapSecond$mcDI$sp__T1 = typing.TypeVar('_mapSecond$mcDI$sp__T1')  # <T1>
    def mapSecond$mcDI$sp(self, f: scala.Function1[typing.Any, _mapSecond.mcDI.sp__T1], evidence$19: scalan.RType[_mapSecond.mcDI.sp__T1]) -> Coll[scala.Tuple2[typing.Any, _mapSecond.mcDI.sp__T1]]: ...
    _mapSecond$mcDJ$sp__T1 = typing.TypeVar('_mapSecond$mcDJ$sp__T1')  # <T1>
    def mapSecond$mcDJ$sp(self, f: scala.Function1[typing.Any, _mapSecond.mcDJ.sp__T1], evidence$19: scalan.RType[_mapSecond.mcDJ.sp__T1]) -> Coll[scala.Tuple2[typing.Any, _mapSecond.mcDJ.sp__T1]]: ...
    _mapSecond$mcDS$sp__T1 = typing.TypeVar('_mapSecond$mcDS$sp__T1')  # <T1>
    def mapSecond$mcDS$sp(self, f: scala.Function1[typing.Any, _mapSecond.mcDS.sp__T1], evidence$19: scalan.RType[_mapSecond.mcDS.sp__T1]) -> Coll[scala.Tuple2[typing.Any, _mapSecond.mcDS.sp__T1]]: ...
    _mapSecond$mcDV$sp__T1 = typing.TypeVar('_mapSecond$mcDV$sp__T1')  # <T1>
    def mapSecond$mcDV$sp(self, f: scala.Function1[scala.runtime.BoxedUnit, _mapSecond.mcDV.sp__T1], evidence$19: scalan.RType[_mapSecond.mcDV.sp__T1]) -> Coll[scala.Tuple2[typing.Any, _mapSecond.mcDV.sp__T1]]: ...
    _mapSecond$mcDZ$sp__T1 = typing.TypeVar('_mapSecond$mcDZ$sp__T1')  # <T1>
    def mapSecond$mcDZ$sp(self, f: scala.Function1[typing.Any, _mapSecond.mcDZ.sp__T1], evidence$19: scalan.RType[_mapSecond.mcDZ.sp__T1]) -> Coll[scala.Tuple2[typing.Any, _mapSecond.mcDZ.sp__T1]]: ...
    _mapSecond$mcFB$sp__T1 = typing.TypeVar('_mapSecond$mcFB$sp__T1')  # <T1>
    def mapSecond$mcFB$sp(self, f: scala.Function1[typing.Any, _mapSecond.mcFB.sp__T1], evidence$19: scalan.RType[_mapSecond.mcFB.sp__T1]) -> Coll[scala.Tuple2[typing.Any, _mapSecond.mcFB.sp__T1]]: ...
    _mapSecond$mcFC$sp__T1 = typing.TypeVar('_mapSecond$mcFC$sp__T1')  # <T1>
    def mapSecond$mcFC$sp(self, f: scala.Function1[typing.Any, _mapSecond.mcFC.sp__T1], evidence$19: scalan.RType[_mapSecond.mcFC.sp__T1]) -> Coll[scala.Tuple2[typing.Any, _mapSecond.mcFC.sp__T1]]: ...
    _mapSecond$mcFD$sp__T1 = typing.TypeVar('_mapSecond$mcFD$sp__T1')  # <T1>
    def mapSecond$mcFD$sp(self, f: scala.Function1[typing.Any, _mapSecond.mcFD.sp__T1], evidence$19: scalan.RType[_mapSecond.mcFD.sp__T1]) -> Coll[scala.Tuple2[typing.Any, _mapSecond.mcFD.sp__T1]]: ...
    _mapSecond$mcFF$sp__T1 = typing.TypeVar('_mapSecond$mcFF$sp__T1')  # <T1>
    def mapSecond$mcFF$sp(self, f: scala.Function1[typing.Any, _mapSecond.mcFF.sp__T1], evidence$19: scalan.RType[_mapSecond.mcFF.sp__T1]) -> Coll[scala.Tuple2[typing.Any, _mapSecond.mcFF.sp__T1]]: ...
    _mapSecond$mcFI$sp__T1 = typing.TypeVar('_mapSecond$mcFI$sp__T1')  # <T1>
    def mapSecond$mcFI$sp(self, f: scala.Function1[typing.Any, _mapSecond.mcFI.sp__T1], evidence$19: scalan.RType[_mapSecond.mcFI.sp__T1]) -> Coll[scala.Tuple2[typing.Any, _mapSecond.mcFI.sp__T1]]: ...
    _mapSecond$mcFJ$sp__T1 = typing.TypeVar('_mapSecond$mcFJ$sp__T1')  # <T1>
    def mapSecond$mcFJ$sp(self, f: scala.Function1[typing.Any, _mapSecond.mcFJ.sp__T1], evidence$19: scalan.RType[_mapSecond.mcFJ.sp__T1]) -> Coll[scala.Tuple2[typing.Any, _mapSecond.mcFJ.sp__T1]]: ...
    _mapSecond$mcFS$sp__T1 = typing.TypeVar('_mapSecond$mcFS$sp__T1')  # <T1>
    def mapSecond$mcFS$sp(self, f: scala.Function1[typing.Any, _mapSecond.mcFS.sp__T1], evidence$19: scalan.RType[_mapSecond.mcFS.sp__T1]) -> Coll[scala.Tuple2[typing.Any, _mapSecond.mcFS.sp__T1]]: ...
    _mapSecond$mcFV$sp__T1 = typing.TypeVar('_mapSecond$mcFV$sp__T1')  # <T1>
    def mapSecond$mcFV$sp(self, f: scala.Function1[scala.runtime.BoxedUnit, _mapSecond.mcFV.sp__T1], evidence$19: scalan.RType[_mapSecond.mcFV.sp__T1]) -> Coll[scala.Tuple2[typing.Any, _mapSecond.mcFV.sp__T1]]: ...
    _mapSecond$mcFZ$sp__T1 = typing.TypeVar('_mapSecond$mcFZ$sp__T1')  # <T1>
    def mapSecond$mcFZ$sp(self, f: scala.Function1[typing.Any, _mapSecond.mcFZ.sp__T1], evidence$19: scalan.RType[_mapSecond.mcFZ.sp__T1]) -> Coll[scala.Tuple2[typing.Any, _mapSecond.mcFZ.sp__T1]]: ...
    _mapSecond$mcIB$sp__T1 = typing.TypeVar('_mapSecond$mcIB$sp__T1')  # <T1>
    def mapSecond$mcIB$sp(self, f: scala.Function1[typing.Any, _mapSecond.mcIB.sp__T1], evidence$19: scalan.RType[_mapSecond.mcIB.sp__T1]) -> Coll[scala.Tuple2[typing.Any, _mapSecond.mcIB.sp__T1]]: ...
    _mapSecond$mcIC$sp__T1 = typing.TypeVar('_mapSecond$mcIC$sp__T1')  # <T1>
    def mapSecond$mcIC$sp(self, f: scala.Function1[typing.Any, _mapSecond.mcIC.sp__T1], evidence$19: scalan.RType[_mapSecond.mcIC.sp__T1]) -> Coll[scala.Tuple2[typing.Any, _mapSecond.mcIC.sp__T1]]: ...
    _mapSecond$mcID$sp__T1 = typing.TypeVar('_mapSecond$mcID$sp__T1')  # <T1>
    def mapSecond$mcID$sp(self, f: scala.Function1[typing.Any, _mapSecond.mcID.sp__T1], evidence$19: scalan.RType[_mapSecond.mcID.sp__T1]) -> Coll[scala.Tuple2[typing.Any, _mapSecond.mcID.sp__T1]]: ...
    _mapSecond$mcIF$sp__T1 = typing.TypeVar('_mapSecond$mcIF$sp__T1')  # <T1>
    def mapSecond$mcIF$sp(self, f: scala.Function1[typing.Any, _mapSecond.mcIF.sp__T1], evidence$19: scalan.RType[_mapSecond.mcIF.sp__T1]) -> Coll[scala.Tuple2[typing.Any, _mapSecond.mcIF.sp__T1]]: ...
    _mapSecond$mcII$sp__T1 = typing.TypeVar('_mapSecond$mcII$sp__T1')  # <T1>
    def mapSecond$mcII$sp(self, f: scala.Function1[typing.Any, _mapSecond.mcII.sp__T1], evidence$19: scalan.RType[_mapSecond.mcII.sp__T1]) -> Coll[scala.Tuple2[typing.Any, _mapSecond.mcII.sp__T1]]: ...
    _mapSecond$mcIJ$sp__T1 = typing.TypeVar('_mapSecond$mcIJ$sp__T1')  # <T1>
    def mapSecond$mcIJ$sp(self, f: scala.Function1[typing.Any, _mapSecond.mcIJ.sp__T1], evidence$19: scalan.RType[_mapSecond.mcIJ.sp__T1]) -> Coll[scala.Tuple2[typing.Any, _mapSecond.mcIJ.sp__T1]]: ...
    _mapSecond$mcIS$sp__T1 = typing.TypeVar('_mapSecond$mcIS$sp__T1')  # <T1>
    def mapSecond$mcIS$sp(self, f: scala.Function1[typing.Any, _mapSecond.mcIS.sp__T1], evidence$19: scalan.RType[_mapSecond.mcIS.sp__T1]) -> Coll[scala.Tuple2[typing.Any, _mapSecond.mcIS.sp__T1]]: ...
    _mapSecond$mcIV$sp__T1 = typing.TypeVar('_mapSecond$mcIV$sp__T1')  # <T1>
    def mapSecond$mcIV$sp(self, f: scala.Function1[scala.runtime.BoxedUnit, _mapSecond.mcIV.sp__T1], evidence$19: scalan.RType[_mapSecond.mcIV.sp__T1]) -> Coll[scala.Tuple2[typing.Any, _mapSecond.mcIV.sp__T1]]: ...
    _mapSecond$mcIZ$sp__T1 = typing.TypeVar('_mapSecond$mcIZ$sp__T1')  # <T1>
    def mapSecond$mcIZ$sp(self, f: scala.Function1[typing.Any, _mapSecond.mcIZ.sp__T1], evidence$19: scalan.RType[_mapSecond.mcIZ.sp__T1]) -> Coll[scala.Tuple2[typing.Any, _mapSecond.mcIZ.sp__T1]]: ...
    _mapSecond$mcJB$sp__T1 = typing.TypeVar('_mapSecond$mcJB$sp__T1')  # <T1>
    def mapSecond$mcJB$sp(self, f: scala.Function1[typing.Any, _mapSecond.mcJB.sp__T1], evidence$19: scalan.RType[_mapSecond.mcJB.sp__T1]) -> Coll[scala.Tuple2[typing.Any, _mapSecond.mcJB.sp__T1]]: ...
    _mapSecond$mcJC$sp__T1 = typing.TypeVar('_mapSecond$mcJC$sp__T1')  # <T1>
    def mapSecond$mcJC$sp(self, f: scala.Function1[typing.Any, _mapSecond.mcJC.sp__T1], evidence$19: scalan.RType[_mapSecond.mcJC.sp__T1]) -> Coll[scala.Tuple2[typing.Any, _mapSecond.mcJC.sp__T1]]: ...
    _mapSecond$mcJD$sp__T1 = typing.TypeVar('_mapSecond$mcJD$sp__T1')  # <T1>
    def mapSecond$mcJD$sp(self, f: scala.Function1[typing.Any, _mapSecond.mcJD.sp__T1], evidence$19: scalan.RType[_mapSecond.mcJD.sp__T1]) -> Coll[scala.Tuple2[typing.Any, _mapSecond.mcJD.sp__T1]]: ...
    _mapSecond$mcJF$sp__T1 = typing.TypeVar('_mapSecond$mcJF$sp__T1')  # <T1>
    def mapSecond$mcJF$sp(self, f: scala.Function1[typing.Any, _mapSecond.mcJF.sp__T1], evidence$19: scalan.RType[_mapSecond.mcJF.sp__T1]) -> Coll[scala.Tuple2[typing.Any, _mapSecond.mcJF.sp__T1]]: ...
    _mapSecond$mcJI$sp__T1 = typing.TypeVar('_mapSecond$mcJI$sp__T1')  # <T1>
    def mapSecond$mcJI$sp(self, f: scala.Function1[typing.Any, _mapSecond.mcJI.sp__T1], evidence$19: scalan.RType[_mapSecond.mcJI.sp__T1]) -> Coll[scala.Tuple2[typing.Any, _mapSecond.mcJI.sp__T1]]: ...
    _mapSecond$mcJJ$sp__T1 = typing.TypeVar('_mapSecond$mcJJ$sp__T1')  # <T1>
    def mapSecond$mcJJ$sp(self, f: scala.Function1[typing.Any, _mapSecond.mcJJ.sp__T1], evidence$19: scalan.RType[_mapSecond.mcJJ.sp__T1]) -> Coll[scala.Tuple2[typing.Any, _mapSecond.mcJJ.sp__T1]]: ...
    _mapSecond$mcJS$sp__T1 = typing.TypeVar('_mapSecond$mcJS$sp__T1')  # <T1>
    def mapSecond$mcJS$sp(self, f: scala.Function1[typing.Any, _mapSecond.mcJS.sp__T1], evidence$19: scalan.RType[_mapSecond.mcJS.sp__T1]) -> Coll[scala.Tuple2[typing.Any, _mapSecond.mcJS.sp__T1]]: ...
    _mapSecond$mcJV$sp__T1 = typing.TypeVar('_mapSecond$mcJV$sp__T1')  # <T1>
    def mapSecond$mcJV$sp(self, f: scala.Function1[scala.runtime.BoxedUnit, _mapSecond.mcJV.sp__T1], evidence$19: scalan.RType[_mapSecond.mcJV.sp__T1]) -> Coll[scala.Tuple2[typing.Any, _mapSecond.mcJV.sp__T1]]: ...
    _mapSecond$mcJZ$sp__T1 = typing.TypeVar('_mapSecond$mcJZ$sp__T1')  # <T1>
    def mapSecond$mcJZ$sp(self, f: scala.Function1[typing.Any, _mapSecond.mcJZ.sp__T1], evidence$19: scalan.RType[_mapSecond.mcJZ.sp__T1]) -> Coll[scala.Tuple2[typing.Any, _mapSecond.mcJZ.sp__T1]]: ...
    _mapSecond$mcSB$sp__T1 = typing.TypeVar('_mapSecond$mcSB$sp__T1')  # <T1>
    def mapSecond$mcSB$sp(self, f: scala.Function1[typing.Any, _mapSecond.mcSB.sp__T1], evidence$19: scalan.RType[_mapSecond.mcSB.sp__T1]) -> Coll[scala.Tuple2[typing.Any, _mapSecond.mcSB.sp__T1]]: ...
    _mapSecond$mcSC$sp__T1 = typing.TypeVar('_mapSecond$mcSC$sp__T1')  # <T1>
    def mapSecond$mcSC$sp(self, f: scala.Function1[typing.Any, _mapSecond.mcSC.sp__T1], evidence$19: scalan.RType[_mapSecond.mcSC.sp__T1]) -> Coll[scala.Tuple2[typing.Any, _mapSecond.mcSC.sp__T1]]: ...
    _mapSecond$mcSD$sp__T1 = typing.TypeVar('_mapSecond$mcSD$sp__T1')  # <T1>
    def mapSecond$mcSD$sp(self, f: scala.Function1[typing.Any, _mapSecond.mcSD.sp__T1], evidence$19: scalan.RType[_mapSecond.mcSD.sp__T1]) -> Coll[scala.Tuple2[typing.Any, _mapSecond.mcSD.sp__T1]]: ...
    _mapSecond$mcSF$sp__T1 = typing.TypeVar('_mapSecond$mcSF$sp__T1')  # <T1>
    def mapSecond$mcSF$sp(self, f: scala.Function1[typing.Any, _mapSecond.mcSF.sp__T1], evidence$19: scalan.RType[_mapSecond.mcSF.sp__T1]) -> Coll[scala.Tuple2[typing.Any, _mapSecond.mcSF.sp__T1]]: ...
    _mapSecond$mcSI$sp__T1 = typing.TypeVar('_mapSecond$mcSI$sp__T1')  # <T1>
    def mapSecond$mcSI$sp(self, f: scala.Function1[typing.Any, _mapSecond.mcSI.sp__T1], evidence$19: scalan.RType[_mapSecond.mcSI.sp__T1]) -> Coll[scala.Tuple2[typing.Any, _mapSecond.mcSI.sp__T1]]: ...
    _mapSecond$mcSJ$sp__T1 = typing.TypeVar('_mapSecond$mcSJ$sp__T1')  # <T1>
    def mapSecond$mcSJ$sp(self, f: scala.Function1[typing.Any, _mapSecond.mcSJ.sp__T1], evidence$19: scalan.RType[_mapSecond.mcSJ.sp__T1]) -> Coll[scala.Tuple2[typing.Any, _mapSecond.mcSJ.sp__T1]]: ...
    _mapSecond$mcSS$sp__T1 = typing.TypeVar('_mapSecond$mcSS$sp__T1')  # <T1>
    def mapSecond$mcSS$sp(self, f: scala.Function1[typing.Any, _mapSecond.mcSS.sp__T1], evidence$19: scalan.RType[_mapSecond.mcSS.sp__T1]) -> Coll[scala.Tuple2[typing.Any, _mapSecond.mcSS.sp__T1]]: ...
    _mapSecond$mcSV$sp__T1 = typing.TypeVar('_mapSecond$mcSV$sp__T1')  # <T1>
    def mapSecond$mcSV$sp(self, f: scala.Function1[scala.runtime.BoxedUnit, _mapSecond.mcSV.sp__T1], evidence$19: scalan.RType[_mapSecond.mcSV.sp__T1]) -> Coll[scala.Tuple2[typing.Any, _mapSecond.mcSV.sp__T1]]: ...
    _mapSecond$mcSZ$sp__T1 = typing.TypeVar('_mapSecond$mcSZ$sp__T1')  # <T1>
    def mapSecond$mcSZ$sp(self, f: scala.Function1[typing.Any, _mapSecond.mcSZ.sp__T1], evidence$19: scalan.RType[_mapSecond.mcSZ.sp__T1]) -> Coll[scala.Tuple2[typing.Any, _mapSecond.mcSZ.sp__T1]]: ...
    _mapSecond$mcVB$sp__T1 = typing.TypeVar('_mapSecond$mcVB$sp__T1')  # <T1>
    def mapSecond$mcVB$sp(self, f: scala.Function1[typing.Any, _mapSecond.mcVB.sp__T1], evidence$19: scalan.RType[_mapSecond.mcVB.sp__T1]) -> Coll[scala.Tuple2[scala.runtime.BoxedUnit, _mapSecond.mcVB.sp__T1]]: ...
    _mapSecond$mcVC$sp__T1 = typing.TypeVar('_mapSecond$mcVC$sp__T1')  # <T1>
    def mapSecond$mcVC$sp(self, f: scala.Function1[typing.Any, _mapSecond.mcVC.sp__T1], evidence$19: scalan.RType[_mapSecond.mcVC.sp__T1]) -> Coll[scala.Tuple2[scala.runtime.BoxedUnit, _mapSecond.mcVC.sp__T1]]: ...
    _mapSecond$mcVD$sp__T1 = typing.TypeVar('_mapSecond$mcVD$sp__T1')  # <T1>
    def mapSecond$mcVD$sp(self, f: scala.Function1[typing.Any, _mapSecond.mcVD.sp__T1], evidence$19: scalan.RType[_mapSecond.mcVD.sp__T1]) -> Coll[scala.Tuple2[scala.runtime.BoxedUnit, _mapSecond.mcVD.sp__T1]]: ...
    _mapSecond$mcVF$sp__T1 = typing.TypeVar('_mapSecond$mcVF$sp__T1')  # <T1>
    def mapSecond$mcVF$sp(self, f: scala.Function1[typing.Any, _mapSecond.mcVF.sp__T1], evidence$19: scalan.RType[_mapSecond.mcVF.sp__T1]) -> Coll[scala.Tuple2[scala.runtime.BoxedUnit, _mapSecond.mcVF.sp__T1]]: ...
    _mapSecond$mcVI$sp__T1 = typing.TypeVar('_mapSecond$mcVI$sp__T1')  # <T1>
    def mapSecond$mcVI$sp(self, f: scala.Function1[typing.Any, _mapSecond.mcVI.sp__T1], evidence$19: scalan.RType[_mapSecond.mcVI.sp__T1]) -> Coll[scala.Tuple2[scala.runtime.BoxedUnit, _mapSecond.mcVI.sp__T1]]: ...
    _mapSecond$mcVJ$sp__T1 = typing.TypeVar('_mapSecond$mcVJ$sp__T1')  # <T1>
    def mapSecond$mcVJ$sp(self, f: scala.Function1[typing.Any, _mapSecond.mcVJ.sp__T1], evidence$19: scalan.RType[_mapSecond.mcVJ.sp__T1]) -> Coll[scala.Tuple2[scala.runtime.BoxedUnit, _mapSecond.mcVJ.sp__T1]]: ...
    _mapSecond$mcVS$sp__T1 = typing.TypeVar('_mapSecond$mcVS$sp__T1')  # <T1>
    def mapSecond$mcVS$sp(self, f: scala.Function1[typing.Any, _mapSecond.mcVS.sp__T1], evidence$19: scalan.RType[_mapSecond.mcVS.sp__T1]) -> Coll[scala.Tuple2[scala.runtime.BoxedUnit, _mapSecond.mcVS.sp__T1]]: ...
    _mapSecond$mcVV$sp__T1 = typing.TypeVar('_mapSecond$mcVV$sp__T1')  # <T1>
    def mapSecond$mcVV$sp(self, f: scala.Function1[scala.runtime.BoxedUnit, _mapSecond.mcVV.sp__T1], evidence$19: scalan.RType[_mapSecond.mcVV.sp__T1]) -> Coll[scala.Tuple2[scala.runtime.BoxedUnit, _mapSecond.mcVV.sp__T1]]: ...
    _mapSecond$mcVZ$sp__T1 = typing.TypeVar('_mapSecond$mcVZ$sp__T1')  # <T1>
    def mapSecond$mcVZ$sp(self, f: scala.Function1[typing.Any, _mapSecond.mcVZ.sp__T1], evidence$19: scalan.RType[_mapSecond.mcVZ.sp__T1]) -> Coll[scala.Tuple2[scala.runtime.BoxedUnit, _mapSecond.mcVZ.sp__T1]]: ...
    _mapSecond$mcZB$sp__T1 = typing.TypeVar('_mapSecond$mcZB$sp__T1')  # <T1>
    def mapSecond$mcZB$sp(self, f: scala.Function1[typing.Any, _mapSecond.mcZB.sp__T1], evidence$19: scalan.RType[_mapSecond.mcZB.sp__T1]) -> Coll[scala.Tuple2[typing.Any, _mapSecond.mcZB.sp__T1]]: ...
    _mapSecond$mcZC$sp__T1 = typing.TypeVar('_mapSecond$mcZC$sp__T1')  # <T1>
    def mapSecond$mcZC$sp(self, f: scala.Function1[typing.Any, _mapSecond.mcZC.sp__T1], evidence$19: scalan.RType[_mapSecond.mcZC.sp__T1]) -> Coll[scala.Tuple2[typing.Any, _mapSecond.mcZC.sp__T1]]: ...
    _mapSecond$mcZD$sp__T1 = typing.TypeVar('_mapSecond$mcZD$sp__T1')  # <T1>
    def mapSecond$mcZD$sp(self, f: scala.Function1[typing.Any, _mapSecond.mcZD.sp__T1], evidence$19: scalan.RType[_mapSecond.mcZD.sp__T1]) -> Coll[scala.Tuple2[typing.Any, _mapSecond.mcZD.sp__T1]]: ...
    _mapSecond$mcZF$sp__T1 = typing.TypeVar('_mapSecond$mcZF$sp__T1')  # <T1>
    def mapSecond$mcZF$sp(self, f: scala.Function1[typing.Any, _mapSecond.mcZF.sp__T1], evidence$19: scalan.RType[_mapSecond.mcZF.sp__T1]) -> Coll[scala.Tuple2[typing.Any, _mapSecond.mcZF.sp__T1]]: ...
    _mapSecond$mcZI$sp__T1 = typing.TypeVar('_mapSecond$mcZI$sp__T1')  # <T1>
    def mapSecond$mcZI$sp(self, f: scala.Function1[typing.Any, _mapSecond.mcZI.sp__T1], evidence$19: scalan.RType[_mapSecond.mcZI.sp__T1]) -> Coll[scala.Tuple2[typing.Any, _mapSecond.mcZI.sp__T1]]: ...
    _mapSecond$mcZJ$sp__T1 = typing.TypeVar('_mapSecond$mcZJ$sp__T1')  # <T1>
    def mapSecond$mcZJ$sp(self, f: scala.Function1[typing.Any, _mapSecond.mcZJ.sp__T1], evidence$19: scalan.RType[_mapSecond.mcZJ.sp__T1]) -> Coll[scala.Tuple2[typing.Any, _mapSecond.mcZJ.sp__T1]]: ...
    _mapSecond$mcZS$sp__T1 = typing.TypeVar('_mapSecond$mcZS$sp__T1')  # <T1>
    def mapSecond$mcZS$sp(self, f: scala.Function1[typing.Any, _mapSecond.mcZS.sp__T1], evidence$19: scalan.RType[_mapSecond.mcZS.sp__T1]) -> Coll[scala.Tuple2[typing.Any, _mapSecond.mcZS.sp__T1]]: ...
    _mapSecond$mcZV$sp__T1 = typing.TypeVar('_mapSecond$mcZV$sp__T1')  # <T1>
    def mapSecond$mcZV$sp(self, f: scala.Function1[scala.runtime.BoxedUnit, _mapSecond.mcZV.sp__T1], evidence$19: scalan.RType[_mapSecond.mcZV.sp__T1]) -> Coll[scala.Tuple2[typing.Any, _mapSecond.mcZV.sp__T1]]: ...
    _mapSecond$mcZZ$sp__T1 = typing.TypeVar('_mapSecond$mcZZ$sp__T1')  # <T1>
    def mapSecond$mcZZ$sp(self, f: scala.Function1[typing.Any, _mapSecond.mcZZ.sp__T1], evidence$19: scalan.RType[_mapSecond.mcZZ.sp__T1]) -> Coll[scala.Tuple2[typing.Any, _mapSecond.mcZZ.sp__T1]]: ...
    def nonEmpty(self) -> bool: ...
    def partition(self, pred: scala.Function1[scala.Tuple2[_PairOfCols__L, _PairOfCols__R], typing.Any]) -> scala.Tuple2[Coll[scala.Tuple2[_PairOfCols__L, _PairOfCols__R]], Coll[scala.Tuple2[_PairOfCols__L, _PairOfCols__R]]]: ...
    def partition$mcB$sp(self, pred: scala.Function1[typing.Any, typing.Any]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def partition$mcBB$sp(self, pred: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> scala.Tuple2[Coll[scala.Tuple2[typing.Any, typing.Any]], Coll[scala.Tuple2[typing.Any, typing.Any]]]: ...
    def partition$mcBC$sp(self, pred: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> scala.Tuple2[Coll[scala.Tuple2[typing.Any, typing.Any]], Coll[scala.Tuple2[typing.Any, typing.Any]]]: ...
    def partition$mcBD$sp(self, pred: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> scala.Tuple2[Coll[scala.Tuple2[typing.Any, typing.Any]], Coll[scala.Tuple2[typing.Any, typing.Any]]]: ...
    def partition$mcBF$sp(self, pred: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> scala.Tuple2[Coll[scala.Tuple2[typing.Any, typing.Any]], Coll[scala.Tuple2[typing.Any, typing.Any]]]: ...
    def partition$mcBI$sp(self, pred: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> scala.Tuple2[Coll[scala.Tuple2[typing.Any, typing.Any]], Coll[scala.Tuple2[typing.Any, typing.Any]]]: ...
    def partition$mcBJ$sp(self, pred: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> scala.Tuple2[Coll[scala.Tuple2[typing.Any, typing.Any]], Coll[scala.Tuple2[typing.Any, typing.Any]]]: ...
    def partition$mcBS$sp(self, pred: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> scala.Tuple2[Coll[scala.Tuple2[typing.Any, typing.Any]], Coll[scala.Tuple2[typing.Any, typing.Any]]]: ...
    def partition$mcBV$sp(self, pred: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any]) -> scala.Tuple2[Coll[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]], Coll[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]]: ...
    def partition$mcBZ$sp(self, pred: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> scala.Tuple2[Coll[scala.Tuple2[typing.Any, typing.Any]], Coll[scala.Tuple2[typing.Any, typing.Any]]]: ...
    def partition$mcC$sp(self, pred: scala.Function1[typing.Any, typing.Any]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def partition$mcCB$sp(self, pred: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> scala.Tuple2[Coll[scala.Tuple2[typing.Any, typing.Any]], Coll[scala.Tuple2[typing.Any, typing.Any]]]: ...
    def partition$mcCC$sp(self, pred: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> scala.Tuple2[Coll[scala.Tuple2[typing.Any, typing.Any]], Coll[scala.Tuple2[typing.Any, typing.Any]]]: ...
    def partition$mcCD$sp(self, pred: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> scala.Tuple2[Coll[scala.Tuple2[typing.Any, typing.Any]], Coll[scala.Tuple2[typing.Any, typing.Any]]]: ...
    def partition$mcCF$sp(self, pred: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> scala.Tuple2[Coll[scala.Tuple2[typing.Any, typing.Any]], Coll[scala.Tuple2[typing.Any, typing.Any]]]: ...
    def partition$mcCI$sp(self, pred: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> scala.Tuple2[Coll[scala.Tuple2[typing.Any, typing.Any]], Coll[scala.Tuple2[typing.Any, typing.Any]]]: ...
    def partition$mcCJ$sp(self, pred: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> scala.Tuple2[Coll[scala.Tuple2[typing.Any, typing.Any]], Coll[scala.Tuple2[typing.Any, typing.Any]]]: ...
    def partition$mcCS$sp(self, pred: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> scala.Tuple2[Coll[scala.Tuple2[typing.Any, typing.Any]], Coll[scala.Tuple2[typing.Any, typing.Any]]]: ...
    def partition$mcCV$sp(self, pred: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any]) -> scala.Tuple2[Coll[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]], Coll[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]]: ...
    def partition$mcCZ$sp(self, pred: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> scala.Tuple2[Coll[scala.Tuple2[typing.Any, typing.Any]], Coll[scala.Tuple2[typing.Any, typing.Any]]]: ...
    def partition$mcD$sp(self, pred: scala.Function1[typing.Any, typing.Any]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def partition$mcDB$sp(self, pred: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> scala.Tuple2[Coll[scala.Tuple2[typing.Any, typing.Any]], Coll[scala.Tuple2[typing.Any, typing.Any]]]: ...
    def partition$mcDC$sp(self, pred: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> scala.Tuple2[Coll[scala.Tuple2[typing.Any, typing.Any]], Coll[scala.Tuple2[typing.Any, typing.Any]]]: ...
    def partition$mcDD$sp(self, pred: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> scala.Tuple2[Coll[scala.Tuple2[typing.Any, typing.Any]], Coll[scala.Tuple2[typing.Any, typing.Any]]]: ...
    def partition$mcDF$sp(self, pred: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> scala.Tuple2[Coll[scala.Tuple2[typing.Any, typing.Any]], Coll[scala.Tuple2[typing.Any, typing.Any]]]: ...
    def partition$mcDI$sp(self, pred: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> scala.Tuple2[Coll[scala.Tuple2[typing.Any, typing.Any]], Coll[scala.Tuple2[typing.Any, typing.Any]]]: ...
    def partition$mcDJ$sp(self, pred: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> scala.Tuple2[Coll[scala.Tuple2[typing.Any, typing.Any]], Coll[scala.Tuple2[typing.Any, typing.Any]]]: ...
    def partition$mcDS$sp(self, pred: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> scala.Tuple2[Coll[scala.Tuple2[typing.Any, typing.Any]], Coll[scala.Tuple2[typing.Any, typing.Any]]]: ...
    def partition$mcDV$sp(self, pred: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any]) -> scala.Tuple2[Coll[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]], Coll[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]]: ...
    def partition$mcDZ$sp(self, pred: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> scala.Tuple2[Coll[scala.Tuple2[typing.Any, typing.Any]], Coll[scala.Tuple2[typing.Any, typing.Any]]]: ...
    def partition$mcF$sp(self, pred: scala.Function1[typing.Any, typing.Any]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def partition$mcFB$sp(self, pred: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> scala.Tuple2[Coll[scala.Tuple2[typing.Any, typing.Any]], Coll[scala.Tuple2[typing.Any, typing.Any]]]: ...
    def partition$mcFC$sp(self, pred: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> scala.Tuple2[Coll[scala.Tuple2[typing.Any, typing.Any]], Coll[scala.Tuple2[typing.Any, typing.Any]]]: ...
    def partition$mcFD$sp(self, pred: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> scala.Tuple2[Coll[scala.Tuple2[typing.Any, typing.Any]], Coll[scala.Tuple2[typing.Any, typing.Any]]]: ...
    def partition$mcFF$sp(self, pred: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> scala.Tuple2[Coll[scala.Tuple2[typing.Any, typing.Any]], Coll[scala.Tuple2[typing.Any, typing.Any]]]: ...
    def partition$mcFI$sp(self, pred: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> scala.Tuple2[Coll[scala.Tuple2[typing.Any, typing.Any]], Coll[scala.Tuple2[typing.Any, typing.Any]]]: ...
    def partition$mcFJ$sp(self, pred: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> scala.Tuple2[Coll[scala.Tuple2[typing.Any, typing.Any]], Coll[scala.Tuple2[typing.Any, typing.Any]]]: ...
    def partition$mcFS$sp(self, pred: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> scala.Tuple2[Coll[scala.Tuple2[typing.Any, typing.Any]], Coll[scala.Tuple2[typing.Any, typing.Any]]]: ...
    def partition$mcFV$sp(self, pred: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any]) -> scala.Tuple2[Coll[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]], Coll[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]]: ...
    def partition$mcFZ$sp(self, pred: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> scala.Tuple2[Coll[scala.Tuple2[typing.Any, typing.Any]], Coll[scala.Tuple2[typing.Any, typing.Any]]]: ...
    def partition$mcI$sp(self, pred: scala.Function1[typing.Any, typing.Any]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def partition$mcIB$sp(self, pred: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> scala.Tuple2[Coll[scala.Tuple2[typing.Any, typing.Any]], Coll[scala.Tuple2[typing.Any, typing.Any]]]: ...
    def partition$mcIC$sp(self, pred: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> scala.Tuple2[Coll[scala.Tuple2[typing.Any, typing.Any]], Coll[scala.Tuple2[typing.Any, typing.Any]]]: ...
    def partition$mcID$sp(self, pred: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> scala.Tuple2[Coll[scala.Tuple2[typing.Any, typing.Any]], Coll[scala.Tuple2[typing.Any, typing.Any]]]: ...
    def partition$mcIF$sp(self, pred: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> scala.Tuple2[Coll[scala.Tuple2[typing.Any, typing.Any]], Coll[scala.Tuple2[typing.Any, typing.Any]]]: ...
    def partition$mcII$sp(self, pred: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> scala.Tuple2[Coll[scala.Tuple2[typing.Any, typing.Any]], Coll[scala.Tuple2[typing.Any, typing.Any]]]: ...
    def partition$mcIJ$sp(self, pred: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> scala.Tuple2[Coll[scala.Tuple2[typing.Any, typing.Any]], Coll[scala.Tuple2[typing.Any, typing.Any]]]: ...
    def partition$mcIS$sp(self, pred: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> scala.Tuple2[Coll[scala.Tuple2[typing.Any, typing.Any]], Coll[scala.Tuple2[typing.Any, typing.Any]]]: ...
    def partition$mcIV$sp(self, pred: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any]) -> scala.Tuple2[Coll[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]], Coll[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]]: ...
    def partition$mcIZ$sp(self, pred: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> scala.Tuple2[Coll[scala.Tuple2[typing.Any, typing.Any]], Coll[scala.Tuple2[typing.Any, typing.Any]]]: ...
    def partition$mcJ$sp(self, pred: scala.Function1[typing.Any, typing.Any]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def partition$mcJB$sp(self, pred: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> scala.Tuple2[Coll[scala.Tuple2[typing.Any, typing.Any]], Coll[scala.Tuple2[typing.Any, typing.Any]]]: ...
    def partition$mcJC$sp(self, pred: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> scala.Tuple2[Coll[scala.Tuple2[typing.Any, typing.Any]], Coll[scala.Tuple2[typing.Any, typing.Any]]]: ...
    def partition$mcJD$sp(self, pred: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> scala.Tuple2[Coll[scala.Tuple2[typing.Any, typing.Any]], Coll[scala.Tuple2[typing.Any, typing.Any]]]: ...
    def partition$mcJF$sp(self, pred: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> scala.Tuple2[Coll[scala.Tuple2[typing.Any, typing.Any]], Coll[scala.Tuple2[typing.Any, typing.Any]]]: ...
    def partition$mcJI$sp(self, pred: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> scala.Tuple2[Coll[scala.Tuple2[typing.Any, typing.Any]], Coll[scala.Tuple2[typing.Any, typing.Any]]]: ...
    def partition$mcJJ$sp(self, pred: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> scala.Tuple2[Coll[scala.Tuple2[typing.Any, typing.Any]], Coll[scala.Tuple2[typing.Any, typing.Any]]]: ...
    def partition$mcJS$sp(self, pred: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> scala.Tuple2[Coll[scala.Tuple2[typing.Any, typing.Any]], Coll[scala.Tuple2[typing.Any, typing.Any]]]: ...
    def partition$mcJV$sp(self, pred: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any]) -> scala.Tuple2[Coll[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]], Coll[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]]: ...
    def partition$mcJZ$sp(self, pred: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> scala.Tuple2[Coll[scala.Tuple2[typing.Any, typing.Any]], Coll[scala.Tuple2[typing.Any, typing.Any]]]: ...
    def partition$mcS$sp(self, pred: scala.Function1[typing.Any, typing.Any]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def partition$mcSB$sp(self, pred: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> scala.Tuple2[Coll[scala.Tuple2[typing.Any, typing.Any]], Coll[scala.Tuple2[typing.Any, typing.Any]]]: ...
    def partition$mcSC$sp(self, pred: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> scala.Tuple2[Coll[scala.Tuple2[typing.Any, typing.Any]], Coll[scala.Tuple2[typing.Any, typing.Any]]]: ...
    def partition$mcSD$sp(self, pred: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> scala.Tuple2[Coll[scala.Tuple2[typing.Any, typing.Any]], Coll[scala.Tuple2[typing.Any, typing.Any]]]: ...
    def partition$mcSF$sp(self, pred: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> scala.Tuple2[Coll[scala.Tuple2[typing.Any, typing.Any]], Coll[scala.Tuple2[typing.Any, typing.Any]]]: ...
    def partition$mcSI$sp(self, pred: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> scala.Tuple2[Coll[scala.Tuple2[typing.Any, typing.Any]], Coll[scala.Tuple2[typing.Any, typing.Any]]]: ...
    def partition$mcSJ$sp(self, pred: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> scala.Tuple2[Coll[scala.Tuple2[typing.Any, typing.Any]], Coll[scala.Tuple2[typing.Any, typing.Any]]]: ...
    def partition$mcSS$sp(self, pred: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> scala.Tuple2[Coll[scala.Tuple2[typing.Any, typing.Any]], Coll[scala.Tuple2[typing.Any, typing.Any]]]: ...
    def partition$mcSV$sp(self, pred: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any]) -> scala.Tuple2[Coll[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]], Coll[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]]: ...
    def partition$mcSZ$sp(self, pred: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> scala.Tuple2[Coll[scala.Tuple2[typing.Any, typing.Any]], Coll[scala.Tuple2[typing.Any, typing.Any]]]: ...
    def partition$mcV$sp(self, pred: scala.Function1[scala.runtime.BoxedUnit, typing.Any]) -> scala.Tuple2[Coll[scala.runtime.BoxedUnit], Coll[scala.runtime.BoxedUnit]]: ...
    def partition$mcVB$sp(self, pred: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any]) -> scala.Tuple2[Coll[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]], Coll[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]]: ...
    def partition$mcVC$sp(self, pred: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any]) -> scala.Tuple2[Coll[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]], Coll[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]]: ...
    def partition$mcVD$sp(self, pred: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any]) -> scala.Tuple2[Coll[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]], Coll[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]]: ...
    def partition$mcVF$sp(self, pred: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any]) -> scala.Tuple2[Coll[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]], Coll[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]]: ...
    def partition$mcVI$sp(self, pred: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any]) -> scala.Tuple2[Coll[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]], Coll[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]]: ...
    def partition$mcVJ$sp(self, pred: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any]) -> scala.Tuple2[Coll[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]], Coll[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]]: ...
    def partition$mcVS$sp(self, pred: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any]) -> scala.Tuple2[Coll[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]], Coll[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]]: ...
    def partition$mcVV$sp(self, pred: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, scala.runtime.BoxedUnit], typing.Any]) -> scala.Tuple2[Coll[scala.Tuple2[scala.runtime.BoxedUnit, scala.runtime.BoxedUnit]], Coll[scala.Tuple2[scala.runtime.BoxedUnit, scala.runtime.BoxedUnit]]]: ...
    def partition$mcVZ$sp(self, pred: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any]) -> scala.Tuple2[Coll[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]], Coll[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]]: ...
    def partition$mcZ$sp(self, pred: scala.Function1[typing.Any, typing.Any]) -> scala.Tuple2[Coll[typing.Any], Coll[typing.Any]]: ...
    def partition$mcZB$sp(self, pred: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> scala.Tuple2[Coll[scala.Tuple2[typing.Any, typing.Any]], Coll[scala.Tuple2[typing.Any, typing.Any]]]: ...
    def partition$mcZC$sp(self, pred: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> scala.Tuple2[Coll[scala.Tuple2[typing.Any, typing.Any]], Coll[scala.Tuple2[typing.Any, typing.Any]]]: ...
    def partition$mcZD$sp(self, pred: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> scala.Tuple2[Coll[scala.Tuple2[typing.Any, typing.Any]], Coll[scala.Tuple2[typing.Any, typing.Any]]]: ...
    def partition$mcZF$sp(self, pred: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> scala.Tuple2[Coll[scala.Tuple2[typing.Any, typing.Any]], Coll[scala.Tuple2[typing.Any, typing.Any]]]: ...
    def partition$mcZI$sp(self, pred: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> scala.Tuple2[Coll[scala.Tuple2[typing.Any, typing.Any]], Coll[scala.Tuple2[typing.Any, typing.Any]]]: ...
    def partition$mcZJ$sp(self, pred: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> scala.Tuple2[Coll[scala.Tuple2[typing.Any, typing.Any]], Coll[scala.Tuple2[typing.Any, typing.Any]]]: ...
    def partition$mcZS$sp(self, pred: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> scala.Tuple2[Coll[scala.Tuple2[typing.Any, typing.Any]], Coll[scala.Tuple2[typing.Any, typing.Any]]]: ...
    def partition$mcZV$sp(self, pred: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any]) -> scala.Tuple2[Coll[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]], Coll[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]]: ...
    def partition$mcZZ$sp(self, pred: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any]) -> scala.Tuple2[Coll[scala.Tuple2[typing.Any, typing.Any]], Coll[scala.Tuple2[typing.Any, typing.Any]]]: ...
    def patch(self, from_: int, patch: Coll[scala.Tuple2[_PairOfCols__L, _PairOfCols__R]], replaced: int) -> Coll[scala.Tuple2[_PairOfCols__L, _PairOfCols__R]]: ...
    def patch$mcB$sp(self, from_: int, patch: Coll[typing.Any], replaced: int) -> Coll[typing.Any]: ...
    def patch$mcBB$sp(self, from_: int, patch: Coll[scala.Tuple2[typing.Any, typing.Any]], replaced: int) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def patch$mcBC$sp(self, from_: int, patch: Coll[scala.Tuple2[typing.Any, typing.Any]], replaced: int) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def patch$mcBD$sp(self, from_: int, patch: Coll[scala.Tuple2[typing.Any, typing.Any]], replaced: int) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def patch$mcBF$sp(self, from_: int, patch: Coll[scala.Tuple2[typing.Any, typing.Any]], replaced: int) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def patch$mcBI$sp(self, from_: int, patch: Coll[scala.Tuple2[typing.Any, typing.Any]], replaced: int) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def patch$mcBJ$sp(self, from_: int, patch: Coll[scala.Tuple2[typing.Any, typing.Any]], replaced: int) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def patch$mcBS$sp(self, from_: int, patch: Coll[scala.Tuple2[typing.Any, typing.Any]], replaced: int) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def patch$mcBV$sp(self, from_: int, patch: Coll[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]], replaced: int) -> Coll[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]: ...
    def patch$mcBZ$sp(self, from_: int, patch: Coll[scala.Tuple2[typing.Any, typing.Any]], replaced: int) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def patch$mcC$sp(self, from_: int, patch: Coll[typing.Any], replaced: int) -> Coll[typing.Any]: ...
    def patch$mcCB$sp(self, from_: int, patch: Coll[scala.Tuple2[typing.Any, typing.Any]], replaced: int) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def patch$mcCC$sp(self, from_: int, patch: Coll[scala.Tuple2[typing.Any, typing.Any]], replaced: int) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def patch$mcCD$sp(self, from_: int, patch: Coll[scala.Tuple2[typing.Any, typing.Any]], replaced: int) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def patch$mcCF$sp(self, from_: int, patch: Coll[scala.Tuple2[typing.Any, typing.Any]], replaced: int) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def patch$mcCI$sp(self, from_: int, patch: Coll[scala.Tuple2[typing.Any, typing.Any]], replaced: int) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def patch$mcCJ$sp(self, from_: int, patch: Coll[scala.Tuple2[typing.Any, typing.Any]], replaced: int) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def patch$mcCS$sp(self, from_: int, patch: Coll[scala.Tuple2[typing.Any, typing.Any]], replaced: int) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def patch$mcCV$sp(self, from_: int, patch: Coll[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]], replaced: int) -> Coll[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]: ...
    def patch$mcCZ$sp(self, from_: int, patch: Coll[scala.Tuple2[typing.Any, typing.Any]], replaced: int) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def patch$mcD$sp(self, from_: int, patch: Coll[typing.Any], replaced: int) -> Coll[typing.Any]: ...
    def patch$mcDB$sp(self, from_: int, patch: Coll[scala.Tuple2[typing.Any, typing.Any]], replaced: int) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def patch$mcDC$sp(self, from_: int, patch: Coll[scala.Tuple2[typing.Any, typing.Any]], replaced: int) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def patch$mcDD$sp(self, from_: int, patch: Coll[scala.Tuple2[typing.Any, typing.Any]], replaced: int) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def patch$mcDF$sp(self, from_: int, patch: Coll[scala.Tuple2[typing.Any, typing.Any]], replaced: int) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def patch$mcDI$sp(self, from_: int, patch: Coll[scala.Tuple2[typing.Any, typing.Any]], replaced: int) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def patch$mcDJ$sp(self, from_: int, patch: Coll[scala.Tuple2[typing.Any, typing.Any]], replaced: int) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def patch$mcDS$sp(self, from_: int, patch: Coll[scala.Tuple2[typing.Any, typing.Any]], replaced: int) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def patch$mcDV$sp(self, from_: int, patch: Coll[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]], replaced: int) -> Coll[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]: ...
    def patch$mcDZ$sp(self, from_: int, patch: Coll[scala.Tuple2[typing.Any, typing.Any]], replaced: int) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def patch$mcF$sp(self, from_: int, patch: Coll[typing.Any], replaced: int) -> Coll[typing.Any]: ...
    def patch$mcFB$sp(self, from_: int, patch: Coll[scala.Tuple2[typing.Any, typing.Any]], replaced: int) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def patch$mcFC$sp(self, from_: int, patch: Coll[scala.Tuple2[typing.Any, typing.Any]], replaced: int) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def patch$mcFD$sp(self, from_: int, patch: Coll[scala.Tuple2[typing.Any, typing.Any]], replaced: int) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def patch$mcFF$sp(self, from_: int, patch: Coll[scala.Tuple2[typing.Any, typing.Any]], replaced: int) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def patch$mcFI$sp(self, from_: int, patch: Coll[scala.Tuple2[typing.Any, typing.Any]], replaced: int) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def patch$mcFJ$sp(self, from_: int, patch: Coll[scala.Tuple2[typing.Any, typing.Any]], replaced: int) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def patch$mcFS$sp(self, from_: int, patch: Coll[scala.Tuple2[typing.Any, typing.Any]], replaced: int) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def patch$mcFV$sp(self, from_: int, patch: Coll[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]], replaced: int) -> Coll[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]: ...
    def patch$mcFZ$sp(self, from_: int, patch: Coll[scala.Tuple2[typing.Any, typing.Any]], replaced: int) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def patch$mcI$sp(self, from_: int, patch: Coll[typing.Any], replaced: int) -> Coll[typing.Any]: ...
    def patch$mcIB$sp(self, from_: int, patch: Coll[scala.Tuple2[typing.Any, typing.Any]], replaced: int) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def patch$mcIC$sp(self, from_: int, patch: Coll[scala.Tuple2[typing.Any, typing.Any]], replaced: int) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def patch$mcID$sp(self, from_: int, patch: Coll[scala.Tuple2[typing.Any, typing.Any]], replaced: int) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def patch$mcIF$sp(self, from_: int, patch: Coll[scala.Tuple2[typing.Any, typing.Any]], replaced: int) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def patch$mcII$sp(self, from_: int, patch: Coll[scala.Tuple2[typing.Any, typing.Any]], replaced: int) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def patch$mcIJ$sp(self, from_: int, patch: Coll[scala.Tuple2[typing.Any, typing.Any]], replaced: int) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def patch$mcIS$sp(self, from_: int, patch: Coll[scala.Tuple2[typing.Any, typing.Any]], replaced: int) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def patch$mcIV$sp(self, from_: int, patch: Coll[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]], replaced: int) -> Coll[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]: ...
    def patch$mcIZ$sp(self, from_: int, patch: Coll[scala.Tuple2[typing.Any, typing.Any]], replaced: int) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def patch$mcJ$sp(self, from_: int, patch: Coll[typing.Any], replaced: int) -> Coll[typing.Any]: ...
    def patch$mcJB$sp(self, from_: int, patch: Coll[scala.Tuple2[typing.Any, typing.Any]], replaced: int) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def patch$mcJC$sp(self, from_: int, patch: Coll[scala.Tuple2[typing.Any, typing.Any]], replaced: int) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def patch$mcJD$sp(self, from_: int, patch: Coll[scala.Tuple2[typing.Any, typing.Any]], replaced: int) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def patch$mcJF$sp(self, from_: int, patch: Coll[scala.Tuple2[typing.Any, typing.Any]], replaced: int) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def patch$mcJI$sp(self, from_: int, patch: Coll[scala.Tuple2[typing.Any, typing.Any]], replaced: int) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def patch$mcJJ$sp(self, from_: int, patch: Coll[scala.Tuple2[typing.Any, typing.Any]], replaced: int) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def patch$mcJS$sp(self, from_: int, patch: Coll[scala.Tuple2[typing.Any, typing.Any]], replaced: int) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def patch$mcJV$sp(self, from_: int, patch: Coll[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]], replaced: int) -> Coll[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]: ...
    def patch$mcJZ$sp(self, from_: int, patch: Coll[scala.Tuple2[typing.Any, typing.Any]], replaced: int) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def patch$mcS$sp(self, from_: int, patch: Coll[typing.Any], replaced: int) -> Coll[typing.Any]: ...
    def patch$mcSB$sp(self, from_: int, patch: Coll[scala.Tuple2[typing.Any, typing.Any]], replaced: int) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def patch$mcSC$sp(self, from_: int, patch: Coll[scala.Tuple2[typing.Any, typing.Any]], replaced: int) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def patch$mcSD$sp(self, from_: int, patch: Coll[scala.Tuple2[typing.Any, typing.Any]], replaced: int) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def patch$mcSF$sp(self, from_: int, patch: Coll[scala.Tuple2[typing.Any, typing.Any]], replaced: int) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def patch$mcSI$sp(self, from_: int, patch: Coll[scala.Tuple2[typing.Any, typing.Any]], replaced: int) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def patch$mcSJ$sp(self, from_: int, patch: Coll[scala.Tuple2[typing.Any, typing.Any]], replaced: int) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def patch$mcSS$sp(self, from_: int, patch: Coll[scala.Tuple2[typing.Any, typing.Any]], replaced: int) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def patch$mcSV$sp(self, from_: int, patch: Coll[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]], replaced: int) -> Coll[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]: ...
    def patch$mcSZ$sp(self, from_: int, patch: Coll[scala.Tuple2[typing.Any, typing.Any]], replaced: int) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def patch$mcV$sp(self, from_: int, patch: Coll[scala.runtime.BoxedUnit], replaced: int) -> Coll[scala.runtime.BoxedUnit]: ...
    def patch$mcVB$sp(self, from_: int, patch: Coll[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]], replaced: int) -> Coll[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]: ...
    def patch$mcVC$sp(self, from_: int, patch: Coll[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]], replaced: int) -> Coll[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]: ...
    def patch$mcVD$sp(self, from_: int, patch: Coll[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]], replaced: int) -> Coll[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]: ...
    def patch$mcVF$sp(self, from_: int, patch: Coll[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]], replaced: int) -> Coll[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]: ...
    def patch$mcVI$sp(self, from_: int, patch: Coll[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]], replaced: int) -> Coll[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]: ...
    def patch$mcVJ$sp(self, from_: int, patch: Coll[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]], replaced: int) -> Coll[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]: ...
    def patch$mcVS$sp(self, from_: int, patch: Coll[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]], replaced: int) -> Coll[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]: ...
    def patch$mcVV$sp(self, from_: int, patch: Coll[scala.Tuple2[scala.runtime.BoxedUnit, scala.runtime.BoxedUnit]], replaced: int) -> Coll[scala.Tuple2[scala.runtime.BoxedUnit, scala.runtime.BoxedUnit]]: ...
    def patch$mcVZ$sp(self, from_: int, patch: Coll[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]], replaced: int) -> Coll[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]: ...
    def patch$mcZ$sp(self, from_: int, patch: Coll[typing.Any], replaced: int) -> Coll[typing.Any]: ...
    def patch$mcZB$sp(self, from_: int, patch: Coll[scala.Tuple2[typing.Any, typing.Any]], replaced: int) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def patch$mcZC$sp(self, from_: int, patch: Coll[scala.Tuple2[typing.Any, typing.Any]], replaced: int) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def patch$mcZD$sp(self, from_: int, patch: Coll[scala.Tuple2[typing.Any, typing.Any]], replaced: int) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def patch$mcZF$sp(self, from_: int, patch: Coll[scala.Tuple2[typing.Any, typing.Any]], replaced: int) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def patch$mcZI$sp(self, from_: int, patch: Coll[scala.Tuple2[typing.Any, typing.Any]], replaced: int) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def patch$mcZJ$sp(self, from_: int, patch: Coll[scala.Tuple2[typing.Any, typing.Any]], replaced: int) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def patch$mcZS$sp(self, from_: int, patch: Coll[scala.Tuple2[typing.Any, typing.Any]], replaced: int) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def patch$mcZV$sp(self, from_: int, patch: Coll[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]], replaced: int) -> Coll[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]: ...
    def patch$mcZZ$sp(self, from_: int, patch: Coll[scala.Tuple2[typing.Any, typing.Any]], replaced: int) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def reverse(self) -> Coll[scala.Tuple2[_PairOfCols__L, _PairOfCols__R]]: ...
    def reverse$mcB$sp(self) -> Coll[typing.Any]: ...
    def reverse$mcBB$sp(self) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def reverse$mcBC$sp(self) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def reverse$mcBD$sp(self) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def reverse$mcBF$sp(self) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def reverse$mcBI$sp(self) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def reverse$mcBJ$sp(self) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def reverse$mcBS$sp(self) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def reverse$mcBV$sp(self) -> Coll[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]: ...
    def reverse$mcBZ$sp(self) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def reverse$mcC$sp(self) -> Coll[typing.Any]: ...
    def reverse$mcCB$sp(self) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def reverse$mcCC$sp(self) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def reverse$mcCD$sp(self) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def reverse$mcCF$sp(self) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def reverse$mcCI$sp(self) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def reverse$mcCJ$sp(self) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def reverse$mcCS$sp(self) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def reverse$mcCV$sp(self) -> Coll[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]: ...
    def reverse$mcCZ$sp(self) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def reverse$mcD$sp(self) -> Coll[typing.Any]: ...
    def reverse$mcDB$sp(self) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def reverse$mcDC$sp(self) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def reverse$mcDD$sp(self) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def reverse$mcDF$sp(self) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def reverse$mcDI$sp(self) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def reverse$mcDJ$sp(self) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def reverse$mcDS$sp(self) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def reverse$mcDV$sp(self) -> Coll[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]: ...
    def reverse$mcDZ$sp(self) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def reverse$mcF$sp(self) -> Coll[typing.Any]: ...
    def reverse$mcFB$sp(self) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def reverse$mcFC$sp(self) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def reverse$mcFD$sp(self) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def reverse$mcFF$sp(self) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def reverse$mcFI$sp(self) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def reverse$mcFJ$sp(self) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def reverse$mcFS$sp(self) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def reverse$mcFV$sp(self) -> Coll[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]: ...
    def reverse$mcFZ$sp(self) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def reverse$mcI$sp(self) -> Coll[typing.Any]: ...
    def reverse$mcIB$sp(self) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def reverse$mcIC$sp(self) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def reverse$mcID$sp(self) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def reverse$mcIF$sp(self) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def reverse$mcII$sp(self) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def reverse$mcIJ$sp(self) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def reverse$mcIS$sp(self) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def reverse$mcIV$sp(self) -> Coll[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]: ...
    def reverse$mcIZ$sp(self) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def reverse$mcJ$sp(self) -> Coll[typing.Any]: ...
    def reverse$mcJB$sp(self) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def reverse$mcJC$sp(self) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def reverse$mcJD$sp(self) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def reverse$mcJF$sp(self) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def reverse$mcJI$sp(self) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def reverse$mcJJ$sp(self) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def reverse$mcJS$sp(self) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def reverse$mcJV$sp(self) -> Coll[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]: ...
    def reverse$mcJZ$sp(self) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def reverse$mcS$sp(self) -> Coll[typing.Any]: ...
    def reverse$mcSB$sp(self) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def reverse$mcSC$sp(self) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def reverse$mcSD$sp(self) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def reverse$mcSF$sp(self) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def reverse$mcSI$sp(self) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def reverse$mcSJ$sp(self) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def reverse$mcSS$sp(self) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def reverse$mcSV$sp(self) -> Coll[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]: ...
    def reverse$mcSZ$sp(self) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def reverse$mcV$sp(self) -> Coll[scala.runtime.BoxedUnit]: ...
    def reverse$mcVB$sp(self) -> Coll[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]: ...
    def reverse$mcVC$sp(self) -> Coll[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]: ...
    def reverse$mcVD$sp(self) -> Coll[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]: ...
    def reverse$mcVF$sp(self) -> Coll[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]: ...
    def reverse$mcVI$sp(self) -> Coll[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]: ...
    def reverse$mcVJ$sp(self) -> Coll[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]: ...
    def reverse$mcVS$sp(self) -> Coll[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]: ...
    def reverse$mcVV$sp(self) -> Coll[scala.Tuple2[scala.runtime.BoxedUnit, scala.runtime.BoxedUnit]]: ...
    def reverse$mcVZ$sp(self) -> Coll[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]: ...
    def reverse$mcZ$sp(self) -> Coll[typing.Any]: ...
    def reverse$mcZB$sp(self) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def reverse$mcZC$sp(self) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def reverse$mcZD$sp(self) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def reverse$mcZF$sp(self) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def reverse$mcZI$sp(self) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def reverse$mcZJ$sp(self) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def reverse$mcZS$sp(self) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def reverse$mcZV$sp(self) -> Coll[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]: ...
    def reverse$mcZZ$sp(self) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def rs(self) -> Coll[_PairOfCols__R]: ...
    def rs$mcB$sp(self) -> Coll[typing.Any]: ...
    def rs$mcC$sp(self) -> Coll[typing.Any]: ...
    def rs$mcD$sp(self) -> Coll[typing.Any]: ...
    def rs$mcF$sp(self) -> Coll[typing.Any]: ...
    def rs$mcI$sp(self) -> Coll[typing.Any]: ...
    def rs$mcJ$sp(self) -> Coll[typing.Any]: ...
    def rs$mcS$sp(self) -> Coll[typing.Any]: ...
    def rs$mcV$sp(self) -> Coll[scala.runtime.BoxedUnit]: ...
    def rs$mcZ$sp(self) -> Coll[typing.Any]: ...
    def segmentLength(self, p: scala.Function1[scala.Tuple2[_PairOfCols__L, _PairOfCols__R], typing.Any], from_: int) -> int: ...
    def segmentLength$mcB$sp(self, p: scala.Function1[typing.Any, typing.Any], from_: int) -> int: ...
    def segmentLength$mcBB$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], from_: int) -> int: ...
    def segmentLength$mcBC$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], from_: int) -> int: ...
    def segmentLength$mcBD$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], from_: int) -> int: ...
    def segmentLength$mcBF$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], from_: int) -> int: ...
    def segmentLength$mcBI$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], from_: int) -> int: ...
    def segmentLength$mcBJ$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], from_: int) -> int: ...
    def segmentLength$mcBS$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], from_: int) -> int: ...
    def segmentLength$mcBV$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any], from_: int) -> int: ...
    def segmentLength$mcBZ$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], from_: int) -> int: ...
    def segmentLength$mcC$sp(self, p: scala.Function1[typing.Any, typing.Any], from_: int) -> int: ...
    def segmentLength$mcCB$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], from_: int) -> int: ...
    def segmentLength$mcCC$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], from_: int) -> int: ...
    def segmentLength$mcCD$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], from_: int) -> int: ...
    def segmentLength$mcCF$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], from_: int) -> int: ...
    def segmentLength$mcCI$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], from_: int) -> int: ...
    def segmentLength$mcCJ$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], from_: int) -> int: ...
    def segmentLength$mcCS$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], from_: int) -> int: ...
    def segmentLength$mcCV$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any], from_: int) -> int: ...
    def segmentLength$mcCZ$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], from_: int) -> int: ...
    def segmentLength$mcD$sp(self, p: scala.Function1[typing.Any, typing.Any], from_: int) -> int: ...
    def segmentLength$mcDB$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], from_: int) -> int: ...
    def segmentLength$mcDC$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], from_: int) -> int: ...
    def segmentLength$mcDD$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], from_: int) -> int: ...
    def segmentLength$mcDF$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], from_: int) -> int: ...
    def segmentLength$mcDI$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], from_: int) -> int: ...
    def segmentLength$mcDJ$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], from_: int) -> int: ...
    def segmentLength$mcDS$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], from_: int) -> int: ...
    def segmentLength$mcDV$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any], from_: int) -> int: ...
    def segmentLength$mcDZ$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], from_: int) -> int: ...
    def segmentLength$mcF$sp(self, p: scala.Function1[typing.Any, typing.Any], from_: int) -> int: ...
    def segmentLength$mcFB$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], from_: int) -> int: ...
    def segmentLength$mcFC$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], from_: int) -> int: ...
    def segmentLength$mcFD$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], from_: int) -> int: ...
    def segmentLength$mcFF$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], from_: int) -> int: ...
    def segmentLength$mcFI$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], from_: int) -> int: ...
    def segmentLength$mcFJ$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], from_: int) -> int: ...
    def segmentLength$mcFS$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], from_: int) -> int: ...
    def segmentLength$mcFV$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any], from_: int) -> int: ...
    def segmentLength$mcFZ$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], from_: int) -> int: ...
    def segmentLength$mcI$sp(self, p: scala.Function1[typing.Any, typing.Any], from_: int) -> int: ...
    def segmentLength$mcIB$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], from_: int) -> int: ...
    def segmentLength$mcIC$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], from_: int) -> int: ...
    def segmentLength$mcID$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], from_: int) -> int: ...
    def segmentLength$mcIF$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], from_: int) -> int: ...
    def segmentLength$mcII$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], from_: int) -> int: ...
    def segmentLength$mcIJ$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], from_: int) -> int: ...
    def segmentLength$mcIS$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], from_: int) -> int: ...
    def segmentLength$mcIV$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any], from_: int) -> int: ...
    def segmentLength$mcIZ$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], from_: int) -> int: ...
    def segmentLength$mcJ$sp(self, p: scala.Function1[typing.Any, typing.Any], from_: int) -> int: ...
    def segmentLength$mcJB$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], from_: int) -> int: ...
    def segmentLength$mcJC$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], from_: int) -> int: ...
    def segmentLength$mcJD$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], from_: int) -> int: ...
    def segmentLength$mcJF$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], from_: int) -> int: ...
    def segmentLength$mcJI$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], from_: int) -> int: ...
    def segmentLength$mcJJ$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], from_: int) -> int: ...
    def segmentLength$mcJS$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], from_: int) -> int: ...
    def segmentLength$mcJV$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any], from_: int) -> int: ...
    def segmentLength$mcJZ$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], from_: int) -> int: ...
    def segmentLength$mcS$sp(self, p: scala.Function1[typing.Any, typing.Any], from_: int) -> int: ...
    def segmentLength$mcSB$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], from_: int) -> int: ...
    def segmentLength$mcSC$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], from_: int) -> int: ...
    def segmentLength$mcSD$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], from_: int) -> int: ...
    def segmentLength$mcSF$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], from_: int) -> int: ...
    def segmentLength$mcSI$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], from_: int) -> int: ...
    def segmentLength$mcSJ$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], from_: int) -> int: ...
    def segmentLength$mcSS$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], from_: int) -> int: ...
    def segmentLength$mcSV$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any], from_: int) -> int: ...
    def segmentLength$mcSZ$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], from_: int) -> int: ...
    def segmentLength$mcV$sp(self, p: scala.Function1[scala.runtime.BoxedUnit, typing.Any], from_: int) -> int: ...
    def segmentLength$mcVB$sp(self, p: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any], from_: int) -> int: ...
    def segmentLength$mcVC$sp(self, p: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any], from_: int) -> int: ...
    def segmentLength$mcVD$sp(self, p: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any], from_: int) -> int: ...
    def segmentLength$mcVF$sp(self, p: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any], from_: int) -> int: ...
    def segmentLength$mcVI$sp(self, p: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any], from_: int) -> int: ...
    def segmentLength$mcVJ$sp(self, p: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any], from_: int) -> int: ...
    def segmentLength$mcVS$sp(self, p: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any], from_: int) -> int: ...
    def segmentLength$mcVV$sp(self, p: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, scala.runtime.BoxedUnit], typing.Any], from_: int) -> int: ...
    def segmentLength$mcVZ$sp(self, p: scala.Function1[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any], from_: int) -> int: ...
    def segmentLength$mcZ$sp(self, p: scala.Function1[typing.Any, typing.Any], from_: int) -> int: ...
    def segmentLength$mcZB$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], from_: int) -> int: ...
    def segmentLength$mcZC$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], from_: int) -> int: ...
    def segmentLength$mcZD$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], from_: int) -> int: ...
    def segmentLength$mcZF$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], from_: int) -> int: ...
    def segmentLength$mcZI$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], from_: int) -> int: ...
    def segmentLength$mcZJ$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], from_: int) -> int: ...
    def segmentLength$mcZS$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], from_: int) -> int: ...
    def segmentLength$mcZV$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any], from_: int) -> int: ...
    def segmentLength$mcZZ$sp(self, p: scala.Function1[scala.Tuple2[typing.Any, typing.Any], typing.Any], from_: int) -> int: ...
    def size(self) -> int: ...
    def slice(self, from_: int, until: int) -> PairColl[_PairOfCols__L, _PairOfCols__R]: ...
    def slice$mcB$sp(self, from_: int, until: int) -> Coll[typing.Any]: ...
    def slice$mcBB$sp(self, from_: int, until: int) -> PairColl[typing.Any, typing.Any]: ...
    def slice$mcBC$sp(self, from_: int, until: int) -> PairColl[typing.Any, typing.Any]: ...
    def slice$mcBD$sp(self, from_: int, until: int) -> PairColl[typing.Any, typing.Any]: ...
    def slice$mcBF$sp(self, from_: int, until: int) -> PairColl[typing.Any, typing.Any]: ...
    def slice$mcBI$sp(self, from_: int, until: int) -> PairColl[typing.Any, typing.Any]: ...
    def slice$mcBJ$sp(self, from_: int, until: int) -> PairColl[typing.Any, typing.Any]: ...
    def slice$mcBS$sp(self, from_: int, until: int) -> PairColl[typing.Any, typing.Any]: ...
    def slice$mcBV$sp(self, from_: int, until: int) -> PairColl[typing.Any, scala.runtime.BoxedUnit]: ...
    def slice$mcBZ$sp(self, from_: int, until: int) -> PairColl[typing.Any, typing.Any]: ...
    def slice$mcC$sp(self, from_: int, until: int) -> Coll[typing.Any]: ...
    def slice$mcCB$sp(self, from_: int, until: int) -> PairColl[typing.Any, typing.Any]: ...
    def slice$mcCC$sp(self, from_: int, until: int) -> PairColl[typing.Any, typing.Any]: ...
    def slice$mcCD$sp(self, from_: int, until: int) -> PairColl[typing.Any, typing.Any]: ...
    def slice$mcCF$sp(self, from_: int, until: int) -> PairColl[typing.Any, typing.Any]: ...
    def slice$mcCI$sp(self, from_: int, until: int) -> PairColl[typing.Any, typing.Any]: ...
    def slice$mcCJ$sp(self, from_: int, until: int) -> PairColl[typing.Any, typing.Any]: ...
    def slice$mcCS$sp(self, from_: int, until: int) -> PairColl[typing.Any, typing.Any]: ...
    def slice$mcCV$sp(self, from_: int, until: int) -> PairColl[typing.Any, scala.runtime.BoxedUnit]: ...
    def slice$mcCZ$sp(self, from_: int, until: int) -> PairColl[typing.Any, typing.Any]: ...
    def slice$mcD$sp(self, from_: int, until: int) -> Coll[typing.Any]: ...
    def slice$mcDB$sp(self, from_: int, until: int) -> PairColl[typing.Any, typing.Any]: ...
    def slice$mcDC$sp(self, from_: int, until: int) -> PairColl[typing.Any, typing.Any]: ...
    def slice$mcDD$sp(self, from_: int, until: int) -> PairColl[typing.Any, typing.Any]: ...
    def slice$mcDF$sp(self, from_: int, until: int) -> PairColl[typing.Any, typing.Any]: ...
    def slice$mcDI$sp(self, from_: int, until: int) -> PairColl[typing.Any, typing.Any]: ...
    def slice$mcDJ$sp(self, from_: int, until: int) -> PairColl[typing.Any, typing.Any]: ...
    def slice$mcDS$sp(self, from_: int, until: int) -> PairColl[typing.Any, typing.Any]: ...
    def slice$mcDV$sp(self, from_: int, until: int) -> PairColl[typing.Any, scala.runtime.BoxedUnit]: ...
    def slice$mcDZ$sp(self, from_: int, until: int) -> PairColl[typing.Any, typing.Any]: ...
    def slice$mcF$sp(self, from_: int, until: int) -> Coll[typing.Any]: ...
    def slice$mcFB$sp(self, from_: int, until: int) -> PairColl[typing.Any, typing.Any]: ...
    def slice$mcFC$sp(self, from_: int, until: int) -> PairColl[typing.Any, typing.Any]: ...
    def slice$mcFD$sp(self, from_: int, until: int) -> PairColl[typing.Any, typing.Any]: ...
    def slice$mcFF$sp(self, from_: int, until: int) -> PairColl[typing.Any, typing.Any]: ...
    def slice$mcFI$sp(self, from_: int, until: int) -> PairColl[typing.Any, typing.Any]: ...
    def slice$mcFJ$sp(self, from_: int, until: int) -> PairColl[typing.Any, typing.Any]: ...
    def slice$mcFS$sp(self, from_: int, until: int) -> PairColl[typing.Any, typing.Any]: ...
    def slice$mcFV$sp(self, from_: int, until: int) -> PairColl[typing.Any, scala.runtime.BoxedUnit]: ...
    def slice$mcFZ$sp(self, from_: int, until: int) -> PairColl[typing.Any, typing.Any]: ...
    def slice$mcI$sp(self, from_: int, until: int) -> Coll[typing.Any]: ...
    def slice$mcIB$sp(self, from_: int, until: int) -> PairColl[typing.Any, typing.Any]: ...
    def slice$mcIC$sp(self, from_: int, until: int) -> PairColl[typing.Any, typing.Any]: ...
    def slice$mcID$sp(self, from_: int, until: int) -> PairColl[typing.Any, typing.Any]: ...
    def slice$mcIF$sp(self, from_: int, until: int) -> PairColl[typing.Any, typing.Any]: ...
    def slice$mcII$sp(self, from_: int, until: int) -> PairColl[typing.Any, typing.Any]: ...
    def slice$mcIJ$sp(self, from_: int, until: int) -> PairColl[typing.Any, typing.Any]: ...
    def slice$mcIS$sp(self, from_: int, until: int) -> PairColl[typing.Any, typing.Any]: ...
    def slice$mcIV$sp(self, from_: int, until: int) -> PairColl[typing.Any, scala.runtime.BoxedUnit]: ...
    def slice$mcIZ$sp(self, from_: int, until: int) -> PairColl[typing.Any, typing.Any]: ...
    def slice$mcJ$sp(self, from_: int, until: int) -> Coll[typing.Any]: ...
    def slice$mcJB$sp(self, from_: int, until: int) -> PairColl[typing.Any, typing.Any]: ...
    def slice$mcJC$sp(self, from_: int, until: int) -> PairColl[typing.Any, typing.Any]: ...
    def slice$mcJD$sp(self, from_: int, until: int) -> PairColl[typing.Any, typing.Any]: ...
    def slice$mcJF$sp(self, from_: int, until: int) -> PairColl[typing.Any, typing.Any]: ...
    def slice$mcJI$sp(self, from_: int, until: int) -> PairColl[typing.Any, typing.Any]: ...
    def slice$mcJJ$sp(self, from_: int, until: int) -> PairColl[typing.Any, typing.Any]: ...
    def slice$mcJS$sp(self, from_: int, until: int) -> PairColl[typing.Any, typing.Any]: ...
    def slice$mcJV$sp(self, from_: int, until: int) -> PairColl[typing.Any, scala.runtime.BoxedUnit]: ...
    def slice$mcJZ$sp(self, from_: int, until: int) -> PairColl[typing.Any, typing.Any]: ...
    def slice$mcS$sp(self, from_: int, until: int) -> Coll[typing.Any]: ...
    def slice$mcSB$sp(self, from_: int, until: int) -> PairColl[typing.Any, typing.Any]: ...
    def slice$mcSC$sp(self, from_: int, until: int) -> PairColl[typing.Any, typing.Any]: ...
    def slice$mcSD$sp(self, from_: int, until: int) -> PairColl[typing.Any, typing.Any]: ...
    def slice$mcSF$sp(self, from_: int, until: int) -> PairColl[typing.Any, typing.Any]: ...
    def slice$mcSI$sp(self, from_: int, until: int) -> PairColl[typing.Any, typing.Any]: ...
    def slice$mcSJ$sp(self, from_: int, until: int) -> PairColl[typing.Any, typing.Any]: ...
    def slice$mcSS$sp(self, from_: int, until: int) -> PairColl[typing.Any, typing.Any]: ...
    def slice$mcSV$sp(self, from_: int, until: int) -> PairColl[typing.Any, scala.runtime.BoxedUnit]: ...
    def slice$mcSZ$sp(self, from_: int, until: int) -> PairColl[typing.Any, typing.Any]: ...
    def slice$mcV$sp(self, from_: int, until: int) -> Coll[scala.runtime.BoxedUnit]: ...
    def slice$mcVB$sp(self, from_: int, until: int) -> PairColl[scala.runtime.BoxedUnit, typing.Any]: ...
    def slice$mcVC$sp(self, from_: int, until: int) -> PairColl[scala.runtime.BoxedUnit, typing.Any]: ...
    def slice$mcVD$sp(self, from_: int, until: int) -> PairColl[scala.runtime.BoxedUnit, typing.Any]: ...
    def slice$mcVF$sp(self, from_: int, until: int) -> PairColl[scala.runtime.BoxedUnit, typing.Any]: ...
    def slice$mcVI$sp(self, from_: int, until: int) -> PairColl[scala.runtime.BoxedUnit, typing.Any]: ...
    def slice$mcVJ$sp(self, from_: int, until: int) -> PairColl[scala.runtime.BoxedUnit, typing.Any]: ...
    def slice$mcVS$sp(self, from_: int, until: int) -> PairColl[scala.runtime.BoxedUnit, typing.Any]: ...
    def slice$mcVV$sp(self, from_: int, until: int) -> PairColl[scala.runtime.BoxedUnit, scala.runtime.BoxedUnit]: ...
    def slice$mcVZ$sp(self, from_: int, until: int) -> PairColl[scala.runtime.BoxedUnit, typing.Any]: ...
    def slice$mcZ$sp(self, from_: int, until: int) -> Coll[typing.Any]: ...
    def slice$mcZB$sp(self, from_: int, until: int) -> PairColl[typing.Any, typing.Any]: ...
    def slice$mcZC$sp(self, from_: int, until: int) -> PairColl[typing.Any, typing.Any]: ...
    def slice$mcZD$sp(self, from_: int, until: int) -> PairColl[typing.Any, typing.Any]: ...
    def slice$mcZF$sp(self, from_: int, until: int) -> PairColl[typing.Any, typing.Any]: ...
    def slice$mcZI$sp(self, from_: int, until: int) -> PairColl[typing.Any, typing.Any]: ...
    def slice$mcZJ$sp(self, from_: int, until: int) -> PairColl[typing.Any, typing.Any]: ...
    def slice$mcZS$sp(self, from_: int, until: int) -> PairColl[typing.Any, typing.Any]: ...
    def slice$mcZV$sp(self, from_: int, until: int) -> PairColl[typing.Any, scala.runtime.BoxedUnit]: ...
    def slice$mcZZ$sp(self, from_: int, until: int) -> PairColl[typing.Any, typing.Any]: ...
    def specInstance$(self) -> bool: ...
    def sum(self, m: Monoid[scala.Tuple2[_PairOfCols__L, _PairOfCols__R]]) -> scala.Tuple2[_PairOfCols__L, _PairOfCols__R]: ...
    def sum$mcB$sp(self, m: Monoid[typing.Any]) -> int: ...
    def sum$mcBB$sp(self, m: Monoid[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def sum$mcBC$sp(self, m: Monoid[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def sum$mcBD$sp(self, m: Monoid[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def sum$mcBF$sp(self, m: Monoid[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def sum$mcBI$sp(self, m: Monoid[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def sum$mcBJ$sp(self, m: Monoid[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def sum$mcBS$sp(self, m: Monoid[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def sum$mcBV$sp(self, m: Monoid[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]) -> scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]: ...
    def sum$mcBZ$sp(self, m: Monoid[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def sum$mcC$sp(self, m: Monoid[typing.Any]) -> str: ...
    def sum$mcCB$sp(self, m: Monoid[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def sum$mcCC$sp(self, m: Monoid[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def sum$mcCD$sp(self, m: Monoid[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def sum$mcCF$sp(self, m: Monoid[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def sum$mcCI$sp(self, m: Monoid[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def sum$mcCJ$sp(self, m: Monoid[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def sum$mcCS$sp(self, m: Monoid[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def sum$mcCV$sp(self, m: Monoid[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]) -> scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]: ...
    def sum$mcCZ$sp(self, m: Monoid[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def sum$mcD$sp(self, m: Monoid[typing.Any]) -> float: ...
    def sum$mcDB$sp(self, m: Monoid[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def sum$mcDC$sp(self, m: Monoid[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def sum$mcDD$sp(self, m: Monoid[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def sum$mcDF$sp(self, m: Monoid[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def sum$mcDI$sp(self, m: Monoid[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def sum$mcDJ$sp(self, m: Monoid[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def sum$mcDS$sp(self, m: Monoid[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def sum$mcDV$sp(self, m: Monoid[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]) -> scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]: ...
    def sum$mcDZ$sp(self, m: Monoid[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def sum$mcF$sp(self, m: Monoid[typing.Any]) -> float: ...
    def sum$mcFB$sp(self, m: Monoid[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def sum$mcFC$sp(self, m: Monoid[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def sum$mcFD$sp(self, m: Monoid[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def sum$mcFF$sp(self, m: Monoid[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def sum$mcFI$sp(self, m: Monoid[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def sum$mcFJ$sp(self, m: Monoid[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def sum$mcFS$sp(self, m: Monoid[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def sum$mcFV$sp(self, m: Monoid[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]) -> scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]: ...
    def sum$mcFZ$sp(self, m: Monoid[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def sum$mcI$sp(self, m: Monoid[typing.Any]) -> int: ...
    def sum$mcIB$sp(self, m: Monoid[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def sum$mcIC$sp(self, m: Monoid[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def sum$mcID$sp(self, m: Monoid[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def sum$mcIF$sp(self, m: Monoid[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def sum$mcII$sp(self, m: Monoid[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def sum$mcIJ$sp(self, m: Monoid[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def sum$mcIS$sp(self, m: Monoid[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def sum$mcIV$sp(self, m: Monoid[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]) -> scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]: ...
    def sum$mcIZ$sp(self, m: Monoid[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def sum$mcJ$sp(self, m: Monoid[typing.Any]) -> int: ...
    def sum$mcJB$sp(self, m: Monoid[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def sum$mcJC$sp(self, m: Monoid[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def sum$mcJD$sp(self, m: Monoid[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def sum$mcJF$sp(self, m: Monoid[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def sum$mcJI$sp(self, m: Monoid[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def sum$mcJJ$sp(self, m: Monoid[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def sum$mcJS$sp(self, m: Monoid[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def sum$mcJV$sp(self, m: Monoid[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]) -> scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]: ...
    def sum$mcJZ$sp(self, m: Monoid[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def sum$mcS$sp(self, m: Monoid[typing.Any]) -> int: ...
    def sum$mcSB$sp(self, m: Monoid[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def sum$mcSC$sp(self, m: Monoid[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def sum$mcSD$sp(self, m: Monoid[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def sum$mcSF$sp(self, m: Monoid[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def sum$mcSI$sp(self, m: Monoid[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def sum$mcSJ$sp(self, m: Monoid[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def sum$mcSS$sp(self, m: Monoid[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def sum$mcSV$sp(self, m: Monoid[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]) -> scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]: ...
    def sum$mcSZ$sp(self, m: Monoid[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def sum$mcV$sp(self, m: Monoid[scala.runtime.BoxedUnit]) -> None: ...
    def sum$mcVB$sp(self, m: Monoid[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]) -> scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]: ...
    def sum$mcVC$sp(self, m: Monoid[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]) -> scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]: ...
    def sum$mcVD$sp(self, m: Monoid[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]) -> scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]: ...
    def sum$mcVF$sp(self, m: Monoid[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]) -> scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]: ...
    def sum$mcVI$sp(self, m: Monoid[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]) -> scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]: ...
    def sum$mcVJ$sp(self, m: Monoid[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]) -> scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]: ...
    def sum$mcVS$sp(self, m: Monoid[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]) -> scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]: ...
    def sum$mcVV$sp(self, m: Monoid[scala.Tuple2[scala.runtime.BoxedUnit, scala.runtime.BoxedUnit]]) -> scala.Tuple2[scala.runtime.BoxedUnit, scala.runtime.BoxedUnit]: ...
    def sum$mcVZ$sp(self, m: Monoid[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]) -> scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]: ...
    def sum$mcZ$sp(self, m: Monoid[typing.Any]) -> bool: ...
    def sum$mcZB$sp(self, m: Monoid[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def sum$mcZC$sp(self, m: Monoid[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def sum$mcZD$sp(self, m: Monoid[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def sum$mcZF$sp(self, m: Monoid[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def sum$mcZI$sp(self, m: Monoid[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def sum$mcZJ$sp(self, m: Monoid[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def sum$mcZS$sp(self, m: Monoid[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def sum$mcZV$sp(self, m: Monoid[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]) -> scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]: ...
    def sum$mcZZ$sp(self, m: Monoid[scala.Tuple2[typing.Any, typing.Any]]) -> scala.Tuple2[typing.Any, typing.Any]: ...
    def tItem(self) -> scalan.RType[scala.Tuple2[_PairOfCols__L, _PairOfCols__R]]: ...
    def tL(self) -> scalan.RType[_PairOfCols__L]: ...
    def tR(self) -> scalan.RType[_PairOfCols__R]: ...
    def take(self, n: int) -> Coll[scala.Tuple2[_PairOfCols__L, _PairOfCols__R]]: ...
    def take$mcB$sp(self, n: int) -> Coll[typing.Any]: ...
    def take$mcBB$sp(self, n: int) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def take$mcBC$sp(self, n: int) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def take$mcBD$sp(self, n: int) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def take$mcBF$sp(self, n: int) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def take$mcBI$sp(self, n: int) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def take$mcBJ$sp(self, n: int) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def take$mcBS$sp(self, n: int) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def take$mcBV$sp(self, n: int) -> Coll[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]: ...
    def take$mcBZ$sp(self, n: int) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def take$mcC$sp(self, n: int) -> Coll[typing.Any]: ...
    def take$mcCB$sp(self, n: int) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def take$mcCC$sp(self, n: int) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def take$mcCD$sp(self, n: int) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def take$mcCF$sp(self, n: int) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def take$mcCI$sp(self, n: int) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def take$mcCJ$sp(self, n: int) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def take$mcCS$sp(self, n: int) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def take$mcCV$sp(self, n: int) -> Coll[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]: ...
    def take$mcCZ$sp(self, n: int) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def take$mcD$sp(self, n: int) -> Coll[typing.Any]: ...
    def take$mcDB$sp(self, n: int) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def take$mcDC$sp(self, n: int) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def take$mcDD$sp(self, n: int) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def take$mcDF$sp(self, n: int) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def take$mcDI$sp(self, n: int) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def take$mcDJ$sp(self, n: int) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def take$mcDS$sp(self, n: int) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def take$mcDV$sp(self, n: int) -> Coll[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]: ...
    def take$mcDZ$sp(self, n: int) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def take$mcF$sp(self, n: int) -> Coll[typing.Any]: ...
    def take$mcFB$sp(self, n: int) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def take$mcFC$sp(self, n: int) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def take$mcFD$sp(self, n: int) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def take$mcFF$sp(self, n: int) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def take$mcFI$sp(self, n: int) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def take$mcFJ$sp(self, n: int) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def take$mcFS$sp(self, n: int) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def take$mcFV$sp(self, n: int) -> Coll[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]: ...
    def take$mcFZ$sp(self, n: int) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def take$mcI$sp(self, n: int) -> Coll[typing.Any]: ...
    def take$mcIB$sp(self, n: int) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def take$mcIC$sp(self, n: int) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def take$mcID$sp(self, n: int) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def take$mcIF$sp(self, n: int) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def take$mcII$sp(self, n: int) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def take$mcIJ$sp(self, n: int) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def take$mcIS$sp(self, n: int) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def take$mcIV$sp(self, n: int) -> Coll[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]: ...
    def take$mcIZ$sp(self, n: int) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def take$mcJ$sp(self, n: int) -> Coll[typing.Any]: ...
    def take$mcJB$sp(self, n: int) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def take$mcJC$sp(self, n: int) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def take$mcJD$sp(self, n: int) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def take$mcJF$sp(self, n: int) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def take$mcJI$sp(self, n: int) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def take$mcJJ$sp(self, n: int) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def take$mcJS$sp(self, n: int) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def take$mcJV$sp(self, n: int) -> Coll[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]: ...
    def take$mcJZ$sp(self, n: int) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def take$mcS$sp(self, n: int) -> Coll[typing.Any]: ...
    def take$mcSB$sp(self, n: int) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def take$mcSC$sp(self, n: int) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def take$mcSD$sp(self, n: int) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def take$mcSF$sp(self, n: int) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def take$mcSI$sp(self, n: int) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def take$mcSJ$sp(self, n: int) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def take$mcSS$sp(self, n: int) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def take$mcSV$sp(self, n: int) -> Coll[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]: ...
    def take$mcSZ$sp(self, n: int) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def take$mcV$sp(self, n: int) -> Coll[scala.runtime.BoxedUnit]: ...
    def take$mcVB$sp(self, n: int) -> Coll[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]: ...
    def take$mcVC$sp(self, n: int) -> Coll[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]: ...
    def take$mcVD$sp(self, n: int) -> Coll[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]: ...
    def take$mcVF$sp(self, n: int) -> Coll[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]: ...
    def take$mcVI$sp(self, n: int) -> Coll[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]: ...
    def take$mcVJ$sp(self, n: int) -> Coll[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]: ...
    def take$mcVS$sp(self, n: int) -> Coll[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]: ...
    def take$mcVV$sp(self, n: int) -> Coll[scala.Tuple2[scala.runtime.BoxedUnit, scala.runtime.BoxedUnit]]: ...
    def take$mcVZ$sp(self, n: int) -> Coll[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]: ...
    def take$mcZ$sp(self, n: int) -> Coll[typing.Any]: ...
    def take$mcZB$sp(self, n: int) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def take$mcZC$sp(self, n: int) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def take$mcZD$sp(self, n: int) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def take$mcZF$sp(self, n: int) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def take$mcZI$sp(self, n: int) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def take$mcZJ$sp(self, n: int) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def take$mcZS$sp(self, n: int) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def take$mcZV$sp(self, n: int) -> Coll[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]: ...
    def take$mcZZ$sp(self, n: int) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def toArray(self) -> typing.List[scala.Tuple2[_PairOfCols__L, _PairOfCols__R]]: ...
    def toArray$mcB$sp(self) -> typing.List[int]: ...
    def toArray$mcBB$sp(self) -> typing.List[scala.Tuple2[typing.Any, typing.Any]]: ...
    def toArray$mcBC$sp(self) -> typing.List[scala.Tuple2[typing.Any, typing.Any]]: ...
    def toArray$mcBD$sp(self) -> typing.List[scala.Tuple2[typing.Any, typing.Any]]: ...
    def toArray$mcBF$sp(self) -> typing.List[scala.Tuple2[typing.Any, typing.Any]]: ...
    def toArray$mcBI$sp(self) -> typing.List[scala.Tuple2[typing.Any, typing.Any]]: ...
    def toArray$mcBJ$sp(self) -> typing.List[scala.Tuple2[typing.Any, typing.Any]]: ...
    def toArray$mcBS$sp(self) -> typing.List[scala.Tuple2[typing.Any, typing.Any]]: ...
    def toArray$mcBV$sp(self) -> typing.List[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]: ...
    def toArray$mcBZ$sp(self) -> typing.List[scala.Tuple2[typing.Any, typing.Any]]: ...
    def toArray$mcC$sp(self) -> typing.List[str]: ...
    def toArray$mcCB$sp(self) -> typing.List[scala.Tuple2[typing.Any, typing.Any]]: ...
    def toArray$mcCC$sp(self) -> typing.List[scala.Tuple2[typing.Any, typing.Any]]: ...
    def toArray$mcCD$sp(self) -> typing.List[scala.Tuple2[typing.Any, typing.Any]]: ...
    def toArray$mcCF$sp(self) -> typing.List[scala.Tuple2[typing.Any, typing.Any]]: ...
    def toArray$mcCI$sp(self) -> typing.List[scala.Tuple2[typing.Any, typing.Any]]: ...
    def toArray$mcCJ$sp(self) -> typing.List[scala.Tuple2[typing.Any, typing.Any]]: ...
    def toArray$mcCS$sp(self) -> typing.List[scala.Tuple2[typing.Any, typing.Any]]: ...
    def toArray$mcCV$sp(self) -> typing.List[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]: ...
    def toArray$mcCZ$sp(self) -> typing.List[scala.Tuple2[typing.Any, typing.Any]]: ...
    def toArray$mcD$sp(self) -> typing.List[float]: ...
    def toArray$mcDB$sp(self) -> typing.List[scala.Tuple2[typing.Any, typing.Any]]: ...
    def toArray$mcDC$sp(self) -> typing.List[scala.Tuple2[typing.Any, typing.Any]]: ...
    def toArray$mcDD$sp(self) -> typing.List[scala.Tuple2[typing.Any, typing.Any]]: ...
    def toArray$mcDF$sp(self) -> typing.List[scala.Tuple2[typing.Any, typing.Any]]: ...
    def toArray$mcDI$sp(self) -> typing.List[scala.Tuple2[typing.Any, typing.Any]]: ...
    def toArray$mcDJ$sp(self) -> typing.List[scala.Tuple2[typing.Any, typing.Any]]: ...
    def toArray$mcDS$sp(self) -> typing.List[scala.Tuple2[typing.Any, typing.Any]]: ...
    def toArray$mcDV$sp(self) -> typing.List[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]: ...
    def toArray$mcDZ$sp(self) -> typing.List[scala.Tuple2[typing.Any, typing.Any]]: ...
    def toArray$mcF$sp(self) -> typing.List[float]: ...
    def toArray$mcFB$sp(self) -> typing.List[scala.Tuple2[typing.Any, typing.Any]]: ...
    def toArray$mcFC$sp(self) -> typing.List[scala.Tuple2[typing.Any, typing.Any]]: ...
    def toArray$mcFD$sp(self) -> typing.List[scala.Tuple2[typing.Any, typing.Any]]: ...
    def toArray$mcFF$sp(self) -> typing.List[scala.Tuple2[typing.Any, typing.Any]]: ...
    def toArray$mcFI$sp(self) -> typing.List[scala.Tuple2[typing.Any, typing.Any]]: ...
    def toArray$mcFJ$sp(self) -> typing.List[scala.Tuple2[typing.Any, typing.Any]]: ...
    def toArray$mcFS$sp(self) -> typing.List[scala.Tuple2[typing.Any, typing.Any]]: ...
    def toArray$mcFV$sp(self) -> typing.List[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]: ...
    def toArray$mcFZ$sp(self) -> typing.List[scala.Tuple2[typing.Any, typing.Any]]: ...
    def toArray$mcI$sp(self) -> typing.List[int]: ...
    def toArray$mcIB$sp(self) -> typing.List[scala.Tuple2[typing.Any, typing.Any]]: ...
    def toArray$mcIC$sp(self) -> typing.List[scala.Tuple2[typing.Any, typing.Any]]: ...
    def toArray$mcID$sp(self) -> typing.List[scala.Tuple2[typing.Any, typing.Any]]: ...
    def toArray$mcIF$sp(self) -> typing.List[scala.Tuple2[typing.Any, typing.Any]]: ...
    def toArray$mcII$sp(self) -> typing.List[scala.Tuple2[typing.Any, typing.Any]]: ...
    def toArray$mcIJ$sp(self) -> typing.List[scala.Tuple2[typing.Any, typing.Any]]: ...
    def toArray$mcIS$sp(self) -> typing.List[scala.Tuple2[typing.Any, typing.Any]]: ...
    def toArray$mcIV$sp(self) -> typing.List[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]: ...
    def toArray$mcIZ$sp(self) -> typing.List[scala.Tuple2[typing.Any, typing.Any]]: ...
    def toArray$mcJ$sp(self) -> typing.List[int]: ...
    def toArray$mcJB$sp(self) -> typing.List[scala.Tuple2[typing.Any, typing.Any]]: ...
    def toArray$mcJC$sp(self) -> typing.List[scala.Tuple2[typing.Any, typing.Any]]: ...
    def toArray$mcJD$sp(self) -> typing.List[scala.Tuple2[typing.Any, typing.Any]]: ...
    def toArray$mcJF$sp(self) -> typing.List[scala.Tuple2[typing.Any, typing.Any]]: ...
    def toArray$mcJI$sp(self) -> typing.List[scala.Tuple2[typing.Any, typing.Any]]: ...
    def toArray$mcJJ$sp(self) -> typing.List[scala.Tuple2[typing.Any, typing.Any]]: ...
    def toArray$mcJS$sp(self) -> typing.List[scala.Tuple2[typing.Any, typing.Any]]: ...
    def toArray$mcJV$sp(self) -> typing.List[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]: ...
    def toArray$mcJZ$sp(self) -> typing.List[scala.Tuple2[typing.Any, typing.Any]]: ...
    def toArray$mcS$sp(self) -> typing.List[int]: ...
    def toArray$mcSB$sp(self) -> typing.List[scala.Tuple2[typing.Any, typing.Any]]: ...
    def toArray$mcSC$sp(self) -> typing.List[scala.Tuple2[typing.Any, typing.Any]]: ...
    def toArray$mcSD$sp(self) -> typing.List[scala.Tuple2[typing.Any, typing.Any]]: ...
    def toArray$mcSF$sp(self) -> typing.List[scala.Tuple2[typing.Any, typing.Any]]: ...
    def toArray$mcSI$sp(self) -> typing.List[scala.Tuple2[typing.Any, typing.Any]]: ...
    def toArray$mcSJ$sp(self) -> typing.List[scala.Tuple2[typing.Any, typing.Any]]: ...
    def toArray$mcSS$sp(self) -> typing.List[scala.Tuple2[typing.Any, typing.Any]]: ...
    def toArray$mcSV$sp(self) -> typing.List[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]: ...
    def toArray$mcSZ$sp(self) -> typing.List[scala.Tuple2[typing.Any, typing.Any]]: ...
    def toArray$mcV$sp(self) -> typing.List[scala.runtime.BoxedUnit]: ...
    def toArray$mcVB$sp(self) -> typing.List[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]: ...
    def toArray$mcVC$sp(self) -> typing.List[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]: ...
    def toArray$mcVD$sp(self) -> typing.List[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]: ...
    def toArray$mcVF$sp(self) -> typing.List[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]: ...
    def toArray$mcVI$sp(self) -> typing.List[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]: ...
    def toArray$mcVJ$sp(self) -> typing.List[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]: ...
    def toArray$mcVS$sp(self) -> typing.List[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]: ...
    def toArray$mcVV$sp(self) -> typing.List[scala.Tuple2[scala.runtime.BoxedUnit, scala.runtime.BoxedUnit]]: ...
    def toArray$mcVZ$sp(self) -> typing.List[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]: ...
    def toArray$mcZ$sp(self) -> typing.List[bool]: ...
    def toArray$mcZB$sp(self) -> typing.List[scala.Tuple2[typing.Any, typing.Any]]: ...
    def toArray$mcZC$sp(self) -> typing.List[scala.Tuple2[typing.Any, typing.Any]]: ...
    def toArray$mcZD$sp(self) -> typing.List[scala.Tuple2[typing.Any, typing.Any]]: ...
    def toArray$mcZF$sp(self) -> typing.List[scala.Tuple2[typing.Any, typing.Any]]: ...
    def toArray$mcZI$sp(self) -> typing.List[scala.Tuple2[typing.Any, typing.Any]]: ...
    def toArray$mcZJ$sp(self) -> typing.List[scala.Tuple2[typing.Any, typing.Any]]: ...
    def toArray$mcZS$sp(self) -> typing.List[scala.Tuple2[typing.Any, typing.Any]]: ...
    def toArray$mcZV$sp(self) -> typing.List[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]: ...
    def toArray$mcZZ$sp(self) -> typing.List[scala.Tuple2[typing.Any, typing.Any]]: ...
    _toMap__T = typing.TypeVar('_toMap__T')  # <T>
    _toMap__U = typing.TypeVar('_toMap__U')  # <U>
    def toMap(self, ev: scala.Predef..less.colon.less[scala.Tuple2[_PairOfCols__L, _PairOfCols__R], scala.Tuple2[_toMap__T, _toMap__U]]) -> scala.collection.immutable.Map[_toMap__T, _toMap__U]: ...
    def toString(self) -> str: ...
    def unionSet(self, that: Coll[scala.Tuple2[_PairOfCols__L, _PairOfCols__R]]) -> Coll[scala.Tuple2[_PairOfCols__L, _PairOfCols__R]]: ...
    def unionSet$mcB$sp(self, that: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def unionSet$mcBB$sp(self, that: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def unionSet$mcBC$sp(self, that: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def unionSet$mcBD$sp(self, that: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def unionSet$mcBF$sp(self, that: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def unionSet$mcBI$sp(self, that: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def unionSet$mcBJ$sp(self, that: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def unionSet$mcBS$sp(self, that: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def unionSet$mcBV$sp(self, that: Coll[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]) -> Coll[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]: ...
    def unionSet$mcBZ$sp(self, that: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def unionSet$mcC$sp(self, that: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def unionSet$mcCB$sp(self, that: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def unionSet$mcCC$sp(self, that: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def unionSet$mcCD$sp(self, that: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def unionSet$mcCF$sp(self, that: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def unionSet$mcCI$sp(self, that: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def unionSet$mcCJ$sp(self, that: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def unionSet$mcCS$sp(self, that: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def unionSet$mcCV$sp(self, that: Coll[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]) -> Coll[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]: ...
    def unionSet$mcCZ$sp(self, that: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def unionSet$mcD$sp(self, that: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def unionSet$mcDB$sp(self, that: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def unionSet$mcDC$sp(self, that: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def unionSet$mcDD$sp(self, that: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def unionSet$mcDF$sp(self, that: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def unionSet$mcDI$sp(self, that: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def unionSet$mcDJ$sp(self, that: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def unionSet$mcDS$sp(self, that: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def unionSet$mcDV$sp(self, that: Coll[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]) -> Coll[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]: ...
    def unionSet$mcDZ$sp(self, that: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def unionSet$mcF$sp(self, that: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def unionSet$mcFB$sp(self, that: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def unionSet$mcFC$sp(self, that: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def unionSet$mcFD$sp(self, that: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def unionSet$mcFF$sp(self, that: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def unionSet$mcFI$sp(self, that: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def unionSet$mcFJ$sp(self, that: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def unionSet$mcFS$sp(self, that: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def unionSet$mcFV$sp(self, that: Coll[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]) -> Coll[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]: ...
    def unionSet$mcFZ$sp(self, that: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def unionSet$mcI$sp(self, that: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def unionSet$mcIB$sp(self, that: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def unionSet$mcIC$sp(self, that: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def unionSet$mcID$sp(self, that: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def unionSet$mcIF$sp(self, that: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def unionSet$mcII$sp(self, that: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def unionSet$mcIJ$sp(self, that: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def unionSet$mcIS$sp(self, that: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def unionSet$mcIV$sp(self, that: Coll[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]) -> Coll[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]: ...
    def unionSet$mcIZ$sp(self, that: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def unionSet$mcJ$sp(self, that: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def unionSet$mcJB$sp(self, that: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def unionSet$mcJC$sp(self, that: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def unionSet$mcJD$sp(self, that: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def unionSet$mcJF$sp(self, that: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def unionSet$mcJI$sp(self, that: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def unionSet$mcJJ$sp(self, that: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def unionSet$mcJS$sp(self, that: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def unionSet$mcJV$sp(self, that: Coll[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]) -> Coll[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]: ...
    def unionSet$mcJZ$sp(self, that: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def unionSet$mcS$sp(self, that: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def unionSet$mcSB$sp(self, that: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def unionSet$mcSC$sp(self, that: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def unionSet$mcSD$sp(self, that: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def unionSet$mcSF$sp(self, that: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def unionSet$mcSI$sp(self, that: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def unionSet$mcSJ$sp(self, that: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def unionSet$mcSS$sp(self, that: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def unionSet$mcSV$sp(self, that: Coll[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]) -> Coll[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]: ...
    def unionSet$mcSZ$sp(self, that: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def unionSet$mcV$sp(self, that: Coll[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def unionSet$mcVB$sp(self, that: Coll[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]) -> Coll[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]: ...
    def unionSet$mcVC$sp(self, that: Coll[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]) -> Coll[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]: ...
    def unionSet$mcVD$sp(self, that: Coll[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]) -> Coll[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]: ...
    def unionSet$mcVF$sp(self, that: Coll[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]) -> Coll[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]: ...
    def unionSet$mcVI$sp(self, that: Coll[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]) -> Coll[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]: ...
    def unionSet$mcVJ$sp(self, that: Coll[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]) -> Coll[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]: ...
    def unionSet$mcVS$sp(self, that: Coll[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]) -> Coll[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]: ...
    def unionSet$mcVV$sp(self, that: Coll[scala.Tuple2[scala.runtime.BoxedUnit, scala.runtime.BoxedUnit]]) -> Coll[scala.Tuple2[scala.runtime.BoxedUnit, scala.runtime.BoxedUnit]]: ...
    def unionSet$mcVZ$sp(self, that: Coll[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]) -> Coll[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]: ...
    def unionSet$mcZ$sp(self, that: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def unionSet$mcZB$sp(self, that: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def unionSet$mcZC$sp(self, that: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def unionSet$mcZD$sp(self, that: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def unionSet$mcZF$sp(self, that: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def unionSet$mcZI$sp(self, that: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def unionSet$mcZJ$sp(self, that: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def unionSet$mcZS$sp(self, that: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def unionSet$mcZV$sp(self, that: Coll[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]) -> Coll[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]: ...
    def unionSet$mcZZ$sp(self, that: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    _unionSetByKey__T = typing.TypeVar('_unionSetByKey__T')  # <T>
    _unionSetByKey__U = typing.TypeVar('_unionSetByKey__U')  # <U>
    def unionSetByKey(self, that: Coll[scala.Tuple2[_PairOfCols__L, _PairOfCols__R]], ev: scala.Predef..less.colon.less[scala.Tuple2[_PairOfCols__L, _PairOfCols__R], scala.Tuple2[_unionSetByKey__T, _unionSetByKey__U]]) -> Coll[scala.Tuple2[_PairOfCols__L, _PairOfCols__R]]: ...
    _unionSetByKey$mcB$sp__T = typing.TypeVar('_unionSetByKey$mcB$sp__T')  # <T>
    _unionSetByKey$mcB$sp__U = typing.TypeVar('_unionSetByKey$mcB$sp__U')  # <U>
    def unionSetByKey$mcB$sp(self, that: Coll[typing.Any], ev: scala.Predef..less.colon.less[typing.Any, scala.Tuple2[_unionSetByKey.mcB.sp__T, _unionSetByKey.mcB.sp__U]]) -> Coll[typing.Any]: ...
    _unionSetByKey$mcC$sp__T = typing.TypeVar('_unionSetByKey$mcC$sp__T')  # <T>
    _unionSetByKey$mcC$sp__U = typing.TypeVar('_unionSetByKey$mcC$sp__U')  # <U>
    def unionSetByKey$mcC$sp(self, that: Coll[typing.Any], ev: scala.Predef..less.colon.less[typing.Any, scala.Tuple2[_unionSetByKey.mcC.sp__T, _unionSetByKey.mcC.sp__U]]) -> Coll[typing.Any]: ...
    _unionSetByKey$mcD$sp__T = typing.TypeVar('_unionSetByKey$mcD$sp__T')  # <T>
    _unionSetByKey$mcD$sp__U = typing.TypeVar('_unionSetByKey$mcD$sp__U')  # <U>
    def unionSetByKey$mcD$sp(self, that: Coll[typing.Any], ev: scala.Predef..less.colon.less[typing.Any, scala.Tuple2[_unionSetByKey.mcD.sp__T, _unionSetByKey.mcD.sp__U]]) -> Coll[typing.Any]: ...
    _unionSetByKey$mcF$sp__T = typing.TypeVar('_unionSetByKey$mcF$sp__T')  # <T>
    _unionSetByKey$mcF$sp__U = typing.TypeVar('_unionSetByKey$mcF$sp__U')  # <U>
    def unionSetByKey$mcF$sp(self, that: Coll[typing.Any], ev: scala.Predef..less.colon.less[typing.Any, scala.Tuple2[_unionSetByKey.mcF.sp__T, _unionSetByKey.mcF.sp__U]]) -> Coll[typing.Any]: ...
    _unionSetByKey$mcI$sp__T = typing.TypeVar('_unionSetByKey$mcI$sp__T')  # <T>
    _unionSetByKey$mcI$sp__U = typing.TypeVar('_unionSetByKey$mcI$sp__U')  # <U>
    def unionSetByKey$mcI$sp(self, that: Coll[typing.Any], ev: scala.Predef..less.colon.less[typing.Any, scala.Tuple2[_unionSetByKey.mcI.sp__T, _unionSetByKey.mcI.sp__U]]) -> Coll[typing.Any]: ...
    _unionSetByKey$mcJ$sp__T = typing.TypeVar('_unionSetByKey$mcJ$sp__T')  # <T>
    _unionSetByKey$mcJ$sp__U = typing.TypeVar('_unionSetByKey$mcJ$sp__U')  # <U>
    def unionSetByKey$mcJ$sp(self, that: Coll[typing.Any], ev: scala.Predef..less.colon.less[typing.Any, scala.Tuple2[_unionSetByKey.mcJ.sp__T, _unionSetByKey.mcJ.sp__U]]) -> Coll[typing.Any]: ...
    _unionSetByKey$mcS$sp__T = typing.TypeVar('_unionSetByKey$mcS$sp__T')  # <T>
    _unionSetByKey$mcS$sp__U = typing.TypeVar('_unionSetByKey$mcS$sp__U')  # <U>
    def unionSetByKey$mcS$sp(self, that: Coll[typing.Any], ev: scala.Predef..less.colon.less[typing.Any, scala.Tuple2[_unionSetByKey.mcS.sp__T, _unionSetByKey.mcS.sp__U]]) -> Coll[typing.Any]: ...
    _unionSetByKey$mcV$sp__T = typing.TypeVar('_unionSetByKey$mcV$sp__T')  # <T>
    _unionSetByKey$mcV$sp__U = typing.TypeVar('_unionSetByKey$mcV$sp__U')  # <U>
    def unionSetByKey$mcV$sp(self, that: Coll[scala.runtime.BoxedUnit], ev: scala.Predef..less.colon.less[scala.runtime.BoxedUnit, scala.Tuple2[_unionSetByKey.mcV.sp__T, _unionSetByKey.mcV.sp__U]]) -> Coll[scala.runtime.BoxedUnit]: ...
    _unionSetByKey$mcZ$sp__T = typing.TypeVar('_unionSetByKey$mcZ$sp__T')  # <T>
    _unionSetByKey$mcZ$sp__U = typing.TypeVar('_unionSetByKey$mcZ$sp__U')  # <U>
    def unionSetByKey$mcZ$sp(self, that: Coll[typing.Any], ev: scala.Predef..less.colon.less[typing.Any, scala.Tuple2[_unionSetByKey.mcZ.sp__T, _unionSetByKey.mcZ.sp__U]]) -> Coll[typing.Any]: ...
    def updateMany(self, indexes: Coll[typing.Any], values: Coll[scala.Tuple2[_PairOfCols__L, _PairOfCols__R]]) -> Coll[scala.Tuple2[_PairOfCols__L, _PairOfCols__R]]: ...
    def updateMany$mcB$sp(self, indexes: Coll[typing.Any], values: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def updateMany$mcBB$sp(self, indexes: Coll[typing.Any], values: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def updateMany$mcBC$sp(self, indexes: Coll[typing.Any], values: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def updateMany$mcBD$sp(self, indexes: Coll[typing.Any], values: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def updateMany$mcBF$sp(self, indexes: Coll[typing.Any], values: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def updateMany$mcBI$sp(self, indexes: Coll[typing.Any], values: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def updateMany$mcBJ$sp(self, indexes: Coll[typing.Any], values: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def updateMany$mcBS$sp(self, indexes: Coll[typing.Any], values: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def updateMany$mcBV$sp(self, indexes: Coll[typing.Any], values: Coll[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]) -> Coll[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]: ...
    def updateMany$mcBZ$sp(self, indexes: Coll[typing.Any], values: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def updateMany$mcC$sp(self, indexes: Coll[typing.Any], values: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def updateMany$mcCB$sp(self, indexes: Coll[typing.Any], values: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def updateMany$mcCC$sp(self, indexes: Coll[typing.Any], values: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def updateMany$mcCD$sp(self, indexes: Coll[typing.Any], values: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def updateMany$mcCF$sp(self, indexes: Coll[typing.Any], values: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def updateMany$mcCI$sp(self, indexes: Coll[typing.Any], values: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def updateMany$mcCJ$sp(self, indexes: Coll[typing.Any], values: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def updateMany$mcCS$sp(self, indexes: Coll[typing.Any], values: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def updateMany$mcCV$sp(self, indexes: Coll[typing.Any], values: Coll[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]) -> Coll[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]: ...
    def updateMany$mcCZ$sp(self, indexes: Coll[typing.Any], values: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def updateMany$mcD$sp(self, indexes: Coll[typing.Any], values: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def updateMany$mcDB$sp(self, indexes: Coll[typing.Any], values: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def updateMany$mcDC$sp(self, indexes: Coll[typing.Any], values: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def updateMany$mcDD$sp(self, indexes: Coll[typing.Any], values: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def updateMany$mcDF$sp(self, indexes: Coll[typing.Any], values: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def updateMany$mcDI$sp(self, indexes: Coll[typing.Any], values: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def updateMany$mcDJ$sp(self, indexes: Coll[typing.Any], values: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def updateMany$mcDS$sp(self, indexes: Coll[typing.Any], values: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def updateMany$mcDV$sp(self, indexes: Coll[typing.Any], values: Coll[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]) -> Coll[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]: ...
    def updateMany$mcDZ$sp(self, indexes: Coll[typing.Any], values: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def updateMany$mcF$sp(self, indexes: Coll[typing.Any], values: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def updateMany$mcFB$sp(self, indexes: Coll[typing.Any], values: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def updateMany$mcFC$sp(self, indexes: Coll[typing.Any], values: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def updateMany$mcFD$sp(self, indexes: Coll[typing.Any], values: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def updateMany$mcFF$sp(self, indexes: Coll[typing.Any], values: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def updateMany$mcFI$sp(self, indexes: Coll[typing.Any], values: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def updateMany$mcFJ$sp(self, indexes: Coll[typing.Any], values: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def updateMany$mcFS$sp(self, indexes: Coll[typing.Any], values: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def updateMany$mcFV$sp(self, indexes: Coll[typing.Any], values: Coll[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]) -> Coll[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]: ...
    def updateMany$mcFZ$sp(self, indexes: Coll[typing.Any], values: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def updateMany$mcI$sp(self, indexes: Coll[typing.Any], values: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def updateMany$mcIB$sp(self, indexes: Coll[typing.Any], values: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def updateMany$mcIC$sp(self, indexes: Coll[typing.Any], values: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def updateMany$mcID$sp(self, indexes: Coll[typing.Any], values: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def updateMany$mcIF$sp(self, indexes: Coll[typing.Any], values: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def updateMany$mcII$sp(self, indexes: Coll[typing.Any], values: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def updateMany$mcIJ$sp(self, indexes: Coll[typing.Any], values: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def updateMany$mcIS$sp(self, indexes: Coll[typing.Any], values: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def updateMany$mcIV$sp(self, indexes: Coll[typing.Any], values: Coll[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]) -> Coll[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]: ...
    def updateMany$mcIZ$sp(self, indexes: Coll[typing.Any], values: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def updateMany$mcJ$sp(self, indexes: Coll[typing.Any], values: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def updateMany$mcJB$sp(self, indexes: Coll[typing.Any], values: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def updateMany$mcJC$sp(self, indexes: Coll[typing.Any], values: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def updateMany$mcJD$sp(self, indexes: Coll[typing.Any], values: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def updateMany$mcJF$sp(self, indexes: Coll[typing.Any], values: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def updateMany$mcJI$sp(self, indexes: Coll[typing.Any], values: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def updateMany$mcJJ$sp(self, indexes: Coll[typing.Any], values: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def updateMany$mcJS$sp(self, indexes: Coll[typing.Any], values: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def updateMany$mcJV$sp(self, indexes: Coll[typing.Any], values: Coll[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]) -> Coll[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]: ...
    def updateMany$mcJZ$sp(self, indexes: Coll[typing.Any], values: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def updateMany$mcS$sp(self, indexes: Coll[typing.Any], values: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def updateMany$mcSB$sp(self, indexes: Coll[typing.Any], values: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def updateMany$mcSC$sp(self, indexes: Coll[typing.Any], values: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def updateMany$mcSD$sp(self, indexes: Coll[typing.Any], values: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def updateMany$mcSF$sp(self, indexes: Coll[typing.Any], values: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def updateMany$mcSI$sp(self, indexes: Coll[typing.Any], values: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def updateMany$mcSJ$sp(self, indexes: Coll[typing.Any], values: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def updateMany$mcSS$sp(self, indexes: Coll[typing.Any], values: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def updateMany$mcSV$sp(self, indexes: Coll[typing.Any], values: Coll[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]) -> Coll[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]: ...
    def updateMany$mcSZ$sp(self, indexes: Coll[typing.Any], values: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def updateMany$mcV$sp(self, indexes: Coll[typing.Any], values: Coll[scala.runtime.BoxedUnit]) -> Coll[scala.runtime.BoxedUnit]: ...
    def updateMany$mcVB$sp(self, indexes: Coll[typing.Any], values: Coll[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]) -> Coll[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]: ...
    def updateMany$mcVC$sp(self, indexes: Coll[typing.Any], values: Coll[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]) -> Coll[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]: ...
    def updateMany$mcVD$sp(self, indexes: Coll[typing.Any], values: Coll[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]) -> Coll[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]: ...
    def updateMany$mcVF$sp(self, indexes: Coll[typing.Any], values: Coll[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]) -> Coll[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]: ...
    def updateMany$mcVI$sp(self, indexes: Coll[typing.Any], values: Coll[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]) -> Coll[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]: ...
    def updateMany$mcVJ$sp(self, indexes: Coll[typing.Any], values: Coll[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]) -> Coll[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]: ...
    def updateMany$mcVS$sp(self, indexes: Coll[typing.Any], values: Coll[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]) -> Coll[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]: ...
    def updateMany$mcVV$sp(self, indexes: Coll[typing.Any], values: Coll[scala.Tuple2[scala.runtime.BoxedUnit, scala.runtime.BoxedUnit]]) -> Coll[scala.Tuple2[scala.runtime.BoxedUnit, scala.runtime.BoxedUnit]]: ...
    def updateMany$mcVZ$sp(self, indexes: Coll[typing.Any], values: Coll[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]) -> Coll[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]: ...
    def updateMany$mcZ$sp(self, indexes: Coll[typing.Any], values: Coll[typing.Any]) -> Coll[typing.Any]: ...
    def updateMany$mcZB$sp(self, indexes: Coll[typing.Any], values: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def updateMany$mcZC$sp(self, indexes: Coll[typing.Any], values: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def updateMany$mcZD$sp(self, indexes: Coll[typing.Any], values: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def updateMany$mcZF$sp(self, indexes: Coll[typing.Any], values: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def updateMany$mcZI$sp(self, indexes: Coll[typing.Any], values: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def updateMany$mcZJ$sp(self, indexes: Coll[typing.Any], values: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def updateMany$mcZS$sp(self, indexes: Coll[typing.Any], values: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def updateMany$mcZV$sp(self, indexes: Coll[typing.Any], values: Coll[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]) -> Coll[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]: ...
    def updateMany$mcZZ$sp(self, indexes: Coll[typing.Any], values: Coll[scala.Tuple2[typing.Any, typing.Any]]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def updated(self, index: int, elem: scala.Tuple2[_PairOfCols__L, _PairOfCols__R]) -> Coll[scala.Tuple2[_PairOfCols__L, _PairOfCols__R]]: ...
    def updated$mcB$sp(self, index: int, elem: int) -> Coll[typing.Any]: ...
    def updated$mcBB$sp(self, index: int, elem: scala.Tuple2[typing.Any, typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def updated$mcBC$sp(self, index: int, elem: scala.Tuple2[typing.Any, typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def updated$mcBD$sp(self, index: int, elem: scala.Tuple2[typing.Any, typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def updated$mcBF$sp(self, index: int, elem: scala.Tuple2[typing.Any, typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def updated$mcBI$sp(self, index: int, elem: scala.Tuple2[typing.Any, typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def updated$mcBJ$sp(self, index: int, elem: scala.Tuple2[typing.Any, typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def updated$mcBS$sp(self, index: int, elem: scala.Tuple2[typing.Any, typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def updated$mcBV$sp(self, index: int, elem: scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]) -> Coll[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]: ...
    def updated$mcBZ$sp(self, index: int, elem: scala.Tuple2[typing.Any, typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def updated$mcC$sp(self, index: int, elem: str) -> Coll[typing.Any]: ...
    def updated$mcCB$sp(self, index: int, elem: scala.Tuple2[typing.Any, typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def updated$mcCC$sp(self, index: int, elem: scala.Tuple2[typing.Any, typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def updated$mcCD$sp(self, index: int, elem: scala.Tuple2[typing.Any, typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def updated$mcCF$sp(self, index: int, elem: scala.Tuple2[typing.Any, typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def updated$mcCI$sp(self, index: int, elem: scala.Tuple2[typing.Any, typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def updated$mcCJ$sp(self, index: int, elem: scala.Tuple2[typing.Any, typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def updated$mcCS$sp(self, index: int, elem: scala.Tuple2[typing.Any, typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def updated$mcCV$sp(self, index: int, elem: scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]) -> Coll[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]: ...
    def updated$mcCZ$sp(self, index: int, elem: scala.Tuple2[typing.Any, typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def updated$mcD$sp(self, index: int, elem: float) -> Coll[typing.Any]: ...
    def updated$mcDB$sp(self, index: int, elem: scala.Tuple2[typing.Any, typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def updated$mcDC$sp(self, index: int, elem: scala.Tuple2[typing.Any, typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def updated$mcDD$sp(self, index: int, elem: scala.Tuple2[typing.Any, typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def updated$mcDF$sp(self, index: int, elem: scala.Tuple2[typing.Any, typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def updated$mcDI$sp(self, index: int, elem: scala.Tuple2[typing.Any, typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def updated$mcDJ$sp(self, index: int, elem: scala.Tuple2[typing.Any, typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def updated$mcDS$sp(self, index: int, elem: scala.Tuple2[typing.Any, typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def updated$mcDV$sp(self, index: int, elem: scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]) -> Coll[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]: ...
    def updated$mcDZ$sp(self, index: int, elem: scala.Tuple2[typing.Any, typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def updated$mcF$sp(self, index: int, elem: float) -> Coll[typing.Any]: ...
    def updated$mcFB$sp(self, index: int, elem: scala.Tuple2[typing.Any, typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def updated$mcFC$sp(self, index: int, elem: scala.Tuple2[typing.Any, typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def updated$mcFD$sp(self, index: int, elem: scala.Tuple2[typing.Any, typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def updated$mcFF$sp(self, index: int, elem: scala.Tuple2[typing.Any, typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def updated$mcFI$sp(self, index: int, elem: scala.Tuple2[typing.Any, typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def updated$mcFJ$sp(self, index: int, elem: scala.Tuple2[typing.Any, typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def updated$mcFS$sp(self, index: int, elem: scala.Tuple2[typing.Any, typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def updated$mcFV$sp(self, index: int, elem: scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]) -> Coll[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]: ...
    def updated$mcFZ$sp(self, index: int, elem: scala.Tuple2[typing.Any, typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def updated$mcI$sp(self, index: int, elem: int) -> Coll[typing.Any]: ...
    def updated$mcIB$sp(self, index: int, elem: scala.Tuple2[typing.Any, typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def updated$mcIC$sp(self, index: int, elem: scala.Tuple2[typing.Any, typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def updated$mcID$sp(self, index: int, elem: scala.Tuple2[typing.Any, typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def updated$mcIF$sp(self, index: int, elem: scala.Tuple2[typing.Any, typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def updated$mcII$sp(self, index: int, elem: scala.Tuple2[typing.Any, typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def updated$mcIJ$sp(self, index: int, elem: scala.Tuple2[typing.Any, typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def updated$mcIS$sp(self, index: int, elem: scala.Tuple2[typing.Any, typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def updated$mcIV$sp(self, index: int, elem: scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]) -> Coll[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]: ...
    def updated$mcIZ$sp(self, index: int, elem: scala.Tuple2[typing.Any, typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def updated$mcJ$sp(self, index: int, elem: int) -> Coll[typing.Any]: ...
    def updated$mcJB$sp(self, index: int, elem: scala.Tuple2[typing.Any, typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def updated$mcJC$sp(self, index: int, elem: scala.Tuple2[typing.Any, typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def updated$mcJD$sp(self, index: int, elem: scala.Tuple2[typing.Any, typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def updated$mcJF$sp(self, index: int, elem: scala.Tuple2[typing.Any, typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def updated$mcJI$sp(self, index: int, elem: scala.Tuple2[typing.Any, typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def updated$mcJJ$sp(self, index: int, elem: scala.Tuple2[typing.Any, typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def updated$mcJS$sp(self, index: int, elem: scala.Tuple2[typing.Any, typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def updated$mcJV$sp(self, index: int, elem: scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]) -> Coll[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]: ...
    def updated$mcJZ$sp(self, index: int, elem: scala.Tuple2[typing.Any, typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def updated$mcS$sp(self, index: int, elem: int) -> Coll[typing.Any]: ...
    def updated$mcSB$sp(self, index: int, elem: scala.Tuple2[typing.Any, typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def updated$mcSC$sp(self, index: int, elem: scala.Tuple2[typing.Any, typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def updated$mcSD$sp(self, index: int, elem: scala.Tuple2[typing.Any, typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def updated$mcSF$sp(self, index: int, elem: scala.Tuple2[typing.Any, typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def updated$mcSI$sp(self, index: int, elem: scala.Tuple2[typing.Any, typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def updated$mcSJ$sp(self, index: int, elem: scala.Tuple2[typing.Any, typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def updated$mcSS$sp(self, index: int, elem: scala.Tuple2[typing.Any, typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def updated$mcSV$sp(self, index: int, elem: scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]) -> Coll[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]: ...
    def updated$mcSZ$sp(self, index: int, elem: scala.Tuple2[typing.Any, typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def updated$mcV$sp(self, index: int, elem: scala.runtime.BoxedUnit) -> Coll[scala.runtime.BoxedUnit]: ...
    def updated$mcVB$sp(self, index: int, elem: scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]) -> Coll[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]: ...
    def updated$mcVC$sp(self, index: int, elem: scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]) -> Coll[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]: ...
    def updated$mcVD$sp(self, index: int, elem: scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]) -> Coll[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]: ...
    def updated$mcVF$sp(self, index: int, elem: scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]) -> Coll[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]: ...
    def updated$mcVI$sp(self, index: int, elem: scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]) -> Coll[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]: ...
    def updated$mcVJ$sp(self, index: int, elem: scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]) -> Coll[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]: ...
    def updated$mcVS$sp(self, index: int, elem: scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]) -> Coll[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]: ...
    def updated$mcVV$sp(self, index: int, elem: scala.Tuple2[scala.runtime.BoxedUnit, scala.runtime.BoxedUnit]) -> Coll[scala.Tuple2[scala.runtime.BoxedUnit, scala.runtime.BoxedUnit]]: ...
    def updated$mcVZ$sp(self, index: int, elem: scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]) -> Coll[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]: ...
    def updated$mcZ$sp(self, index: int, elem: bool) -> Coll[typing.Any]: ...
    def updated$mcZB$sp(self, index: int, elem: scala.Tuple2[typing.Any, typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def updated$mcZC$sp(self, index: int, elem: scala.Tuple2[typing.Any, typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def updated$mcZD$sp(self, index: int, elem: scala.Tuple2[typing.Any, typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def updated$mcZF$sp(self, index: int, elem: scala.Tuple2[typing.Any, typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def updated$mcZI$sp(self, index: int, elem: scala.Tuple2[typing.Any, typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def updated$mcZJ$sp(self, index: int, elem: scala.Tuple2[typing.Any, typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def updated$mcZS$sp(self, index: int, elem: scala.Tuple2[typing.Any, typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def updated$mcZV$sp(self, index: int, elem: scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]) -> Coll[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]: ...
    def updated$mcZZ$sp(self, index: int, elem: scala.Tuple2[typing.Any, typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    _zip__B = typing.TypeVar('_zip__B')  # <B>
    def zip(self, ys: Coll[_zip__B]) -> PairColl[scala.Tuple2[_PairOfCols__L, _PairOfCols__R], _zip__B]: ...
    def zip$mBc$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[_PairOfCols__L, _PairOfCols__R], typing.Any]: ...
    def zip$mBcB$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mBcBB$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mBcBC$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mBcBD$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mBcBF$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mBcBI$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mBcBJ$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mBcBS$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mBcBV$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any]: ...
    def zip$mBcBZ$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mBcC$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mBcCB$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mBcCC$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mBcCD$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mBcCF$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mBcCI$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mBcCJ$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mBcCS$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mBcCV$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any]: ...
    def zip$mBcCZ$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mBcD$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mBcDB$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mBcDC$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mBcDD$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mBcDF$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mBcDI$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mBcDJ$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mBcDS$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mBcDV$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any]: ...
    def zip$mBcDZ$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mBcF$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mBcFB$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mBcFC$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mBcFD$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mBcFF$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mBcFI$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mBcFJ$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mBcFS$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mBcFV$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any]: ...
    def zip$mBcFZ$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mBcI$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mBcIB$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mBcIC$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mBcID$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mBcIF$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mBcII$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mBcIJ$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mBcIS$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mBcIV$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any]: ...
    def zip$mBcIZ$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mBcJ$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mBcJB$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mBcJC$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mBcJD$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mBcJF$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mBcJI$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mBcJJ$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mBcJS$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mBcJV$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any]: ...
    def zip$mBcJZ$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mBcS$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mBcSB$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mBcSC$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mBcSD$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mBcSF$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mBcSI$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mBcSJ$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mBcSS$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mBcSV$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any]: ...
    def zip$mBcSZ$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mBcV$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]: ...
    def zip$mBcVB$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any]: ...
    def zip$mBcVC$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any]: ...
    def zip$mBcVD$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any]: ...
    def zip$mBcVF$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any]: ...
    def zip$mBcVI$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any]: ...
    def zip$mBcVJ$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any]: ...
    def zip$mBcVS$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any]: ...
    def zip$mBcVV$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[scala.runtime.BoxedUnit, scala.runtime.BoxedUnit], typing.Any]: ...
    def zip$mBcVZ$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any]: ...
    def zip$mBcZ$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mBcZB$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mBcZC$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mBcZD$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mBcZF$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mBcZI$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mBcZJ$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mBcZS$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mBcZV$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any]: ...
    def zip$mBcZZ$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mCc$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[_PairOfCols__L, _PairOfCols__R], typing.Any]: ...
    def zip$mCcB$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mCcBB$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mCcBC$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mCcBD$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mCcBF$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mCcBI$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mCcBJ$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mCcBS$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mCcBV$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any]: ...
    def zip$mCcBZ$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mCcC$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mCcCB$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mCcCC$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mCcCD$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mCcCF$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mCcCI$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mCcCJ$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mCcCS$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mCcCV$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any]: ...
    def zip$mCcCZ$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mCcD$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mCcDB$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mCcDC$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mCcDD$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mCcDF$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mCcDI$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mCcDJ$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mCcDS$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mCcDV$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any]: ...
    def zip$mCcDZ$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mCcF$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mCcFB$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mCcFC$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mCcFD$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mCcFF$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mCcFI$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mCcFJ$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mCcFS$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mCcFV$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any]: ...
    def zip$mCcFZ$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mCcI$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mCcIB$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mCcIC$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mCcID$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mCcIF$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mCcII$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mCcIJ$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mCcIS$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mCcIV$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any]: ...
    def zip$mCcIZ$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mCcJ$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mCcJB$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mCcJC$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mCcJD$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mCcJF$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mCcJI$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mCcJJ$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mCcJS$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mCcJV$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any]: ...
    def zip$mCcJZ$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mCcS$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mCcSB$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mCcSC$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mCcSD$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mCcSF$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mCcSI$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mCcSJ$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mCcSS$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mCcSV$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any]: ...
    def zip$mCcSZ$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mCcV$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]: ...
    def zip$mCcVB$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any]: ...
    def zip$mCcVC$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any]: ...
    def zip$mCcVD$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any]: ...
    def zip$mCcVF$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any]: ...
    def zip$mCcVI$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any]: ...
    def zip$mCcVJ$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any]: ...
    def zip$mCcVS$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any]: ...
    def zip$mCcVV$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[scala.runtime.BoxedUnit, scala.runtime.BoxedUnit], typing.Any]: ...
    def zip$mCcVZ$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any]: ...
    def zip$mCcZ$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mCcZB$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mCcZC$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mCcZD$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mCcZF$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mCcZI$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mCcZJ$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mCcZS$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mCcZV$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any]: ...
    def zip$mCcZZ$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mDc$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[_PairOfCols__L, _PairOfCols__R], typing.Any]: ...
    def zip$mDcB$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mDcBB$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mDcBC$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mDcBD$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mDcBF$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mDcBI$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mDcBJ$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mDcBS$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mDcBV$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any]: ...
    def zip$mDcBZ$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mDcC$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mDcCB$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mDcCC$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mDcCD$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mDcCF$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mDcCI$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mDcCJ$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mDcCS$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mDcCV$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any]: ...
    def zip$mDcCZ$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mDcD$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mDcDB$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mDcDC$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mDcDD$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mDcDF$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mDcDI$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mDcDJ$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mDcDS$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mDcDV$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any]: ...
    def zip$mDcDZ$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mDcF$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mDcFB$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mDcFC$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mDcFD$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mDcFF$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mDcFI$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mDcFJ$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mDcFS$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mDcFV$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any]: ...
    def zip$mDcFZ$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mDcI$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mDcIB$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mDcIC$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mDcID$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mDcIF$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mDcII$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mDcIJ$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mDcIS$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mDcIV$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any]: ...
    def zip$mDcIZ$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mDcJ$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mDcJB$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mDcJC$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mDcJD$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mDcJF$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mDcJI$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mDcJJ$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mDcJS$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mDcJV$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any]: ...
    def zip$mDcJZ$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mDcS$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mDcSB$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mDcSC$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mDcSD$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mDcSF$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mDcSI$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mDcSJ$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mDcSS$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mDcSV$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any]: ...
    def zip$mDcSZ$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mDcV$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]: ...
    def zip$mDcVB$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any]: ...
    def zip$mDcVC$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any]: ...
    def zip$mDcVD$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any]: ...
    def zip$mDcVF$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any]: ...
    def zip$mDcVI$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any]: ...
    def zip$mDcVJ$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any]: ...
    def zip$mDcVS$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any]: ...
    def zip$mDcVV$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[scala.runtime.BoxedUnit, scala.runtime.BoxedUnit], typing.Any]: ...
    def zip$mDcVZ$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any]: ...
    def zip$mDcZ$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mDcZB$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mDcZC$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mDcZD$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mDcZF$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mDcZI$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mDcZJ$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mDcZS$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mDcZV$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any]: ...
    def zip$mDcZZ$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mFc$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[_PairOfCols__L, _PairOfCols__R], typing.Any]: ...
    def zip$mFcB$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mFcBB$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mFcBC$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mFcBD$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mFcBF$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mFcBI$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mFcBJ$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mFcBS$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mFcBV$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any]: ...
    def zip$mFcBZ$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mFcC$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mFcCB$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mFcCC$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mFcCD$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mFcCF$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mFcCI$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mFcCJ$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mFcCS$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mFcCV$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any]: ...
    def zip$mFcCZ$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mFcD$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mFcDB$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mFcDC$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mFcDD$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mFcDF$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mFcDI$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mFcDJ$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mFcDS$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mFcDV$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any]: ...
    def zip$mFcDZ$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mFcF$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mFcFB$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mFcFC$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mFcFD$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mFcFF$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mFcFI$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mFcFJ$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mFcFS$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mFcFV$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any]: ...
    def zip$mFcFZ$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mFcI$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mFcIB$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mFcIC$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mFcID$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mFcIF$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mFcII$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mFcIJ$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mFcIS$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mFcIV$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any]: ...
    def zip$mFcIZ$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mFcJ$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mFcJB$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mFcJC$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mFcJD$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mFcJF$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mFcJI$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mFcJJ$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mFcJS$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mFcJV$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any]: ...
    def zip$mFcJZ$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mFcS$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mFcSB$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mFcSC$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mFcSD$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mFcSF$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mFcSI$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mFcSJ$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mFcSS$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mFcSV$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any]: ...
    def zip$mFcSZ$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mFcV$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]: ...
    def zip$mFcVB$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any]: ...
    def zip$mFcVC$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any]: ...
    def zip$mFcVD$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any]: ...
    def zip$mFcVF$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any]: ...
    def zip$mFcVI$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any]: ...
    def zip$mFcVJ$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any]: ...
    def zip$mFcVS$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any]: ...
    def zip$mFcVV$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[scala.runtime.BoxedUnit, scala.runtime.BoxedUnit], typing.Any]: ...
    def zip$mFcVZ$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any]: ...
    def zip$mFcZ$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mFcZB$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mFcZC$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mFcZD$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mFcZF$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mFcZI$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mFcZJ$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mFcZS$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mFcZV$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any]: ...
    def zip$mFcZZ$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mIc$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[_PairOfCols__L, _PairOfCols__R], typing.Any]: ...
    def zip$mIcB$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mIcBB$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mIcBC$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mIcBD$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mIcBF$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mIcBI$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mIcBJ$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mIcBS$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mIcBV$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any]: ...
    def zip$mIcBZ$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mIcC$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mIcCB$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mIcCC$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mIcCD$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mIcCF$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mIcCI$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mIcCJ$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mIcCS$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mIcCV$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any]: ...
    def zip$mIcCZ$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mIcD$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mIcDB$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mIcDC$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mIcDD$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mIcDF$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mIcDI$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mIcDJ$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mIcDS$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mIcDV$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any]: ...
    def zip$mIcDZ$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mIcF$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mIcFB$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mIcFC$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mIcFD$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mIcFF$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mIcFI$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mIcFJ$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mIcFS$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mIcFV$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any]: ...
    def zip$mIcFZ$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mIcI$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mIcIB$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mIcIC$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mIcID$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mIcIF$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mIcII$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mIcIJ$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mIcIS$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mIcIV$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any]: ...
    def zip$mIcIZ$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mIcJ$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mIcJB$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mIcJC$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mIcJD$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mIcJF$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mIcJI$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mIcJJ$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mIcJS$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mIcJV$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any]: ...
    def zip$mIcJZ$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mIcS$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mIcSB$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mIcSC$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mIcSD$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mIcSF$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mIcSI$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mIcSJ$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mIcSS$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mIcSV$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any]: ...
    def zip$mIcSZ$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mIcV$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]: ...
    def zip$mIcVB$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any]: ...
    def zip$mIcVC$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any]: ...
    def zip$mIcVD$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any]: ...
    def zip$mIcVF$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any]: ...
    def zip$mIcVI$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any]: ...
    def zip$mIcVJ$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any]: ...
    def zip$mIcVS$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any]: ...
    def zip$mIcVV$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[scala.runtime.BoxedUnit, scala.runtime.BoxedUnit], typing.Any]: ...
    def zip$mIcVZ$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any]: ...
    def zip$mIcZ$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mIcZB$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mIcZC$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mIcZD$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mIcZF$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mIcZI$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mIcZJ$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mIcZS$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mIcZV$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any]: ...
    def zip$mIcZZ$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mJc$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[_PairOfCols__L, _PairOfCols__R], typing.Any]: ...
    def zip$mJcB$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mJcBB$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mJcBC$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mJcBD$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mJcBF$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mJcBI$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mJcBJ$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mJcBS$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mJcBV$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any]: ...
    def zip$mJcBZ$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mJcC$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mJcCB$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mJcCC$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mJcCD$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mJcCF$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mJcCI$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mJcCJ$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mJcCS$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mJcCV$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any]: ...
    def zip$mJcCZ$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mJcD$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mJcDB$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mJcDC$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mJcDD$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mJcDF$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mJcDI$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mJcDJ$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mJcDS$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mJcDV$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any]: ...
    def zip$mJcDZ$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mJcF$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mJcFB$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mJcFC$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mJcFD$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mJcFF$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mJcFI$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mJcFJ$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mJcFS$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mJcFV$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any]: ...
    def zip$mJcFZ$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mJcI$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mJcIB$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mJcIC$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mJcID$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mJcIF$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mJcII$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mJcIJ$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mJcIS$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mJcIV$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any]: ...
    def zip$mJcIZ$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mJcJ$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mJcJB$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mJcJC$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mJcJD$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mJcJF$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mJcJI$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mJcJJ$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mJcJS$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mJcJV$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any]: ...
    def zip$mJcJZ$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mJcS$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mJcSB$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mJcSC$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mJcSD$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mJcSF$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mJcSI$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mJcSJ$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mJcSS$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mJcSV$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any]: ...
    def zip$mJcSZ$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mJcV$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]: ...
    def zip$mJcVB$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any]: ...
    def zip$mJcVC$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any]: ...
    def zip$mJcVD$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any]: ...
    def zip$mJcVF$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any]: ...
    def zip$mJcVI$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any]: ...
    def zip$mJcVJ$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any]: ...
    def zip$mJcVS$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any]: ...
    def zip$mJcVV$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[scala.runtime.BoxedUnit, scala.runtime.BoxedUnit], typing.Any]: ...
    def zip$mJcVZ$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any]: ...
    def zip$mJcZ$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mJcZB$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mJcZC$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mJcZD$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mJcZF$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mJcZI$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mJcZJ$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mJcZS$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mJcZV$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any]: ...
    def zip$mJcZZ$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mSc$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[_PairOfCols__L, _PairOfCols__R], typing.Any]: ...
    def zip$mScB$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mScBB$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mScBC$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mScBD$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mScBF$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mScBI$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mScBJ$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mScBS$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mScBV$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any]: ...
    def zip$mScBZ$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mScC$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mScCB$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mScCC$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mScCD$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mScCF$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mScCI$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mScCJ$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mScCS$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mScCV$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any]: ...
    def zip$mScCZ$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mScD$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mScDB$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mScDC$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mScDD$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mScDF$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mScDI$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mScDJ$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mScDS$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mScDV$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any]: ...
    def zip$mScDZ$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mScF$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mScFB$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mScFC$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mScFD$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mScFF$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mScFI$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mScFJ$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mScFS$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mScFV$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any]: ...
    def zip$mScFZ$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mScI$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mScIB$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mScIC$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mScID$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mScIF$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mScII$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mScIJ$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mScIS$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mScIV$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any]: ...
    def zip$mScIZ$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mScJ$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mScJB$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mScJC$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mScJD$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mScJF$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mScJI$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mScJJ$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mScJS$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mScJV$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any]: ...
    def zip$mScJZ$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mScS$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mScSB$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mScSC$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mScSD$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mScSF$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mScSI$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mScSJ$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mScSS$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mScSV$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any]: ...
    def zip$mScSZ$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mScV$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]: ...
    def zip$mScVB$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any]: ...
    def zip$mScVC$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any]: ...
    def zip$mScVD$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any]: ...
    def zip$mScVF$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any]: ...
    def zip$mScVI$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any]: ...
    def zip$mScVJ$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any]: ...
    def zip$mScVS$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any]: ...
    def zip$mScVV$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[scala.runtime.BoxedUnit, scala.runtime.BoxedUnit], typing.Any]: ...
    def zip$mScVZ$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any]: ...
    def zip$mScZ$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mScZB$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mScZC$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mScZD$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mScZF$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mScZI$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mScZJ$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mScZS$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mScZV$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any]: ...
    def zip$mScZZ$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mVc$sp(self, ys: Coll[scala.runtime.BoxedUnit]) -> PairColl[scala.Tuple2[_PairOfCols__L, _PairOfCols__R], scala.runtime.BoxedUnit]: ...
    def zip$mVcB$sp(self, ys: Coll[scala.runtime.BoxedUnit]) -> Coll[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]: ...
    def zip$mVcBB$sp(self, ys: Coll[scala.runtime.BoxedUnit]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], scala.runtime.BoxedUnit]: ...
    def zip$mVcBC$sp(self, ys: Coll[scala.runtime.BoxedUnit]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], scala.runtime.BoxedUnit]: ...
    def zip$mVcBD$sp(self, ys: Coll[scala.runtime.BoxedUnit]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], scala.runtime.BoxedUnit]: ...
    def zip$mVcBF$sp(self, ys: Coll[scala.runtime.BoxedUnit]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], scala.runtime.BoxedUnit]: ...
    def zip$mVcBI$sp(self, ys: Coll[scala.runtime.BoxedUnit]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], scala.runtime.BoxedUnit]: ...
    def zip$mVcBJ$sp(self, ys: Coll[scala.runtime.BoxedUnit]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], scala.runtime.BoxedUnit]: ...
    def zip$mVcBS$sp(self, ys: Coll[scala.runtime.BoxedUnit]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], scala.runtime.BoxedUnit]: ...
    def zip$mVcBV$sp(self, ys: Coll[scala.runtime.BoxedUnit]) -> PairColl[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], scala.runtime.BoxedUnit]: ...
    def zip$mVcBZ$sp(self, ys: Coll[scala.runtime.BoxedUnit]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], scala.runtime.BoxedUnit]: ...
    def zip$mVcC$sp(self, ys: Coll[scala.runtime.BoxedUnit]) -> Coll[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]: ...
    def zip$mVcCB$sp(self, ys: Coll[scala.runtime.BoxedUnit]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], scala.runtime.BoxedUnit]: ...
    def zip$mVcCC$sp(self, ys: Coll[scala.runtime.BoxedUnit]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], scala.runtime.BoxedUnit]: ...
    def zip$mVcCD$sp(self, ys: Coll[scala.runtime.BoxedUnit]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], scala.runtime.BoxedUnit]: ...
    def zip$mVcCF$sp(self, ys: Coll[scala.runtime.BoxedUnit]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], scala.runtime.BoxedUnit]: ...
    def zip$mVcCI$sp(self, ys: Coll[scala.runtime.BoxedUnit]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], scala.runtime.BoxedUnit]: ...
    def zip$mVcCJ$sp(self, ys: Coll[scala.runtime.BoxedUnit]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], scala.runtime.BoxedUnit]: ...
    def zip$mVcCS$sp(self, ys: Coll[scala.runtime.BoxedUnit]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], scala.runtime.BoxedUnit]: ...
    def zip$mVcCV$sp(self, ys: Coll[scala.runtime.BoxedUnit]) -> PairColl[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], scala.runtime.BoxedUnit]: ...
    def zip$mVcCZ$sp(self, ys: Coll[scala.runtime.BoxedUnit]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], scala.runtime.BoxedUnit]: ...
    def zip$mVcD$sp(self, ys: Coll[scala.runtime.BoxedUnit]) -> Coll[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]: ...
    def zip$mVcDB$sp(self, ys: Coll[scala.runtime.BoxedUnit]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], scala.runtime.BoxedUnit]: ...
    def zip$mVcDC$sp(self, ys: Coll[scala.runtime.BoxedUnit]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], scala.runtime.BoxedUnit]: ...
    def zip$mVcDD$sp(self, ys: Coll[scala.runtime.BoxedUnit]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], scala.runtime.BoxedUnit]: ...
    def zip$mVcDF$sp(self, ys: Coll[scala.runtime.BoxedUnit]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], scala.runtime.BoxedUnit]: ...
    def zip$mVcDI$sp(self, ys: Coll[scala.runtime.BoxedUnit]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], scala.runtime.BoxedUnit]: ...
    def zip$mVcDJ$sp(self, ys: Coll[scala.runtime.BoxedUnit]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], scala.runtime.BoxedUnit]: ...
    def zip$mVcDS$sp(self, ys: Coll[scala.runtime.BoxedUnit]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], scala.runtime.BoxedUnit]: ...
    def zip$mVcDV$sp(self, ys: Coll[scala.runtime.BoxedUnit]) -> PairColl[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], scala.runtime.BoxedUnit]: ...
    def zip$mVcDZ$sp(self, ys: Coll[scala.runtime.BoxedUnit]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], scala.runtime.BoxedUnit]: ...
    def zip$mVcF$sp(self, ys: Coll[scala.runtime.BoxedUnit]) -> Coll[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]: ...
    def zip$mVcFB$sp(self, ys: Coll[scala.runtime.BoxedUnit]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], scala.runtime.BoxedUnit]: ...
    def zip$mVcFC$sp(self, ys: Coll[scala.runtime.BoxedUnit]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], scala.runtime.BoxedUnit]: ...
    def zip$mVcFD$sp(self, ys: Coll[scala.runtime.BoxedUnit]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], scala.runtime.BoxedUnit]: ...
    def zip$mVcFF$sp(self, ys: Coll[scala.runtime.BoxedUnit]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], scala.runtime.BoxedUnit]: ...
    def zip$mVcFI$sp(self, ys: Coll[scala.runtime.BoxedUnit]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], scala.runtime.BoxedUnit]: ...
    def zip$mVcFJ$sp(self, ys: Coll[scala.runtime.BoxedUnit]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], scala.runtime.BoxedUnit]: ...
    def zip$mVcFS$sp(self, ys: Coll[scala.runtime.BoxedUnit]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], scala.runtime.BoxedUnit]: ...
    def zip$mVcFV$sp(self, ys: Coll[scala.runtime.BoxedUnit]) -> PairColl[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], scala.runtime.BoxedUnit]: ...
    def zip$mVcFZ$sp(self, ys: Coll[scala.runtime.BoxedUnit]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], scala.runtime.BoxedUnit]: ...
    def zip$mVcI$sp(self, ys: Coll[scala.runtime.BoxedUnit]) -> Coll[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]: ...
    def zip$mVcIB$sp(self, ys: Coll[scala.runtime.BoxedUnit]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], scala.runtime.BoxedUnit]: ...
    def zip$mVcIC$sp(self, ys: Coll[scala.runtime.BoxedUnit]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], scala.runtime.BoxedUnit]: ...
    def zip$mVcID$sp(self, ys: Coll[scala.runtime.BoxedUnit]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], scala.runtime.BoxedUnit]: ...
    def zip$mVcIF$sp(self, ys: Coll[scala.runtime.BoxedUnit]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], scala.runtime.BoxedUnit]: ...
    def zip$mVcII$sp(self, ys: Coll[scala.runtime.BoxedUnit]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], scala.runtime.BoxedUnit]: ...
    def zip$mVcIJ$sp(self, ys: Coll[scala.runtime.BoxedUnit]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], scala.runtime.BoxedUnit]: ...
    def zip$mVcIS$sp(self, ys: Coll[scala.runtime.BoxedUnit]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], scala.runtime.BoxedUnit]: ...
    def zip$mVcIV$sp(self, ys: Coll[scala.runtime.BoxedUnit]) -> PairColl[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], scala.runtime.BoxedUnit]: ...
    def zip$mVcIZ$sp(self, ys: Coll[scala.runtime.BoxedUnit]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], scala.runtime.BoxedUnit]: ...
    def zip$mVcJ$sp(self, ys: Coll[scala.runtime.BoxedUnit]) -> Coll[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]: ...
    def zip$mVcJB$sp(self, ys: Coll[scala.runtime.BoxedUnit]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], scala.runtime.BoxedUnit]: ...
    def zip$mVcJC$sp(self, ys: Coll[scala.runtime.BoxedUnit]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], scala.runtime.BoxedUnit]: ...
    def zip$mVcJD$sp(self, ys: Coll[scala.runtime.BoxedUnit]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], scala.runtime.BoxedUnit]: ...
    def zip$mVcJF$sp(self, ys: Coll[scala.runtime.BoxedUnit]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], scala.runtime.BoxedUnit]: ...
    def zip$mVcJI$sp(self, ys: Coll[scala.runtime.BoxedUnit]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], scala.runtime.BoxedUnit]: ...
    def zip$mVcJJ$sp(self, ys: Coll[scala.runtime.BoxedUnit]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], scala.runtime.BoxedUnit]: ...
    def zip$mVcJS$sp(self, ys: Coll[scala.runtime.BoxedUnit]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], scala.runtime.BoxedUnit]: ...
    def zip$mVcJV$sp(self, ys: Coll[scala.runtime.BoxedUnit]) -> PairColl[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], scala.runtime.BoxedUnit]: ...
    def zip$mVcJZ$sp(self, ys: Coll[scala.runtime.BoxedUnit]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], scala.runtime.BoxedUnit]: ...
    def zip$mVcS$sp(self, ys: Coll[scala.runtime.BoxedUnit]) -> Coll[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]: ...
    def zip$mVcSB$sp(self, ys: Coll[scala.runtime.BoxedUnit]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], scala.runtime.BoxedUnit]: ...
    def zip$mVcSC$sp(self, ys: Coll[scala.runtime.BoxedUnit]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], scala.runtime.BoxedUnit]: ...
    def zip$mVcSD$sp(self, ys: Coll[scala.runtime.BoxedUnit]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], scala.runtime.BoxedUnit]: ...
    def zip$mVcSF$sp(self, ys: Coll[scala.runtime.BoxedUnit]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], scala.runtime.BoxedUnit]: ...
    def zip$mVcSI$sp(self, ys: Coll[scala.runtime.BoxedUnit]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], scala.runtime.BoxedUnit]: ...
    def zip$mVcSJ$sp(self, ys: Coll[scala.runtime.BoxedUnit]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], scala.runtime.BoxedUnit]: ...
    def zip$mVcSS$sp(self, ys: Coll[scala.runtime.BoxedUnit]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], scala.runtime.BoxedUnit]: ...
    def zip$mVcSV$sp(self, ys: Coll[scala.runtime.BoxedUnit]) -> PairColl[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], scala.runtime.BoxedUnit]: ...
    def zip$mVcSZ$sp(self, ys: Coll[scala.runtime.BoxedUnit]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], scala.runtime.BoxedUnit]: ...
    def zip$mVcV$sp(self, ys: Coll[scala.runtime.BoxedUnit]) -> Coll[scala.Tuple2[scala.runtime.BoxedUnit, scala.runtime.BoxedUnit]]: ...
    def zip$mVcVB$sp(self, ys: Coll[scala.runtime.BoxedUnit]) -> PairColl[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], scala.runtime.BoxedUnit]: ...
    def zip$mVcVC$sp(self, ys: Coll[scala.runtime.BoxedUnit]) -> PairColl[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], scala.runtime.BoxedUnit]: ...
    def zip$mVcVD$sp(self, ys: Coll[scala.runtime.BoxedUnit]) -> PairColl[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], scala.runtime.BoxedUnit]: ...
    def zip$mVcVF$sp(self, ys: Coll[scala.runtime.BoxedUnit]) -> PairColl[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], scala.runtime.BoxedUnit]: ...
    def zip$mVcVI$sp(self, ys: Coll[scala.runtime.BoxedUnit]) -> PairColl[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], scala.runtime.BoxedUnit]: ...
    def zip$mVcVJ$sp(self, ys: Coll[scala.runtime.BoxedUnit]) -> PairColl[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], scala.runtime.BoxedUnit]: ...
    def zip$mVcVS$sp(self, ys: Coll[scala.runtime.BoxedUnit]) -> PairColl[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], scala.runtime.BoxedUnit]: ...
    def zip$mVcVV$sp(self, ys: Coll[scala.runtime.BoxedUnit]) -> PairColl[scala.Tuple2[scala.runtime.BoxedUnit, scala.runtime.BoxedUnit], scala.runtime.BoxedUnit]: ...
    def zip$mVcVZ$sp(self, ys: Coll[scala.runtime.BoxedUnit]) -> PairColl[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], scala.runtime.BoxedUnit]: ...
    def zip$mVcZ$sp(self, ys: Coll[scala.runtime.BoxedUnit]) -> Coll[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit]]: ...
    def zip$mVcZB$sp(self, ys: Coll[scala.runtime.BoxedUnit]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], scala.runtime.BoxedUnit]: ...
    def zip$mVcZC$sp(self, ys: Coll[scala.runtime.BoxedUnit]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], scala.runtime.BoxedUnit]: ...
    def zip$mVcZD$sp(self, ys: Coll[scala.runtime.BoxedUnit]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], scala.runtime.BoxedUnit]: ...
    def zip$mVcZF$sp(self, ys: Coll[scala.runtime.BoxedUnit]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], scala.runtime.BoxedUnit]: ...
    def zip$mVcZI$sp(self, ys: Coll[scala.runtime.BoxedUnit]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], scala.runtime.BoxedUnit]: ...
    def zip$mVcZJ$sp(self, ys: Coll[scala.runtime.BoxedUnit]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], scala.runtime.BoxedUnit]: ...
    def zip$mVcZS$sp(self, ys: Coll[scala.runtime.BoxedUnit]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], scala.runtime.BoxedUnit]: ...
    def zip$mVcZV$sp(self, ys: Coll[scala.runtime.BoxedUnit]) -> PairColl[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], scala.runtime.BoxedUnit]: ...
    def zip$mVcZZ$sp(self, ys: Coll[scala.runtime.BoxedUnit]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], scala.runtime.BoxedUnit]: ...
    def zip$mZc$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[_PairOfCols__L, _PairOfCols__R], typing.Any]: ...
    def zip$mZcB$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mZcBB$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mZcBC$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mZcBD$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mZcBF$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mZcBI$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mZcBJ$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mZcBS$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mZcBV$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any]: ...
    def zip$mZcBZ$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mZcC$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mZcCB$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mZcCC$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mZcCD$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mZcCF$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mZcCI$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mZcCJ$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mZcCS$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mZcCV$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any]: ...
    def zip$mZcCZ$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mZcD$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mZcDB$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mZcDC$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mZcDD$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mZcDF$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mZcDI$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mZcDJ$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mZcDS$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mZcDV$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any]: ...
    def zip$mZcDZ$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mZcF$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mZcFB$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mZcFC$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mZcFD$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mZcFF$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mZcFI$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mZcFJ$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mZcFS$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mZcFV$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any]: ...
    def zip$mZcFZ$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mZcI$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mZcIB$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mZcIC$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mZcID$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mZcIF$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mZcII$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mZcIJ$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mZcIS$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mZcIV$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any]: ...
    def zip$mZcIZ$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mZcJ$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mZcJB$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mZcJC$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mZcJD$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mZcJF$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mZcJI$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mZcJJ$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mZcJS$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mZcJV$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any]: ...
    def zip$mZcJZ$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mZcS$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mZcSB$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mZcSC$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mZcSD$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mZcSF$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mZcSI$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mZcSJ$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mZcSS$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mZcSV$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any]: ...
    def zip$mZcSZ$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mZcV$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any]]: ...
    def zip$mZcVB$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any]: ...
    def zip$mZcVC$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any]: ...
    def zip$mZcVD$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any]: ...
    def zip$mZcVF$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any]: ...
    def zip$mZcVI$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any]: ...
    def zip$mZcVJ$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any]: ...
    def zip$mZcVS$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any]: ...
    def zip$mZcVV$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[scala.runtime.BoxedUnit, scala.runtime.BoxedUnit], typing.Any]: ...
    def zip$mZcVZ$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], typing.Any]: ...
    def zip$mZcZ$sp(self, ys: Coll[typing.Any]) -> Coll[scala.Tuple2[typing.Any, typing.Any]]: ...
    def zip$mZcZB$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mZcZC$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mZcZD$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mZcZF$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mZcZI$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mZcZJ$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mZcZS$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    def zip$mZcZV$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], typing.Any]: ...
    def zip$mZcZZ$sp(self, ys: Coll[typing.Any]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], typing.Any]: ...
    _zip$mcB$sp__B = typing.TypeVar('_zip$mcB$sp__B')  # <B>
    def zip$mcB$sp(self, ys: Coll[_zip.mcB.sp__B]) -> Coll[scala.Tuple2[typing.Any, _zip.mcB.sp__B]]: ...
    _zip$mcBB$sp__B = typing.TypeVar('_zip$mcBB$sp__B')  # <B>
    def zip$mcBB$sp(self, ys: Coll[_zip.mcBB.sp__B]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], _zip.mcBB.sp__B]: ...
    _zip$mcBC$sp__B = typing.TypeVar('_zip$mcBC$sp__B')  # <B>
    def zip$mcBC$sp(self, ys: Coll[_zip.mcBC.sp__B]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], _zip.mcBC.sp__B]: ...
    _zip$mcBD$sp__B = typing.TypeVar('_zip$mcBD$sp__B')  # <B>
    def zip$mcBD$sp(self, ys: Coll[_zip.mcBD.sp__B]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], _zip.mcBD.sp__B]: ...
    _zip$mcBF$sp__B = typing.TypeVar('_zip$mcBF$sp__B')  # <B>
    def zip$mcBF$sp(self, ys: Coll[_zip.mcBF.sp__B]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], _zip.mcBF.sp__B]: ...
    _zip$mcBI$sp__B = typing.TypeVar('_zip$mcBI$sp__B')  # <B>
    def zip$mcBI$sp(self, ys: Coll[_zip.mcBI.sp__B]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], _zip.mcBI.sp__B]: ...
    _zip$mcBJ$sp__B = typing.TypeVar('_zip$mcBJ$sp__B')  # <B>
    def zip$mcBJ$sp(self, ys: Coll[_zip.mcBJ.sp__B]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], _zip.mcBJ.sp__B]: ...
    _zip$mcBS$sp__B = typing.TypeVar('_zip$mcBS$sp__B')  # <B>
    def zip$mcBS$sp(self, ys: Coll[_zip.mcBS.sp__B]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], _zip.mcBS.sp__B]: ...
    _zip$mcBV$sp__B = typing.TypeVar('_zip$mcBV$sp__B')  # <B>
    def zip$mcBV$sp(self, ys: Coll[_zip.mcBV.sp__B]) -> PairColl[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], _zip.mcBV.sp__B]: ...
    _zip$mcBZ$sp__B = typing.TypeVar('_zip$mcBZ$sp__B')  # <B>
    def zip$mcBZ$sp(self, ys: Coll[_zip.mcBZ.sp__B]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], _zip.mcBZ.sp__B]: ...
    _zip$mcC$sp__B = typing.TypeVar('_zip$mcC$sp__B')  # <B>
    def zip$mcC$sp(self, ys: Coll[_zip.mcC.sp__B]) -> Coll[scala.Tuple2[typing.Any, _zip.mcC.sp__B]]: ...
    _zip$mcCB$sp__B = typing.TypeVar('_zip$mcCB$sp__B')  # <B>
    def zip$mcCB$sp(self, ys: Coll[_zip.mcCB.sp__B]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], _zip.mcCB.sp__B]: ...
    _zip$mcCC$sp__B = typing.TypeVar('_zip$mcCC$sp__B')  # <B>
    def zip$mcCC$sp(self, ys: Coll[_zip.mcCC.sp__B]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], _zip.mcCC.sp__B]: ...
    _zip$mcCD$sp__B = typing.TypeVar('_zip$mcCD$sp__B')  # <B>
    def zip$mcCD$sp(self, ys: Coll[_zip.mcCD.sp__B]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], _zip.mcCD.sp__B]: ...
    _zip$mcCF$sp__B = typing.TypeVar('_zip$mcCF$sp__B')  # <B>
    def zip$mcCF$sp(self, ys: Coll[_zip.mcCF.sp__B]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], _zip.mcCF.sp__B]: ...
    _zip$mcCI$sp__B = typing.TypeVar('_zip$mcCI$sp__B')  # <B>
    def zip$mcCI$sp(self, ys: Coll[_zip.mcCI.sp__B]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], _zip.mcCI.sp__B]: ...
    _zip$mcCJ$sp__B = typing.TypeVar('_zip$mcCJ$sp__B')  # <B>
    def zip$mcCJ$sp(self, ys: Coll[_zip.mcCJ.sp__B]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], _zip.mcCJ.sp__B]: ...
    _zip$mcCS$sp__B = typing.TypeVar('_zip$mcCS$sp__B')  # <B>
    def zip$mcCS$sp(self, ys: Coll[_zip.mcCS.sp__B]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], _zip.mcCS.sp__B]: ...
    _zip$mcCV$sp__B = typing.TypeVar('_zip$mcCV$sp__B')  # <B>
    def zip$mcCV$sp(self, ys: Coll[_zip.mcCV.sp__B]) -> PairColl[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], _zip.mcCV.sp__B]: ...
    _zip$mcCZ$sp__B = typing.TypeVar('_zip$mcCZ$sp__B')  # <B>
    def zip$mcCZ$sp(self, ys: Coll[_zip.mcCZ.sp__B]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], _zip.mcCZ.sp__B]: ...
    _zip$mcD$sp__B = typing.TypeVar('_zip$mcD$sp__B')  # <B>
    def zip$mcD$sp(self, ys: Coll[_zip.mcD.sp__B]) -> Coll[scala.Tuple2[typing.Any, _zip.mcD.sp__B]]: ...
    _zip$mcDB$sp__B = typing.TypeVar('_zip$mcDB$sp__B')  # <B>
    def zip$mcDB$sp(self, ys: Coll[_zip.mcDB.sp__B]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], _zip.mcDB.sp__B]: ...
    _zip$mcDC$sp__B = typing.TypeVar('_zip$mcDC$sp__B')  # <B>
    def zip$mcDC$sp(self, ys: Coll[_zip.mcDC.sp__B]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], _zip.mcDC.sp__B]: ...
    _zip$mcDD$sp__B = typing.TypeVar('_zip$mcDD$sp__B')  # <B>
    def zip$mcDD$sp(self, ys: Coll[_zip.mcDD.sp__B]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], _zip.mcDD.sp__B]: ...
    _zip$mcDF$sp__B = typing.TypeVar('_zip$mcDF$sp__B')  # <B>
    def zip$mcDF$sp(self, ys: Coll[_zip.mcDF.sp__B]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], _zip.mcDF.sp__B]: ...
    _zip$mcDI$sp__B = typing.TypeVar('_zip$mcDI$sp__B')  # <B>
    def zip$mcDI$sp(self, ys: Coll[_zip.mcDI.sp__B]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], _zip.mcDI.sp__B]: ...
    _zip$mcDJ$sp__B = typing.TypeVar('_zip$mcDJ$sp__B')  # <B>
    def zip$mcDJ$sp(self, ys: Coll[_zip.mcDJ.sp__B]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], _zip.mcDJ.sp__B]: ...
    _zip$mcDS$sp__B = typing.TypeVar('_zip$mcDS$sp__B')  # <B>
    def zip$mcDS$sp(self, ys: Coll[_zip.mcDS.sp__B]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], _zip.mcDS.sp__B]: ...
    _zip$mcDV$sp__B = typing.TypeVar('_zip$mcDV$sp__B')  # <B>
    def zip$mcDV$sp(self, ys: Coll[_zip.mcDV.sp__B]) -> PairColl[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], _zip.mcDV.sp__B]: ...
    _zip$mcDZ$sp__B = typing.TypeVar('_zip$mcDZ$sp__B')  # <B>
    def zip$mcDZ$sp(self, ys: Coll[_zip.mcDZ.sp__B]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], _zip.mcDZ.sp__B]: ...
    _zip$mcF$sp__B = typing.TypeVar('_zip$mcF$sp__B')  # <B>
    def zip$mcF$sp(self, ys: Coll[_zip.mcF.sp__B]) -> Coll[scala.Tuple2[typing.Any, _zip.mcF.sp__B]]: ...
    _zip$mcFB$sp__B = typing.TypeVar('_zip$mcFB$sp__B')  # <B>
    def zip$mcFB$sp(self, ys: Coll[_zip.mcFB.sp__B]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], _zip.mcFB.sp__B]: ...
    _zip$mcFC$sp__B = typing.TypeVar('_zip$mcFC$sp__B')  # <B>
    def zip$mcFC$sp(self, ys: Coll[_zip.mcFC.sp__B]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], _zip.mcFC.sp__B]: ...
    _zip$mcFD$sp__B = typing.TypeVar('_zip$mcFD$sp__B')  # <B>
    def zip$mcFD$sp(self, ys: Coll[_zip.mcFD.sp__B]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], _zip.mcFD.sp__B]: ...
    _zip$mcFF$sp__B = typing.TypeVar('_zip$mcFF$sp__B')  # <B>
    def zip$mcFF$sp(self, ys: Coll[_zip.mcFF.sp__B]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], _zip.mcFF.sp__B]: ...
    _zip$mcFI$sp__B = typing.TypeVar('_zip$mcFI$sp__B')  # <B>
    def zip$mcFI$sp(self, ys: Coll[_zip.mcFI.sp__B]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], _zip.mcFI.sp__B]: ...
    _zip$mcFJ$sp__B = typing.TypeVar('_zip$mcFJ$sp__B')  # <B>
    def zip$mcFJ$sp(self, ys: Coll[_zip.mcFJ.sp__B]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], _zip.mcFJ.sp__B]: ...
    _zip$mcFS$sp__B = typing.TypeVar('_zip$mcFS$sp__B')  # <B>
    def zip$mcFS$sp(self, ys: Coll[_zip.mcFS.sp__B]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], _zip.mcFS.sp__B]: ...
    _zip$mcFV$sp__B = typing.TypeVar('_zip$mcFV$sp__B')  # <B>
    def zip$mcFV$sp(self, ys: Coll[_zip.mcFV.sp__B]) -> PairColl[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], _zip.mcFV.sp__B]: ...
    _zip$mcFZ$sp__B = typing.TypeVar('_zip$mcFZ$sp__B')  # <B>
    def zip$mcFZ$sp(self, ys: Coll[_zip.mcFZ.sp__B]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], _zip.mcFZ.sp__B]: ...
    _zip$mcI$sp__B = typing.TypeVar('_zip$mcI$sp__B')  # <B>
    def zip$mcI$sp(self, ys: Coll[_zip.mcI.sp__B]) -> Coll[scala.Tuple2[typing.Any, _zip.mcI.sp__B]]: ...
    _zip$mcIB$sp__B = typing.TypeVar('_zip$mcIB$sp__B')  # <B>
    def zip$mcIB$sp(self, ys: Coll[_zip.mcIB.sp__B]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], _zip.mcIB.sp__B]: ...
    _zip$mcIC$sp__B = typing.TypeVar('_zip$mcIC$sp__B')  # <B>
    def zip$mcIC$sp(self, ys: Coll[_zip.mcIC.sp__B]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], _zip.mcIC.sp__B]: ...
    _zip$mcID$sp__B = typing.TypeVar('_zip$mcID$sp__B')  # <B>
    def zip$mcID$sp(self, ys: Coll[_zip.mcID.sp__B]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], _zip.mcID.sp__B]: ...
    _zip$mcIF$sp__B = typing.TypeVar('_zip$mcIF$sp__B')  # <B>
    def zip$mcIF$sp(self, ys: Coll[_zip.mcIF.sp__B]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], _zip.mcIF.sp__B]: ...
    _zip$mcII$sp__B = typing.TypeVar('_zip$mcII$sp__B')  # <B>
    def zip$mcII$sp(self, ys: Coll[_zip.mcII.sp__B]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], _zip.mcII.sp__B]: ...
    _zip$mcIJ$sp__B = typing.TypeVar('_zip$mcIJ$sp__B')  # <B>
    def zip$mcIJ$sp(self, ys: Coll[_zip.mcIJ.sp__B]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], _zip.mcIJ.sp__B]: ...
    _zip$mcIS$sp__B = typing.TypeVar('_zip$mcIS$sp__B')  # <B>
    def zip$mcIS$sp(self, ys: Coll[_zip.mcIS.sp__B]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], _zip.mcIS.sp__B]: ...
    _zip$mcIV$sp__B = typing.TypeVar('_zip$mcIV$sp__B')  # <B>
    def zip$mcIV$sp(self, ys: Coll[_zip.mcIV.sp__B]) -> PairColl[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], _zip.mcIV.sp__B]: ...
    _zip$mcIZ$sp__B = typing.TypeVar('_zip$mcIZ$sp__B')  # <B>
    def zip$mcIZ$sp(self, ys: Coll[_zip.mcIZ.sp__B]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], _zip.mcIZ.sp__B]: ...
    _zip$mcJ$sp__B = typing.TypeVar('_zip$mcJ$sp__B')  # <B>
    def zip$mcJ$sp(self, ys: Coll[_zip.mcJ.sp__B]) -> Coll[scala.Tuple2[typing.Any, _zip.mcJ.sp__B]]: ...
    _zip$mcJB$sp__B = typing.TypeVar('_zip$mcJB$sp__B')  # <B>
    def zip$mcJB$sp(self, ys: Coll[_zip.mcJB.sp__B]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], _zip.mcJB.sp__B]: ...
    _zip$mcJC$sp__B = typing.TypeVar('_zip$mcJC$sp__B')  # <B>
    def zip$mcJC$sp(self, ys: Coll[_zip.mcJC.sp__B]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], _zip.mcJC.sp__B]: ...
    _zip$mcJD$sp__B = typing.TypeVar('_zip$mcJD$sp__B')  # <B>
    def zip$mcJD$sp(self, ys: Coll[_zip.mcJD.sp__B]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], _zip.mcJD.sp__B]: ...
    _zip$mcJF$sp__B = typing.TypeVar('_zip$mcJF$sp__B')  # <B>
    def zip$mcJF$sp(self, ys: Coll[_zip.mcJF.sp__B]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], _zip.mcJF.sp__B]: ...
    _zip$mcJI$sp__B = typing.TypeVar('_zip$mcJI$sp__B')  # <B>
    def zip$mcJI$sp(self, ys: Coll[_zip.mcJI.sp__B]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], _zip.mcJI.sp__B]: ...
    _zip$mcJJ$sp__B = typing.TypeVar('_zip$mcJJ$sp__B')  # <B>
    def zip$mcJJ$sp(self, ys: Coll[_zip.mcJJ.sp__B]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], _zip.mcJJ.sp__B]: ...
    _zip$mcJS$sp__B = typing.TypeVar('_zip$mcJS$sp__B')  # <B>
    def zip$mcJS$sp(self, ys: Coll[_zip.mcJS.sp__B]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], _zip.mcJS.sp__B]: ...
    _zip$mcJV$sp__B = typing.TypeVar('_zip$mcJV$sp__B')  # <B>
    def zip$mcJV$sp(self, ys: Coll[_zip.mcJV.sp__B]) -> PairColl[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], _zip.mcJV.sp__B]: ...
    _zip$mcJZ$sp__B = typing.TypeVar('_zip$mcJZ$sp__B')  # <B>
    def zip$mcJZ$sp(self, ys: Coll[_zip.mcJZ.sp__B]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], _zip.mcJZ.sp__B]: ...
    _zip$mcS$sp__B = typing.TypeVar('_zip$mcS$sp__B')  # <B>
    def zip$mcS$sp(self, ys: Coll[_zip.mcS.sp__B]) -> Coll[scala.Tuple2[typing.Any, _zip.mcS.sp__B]]: ...
    _zip$mcSB$sp__B = typing.TypeVar('_zip$mcSB$sp__B')  # <B>
    def zip$mcSB$sp(self, ys: Coll[_zip.mcSB.sp__B]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], _zip.mcSB.sp__B]: ...
    _zip$mcSC$sp__B = typing.TypeVar('_zip$mcSC$sp__B')  # <B>
    def zip$mcSC$sp(self, ys: Coll[_zip.mcSC.sp__B]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], _zip.mcSC.sp__B]: ...
    _zip$mcSD$sp__B = typing.TypeVar('_zip$mcSD$sp__B')  # <B>
    def zip$mcSD$sp(self, ys: Coll[_zip.mcSD.sp__B]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], _zip.mcSD.sp__B]: ...
    _zip$mcSF$sp__B = typing.TypeVar('_zip$mcSF$sp__B')  # <B>
    def zip$mcSF$sp(self, ys: Coll[_zip.mcSF.sp__B]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], _zip.mcSF.sp__B]: ...
    _zip$mcSI$sp__B = typing.TypeVar('_zip$mcSI$sp__B')  # <B>
    def zip$mcSI$sp(self, ys: Coll[_zip.mcSI.sp__B]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], _zip.mcSI.sp__B]: ...
    _zip$mcSJ$sp__B = typing.TypeVar('_zip$mcSJ$sp__B')  # <B>
    def zip$mcSJ$sp(self, ys: Coll[_zip.mcSJ.sp__B]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], _zip.mcSJ.sp__B]: ...
    _zip$mcSS$sp__B = typing.TypeVar('_zip$mcSS$sp__B')  # <B>
    def zip$mcSS$sp(self, ys: Coll[_zip.mcSS.sp__B]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], _zip.mcSS.sp__B]: ...
    _zip$mcSV$sp__B = typing.TypeVar('_zip$mcSV$sp__B')  # <B>
    def zip$mcSV$sp(self, ys: Coll[_zip.mcSV.sp__B]) -> PairColl[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], _zip.mcSV.sp__B]: ...
    _zip$mcSZ$sp__B = typing.TypeVar('_zip$mcSZ$sp__B')  # <B>
    def zip$mcSZ$sp(self, ys: Coll[_zip.mcSZ.sp__B]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], _zip.mcSZ.sp__B]: ...
    _zip$mcV$sp__B = typing.TypeVar('_zip$mcV$sp__B')  # <B>
    def zip$mcV$sp(self, ys: Coll[_zip.mcV.sp__B]) -> Coll[scala.Tuple2[scala.runtime.BoxedUnit, _zip.mcV.sp__B]]: ...
    _zip$mcVB$sp__B = typing.TypeVar('_zip$mcVB$sp__B')  # <B>
    def zip$mcVB$sp(self, ys: Coll[_zip.mcVB.sp__B]) -> PairColl[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], _zip.mcVB.sp__B]: ...
    _zip$mcVC$sp__B = typing.TypeVar('_zip$mcVC$sp__B')  # <B>
    def zip$mcVC$sp(self, ys: Coll[_zip.mcVC.sp__B]) -> PairColl[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], _zip.mcVC.sp__B]: ...
    _zip$mcVD$sp__B = typing.TypeVar('_zip$mcVD$sp__B')  # <B>
    def zip$mcVD$sp(self, ys: Coll[_zip.mcVD.sp__B]) -> PairColl[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], _zip.mcVD.sp__B]: ...
    _zip$mcVF$sp__B = typing.TypeVar('_zip$mcVF$sp__B')  # <B>
    def zip$mcVF$sp(self, ys: Coll[_zip.mcVF.sp__B]) -> PairColl[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], _zip.mcVF.sp__B]: ...
    _zip$mcVI$sp__B = typing.TypeVar('_zip$mcVI$sp__B')  # <B>
    def zip$mcVI$sp(self, ys: Coll[_zip.mcVI.sp__B]) -> PairColl[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], _zip.mcVI.sp__B]: ...
    _zip$mcVJ$sp__B = typing.TypeVar('_zip$mcVJ$sp__B')  # <B>
    def zip$mcVJ$sp(self, ys: Coll[_zip.mcVJ.sp__B]) -> PairColl[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], _zip.mcVJ.sp__B]: ...
    _zip$mcVS$sp__B = typing.TypeVar('_zip$mcVS$sp__B')  # <B>
    def zip$mcVS$sp(self, ys: Coll[_zip.mcVS.sp__B]) -> PairColl[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], _zip.mcVS.sp__B]: ...
    _zip$mcVV$sp__B = typing.TypeVar('_zip$mcVV$sp__B')  # <B>
    def zip$mcVV$sp(self, ys: Coll[_zip.mcVV.sp__B]) -> PairColl[scala.Tuple2[scala.runtime.BoxedUnit, scala.runtime.BoxedUnit], _zip.mcVV.sp__B]: ...
    _zip$mcVZ$sp__B = typing.TypeVar('_zip$mcVZ$sp__B')  # <B>
    def zip$mcVZ$sp(self, ys: Coll[_zip.mcVZ.sp__B]) -> PairColl[scala.Tuple2[scala.runtime.BoxedUnit, typing.Any], _zip.mcVZ.sp__B]: ...
    _zip$mcZ$sp__B = typing.TypeVar('_zip$mcZ$sp__B')  # <B>
    def zip$mcZ$sp(self, ys: Coll[_zip.mcZ.sp__B]) -> Coll[scala.Tuple2[typing.Any, _zip.mcZ.sp__B]]: ...
    _zip$mcZB$sp__B = typing.TypeVar('_zip$mcZB$sp__B')  # <B>
    def zip$mcZB$sp(self, ys: Coll[_zip.mcZB.sp__B]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], _zip.mcZB.sp__B]: ...
    _zip$mcZC$sp__B = typing.TypeVar('_zip$mcZC$sp__B')  # <B>
    def zip$mcZC$sp(self, ys: Coll[_zip.mcZC.sp__B]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], _zip.mcZC.sp__B]: ...
    _zip$mcZD$sp__B = typing.TypeVar('_zip$mcZD$sp__B')  # <B>
    def zip$mcZD$sp(self, ys: Coll[_zip.mcZD.sp__B]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], _zip.mcZD.sp__B]: ...
    _zip$mcZF$sp__B = typing.TypeVar('_zip$mcZF$sp__B')  # <B>
    def zip$mcZF$sp(self, ys: Coll[_zip.mcZF.sp__B]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], _zip.mcZF.sp__B]: ...
    _zip$mcZI$sp__B = typing.TypeVar('_zip$mcZI$sp__B')  # <B>
    def zip$mcZI$sp(self, ys: Coll[_zip.mcZI.sp__B]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], _zip.mcZI.sp__B]: ...
    _zip$mcZJ$sp__B = typing.TypeVar('_zip$mcZJ$sp__B')  # <B>
    def zip$mcZJ$sp(self, ys: Coll[_zip.mcZJ.sp__B]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], _zip.mcZJ.sp__B]: ...
    _zip$mcZS$sp__B = typing.TypeVar('_zip$mcZS$sp__B')  # <B>
    def zip$mcZS$sp(self, ys: Coll[_zip.mcZS.sp__B]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], _zip.mcZS.sp__B]: ...
    _zip$mcZV$sp__B = typing.TypeVar('_zip$mcZV$sp__B')  # <B>
    def zip$mcZV$sp(self, ys: Coll[_zip.mcZV.sp__B]) -> PairColl[scala.Tuple2[typing.Any, scala.runtime.BoxedUnit], _zip.mcZV.sp__B]: ...
    _zip$mcZZ$sp__B = typing.TypeVar('_zip$mcZZ$sp__B')  # <B>
    def zip$mcZZ$sp(self, ys: Coll[_zip.mcZZ.sp__B]) -> PairColl[scala.Tuple2[typing.Any, typing.Any], _zip.mcZZ.sp__B]: ...

_Colls__Coll__A = typing.TypeVar('_Colls__Coll__A')  # <A>
_Colls__PairColl__L = typing.TypeVar('_Colls__PairColl__L')  # <L>
_Colls__PairColl__R = typing.TypeVar('_Colls__PairColl__R')  # <R>
_Colls__ReplColl__A = typing.TypeVar('_Colls__ReplColl__A')  # <A>
class Colls:
    @staticmethod
    def $init$($this: 'Colls') -> None: ...
    class Coll(scalan.Base.Def['Colls.Coll'[_Colls__Coll__A]], typing.Generic[_Colls__Coll__A]):
        @staticmethod
        def $init$($this: 'Colls.Coll') -> None: ...
        def append(self, other: scalan.Base.Ref['Colls.Coll'[_Colls__Coll__A]]) -> scalan.Base.Ref['Colls.Coll'[_Colls__Coll__A]]: ...
        def apply(self, i: scalan.Base.Ref[typing.Any]) -> scalan.Base.Ref[_Colls__Coll__A]: ...
        def builder(self) -> scalan.Base.Ref['Colls.CollBuilder']: ...
        def diff(self, that: scalan.Base.Ref['Colls.Coll'[_Colls__Coll__A]]) -> scalan.Base.Ref['Colls.Coll'[_Colls__Coll__A]]: ...
        def eA(self) -> scalan.TypeDescs.Elem[_Colls__Coll__A]: ...
        def exists(self, p: scalan.Base.Ref[scala.Function1[_Colls__Coll__A, typing.Any]]) -> scalan.Base.Ref[typing.Any]: ...
        def filter(self, p: scalan.Base.Ref[scala.Function1[_Colls__Coll__A, typing.Any]]) -> scalan.Base.Ref['Colls.Coll'[_Colls__Coll__A]]: ...
        def find(self, p: scalan.Base.Ref[scala.Function1[_Colls__Coll__A, typing.Any]]) -> scalan.Base.Ref[wrappers.scala.WOptions.WOption[_Colls__Coll__A]]: ...
        _flatMap__B = typing.TypeVar('_flatMap__B')  # <B>
        def flatMap(self, f: scalan.Base.Ref[scala.Function1[_Colls__Coll__A, 'Colls.Coll'[_flatMap__B]]]) -> scalan.Base.Ref['Colls.Coll'[_flatMap__B]]: ...
        _foldLeft__B = typing.TypeVar('_foldLeft__B')  # <B>
        def foldLeft(self, zero: scalan.Base.Ref[_foldLeft__B], op: scalan.Base.Ref[scala.Function1[scala.Tuple2[_foldLeft__B, _Colls__Coll__A], _foldLeft__B]]) -> scalan.Base.Ref[_foldLeft__B]: ...
        def forall(self, p: scalan.Base.Ref[scala.Function1[_Colls__Coll__A, typing.Any]]) -> scalan.Base.Ref[typing.Any]: ...
        def getOrElse(self, index: scalan.Base.Ref[typing.Any], default: scalan.Base.Ref[_Colls__Coll__A]) -> scalan.Base.Ref[_Colls__Coll__A]: ...
        _groupBy__K = typing.TypeVar('_groupBy__K')  # <K>
        def groupBy(self, key: scalan.Base.Ref[scala.Function1[_Colls__Coll__A, _groupBy__K]]) -> scalan.Base.Ref['Colls.Coll'[scala.Tuple2[_groupBy__K, 'Colls.Coll'[_Colls__Coll__A]]]]: ...
        _groupByProjecting__K = typing.TypeVar('_groupByProjecting__K')  # <K>
        _groupByProjecting__V = typing.TypeVar('_groupByProjecting__V')  # <V>
        def groupByProjecting(self, key: scalan.Base.Ref[scala.Function1[_Colls__Coll__A, _groupByProjecting__K]], proj: scalan.Base.Ref[scala.Function1[_Colls__Coll__A, _groupByProjecting__V]]) -> scalan.Base.Ref['Colls.Coll'[scala.Tuple2[_groupByProjecting__K, 'Colls.Coll'[_groupByProjecting__V]]]]: ...
        def indexOf(self, elem: scalan.Base.Ref[_Colls__Coll__A], from_: scalan.Base.Ref[typing.Any]) -> scalan.Base.Ref[typing.Any]: ...
        def indexWhere(self, p: scalan.Base.Ref[scala.Function1[_Colls__Coll__A, typing.Any]], from_: scalan.Base.Ref[typing.Any]) -> scalan.Base.Ref[typing.Any]: ...
        def indices(self) -> scalan.Base.Ref['Colls.Coll'[typing.Any]]: ...
        def intersect(self, that: scalan.Base.Ref['Colls.Coll'[_Colls__Coll__A]]) -> scalan.Base.Ref['Colls.Coll'[_Colls__Coll__A]]: ...
        def isDefinedAt(self, idx: scalan.Base.Ref[typing.Any]) -> scalan.Base.Ref[typing.Any]: ...
        def isEmpty(self) -> scalan.Base.Ref[typing.Any]: ...
        def lastIndexWhere(self, p: scalan.Base.Ref[scala.Function1[_Colls__Coll__A, typing.Any]], end: scalan.Base.Ref[typing.Any]) -> scalan.Base.Ref[typing.Any]: ...
        def length(self) -> scalan.Base.Ref[typing.Any]: ...
        _map__B = typing.TypeVar('_map__B')  # <B>
        def map(self, f: scalan.Base.Ref[scala.Function1[_Colls__Coll__A, _map__B]]) -> scalan.Base.Ref['Colls.Coll'[_map__B]]: ...
        _mapReduce__K = typing.TypeVar('_mapReduce__K')  # <K>
        _mapReduce__V = typing.TypeVar('_mapReduce__V')  # <V>
        def mapReduce(self, m: scalan.Base.Ref[scala.Function1[_Colls__Coll__A, scala.Tuple2[_mapReduce__K, _mapReduce__V]]], r: scalan.Base.Ref[scala.Function1[scala.Tuple2[_mapReduce__V, _mapReduce__V], _mapReduce__V]]) -> scalan.Base.Ref['Colls.Coll'[scala.Tuple2[_mapReduce__K, _mapReduce__V]]]: ...
        def nonEmpty(self) -> scalan.Base.Ref[typing.Any]: ...
        def partition(self, pred: scalan.Base.Ref[scala.Function1[_Colls__Coll__A, typing.Any]]) -> scalan.Base.Ref[scala.Tuple2['Colls.Coll'[_Colls__Coll__A], 'Colls.Coll'[_Colls__Coll__A]]]: ...
        def patch(self, from_: scalan.Base.Ref[typing.Any], patch: scalan.Base.Ref['Colls.Coll'[_Colls__Coll__A]], replaced: scalan.Base.Ref[typing.Any]) -> scalan.Base.Ref['Colls.Coll'[_Colls__Coll__A]]: ...
        def reverse(self) -> scalan.Base.Ref['Colls.Coll'[_Colls__Coll__A]]: ...
        def segmentLength(self, p: scalan.Base.Ref[scala.Function1[_Colls__Coll__A, typing.Any]], from_: scalan.Base.Ref[typing.Any]) -> scalan.Base.Ref[typing.Any]: ...
        def size(self) -> scalan.Base.Ref[typing.Any]: ...
        def slice(self, from_: scalan.Base.Ref[typing.Any], until: scalan.Base.Ref[typing.Any]) -> scalan.Base.Ref['Colls.Coll'[_Colls__Coll__A]]: ...
        def sum(self, m: scalan.Base.Ref[Monoids.Monoid[_Colls__Coll__A]]) -> scalan.Base.Ref[_Colls__Coll__A]: ...
        def take(self, n: scalan.Base.Ref[typing.Any]) -> scalan.Base.Ref['Colls.Coll'[_Colls__Coll__A]]: ...
        def unionSet(self, that: scalan.Base.Ref['Colls.Coll'[_Colls__Coll__A]]) -> scalan.Base.Ref['Colls.Coll'[_Colls__Coll__A]]: ...
        def updateMany(self, indexes: scalan.Base.Ref['Colls.Coll'[typing.Any]], values: scalan.Base.Ref['Colls.Coll'[_Colls__Coll__A]]) -> scalan.Base.Ref['Colls.Coll'[_Colls__Coll__A]]: ...
        def updated(self, index: scalan.Base.Ref[typing.Any], elem: scalan.Base.Ref[_Colls__Coll__A]) -> scalan.Base.Ref['Colls.Coll'[_Colls__Coll__A]]: ...
        _zip__B = typing.TypeVar('_zip__B')  # <B>
        def zip(self, ys: scalan.Base.Ref['Colls.Coll'[_zip__B]]) -> scalan.Base.Ref['Colls.Coll'[scala.Tuple2[_Colls__Coll__A, _zip__B]]]: ...
    class CollBuilder(scalan.Base.Def['Colls.CollBuilder']):
        def Monoids(self) -> scalan.Base.Ref[Monoids.MonoidBuilder]: ...
        _emptyColl__T = typing.TypeVar('_emptyColl__T')  # <T>
        def emptyColl(self, tT: scalan.TypeDescs.Elem[_emptyColl__T]) -> scalan.Base.Ref['Colls.Coll'[_emptyColl__T]]: ...
        _flattenColl__A = typing.TypeVar('_flattenColl__A')  # <A>
        def flattenColl(self, coll: scalan.Base.Ref['Colls.Coll'['Colls.Coll'[_flattenColl__A]]]) -> scalan.Base.Ref['Colls.Coll'[_flattenColl__A]]: ...
        _fromItems__T = typing.TypeVar('_fromItems__T')  # <T>
        def fromItems(self, items: scala.collection.Seq[scalan.Base.Ref[_fromItems__T]], cT: scalan.TypeDescs.Elem[_fromItems__T]) -> scalan.Base.Ref['Colls.Coll'[_fromItems__T]]: ...
        _outerJoin__K = typing.TypeVar('_outerJoin__K')  # <K>
        _outerJoin__L = typing.TypeVar('_outerJoin__L')  # <L>
        _outerJoin__R = typing.TypeVar('_outerJoin__R')  # <R>
        _outerJoin__O = typing.TypeVar('_outerJoin__O')  # <O>
        def outerJoin(self, left: scalan.Base.Ref['Colls.Coll'[scala.Tuple2[_outerJoin__K, _outerJoin__L]]], right: scalan.Base.Ref['Colls.Coll'[scala.Tuple2[_outerJoin__K, _outerJoin__R]]], l: scalan.Base.Ref[scala.Function1[scala.Tuple2[_outerJoin__K, _outerJoin__L], _outerJoin__O]], r: scalan.Base.Ref[scala.Function1[scala.Tuple2[_outerJoin__K, _outerJoin__R], _outerJoin__O]], inner: scalan.Base.Ref[scala.Function1[scala.Tuple2[_outerJoin__K, scala.Tuple2[_outerJoin__L, _outerJoin__R]], _outerJoin__O]]) -> scalan.Base.Ref['Colls.Coll'[scala.Tuple2[_outerJoin__K, _outerJoin__O]]]: ...
        _pairColl__A = typing.TypeVar('_pairColl__A')  # <A>
        _pairColl__B = typing.TypeVar('_pairColl__B')  # <B>
        def pairColl(self, as_: scalan.Base.Ref['Colls.Coll'[_pairColl__A]], bs: scalan.Base.Ref['Colls.Coll'[_pairColl__B]]) -> scalan.Base.Ref['Colls.PairColl'[_pairColl__A, _pairColl__B]]: ...
        _replicate__T = typing.TypeVar('_replicate__T')  # <T>
        def replicate(self, n: scalan.Base.Ref[typing.Any], v: scalan.Base.Ref[_replicate__T]) -> scalan.Base.Ref['Colls.Coll'[_replicate__T]]: ...
        _unzip__A = typing.TypeVar('_unzip__A')  # <A>
        _unzip__B = typing.TypeVar('_unzip__B')  # <B>
        def unzip(self, xs: scalan.Base.Ref['Colls.Coll'[scala.Tuple2[_unzip__A, _unzip__B]]]) -> scalan.Base.Ref[scala.Tuple2['Colls.Coll'[_unzip__A], 'Colls.Coll'[_unzip__B]]]: ...
        def xor(self, left: scalan.Base.Ref['Colls.Coll'[typing.Any]], right: scalan.Base.Ref['Colls.Coll'[typing.Any]]) -> scalan.Base.Ref['Colls.Coll'[typing.Any]]: ...
    class CollBuilderCompanion: ...
    class CollCompanion: ...
    class PairColl(special.collection.Colls.Coll[scala.Tuple2[_Colls__PairColl__L, _Colls__PairColl__R]], typing.Generic[_Colls__PairColl__L, _Colls__PairColl__R]):
        def eL(self) -> scalan.TypeDescs.Elem[_Colls__PairColl__L]: ...
        def eR(self) -> scalan.TypeDescs.Elem[_Colls__PairColl__R]: ...
        def ls(self) -> scalan.Base.Ref['Colls.Coll'[_Colls__PairColl__L]]: ...
        _mapFirst__T1 = typing.TypeVar('_mapFirst__T1')  # <T1>
        def mapFirst(self, f: scalan.Base.Ref[scala.Function1[_Colls__PairColl__L, _mapFirst__T1]]) -> scalan.Base.Ref['Colls.Coll'[scala.Tuple2[_mapFirst__T1, _Colls__PairColl__R]]]: ...
        _mapSecond__T1 = typing.TypeVar('_mapSecond__T1')  # <T1>
        def mapSecond(self, f: scalan.Base.Ref[scala.Function1[_Colls__PairColl__R, _mapSecond__T1]]) -> scalan.Base.Ref['Colls.Coll'[scala.Tuple2[_Colls__PairColl__L, _mapSecond__T1]]]: ...
        def rs(self) -> scalan.Base.Ref['Colls.Coll'[_Colls__PairColl__R]]: ...
    class PairCollCompanion: ...
    class ReplColl(special.collection.Colls.Coll[_Colls__ReplColl__A], typing.Generic[_Colls__ReplColl__A]):
        def append(self, other: scalan.Base.Ref['Colls.Coll'[_Colls__ReplColl__A]]) -> scalan.Base.Ref['Colls.Coll'[_Colls__ReplColl__A]]: ...
        def eA(self) -> scalan.TypeDescs.Elem[_Colls__ReplColl__A]: ...
        def length(self) -> scalan.Base.Ref[typing.Any]: ...
        def value(self) -> scalan.Base.Ref[_Colls__ReplColl__A]: ...
    class ReplCollCompanion: ...

_ConcreteCosts__CCostedColl__Item = typing.TypeVar('_ConcreteCosts__CCostedColl__Item')  # <Item>
_ConcreteCosts__CCostedFunc__Env = typing.TypeVar('_ConcreteCosts__CCostedFunc__Env')  # <Env>
_ConcreteCosts__CCostedFunc__Arg = typing.TypeVar('_ConcreteCosts__CCostedFunc__Arg')  # <Arg>
_ConcreteCosts__CCostedFunc__Res = typing.TypeVar('_ConcreteCosts__CCostedFunc__Res')  # <Res>
_ConcreteCosts__CCostedPair__L = typing.TypeVar('_ConcreteCosts__CCostedPair__L')  # <L>
_ConcreteCosts__CCostedPair__R = typing.TypeVar('_ConcreteCosts__CCostedPair__R')  # <R>
_ConcreteCosts__CCostedPrim__Val = typing.TypeVar('_ConcreteCosts__CCostedPrim__Val')  # <Val>
class ConcreteCosts:
    @staticmethod
    def $init$($this: 'ConcreteCosts') -> None: ...
    class CCostedBuilder(scalan.Base.Node, special.collection.Costs.CostedBuilder):
        def __init__(self, $outer: scalan.Library): ...
        def ConstructSumCost(self) -> scalan.Base.Ref[typing.Any]: ...
        def ConstructTupleCost(self) -> scalan.Base.Ref[typing.Any]: ...
        def SelectFieldCost(self) -> scalan.Base.Ref[typing.Any]: ...
        def SumTagSize(self) -> scalan.Base.Ref[typing.Any]: ...
        _costedValue__T = typing.TypeVar('_costedValue__T')  # <T>
        def costedValue(self, x: scalan.Base.Ref[_costedValue__T], optCost: scalan.Base.Ref[wrappers.scala.WOptions.WOption[typing.Any]]) -> scalan.Base.Ref['Costs.Costed'[_costedValue__T]]: ...
        _defaultValue__T = typing.TypeVar('_defaultValue__T')  # <T>
        def defaultValue(self, valueType: scalan.Base.Ref[wrappers.scalan.WRTypes.WRType[_defaultValue__T]]) -> scalan.Base.Ref[_defaultValue__T]: ...
        def mirror(self, t: scalan.Base.Transformer) -> scalan.Base.Ref['Costs.CostedBuilder']: ...
        _mkCostedColl__T = typing.TypeVar('_mkCostedColl__T')  # <T>
        def mkCostedColl(self, values: scalan.Base.Ref[Colls.Coll[_mkCostedColl__T]], costs: scalan.Base.Ref[Colls.Coll[typing.Any]], sizes: scalan.Base.Ref[Colls.Coll['Sizes.Size'[_mkCostedColl__T]]], valuesCost: scalan.Base.Ref[typing.Any]) -> scalan.Base.Ref['Costs.CostedColl'[_mkCostedColl__T]]: ...
        _mkCostedFunc__Env = typing.TypeVar('_mkCostedFunc__Env')  # <Env>
        _mkCostedFunc__Arg = typing.TypeVar('_mkCostedFunc__Arg')  # <Arg>
        _mkCostedFunc__Res = typing.TypeVar('_mkCostedFunc__Res')  # <Res>
        def mkCostedFunc(self, envCosted: scalan.Base.Ref['Costs.Costed'[_mkCostedFunc__Env]], func: scalan.Base.Ref[scala.Function1['Costs.Costed'[_mkCostedFunc__Arg], 'Costs.Costed'[_mkCostedFunc__Res]]], cost: scalan.Base.Ref[typing.Any], size: scalan.Base.Ref['Sizes.Size'[scala.Function1[_mkCostedFunc__Arg, _mkCostedFunc__Res]]]) -> scalan.Base.Ref['Costs.CostedFunc'[_mkCostedFunc__Env, _mkCostedFunc__Arg, _mkCostedFunc__Res]]: ...
        _mkCostedOption__T = typing.TypeVar('_mkCostedOption__T')  # <T>
        def mkCostedOption(self, value: scalan.Base.Ref[wrappers.scala.WOptions.WOption[_mkCostedOption__T]], costOpt: scalan.Base.Ref[wrappers.scala.WOptions.WOption[typing.Any]], sizeOpt: scalan.Base.Ref[wrappers.scala.WOptions.WOption['Sizes.Size'[_mkCostedOption__T]]], accumulatedCost: scalan.Base.Ref[typing.Any]) -> scalan.Base.Ref['Costs.CostedOption'[_mkCostedOption__T]]: ...
        _mkCostedPair__L = typing.TypeVar('_mkCostedPair__L')  # <L>
        _mkCostedPair__R = typing.TypeVar('_mkCostedPair__R')  # <R>
        def mkCostedPair(self, first: scalan.Base.Ref['Costs.Costed'[_mkCostedPair__L]], second: scalan.Base.Ref['Costs.Costed'[_mkCostedPair__R]], accCost: scalan.Base.Ref[typing.Any]) -> scalan.Base.Ref['Costs.CostedPair'[_mkCostedPair__L, _mkCostedPair__R]]: ...
        _mkCostedPrim__T = typing.TypeVar('_mkCostedPrim__T')  # <T>
        def mkCostedPrim(self, value: scalan.Base.Ref[_mkCostedPrim__T], cost: scalan.Base.Ref[typing.Any], size: scalan.Base.Ref['Sizes.Size'[_mkCostedPrim__T]]) -> scalan.Base.Ref['Costs.CostedPrim'[_mkCostedPrim__T]]: ...
        _mkSizeColl__T = typing.TypeVar('_mkSizeColl__T')  # <T>
        def mkSizeColl(self, sizes: scalan.Base.Ref[Colls.Coll['Sizes.Size'[_mkSizeColl__T]]]) -> scalan.Base.Ref['Sizes.SizeColl'[_mkSizeColl__T]]: ...
        _mkSizeFunc__E = typing.TypeVar('_mkSizeFunc__E')  # <E>
        _mkSizeFunc__A = typing.TypeVar('_mkSizeFunc__A')  # <A>
        _mkSizeFunc__R = typing.TypeVar('_mkSizeFunc__R')  # <R>
        def mkSizeFunc(self, sizeEnv: scalan.Base.Ref['Sizes.Size'[_mkSizeFunc__E]], sizeFunc: scalan.Base.Ref[typing.Any], tA: scalan.Base.Ref[wrappers.scalan.WRTypes.WRType[_mkSizeFunc__A]], tR: scalan.Base.Ref[wrappers.scalan.WRTypes.WRType[_mkSizeFunc__R]]) -> scalan.Base.Ref['Sizes.SizeFunc'[_mkSizeFunc__E, _mkSizeFunc__A, _mkSizeFunc__R]]: ...
        _mkSizeOption__T = typing.TypeVar('_mkSizeOption__T')  # <T>
        def mkSizeOption(self, sizeOpt: scalan.Base.Ref[wrappers.scala.WOptions.WOption['Sizes.Size'[_mkSizeOption__T]]]) -> scalan.Base.Ref['Sizes.SizeOption'[_mkSizeOption__T]]: ...
        _mkSizePair__L = typing.TypeVar('_mkSizePair__L')  # <L>
        _mkSizePair__R = typing.TypeVar('_mkSizePair__R')  # <R>
        def mkSizePair(self, l: scalan.Base.Ref['Sizes.Size'[_mkSizePair__L]], r: scalan.Base.Ref['Sizes.Size'[_mkSizePair__R]]) -> scalan.Base.Ref['Sizes.SizePair'[_mkSizePair__L, _mkSizePair__R]]: ...
        _mkSizePrim__T = typing.TypeVar('_mkSizePrim__T')  # <T>
        def mkSizePrim(self, dataSize: scalan.Base.Ref[typing.Any], tT: scalan.Base.Ref[wrappers.scalan.WRTypes.WRType[_mkSizePrim__T]]) -> scalan.Base.Ref['Sizes.SizePrim'[_mkSizePrim__T]]: ...
        def monoidBuilder(self) -> scalan.Base.Ref[Monoids.MonoidBuilder]: ...
        def scalan$Base$Def$$_self(self) -> scalan.Base.Ref['Costs.CostedBuilder']: ...
        def scalan$Base$Def$$_self_$eq(self, x$1: scalan.Base.Ref['Costs.CostedBuilder']) -> None: ...
        def self(self) -> scalan.Base.Ref['Costs.CostedBuilder']: ...
        def transform(self, t: scalan.Base.Transformer) -> scalan.Base.Def['Costs.CostedBuilder']: ...
    class CCostedBuilderCompanion: ...
    class CCostedColl(scalan.Base.Node, special.collection.Costs.CostedColl[_ConcreteCosts__CCostedColl__Item], typing.Generic[_ConcreteCosts__CCostedColl__Item]):
        def __init__(self, $outer: scalan.Library, values: scalan.Base.Ref[Colls.Coll[_ConcreteCosts__CCostedColl__Item]], costs: scalan.Base.Ref[Colls.Coll[typing.Any]], sizes: scalan.Base.Ref[Colls.Coll['Sizes.Size'[_ConcreteCosts__CCostedColl__Item]]], valuesCost: scalan.Base.Ref[typing.Any]): ...
        def builder(self) -> scalan.Base.Ref['Costs.CostedBuilder']: ...
        def cost(self) -> scalan.Base.Ref[typing.Any]: ...
        def costs(self) -> scalan.Base.Ref[Colls.Coll[typing.Any]]: ...
        def filterCosted(self, f: scalan.Base.Ref[scala.Function1['Costs.Costed'[_ConcreteCosts__CCostedColl__Item], 'Costs.Costed'[typing.Any]]]) -> scalan.Base.Ref['Costs.CostedColl'[_ConcreteCosts__CCostedColl__Item]]: ...
        _foldCosted__B = typing.TypeVar('_foldCosted__B')  # <B>
        def foldCosted(self, zero: scalan.Base.Ref['Costs.Costed'[_foldCosted__B]], op: scalan.Base.Ref[scala.Function1['Costs.Costed'[scala.Tuple2[_foldCosted__B, _ConcreteCosts__CCostedColl__Item]], 'Costs.Costed'[_foldCosted__B]]]) -> scalan.Base.Ref['Costs.Costed'[_foldCosted__B]]: ...
        _mapCosted__Res = typing.TypeVar('_mapCosted__Res')  # <Res>
        def mapCosted(self, f: scalan.Base.Ref[scala.Function1['Costs.Costed'[_ConcreteCosts__CCostedColl__Item], 'Costs.Costed'[_mapCosted__Res]]]) -> scalan.Base.Ref['Costs.CostedColl'[_mapCosted__Res]]: ...
        def mirror(self, t: scalan.Base.Transformer) -> scalan.Base.Ref['Costs.Costed'[Colls.Coll[_ConcreteCosts__CCostedColl__Item]]]: ...
        def scalan$Base$Def$$_self(self) -> scalan.Base.Ref['Costs.Costed'[Colls.Coll[_ConcreteCosts__CCostedColl__Item]]]: ...
        def scalan$Base$Def$$_self_$eq(self, x$1: scalan.Base.Ref['Costs.Costed'[Colls.Coll[_ConcreteCosts__CCostedColl__Item]]]) -> None: ...
        def self(self) -> scalan.Base.Ref['Costs.Costed'[Colls.Coll[_ConcreteCosts__CCostedColl__Item]]]: ...
        def size(self) -> scalan.Base.Ref['Sizes.Size'[Colls.Coll[_ConcreteCosts__CCostedColl__Item]]]: ...
        def sizes(self) -> scalan.Base.Ref[Colls.Coll['Sizes.Size'[_ConcreteCosts__CCostedColl__Item]]]: ...
        def transform(self, t: scalan.Base.Transformer) -> scalan.Base.Def['Costs.Costed'[Colls.Coll[_ConcreteCosts__CCostedColl__Item]]]: ...
        def value(self) -> scalan.Base.Ref[Colls.Coll[_ConcreteCosts__CCostedColl__Item]]: ...
        def values(self) -> scalan.Base.Ref[Colls.Coll[_ConcreteCosts__CCostedColl__Item]]: ...
        def valuesCost(self) -> scalan.Base.Ref[typing.Any]: ...
    class CCostedCollCompanion: ...
    class CCostedFunc(scalan.Base.Node, special.collection.Costs.CostedFunc[_ConcreteCosts__CCostedFunc__Env, _ConcreteCosts__CCostedFunc__Arg, _ConcreteCosts__CCostedFunc__Res], typing.Generic[_ConcreteCosts__CCostedFunc__Env, _ConcreteCosts__CCostedFunc__Arg, _ConcreteCosts__CCostedFunc__Res]):
        def __init__(self, $outer: scalan.Library, envCosted: scalan.Base.Ref['Costs.Costed'[_ConcreteCosts__CCostedFunc__Env]], func: scalan.Base.Ref[scala.Function1['Costs.Costed'[_ConcreteCosts__CCostedFunc__Arg], 'Costs.Costed'[_ConcreteCosts__CCostedFunc__Res]]], cost: scalan.Base.Ref[typing.Any], size: scalan.Base.Ref['Sizes.Size'[scala.Function1[_ConcreteCosts__CCostedFunc__Arg, _ConcreteCosts__CCostedFunc__Res]]]): ...
        def builder(self) -> scalan.Base.Ref['Costs.CostedBuilder']: ...
        def cost(self) -> scalan.Base.Ref[typing.Any]: ...
        def envCosted(self) -> scalan.Base.Ref['Costs.Costed'[_ConcreteCosts__CCostedFunc__Env]]: ...
        def func(self) -> scalan.Base.Ref[scala.Function1['Costs.Costed'[_ConcreteCosts__CCostedFunc__Arg], 'Costs.Costed'[_ConcreteCosts__CCostedFunc__Res]]]: ...
        def mirror(self, t: scalan.Base.Transformer) -> scalan.Base.Ref['Costs.Costed'[scala.Function1[_ConcreteCosts__CCostedFunc__Arg, _ConcreteCosts__CCostedFunc__Res]]]: ...
        def scalan$Base$Def$$_self(self) -> scalan.Base.Ref['Costs.Costed'[scala.Function1[_ConcreteCosts__CCostedFunc__Arg, _ConcreteCosts__CCostedFunc__Res]]]: ...
        def scalan$Base$Def$$_self_$eq(self, x$1: scalan.Base.Ref['Costs.Costed'[scala.Function1[_ConcreteCosts__CCostedFunc__Arg, _ConcreteCosts__CCostedFunc__Res]]]) -> None: ...
        def self(self) -> scalan.Base.Ref['Costs.Costed'[scala.Function1[_ConcreteCosts__CCostedFunc__Arg, _ConcreteCosts__CCostedFunc__Res]]]: ...
        def size(self) -> scalan.Base.Ref['Sizes.Size'[scala.Function1[_ConcreteCosts__CCostedFunc__Arg, _ConcreteCosts__CCostedFunc__Res]]]: ...
        def sliceCalc(self) -> scalan.Base.Ref[scala.Function1[_ConcreteCosts__CCostedFunc__Arg, _ConcreteCosts__CCostedFunc__Res]]: ...
        def sliceCost(self) -> scalan.Base.Ref[scala.Function1[scala.Tuple2[typing.Any, 'Sizes.Size'[_ConcreteCosts__CCostedFunc__Arg]], typing.Any]]: ...
        def sliceCostEx(self) -> scalan.Base.Ref[scala.Function1[scala.Tuple2[_ConcreteCosts__CCostedFunc__Arg, scala.Tuple2[typing.Any, 'Sizes.Size'[_ConcreteCosts__CCostedFunc__Arg]]], typing.Any]]: ...
        def sliceSize(self) -> scalan.Base.Ref[scala.Function1['Sizes.Size'[_ConcreteCosts__CCostedFunc__Arg], 'Sizes.Size'[_ConcreteCosts__CCostedFunc__Res]]]: ...
        def transform(self, t: scalan.Base.Transformer) -> scalan.Base.Def['Costs.Costed'[scala.Function1[_ConcreteCosts__CCostedFunc__Arg, _ConcreteCosts__CCostedFunc__Res]]]: ...
        def value(self) -> scalan.Base.Ref[scala.Function1[_ConcreteCosts__CCostedFunc__Arg, _ConcreteCosts__CCostedFunc__Res]]: ...
    class CCostedFuncCompanion: ...
    class CCostedPair(scalan.Base.Node, special.collection.Costs.CostedPair[_ConcreteCosts__CCostedPair__L, _ConcreteCosts__CCostedPair__R], typing.Generic[_ConcreteCosts__CCostedPair__L, _ConcreteCosts__CCostedPair__R]):
        def __init__(self, $outer: scalan.Library, l: scalan.Base.Ref['Costs.Costed'[_ConcreteCosts__CCostedPair__L]], r: scalan.Base.Ref['Costs.Costed'[_ConcreteCosts__CCostedPair__R]], accCost: scalan.Base.Ref[typing.Any]): ...
        def accCost(self) -> scalan.Base.Ref[typing.Any]: ...
        def builder(self) -> scalan.Base.Ref['Costs.CostedBuilder']: ...
        def cost(self) -> scalan.Base.Ref[typing.Any]: ...
        def l(self) -> scalan.Base.Ref['Costs.Costed'[_ConcreteCosts__CCostedPair__L]]: ...
        def mirror(self, t: scalan.Base.Transformer) -> scalan.Base.Ref['Costs.Costed'[scala.Tuple2[_ConcreteCosts__CCostedPair__L, _ConcreteCosts__CCostedPair__R]]]: ...
        def r(self) -> scalan.Base.Ref['Costs.Costed'[_ConcreteCosts__CCostedPair__R]]: ...
        def scalan$Base$Def$$_self(self) -> scalan.Base.Ref['Costs.Costed'[scala.Tuple2[_ConcreteCosts__CCostedPair__L, _ConcreteCosts__CCostedPair__R]]]: ...
        def scalan$Base$Def$$_self_$eq(self, x$1: scalan.Base.Ref['Costs.Costed'[scala.Tuple2[_ConcreteCosts__CCostedPair__L, _ConcreteCosts__CCostedPair__R]]]) -> None: ...
        def self(self) -> scalan.Base.Ref['Costs.Costed'[scala.Tuple2[_ConcreteCosts__CCostedPair__L, _ConcreteCosts__CCostedPair__R]]]: ...
        def size(self) -> scalan.Base.Ref['Sizes.Size'[scala.Tuple2[_ConcreteCosts__CCostedPair__L, _ConcreteCosts__CCostedPair__R]]]: ...
        def transform(self, t: scalan.Base.Transformer) -> scalan.Base.Def['Costs.Costed'[scala.Tuple2[_ConcreteCosts__CCostedPair__L, _ConcreteCosts__CCostedPair__R]]]: ...
        def value(self) -> scalan.Base.Ref[scala.Tuple2[_ConcreteCosts__CCostedPair__L, _ConcreteCosts__CCostedPair__R]]: ...
    class CCostedPairCompanion: ...
    class CCostedPrim(scalan.Base.Node, special.collection.Costs.CostedPrim[_ConcreteCosts__CCostedPrim__Val], typing.Generic[_ConcreteCosts__CCostedPrim__Val]):
        def __init__(self, $outer: scalan.Library, value: scalan.Base.Ref[_ConcreteCosts__CCostedPrim__Val], cost: scalan.Base.Ref[typing.Any], size: scalan.Base.Ref['Sizes.Size'[_ConcreteCosts__CCostedPrim__Val]]): ...
        def builder(self) -> scalan.Base.Ref['Costs.CostedBuilder']: ...
        def cost(self) -> scalan.Base.Ref[typing.Any]: ...
        def mirror(self, t: scalan.Base.Transformer) -> scalan.Base.Ref['Costs.Costed'[_ConcreteCosts__CCostedPrim__Val]]: ...
        def scalan$Base$Def$$_self(self) -> scalan.Base.Ref['Costs.Costed'[_ConcreteCosts__CCostedPrim__Val]]: ...
        def scalan$Base$Def$$_self_$eq(self, x$1: scalan.Base.Ref['Costs.Costed'[_ConcreteCosts__CCostedPrim__Val]]) -> None: ...
        def self(self) -> scalan.Base.Ref['Costs.Costed'[_ConcreteCosts__CCostedPrim__Val]]: ...
        def size(self) -> scalan.Base.Ref['Sizes.Size'[_ConcreteCosts__CCostedPrim__Val]]: ...
        def transform(self, t: scalan.Base.Transformer) -> scalan.Base.Def['Costs.Costed'[_ConcreteCosts__CCostedPrim__Val]]: ...
        def value(self) -> scalan.Base.Ref[_ConcreteCosts__CCostedPrim__Val]: ...
    class CCostedPrimCompanion: ...

_ConcreteSizes__CSizeColl__Item = typing.TypeVar('_ConcreteSizes__CSizeColl__Item')  # <Item>
_ConcreteSizes__CSizeFunc__Env = typing.TypeVar('_ConcreteSizes__CSizeFunc__Env')  # <Env>
_ConcreteSizes__CSizeFunc__Arg = typing.TypeVar('_ConcreteSizes__CSizeFunc__Arg')  # <Arg>
_ConcreteSizes__CSizeFunc__Res = typing.TypeVar('_ConcreteSizes__CSizeFunc__Res')  # <Res>
_ConcreteSizes__CSizeOption__Item = typing.TypeVar('_ConcreteSizes__CSizeOption__Item')  # <Item>
_ConcreteSizes__CSizePair__L = typing.TypeVar('_ConcreteSizes__CSizePair__L')  # <L>
_ConcreteSizes__CSizePair__R = typing.TypeVar('_ConcreteSizes__CSizePair__R')  # <R>
_ConcreteSizes__CSizePrim__Val = typing.TypeVar('_ConcreteSizes__CSizePrim__Val')  # <Val>
class ConcreteSizes:
    @staticmethod
    def $init$($this: 'ConcreteSizes') -> None: ...
    class CSizeColl(scalan.Base.Node, special.collection.Sizes.SizeColl[_ConcreteSizes__CSizeColl__Item], typing.Generic[_ConcreteSizes__CSizeColl__Item]):
        def __init__(self, $outer: scalan.Library, sizes: scalan.Base.Ref[Colls.Coll['Sizes.Size'[_ConcreteSizes__CSizeColl__Item]]]): ...
        def dataSize(self) -> scalan.Base.Ref[typing.Any]: ...
        def mirror(self, t: scalan.Base.Transformer) -> scalan.Base.Ref['Sizes.Size'[Colls.Coll[_ConcreteSizes__CSizeColl__Item]]]: ...
        def scalan$Base$Def$$_self(self) -> scalan.Base.Ref['Sizes.Size'[Colls.Coll[_ConcreteSizes__CSizeColl__Item]]]: ...
        def scalan$Base$Def$$_self_$eq(self, x$1: scalan.Base.Ref['Sizes.Size'[Colls.Coll[_ConcreteSizes__CSizeColl__Item]]]) -> None: ...
        def self(self) -> scalan.Base.Ref['Sizes.Size'[Colls.Coll[_ConcreteSizes__CSizeColl__Item]]]: ...
        def sizes(self) -> scalan.Base.Ref[Colls.Coll['Sizes.Size'[_ConcreteSizes__CSizeColl__Item]]]: ...
        def transform(self, t: scalan.Base.Transformer) -> scalan.Base.Def['Sizes.Size'[Colls.Coll[_ConcreteSizes__CSizeColl__Item]]]: ...
    class CSizeCollCompanion: ...
    class CSizeFunc(scalan.Base.Node, special.collection.Sizes.SizeFunc[_ConcreteSizes__CSizeFunc__Env, _ConcreteSizes__CSizeFunc__Arg, _ConcreteSizes__CSizeFunc__Res], typing.Generic[_ConcreteSizes__CSizeFunc__Env, _ConcreteSizes__CSizeFunc__Arg, _ConcreteSizes__CSizeFunc__Res]):
        def __init__(self, $outer: scalan.Library, sizeEnv: scalan.Base.Ref['Sizes.Size'[_ConcreteSizes__CSizeFunc__Env]], sizeFunc: scalan.Base.Ref[typing.Any], tArg: scalan.Base.Ref[wrappers.scalan.WRTypes.WRType[_ConcreteSizes__CSizeFunc__Arg]], tRes: scalan.Base.Ref[wrappers.scalan.WRTypes.WRType[_ConcreteSizes__CSizeFunc__Res]]): ...
        def dataSize(self) -> scalan.Base.Ref[typing.Any]: ...
        def mirror(self, t: scalan.Base.Transformer) -> scalan.Base.Ref['Sizes.Size'[scala.Function1[_ConcreteSizes__CSizeFunc__Arg, _ConcreteSizes__CSizeFunc__Res]]]: ...
        def scalan$Base$Def$$_self(self) -> scalan.Base.Ref['Sizes.Size'[scala.Function1[_ConcreteSizes__CSizeFunc__Arg, _ConcreteSizes__CSizeFunc__Res]]]: ...
        def scalan$Base$Def$$_self_$eq(self, x$1: scalan.Base.Ref['Sizes.Size'[scala.Function1[_ConcreteSizes__CSizeFunc__Arg, _ConcreteSizes__CSizeFunc__Res]]]) -> None: ...
        def self(self) -> scalan.Base.Ref['Sizes.Size'[scala.Function1[_ConcreteSizes__CSizeFunc__Arg, _ConcreteSizes__CSizeFunc__Res]]]: ...
        def sizeEnv(self) -> scalan.Base.Ref['Sizes.Size'[_ConcreteSizes__CSizeFunc__Env]]: ...
        def sizeFunc(self) -> scalan.Base.Ref[typing.Any]: ...
        def tArg(self) -> scalan.Base.Ref[wrappers.scalan.WRTypes.WRType[_ConcreteSizes__CSizeFunc__Arg]]: ...
        def tRes(self) -> scalan.Base.Ref[wrappers.scalan.WRTypes.WRType[_ConcreteSizes__CSizeFunc__Res]]: ...
        def transform(self, t: scalan.Base.Transformer) -> scalan.Base.Def['Sizes.Size'[scala.Function1[_ConcreteSizes__CSizeFunc__Arg, _ConcreteSizes__CSizeFunc__Res]]]: ...
    class CSizeFuncCompanion: ...
    class CSizeOption(scalan.Base.Node, special.collection.Sizes.SizeOption[_ConcreteSizes__CSizeOption__Item], typing.Generic[_ConcreteSizes__CSizeOption__Item]):
        def __init__(self, $outer: scalan.Library, sizeOpt: scalan.Base.Ref[wrappers.scala.WOptions.WOption['Sizes.Size'[_ConcreteSizes__CSizeOption__Item]]]): ...
        def dataSize(self) -> scalan.Base.Ref[typing.Any]: ...
        def mirror(self, t: scalan.Base.Transformer) -> scalan.Base.Ref['Sizes.Size'[wrappers.scala.WOptions.WOption[_ConcreteSizes__CSizeOption__Item]]]: ...
        def scalan$Base$Def$$_self(self) -> scalan.Base.Ref['Sizes.Size'[wrappers.scala.WOptions.WOption[_ConcreteSizes__CSizeOption__Item]]]: ...
        def scalan$Base$Def$$_self_$eq(self, x$1: scalan.Base.Ref['Sizes.Size'[wrappers.scala.WOptions.WOption[_ConcreteSizes__CSizeOption__Item]]]) -> None: ...
        def self(self) -> scalan.Base.Ref['Sizes.Size'[wrappers.scala.WOptions.WOption[_ConcreteSizes__CSizeOption__Item]]]: ...
        def sizeOpt(self) -> scalan.Base.Ref[wrappers.scala.WOptions.WOption['Sizes.Size'[_ConcreteSizes__CSizeOption__Item]]]: ...
        def transform(self, t: scalan.Base.Transformer) -> scalan.Base.Def['Sizes.Size'[wrappers.scala.WOptions.WOption[_ConcreteSizes__CSizeOption__Item]]]: ...
    class CSizeOptionCompanion: ...
    class CSizePair(scalan.Base.Node, special.collection.Sizes.SizePair[_ConcreteSizes__CSizePair__L, _ConcreteSizes__CSizePair__R], typing.Generic[_ConcreteSizes__CSizePair__L, _ConcreteSizes__CSizePair__R]):
        def __init__(self, $outer: scalan.Library, l: scalan.Base.Ref['Sizes.Size'[_ConcreteSizes__CSizePair__L]], r: scalan.Base.Ref['Sizes.Size'[_ConcreteSizes__CSizePair__R]]): ...
        def dataSize(self) -> scalan.Base.Ref[typing.Any]: ...
        def l(self) -> scalan.Base.Ref['Sizes.Size'[_ConcreteSizes__CSizePair__L]]: ...
        def mirror(self, t: scalan.Base.Transformer) -> scalan.Base.Ref['Sizes.Size'[scala.Tuple2[_ConcreteSizes__CSizePair__L, _ConcreteSizes__CSizePair__R]]]: ...
        def r(self) -> scalan.Base.Ref['Sizes.Size'[_ConcreteSizes__CSizePair__R]]: ...
        def scalan$Base$Def$$_self(self) -> scalan.Base.Ref['Sizes.Size'[scala.Tuple2[_ConcreteSizes__CSizePair__L, _ConcreteSizes__CSizePair__R]]]: ...
        def scalan$Base$Def$$_self_$eq(self, x$1: scalan.Base.Ref['Sizes.Size'[scala.Tuple2[_ConcreteSizes__CSizePair__L, _ConcreteSizes__CSizePair__R]]]) -> None: ...
        def self(self) -> scalan.Base.Ref['Sizes.Size'[scala.Tuple2[_ConcreteSizes__CSizePair__L, _ConcreteSizes__CSizePair__R]]]: ...
        def transform(self, t: scalan.Base.Transformer) -> scalan.Base.Def['Sizes.Size'[scala.Tuple2[_ConcreteSizes__CSizePair__L, _ConcreteSizes__CSizePair__R]]]: ...
    class CSizePairCompanion: ...
    class CSizePrim(scalan.Base.Node, special.collection.Sizes.SizePrim[_ConcreteSizes__CSizePrim__Val], typing.Generic[_ConcreteSizes__CSizePrim__Val]):
        def __init__(self, $outer: scalan.Library, dataSize: scalan.Base.Ref[typing.Any], tVal: scalan.Base.Ref[wrappers.scalan.WRTypes.WRType[_ConcreteSizes__CSizePrim__Val]]): ...
        def dataSize(self) -> scalan.Base.Ref[typing.Any]: ...
        def mirror(self, t: scalan.Base.Transformer) -> scalan.Base.Ref['Sizes.Size'[_ConcreteSizes__CSizePrim__Val]]: ...
        def scalan$Base$Def$$_self(self) -> scalan.Base.Ref['Sizes.Size'[_ConcreteSizes__CSizePrim__Val]]: ...
        def scalan$Base$Def$$_self_$eq(self, x$1: scalan.Base.Ref['Sizes.Size'[_ConcreteSizes__CSizePrim__Val]]) -> None: ...
        def self(self) -> scalan.Base.Ref['Sizes.Size'[_ConcreteSizes__CSizePrim__Val]]: ...
        def tVal(self) -> scalan.Base.Ref[wrappers.scalan.WRTypes.WRType[_ConcreteSizes__CSizePrim__Val]]: ...
        def transform(self, t: scalan.Base.Transformer) -> scalan.Base.Def['Sizes.Size'[_ConcreteSizes__CSizePrim__Val]]: ...
    class CSizePrimCompanion: ...

_CostedOptions__CCostedOption__T = typing.TypeVar('_CostedOptions__CCostedOption__T')  # <T>
class CostedOptions:
    @staticmethod
    def $init$($this: 'CostedOptions') -> None: ...
    class CCostedOption(scalan.Base.Node, special.collection.Costs.CostedOption[_CostedOptions__CCostedOption__T], typing.Generic[_CostedOptions__CCostedOption__T]):
        def __init__(self, $outer: scalan.Library, value: scalan.Base.Ref[wrappers.scala.WOptions.WOption[_CostedOptions__CCostedOption__T]], costOpt: scalan.Base.Ref[wrappers.scala.WOptions.WOption[typing.Any]], sizeOpt: scalan.Base.Ref[wrappers.scala.WOptions.WOption['Sizes.Size'[_CostedOptions__CCostedOption__T]]], accumulatedCost: scalan.Base.Ref[typing.Any]): ...
        def accumulatedCost(self) -> scalan.Base.Ref[typing.Any]: ...
        def builder(self) -> scalan.Base.Ref['Costs.CostedBuilder']: ...
        def cost(self) -> scalan.Base.Ref[typing.Any]: ...
        def costOpt(self) -> scalan.Base.Ref[wrappers.scala.WOptions.WOption[typing.Any]]: ...
        def mirror(self, t: scalan.Base.Transformer) -> scalan.Base.Ref['Costs.Costed'[wrappers.scala.WOptions.WOption[_CostedOptions__CCostedOption__T]]]: ...
        def scalan$Base$Def$$_self(self) -> scalan.Base.Ref['Costs.Costed'[wrappers.scala.WOptions.WOption[_CostedOptions__CCostedOption__T]]]: ...
        def scalan$Base$Def$$_self_$eq(self, x$1: scalan.Base.Ref['Costs.Costed'[wrappers.scala.WOptions.WOption[_CostedOptions__CCostedOption__T]]]) -> None: ...
        def self(self) -> scalan.Base.Ref['Costs.Costed'[wrappers.scala.WOptions.WOption[_CostedOptions__CCostedOption__T]]]: ...
        def size(self) -> scalan.Base.Ref['Sizes.Size'[wrappers.scala.WOptions.WOption[_CostedOptions__CCostedOption__T]]]: ...
        def sizeOpt(self) -> scalan.Base.Ref[wrappers.scala.WOptions.WOption['Sizes.Size'[_CostedOptions__CCostedOption__T]]]: ...
        def transform(self, t: scalan.Base.Transformer) -> scalan.Base.Def['Costs.Costed'[wrappers.scala.WOptions.WOption[_CostedOptions__CCostedOption__T]]]: ...
        def value(self) -> scalan.Base.Ref[wrappers.scala.WOptions.WOption[_CostedOptions__CCostedOption__T]]: ...
    class CCostedOptionCompanion: ...

_Costs__Costed__Val = typing.TypeVar('_Costs__Costed__Val')  # <Val>
_Costs__CostedColl__Item = typing.TypeVar('_Costs__CostedColl__Item')  # <Item>
_Costs__CostedFunc__Env = typing.TypeVar('_Costs__CostedFunc__Env')  # <Env>
_Costs__CostedFunc__Arg = typing.TypeVar('_Costs__CostedFunc__Arg')  # <Arg>
_Costs__CostedFunc__Res = typing.TypeVar('_Costs__CostedFunc__Res')  # <Res>
_Costs__CostedOption__T = typing.TypeVar('_Costs__CostedOption__T')  # <T>
_Costs__CostedPair__L = typing.TypeVar('_Costs__CostedPair__L')  # <L>
_Costs__CostedPair__R = typing.TypeVar('_Costs__CostedPair__R')  # <R>
_Costs__CostedPrim__Val = typing.TypeVar('_Costs__CostedPrim__Val')  # <Val>
class Costs:
    @staticmethod
    def $init$($this: 'Costs') -> None: ...
    class Costed(scalan.Base.Def['Costs.Costed'[_Costs__Costed__Val]], typing.Generic[_Costs__Costed__Val]):
        def builder(self) -> scalan.Base.Ref['Costs.CostedBuilder']: ...
        def cost(self) -> scalan.Base.Ref[typing.Any]: ...
        def eVal(self) -> scalan.TypeDescs.Elem[_Costs__Costed__Val]: ...
        def size(self) -> scalan.Base.Ref['Sizes.Size'[_Costs__Costed__Val]]: ...
        def value(self) -> scalan.Base.Ref[_Costs__Costed__Val]: ...
    class CostedBuilder(scalan.Base.Def['Costs.CostedBuilder']):
        @staticmethod
        def $init$($this: 'Costs.CostedBuilder') -> None: ...
        def ConstructSumCost(self) -> scalan.Base.Ref[typing.Any]: ...
        def ConstructTupleCost(self) -> scalan.Base.Ref[typing.Any]: ...
        def SelectFieldCost(self) -> scalan.Base.Ref[typing.Any]: ...
        def SumTagSize(self) -> scalan.Base.Ref[typing.Any]: ...
        _costedValue__T = typing.TypeVar('_costedValue__T')  # <T>
        def costedValue(self, x: scalan.Base.Ref[_costedValue__T], optCost: scalan.Base.Ref[wrappers.scala.WOptions.WOption[typing.Any]]) -> scalan.Base.Ref['Costs.Costed'[_costedValue__T]]: ...
        _defaultValue__T = typing.TypeVar('_defaultValue__T')  # <T>
        def defaultValue(self, valueType: scalan.Base.Ref[wrappers.scalan.WRTypes.WRType[_defaultValue__T]]) -> scalan.Base.Ref[_defaultValue__T]: ...
        _mkCostedColl__T = typing.TypeVar('_mkCostedColl__T')  # <T>
        def mkCostedColl(self, values: scalan.Base.Ref[Colls.Coll[_mkCostedColl__T]], costs: scalan.Base.Ref[Colls.Coll[typing.Any]], sizes: scalan.Base.Ref[Colls.Coll['Sizes.Size'[_mkCostedColl__T]]], valuesCost: scalan.Base.Ref[typing.Any]) -> scalan.Base.Ref['Costs.CostedColl'[_mkCostedColl__T]]: ...
        _mkCostedFunc__Env = typing.TypeVar('_mkCostedFunc__Env')  # <Env>
        _mkCostedFunc__Arg = typing.TypeVar('_mkCostedFunc__Arg')  # <Arg>
        _mkCostedFunc__Res = typing.TypeVar('_mkCostedFunc__Res')  # <Res>
        def mkCostedFunc(self, envCosted: scalan.Base.Ref['Costs.Costed'[_mkCostedFunc__Env]], func: scalan.Base.Ref[scala.Function1['Costs.Costed'[_mkCostedFunc__Arg], 'Costs.Costed'[_mkCostedFunc__Res]]], cost: scalan.Base.Ref[typing.Any], size: scalan.Base.Ref['Sizes.Size'[scala.Function1[_mkCostedFunc__Arg, _mkCostedFunc__Res]]]) -> scalan.Base.Ref['Costs.CostedFunc'[_mkCostedFunc__Env, _mkCostedFunc__Arg, _mkCostedFunc__Res]]: ...
        _mkCostedOption__T = typing.TypeVar('_mkCostedOption__T')  # <T>
        def mkCostedOption(self, value: scalan.Base.Ref[wrappers.scala.WOptions.WOption[_mkCostedOption__T]], costOpt: scalan.Base.Ref[wrappers.scala.WOptions.WOption[typing.Any]], sizeOpt: scalan.Base.Ref[wrappers.scala.WOptions.WOption['Sizes.Size'[_mkCostedOption__T]]], accumulatedCost: scalan.Base.Ref[typing.Any]) -> scalan.Base.Ref['Costs.CostedOption'[_mkCostedOption__T]]: ...
        _mkCostedPair__L = typing.TypeVar('_mkCostedPair__L')  # <L>
        _mkCostedPair__R = typing.TypeVar('_mkCostedPair__R')  # <R>
        def mkCostedPair(self, first: scalan.Base.Ref['Costs.Costed'[_mkCostedPair__L]], second: scalan.Base.Ref['Costs.Costed'[_mkCostedPair__R]], accCost: scalan.Base.Ref[typing.Any]) -> scalan.Base.Ref['Costs.CostedPair'[_mkCostedPair__L, _mkCostedPair__R]]: ...
        _mkCostedPrim__T = typing.TypeVar('_mkCostedPrim__T')  # <T>
        def mkCostedPrim(self, value: scalan.Base.Ref[_mkCostedPrim__T], cost: scalan.Base.Ref[typing.Any], size: scalan.Base.Ref['Sizes.Size'[_mkCostedPrim__T]]) -> scalan.Base.Ref['Costs.CostedPrim'[_mkCostedPrim__T]]: ...
        _mkSizeColl__T = typing.TypeVar('_mkSizeColl__T')  # <T>
        def mkSizeColl(self, sizes: scalan.Base.Ref[Colls.Coll['Sizes.Size'[_mkSizeColl__T]]]) -> scalan.Base.Ref['Sizes.SizeColl'[_mkSizeColl__T]]: ...
        _mkSizeFunc__E = typing.TypeVar('_mkSizeFunc__E')  # <E>
        _mkSizeFunc__A = typing.TypeVar('_mkSizeFunc__A')  # <A>
        _mkSizeFunc__R = typing.TypeVar('_mkSizeFunc__R')  # <R>
        def mkSizeFunc(self, sizeEnv: scalan.Base.Ref['Sizes.Size'[_mkSizeFunc__E]], sizeFunc: scalan.Base.Ref[typing.Any], tA: scalan.Base.Ref[wrappers.scalan.WRTypes.WRType[_mkSizeFunc__A]], tR: scalan.Base.Ref[wrappers.scalan.WRTypes.WRType[_mkSizeFunc__R]]) -> scalan.Base.Ref['Sizes.SizeFunc'[_mkSizeFunc__E, _mkSizeFunc__A, _mkSizeFunc__R]]: ...
        _mkSizeOption__T = typing.TypeVar('_mkSizeOption__T')  # <T>
        def mkSizeOption(self, sizeOpt: scalan.Base.Ref[wrappers.scala.WOptions.WOption['Sizes.Size'[_mkSizeOption__T]]]) -> scalan.Base.Ref['Sizes.SizeOption'[_mkSizeOption__T]]: ...
        _mkSizePair__L = typing.TypeVar('_mkSizePair__L')  # <L>
        _mkSizePair__R = typing.TypeVar('_mkSizePair__R')  # <R>
        def mkSizePair(self, l: scalan.Base.Ref['Sizes.Size'[_mkSizePair__L]], r: scalan.Base.Ref['Sizes.Size'[_mkSizePair__R]]) -> scalan.Base.Ref['Sizes.SizePair'[_mkSizePair__L, _mkSizePair__R]]: ...
        _mkSizePrim__T = typing.TypeVar('_mkSizePrim__T')  # <T>
        def mkSizePrim(self, dataSize: scalan.Base.Ref[typing.Any], tT: scalan.Base.Ref[wrappers.scalan.WRTypes.WRType[_mkSizePrim__T]]) -> scalan.Base.Ref['Sizes.SizePrim'[_mkSizePrim__T]]: ...
        def monoidBuilder(self) -> scalan.Base.Ref[Monoids.MonoidBuilder]: ...
    class CostedBuilderCompanion: ...
    class CostedColl(special.collection.Costs.Costed[Colls.Coll[_Costs__CostedColl__Item]], typing.Generic[_Costs__CostedColl__Item]):
        def costs(self) -> scalan.Base.Ref[Colls.Coll[typing.Any]]: ...
        def eItem(self) -> scalan.TypeDescs.Elem[_Costs__CostedColl__Item]: ...
        def filterCosted(self, f: scalan.Base.Ref[scala.Function1['Costs.Costed'[_Costs__CostedColl__Item], 'Costs.Costed'[typing.Any]]]) -> scalan.Base.Ref['Costs.CostedColl'[_Costs__CostedColl__Item]]: ...
        _foldCosted__B = typing.TypeVar('_foldCosted__B')  # <B>
        def foldCosted(self, zero: scalan.Base.Ref['Costs.Costed'[_foldCosted__B]], op: scalan.Base.Ref[scala.Function1['Costs.Costed'[scala.Tuple2[_foldCosted__B, _Costs__CostedColl__Item]], 'Costs.Costed'[_foldCosted__B]]]) -> scalan.Base.Ref['Costs.Costed'[_foldCosted__B]]: ...
        _mapCosted__Res = typing.TypeVar('_mapCosted__Res')  # <Res>
        def mapCosted(self, f: scalan.Base.Ref[scala.Function1['Costs.Costed'[_Costs__CostedColl__Item], 'Costs.Costed'[_mapCosted__Res]]]) -> scalan.Base.Ref['Costs.CostedColl'[_mapCosted__Res]]: ...
        def sizes(self) -> scalan.Base.Ref[Colls.Coll['Sizes.Size'[_Costs__CostedColl__Item]]]: ...
        def values(self) -> scalan.Base.Ref[Colls.Coll[_Costs__CostedColl__Item]]: ...
        def valuesCost(self) -> scalan.Base.Ref[typing.Any]: ...
    class CostedCollCompanion: ...
    class CostedCompanion: ...
    class CostedFunc(special.collection.Costs.Costed[scala.Function1[_Costs__CostedFunc__Arg, _Costs__CostedFunc__Res]], typing.Generic[_Costs__CostedFunc__Env, _Costs__CostedFunc__Arg, _Costs__CostedFunc__Res]):
        def cost(self) -> scalan.Base.Ref[typing.Any]: ...
        def eArg(self) -> scalan.TypeDescs.Elem[_Costs__CostedFunc__Arg]: ...
        def eEnv(self) -> scalan.TypeDescs.Elem[_Costs__CostedFunc__Env]: ...
        def eRes(self) -> scalan.TypeDescs.Elem[_Costs__CostedFunc__Res]: ...
        def envCosted(self) -> scalan.Base.Ref['Costs.Costed'[_Costs__CostedFunc__Env]]: ...
        def func(self) -> scalan.Base.Ref[scala.Function1['Costs.Costed'[_Costs__CostedFunc__Arg], 'Costs.Costed'[_Costs__CostedFunc__Res]]]: ...
        def sliceCalc(self) -> scalan.Base.Ref[scala.Function1[_Costs__CostedFunc__Arg, _Costs__CostedFunc__Res]]: ...
        def sliceCost(self) -> scalan.Base.Ref[scala.Function1[scala.Tuple2[typing.Any, 'Sizes.Size'[_Costs__CostedFunc__Arg]], typing.Any]]: ...
        def sliceCostEx(self) -> scalan.Base.Ref[scala.Function1[scala.Tuple2[_Costs__CostedFunc__Arg, scala.Tuple2[typing.Any, 'Sizes.Size'[_Costs__CostedFunc__Arg]]], typing.Any]]: ...
        def sliceSize(self) -> scalan.Base.Ref[scala.Function1['Sizes.Size'[_Costs__CostedFunc__Arg], 'Sizes.Size'[_Costs__CostedFunc__Res]]]: ...
    class CostedFuncCompanion: ...
    class CostedOption(special.collection.Costs.Costed[wrappers.scala.WOptions.WOption[_Costs__CostedOption__T]], typing.Generic[_Costs__CostedOption__T]):
        def accumulatedCost(self) -> scalan.Base.Ref[typing.Any]: ...
        def costOpt(self) -> scalan.Base.Ref[wrappers.scala.WOptions.WOption[typing.Any]]: ...
        def eT(self) -> scalan.TypeDescs.Elem[_Costs__CostedOption__T]: ...
        def sizeOpt(self) -> scalan.Base.Ref[wrappers.scala.WOptions.WOption['Sizes.Size'[_Costs__CostedOption__T]]]: ...
    class CostedOptionCompanion: ...
    class CostedPair(special.collection.Costs.Costed[scala.Tuple2[_Costs__CostedPair__L, _Costs__CostedPair__R]], typing.Generic[_Costs__CostedPair__L, _Costs__CostedPair__R]):
        def accCost(self) -> scalan.Base.Ref[typing.Any]: ...
        def eL(self) -> scalan.TypeDescs.Elem[_Costs__CostedPair__L]: ...
        def eR(self) -> scalan.TypeDescs.Elem[_Costs__CostedPair__R]: ...
        def l(self) -> scalan.Base.Ref['Costs.Costed'[_Costs__CostedPair__L]]: ...
        def r(self) -> scalan.Base.Ref['Costs.Costed'[_Costs__CostedPair__R]]: ...
    class CostedPairCompanion: ...
    class CostedPrim(special.collection.Costs.Costed[_Costs__CostedPrim__Val], typing.Generic[_Costs__CostedPrim__Val]):
        def cost(self) -> scalan.Base.Ref[typing.Any]: ...
        def eVal(self) -> scalan.TypeDescs.Elem[_Costs__CostedPrim__Val]: ...
        def size(self) -> scalan.Base.Ref['Sizes.Size'[_Costs__CostedPrim__Val]]: ...
        def value(self) -> scalan.Base.Ref[_Costs__CostedPrim__Val]: ...
    class CostedPrimCompanion: ...

class IntMaxMonoid(special.collection.Monoid.mcI.sp):
    def __init__(self, zero: int): ...
    def plus(self, x: int, y: int) -> int: ...
    def plus$mcI$sp(self, x: int, y: int) -> int: ...
    def plus$mcJ$sp(self, x: int, y: int) -> int: ...
    def power(self, x: int, n: int) -> int: ...
    def power$mcI$sp(self, x: int, n: int) -> int: ...
    def power$mcJ$sp(self, x: int, n: int) -> int: ...
    def zero(self) -> int: ...
    def zero$mcI$sp(self) -> int: ...
    def zero$mcJ$sp(self) -> int: ...

class IntMinMonoid(special.collection.Monoid.mcI.sp):
    def __init__(self, zero: int): ...
    def plus(self, x: int, y: int) -> int: ...
    def plus$mcI$sp(self, x: int, y: int) -> int: ...
    def plus$mcJ$sp(self, x: int, y: int) -> int: ...
    def power(self, x: int, n: int) -> int: ...
    def power$mcI$sp(self, x: int, n: int) -> int: ...
    def power$mcJ$sp(self, x: int, n: int) -> int: ...
    def zero(self) -> int: ...
    def zero$mcI$sp(self) -> int: ...
    def zero$mcJ$sp(self) -> int: ...

class IntPlusMonoid(special.collection.Monoid.mcI.sp):
    def __init__(self, zero: int): ...
    def plus(self, x: int, y: int) -> int: ...
    def plus$mcI$sp(self, x: int, y: int) -> int: ...
    def plus$mcJ$sp(self, x: int, y: int) -> int: ...
    def power(self, x: int, n: int) -> int: ...
    def power$mcI$sp(self, x: int, n: int) -> int: ...
    def power$mcJ$sp(self, x: int, n: int) -> int: ...
    def zero(self) -> int: ...
    def zero$mcI$sp(self) -> int: ...
    def zero$mcJ$sp(self) -> int: ...

class LongMaxMonoid(special.collection.Monoid.mcJ.sp):
    def __init__(self, zero: int): ...
    def plus(self, x: int, y: int) -> int: ...
    def plus$mcI$sp(self, x: int, y: int) -> int: ...
    def plus$mcJ$sp(self, x: int, y: int) -> int: ...
    def power(self, x: int, n: int) -> int: ...
    def power$mcI$sp(self, x: int, n: int) -> int: ...
    def power$mcJ$sp(self, x: int, n: int) -> int: ...
    def zero(self) -> int: ...
    def zero$mcI$sp(self) -> int: ...
    def zero$mcJ$sp(self) -> int: ...

class LongMinMonoid(special.collection.Monoid.mcJ.sp):
    def __init__(self, zero: int): ...
    def plus(self, x: int, y: int) -> int: ...
    def plus$mcI$sp(self, x: int, y: int) -> int: ...
    def plus$mcJ$sp(self, x: int, y: int) -> int: ...
    def power(self, x: int, n: int) -> int: ...
    def power$mcI$sp(self, x: int, n: int) -> int: ...
    def power$mcJ$sp(self, x: int, n: int) -> int: ...
    def zero(self) -> int: ...
    def zero$mcI$sp(self) -> int: ...
    def zero$mcJ$sp(self) -> int: ...

class LongPlusMonoid(special.collection.Monoid.mcJ.sp):
    def __init__(self, zero: int): ...
    def plus(self, x: int, y: int) -> int: ...
    def plus$mcI$sp(self, x: int, y: int) -> int: ...
    def plus$mcJ$sp(self, x: int, y: int) -> int: ...
    def power(self, x: int, n: int) -> int: ...
    def power$mcI$sp(self, x: int, n: int) -> int: ...
    def power$mcJ$sp(self, x: int, n: int) -> int: ...
    def zero(self) -> int: ...
    def zero$mcI$sp(self) -> int: ...
    def zero$mcJ$sp(self) -> int: ...

_Sizes__Size__Val = typing.TypeVar('_Sizes__Size__Val')  # <Val>
_Sizes__SizeColl__Item = typing.TypeVar('_Sizes__SizeColl__Item')  # <Item>
_Sizes__SizeFunc__Env = typing.TypeVar('_Sizes__SizeFunc__Env')  # <Env>
_Sizes__SizeFunc__Arg = typing.TypeVar('_Sizes__SizeFunc__Arg')  # <Arg>
_Sizes__SizeFunc__Res = typing.TypeVar('_Sizes__SizeFunc__Res')  # <Res>
_Sizes__SizeOption__T = typing.TypeVar('_Sizes__SizeOption__T')  # <T>
_Sizes__SizePair__L = typing.TypeVar('_Sizes__SizePair__L')  # <L>
_Sizes__SizePair__R = typing.TypeVar('_Sizes__SizePair__R')  # <R>
_Sizes__SizePrim__Val = typing.TypeVar('_Sizes__SizePrim__Val')  # <Val>
class Sizes:
    @staticmethod
    def $init$($this: 'Sizes') -> None: ...
    class Size(scalan.Base.Def['Sizes.Size'[_Sizes__Size__Val]], typing.Generic[_Sizes__Size__Val]):
        def dataSize(self) -> scalan.Base.Ref[typing.Any]: ...
        def eVal(self) -> scalan.TypeDescs.Elem[_Sizes__Size__Val]: ...
    class SizeColl(special.collection.Sizes.Size[Colls.Coll[_Sizes__SizeColl__Item]], typing.Generic[_Sizes__SizeColl__Item]):
        def eItem(self) -> scalan.TypeDescs.Elem[_Sizes__SizeColl__Item]: ...
        def sizes(self) -> scalan.Base.Ref[Colls.Coll['Sizes.Size'[_Sizes__SizeColl__Item]]]: ...
    class SizeCollCompanion: ...
    class SizeCompanion: ...
    class SizeFunc(special.collection.Sizes.Size[scala.Function1[_Sizes__SizeFunc__Arg, _Sizes__SizeFunc__Res]], typing.Generic[_Sizes__SizeFunc__Env, _Sizes__SizeFunc__Arg, _Sizes__SizeFunc__Res]):
        def eArg(self) -> scalan.TypeDescs.Elem[_Sizes__SizeFunc__Arg]: ...
        def eEnv(self) -> scalan.TypeDescs.Elem[_Sizes__SizeFunc__Env]: ...
        def eRes(self) -> scalan.TypeDescs.Elem[_Sizes__SizeFunc__Res]: ...
        def sizeEnv(self) -> scalan.Base.Ref['Sizes.Size'[_Sizes__SizeFunc__Env]]: ...
    class SizeFuncCompanion: ...
    class SizeOption(special.collection.Sizes.Size[wrappers.scala.WOptions.WOption[_Sizes__SizeOption__T]], typing.Generic[_Sizes__SizeOption__T]):
        def eT(self) -> scalan.TypeDescs.Elem[_Sizes__SizeOption__T]: ...
        def sizeOpt(self) -> scalan.Base.Ref[wrappers.scala.WOptions.WOption['Sizes.Size'[_Sizes__SizeOption__T]]]: ...
    class SizeOptionCompanion: ...
    class SizePair(special.collection.Sizes.Size[scala.Tuple2[_Sizes__SizePair__L, _Sizes__SizePair__R]], typing.Generic[_Sizes__SizePair__L, _Sizes__SizePair__R]):
        def eL(self) -> scalan.TypeDescs.Elem[_Sizes__SizePair__L]: ...
        def eR(self) -> scalan.TypeDescs.Elem[_Sizes__SizePair__R]: ...
        def l(self) -> scalan.Base.Ref['Sizes.Size'[_Sizes__SizePair__L]]: ...
        def r(self) -> scalan.Base.Ref['Sizes.Size'[_Sizes__SizePair__R]]: ...
    class SizePairCompanion: ...
    class SizePrim(special.collection.Sizes.Size[_Sizes__SizePrim__Val], typing.Generic[_Sizes__SizePrim__Val]):
        def dataSize(self) -> scalan.Base.Ref[typing.Any]: ...
        def eVal(self) -> scalan.TypeDescs.Elem[_Sizes__SizePrim__Val]: ...
        def tVal(self) -> scalan.Base.Ref[wrappers.scalan.WRTypes.WRType[_Sizes__SizePrim__Val]]: ...
    class SizePrimCompanion: ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("special.collection")``.

    Builder: typing.Type[Builder]
    CCostedBuilder: typing.Type[CCostedBuilder]
    CCostedColl: typing.Type[CCostedColl]
    CCostedFunc: typing.Type[CCostedFunc]
    CCostedOption: typing.Type[CCostedOption]
    CCostedPair: typing.Type[CCostedPair]
    CCostedPrim: typing.Type[CCostedPrim]
    CReplColl: typing.Type[CReplColl]
    CSizeColl: typing.Type[CSizeColl]
    CSizeFunc: typing.Type[CSizeFunc]
    CSizeOption: typing.Type[CSizeOption]
    CSizePair: typing.Type[CSizePair]
    CSizePrim: typing.Type[CSizePrim]
    CViewColl: typing.Type[CViewColl]
    Coll: typing.Type[Coll]
    CollBuilder: typing.Type[CollBuilder]
    CollOverArray: typing.Type[CollOverArray]
    CollOverArrayBuilder: typing.Type[CollOverArrayBuilder]
    CollType: typing.Type[CollType]
    Colls: typing.Type[Colls]
    CollsModule: typing.Type[CollsModule]
    ConcreteCosts: typing.Type[ConcreteCosts]
    ConcreteCostsModule: typing.Type[ConcreteCostsModule]
    ConcreteSizes: typing.Type[ConcreteSizes]
    ConcreteSizesModule: typing.Type[ConcreteSizesModule]
    Costed: typing.Type[Costed]
    CostedBuilder: typing.Type[CostedBuilder]
    CostedColl: typing.Type[CostedColl]
    CostedFunc: typing.Type[CostedFunc]
    CostedOption: typing.Type[CostedOption]
    CostedOptions: typing.Type[CostedOptions]
    CostedOptionsModule: typing.Type[CostedOptionsModule]
    CostedPair: typing.Type[CostedPair]
    CostedPrim: typing.Type[CostedPrim]
    Costs: typing.Type[Costs]
    CostsModule: typing.Type[CostsModule]
    ExtensionMethods: typing.Type[ExtensionMethods]
    Helpers: typing.Type[Helpers]
    IntMaxMonoid: typing.Type[IntMaxMonoid]
    IntMinMonoid: typing.Type[IntMinMonoid]
    IntPlusMonoid: typing.Type[IntPlusMonoid]
    LongMaxMonoid: typing.Type[LongMaxMonoid]
    LongMinMonoid: typing.Type[LongMinMonoid]
    LongPlusMonoid: typing.Type[LongPlusMonoid]
    Monoid: typing.Type[Monoid]
    MonoidBuilder: typing.Type[MonoidBuilder]
    MonoidBuilderInst: typing.Type[MonoidBuilderInst]
    MonoidInstances: typing.Type[MonoidInstances]
    MonoidInstancesModule: typing.Type[MonoidInstancesModule]
    Monoids: typing.Type[Monoids]
    MonoidsModule: typing.Type[MonoidsModule]
    PairColl: typing.Type[PairColl]
    PairMonoid: typing.Type[PairMonoid]
    PairOfCols: typing.Type[PairOfCols]
    ReplColl: typing.Type[ReplColl]
    ReplCollType: typing.Type[ReplCollType]
    Size: typing.Type[Size]
    SizeColl: typing.Type[SizeColl]
    SizeCollType: typing.Type[SizeCollType]
    SizeFunc: typing.Type[SizeFunc]
    SizeFuncType: typing.Type[SizeFuncType]
    SizeOption: typing.Type[SizeOption]
    SizeOptionType: typing.Type[SizeOptionType]
    SizePair: typing.Type[SizePair]
    SizePairType: typing.Type[SizePairType]
    SizePrim: typing.Type[SizePrim]
    SizePrimType: typing.Type[SizePrimType]
    SizeType: typing.Type[SizeType]
    Sizes: typing.Type[Sizes]
    SizesModule: typing.Type[SizesModule]
    package: typing.Type[package]
